
Microros_nucelo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018400  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb4  080185d0  080185d0  000195d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019484  08019484  0001b2c0  2**0
                  CONTENTS
  4 .ARM          00000008  08019484  08019484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801948c  0801948c  0001b2c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801948c  0801948c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019498  08019498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  0801949c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd44  200002c0  0801975c  0001b2c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e004  0801975c  0001c004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b2c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e65e  00000000  00000000  0001b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042da  00000000  00000000  0003994e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  0003dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001403  00000000  00000000  0003f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ff7  00000000  00000000  000409d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f996  00000000  00000000  000689ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8bb  00000000  00000000  00088360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00172c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c9c  00000000  00000000  00172c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0017a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002c0 	.word	0x200002c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080185b8 	.word	0x080185b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002c4 	.word	0x200002c4
 800020c:	080185b8 	.word	0x080185b8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_ldivmod>:
 8000a4c:	b97b      	cbnz	r3, 8000a6e <__aeabi_ldivmod+0x22>
 8000a4e:	b972      	cbnz	r2, 8000a6e <__aeabi_ldivmod+0x22>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bfbe      	ittt	lt
 8000a54:	2000      	movlt	r0, #0
 8000a56:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a5a:	e006      	blt.n	8000a6a <__aeabi_ldivmod+0x1e>
 8000a5c:	bf08      	it	eq
 8000a5e:	2800      	cmpeq	r0, #0
 8000a60:	bf1c      	itt	ne
 8000a62:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a66:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a6a:	f000 b9b5 	b.w	8000dd8 <__aeabi_idiv0>
 8000a6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a76:	2900      	cmp	r1, #0
 8000a78:	db09      	blt.n	8000a8e <__aeabi_ldivmod+0x42>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db1a      	blt.n	8000ab4 <__aeabi_ldivmod+0x68>
 8000a7e:	f000 f84d 	bl	8000b1c <__udivmoddi4>
 8000a82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4770      	bx	lr
 8000a8e:	4240      	negs	r0, r0
 8000a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db1b      	blt.n	8000ad0 <__aeabi_ldivmod+0x84>
 8000a98:	f000 f840 	bl	8000b1c <__udivmoddi4>
 8000a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa4:	b004      	add	sp, #16
 8000aa6:	4240      	negs	r0, r0
 8000aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	4770      	bx	lr
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aba:	f000 f82f 	bl	8000b1c <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4240      	negs	r0, r0
 8000aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ace:	4770      	bx	lr
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad6:	f000 f821 	bl	8000b1c <__udivmoddi4>
 8000ada:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae2:	b004      	add	sp, #16
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aea:	4770      	bx	lr

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	@ 0x38
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8000de4:	233d      	movs	r3, #61	@ 0x3d
 8000de6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000de8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000dec:	230a      	movs	r3, #10
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2302      	movs	r3, #2
 8000df2:	2150      	movs	r1, #80	@ 0x50
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f002 ff7b 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f001 ff4e 	bl	8002c9c <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000e00:	f240 1307 	movw	r3, #263	@ 0x107
 8000e04:	853b      	strh	r3, [r7, #40]	@ 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8000e06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	2150      	movs	r1, #80	@ 0x50
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f002 ff6c 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f001 ff3f 	bl	8002c9c <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 8000e1e:	2308      	movs	r3, #8
 8000e20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000e24:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <BNO055_Init_I2C+0x18c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	015b      	lsls	r3, r3, #5
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f6c <BNO055_Init_I2C+0x190>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b25a      	sxtb	r2, r3
 8000e38:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <BNO055_Init_I2C+0x194>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 8000e48:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2302      	movs	r3, #2
 8000e52:	2150      	movs	r1, #80	@ 0x50
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f002 ff4b 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000e5a:	200a      	movs	r0, #10
 8000e5c:	f001 ff1e 	bl	8002c9c <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 8000e60:	230a      	movs	r3, #10
 8000e62:	f887 3020 	strb.w	r3, [r7, #32]
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <BNO055_Init_I2C+0x198>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	4b42      	ldr	r3, [pc, #264]	@ (8000f78 <BNO055_Init_I2C+0x19c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 8000e7e:	f107 0220 	add.w	r2, r7, #32
 8000e82:	230a      	movs	r3, #10
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2302      	movs	r3, #2
 8000e88:	2150      	movs	r1, #80	@ 0x50
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f002 ff30 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f001 ff03 	bl	8002c9c <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8000e96:	230b      	movs	r3, #11
 8000e98:	773b      	strb	r3, [r7, #28]
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <BNO055_Init_I2C+0x1a0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 8000ea0:	f107 021c 	add.w	r2, r7, #28
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	2150      	movs	r1, #80	@ 0x50
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f002 ff1f 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f001 fef2 	bl	8002c9c <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000eb8:	2300      	movs	r3, #0
 8000eba:	763b      	strb	r3, [r7, #24]
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	767b      	strb	r3, [r7, #25]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	76bb      	strb	r3, [r7, #26]
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <BNO055_Init_I2C+0x1a4>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	015b      	lsls	r3, r3, #5
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <BNO055_Init_I2C+0x1a8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <BNO055_Init_I2C+0x1ac>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000ee6:	f107 0218 	add.w	r2, r7, #24
 8000eea:	230a      	movs	r3, #10
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2304      	movs	r3, #4
 8000ef0:	2150      	movs	r1, #80	@ 0x50
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f002 fefc 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f001 fecf 	bl	8002c9c <HAL_Delay>

	// Select BNO055 gyro temperature source
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );

	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 8000efe:	2307      	movs	r3, #7
 8000f00:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 8000f02:	f107 0214 	add.w	r2, r7, #20
 8000f06:	230a      	movs	r3, #10
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	2150      	movs	r1, #80	@ 0x50
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f002 feee 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000f14:	200a      	movs	r0, #10
 8000f16:	f001 fec1 	bl	8002c9c <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8000f1a:	233e      	movs	r3, #62	@ 0x3e
 8000f1c:	743b      	strb	r3, [r7, #16]
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <BNO055_Init_I2C+0x1b0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 8000f24:	f107 0210 	add.w	r2, r7, #16
 8000f28:	230a      	movs	r3, #10
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2150      	movs	r1, #80	@ 0x50
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f002 fedd 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000f36:	200a      	movs	r0, #10
 8000f38:	f001 feb0 	bl	8002c9c <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 8000f3c:	233d      	movs	r3, #61	@ 0x3d
 8000f3e:	733b      	strb	r3, [r7, #12]
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <BNO055_Init_I2C+0x1b4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 8000f46:	f107 020c 	add.w	r2, r7, #12
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2302      	movs	r3, #2
 8000f50:	2150      	movs	r1, #80	@ 0x50
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f002 fecc 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f001 fe9f 	bl	8002c9c <HAL_Delay>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	@ 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002de 	.word	0x200002de
 8000f6c:	20000002 	.word	0x20000002
 8000f70:	20000001 	.word	0x20000001
 8000f74:	20000000 	.word	0x20000000
 8000f78:	200002dd 	.word	0x200002dd
 8000f7c:	200002dc 	.word	0x200002dc
 8000f80:	200002df 	.word	0x200002df
 8000f84:	20000003 	.word	0x20000003
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	200002e0 	.word	0x200002e0
 8000f90:	20000005 	.word	0x20000005

08000f94 <GetAccelData>:



// Send data to BNO055 over I2C
uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2208      	movs	r2, #8
 8000fae:	2150      	movs	r1, #80	@ 0x50
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f002 ff9b 	bl	8003eec <HAL_I2C_Mem_Read>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <GetGyroData>:

uint8_t GetGyroData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_GYR_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str,18,100);
 8000fce:	2364      	movs	r3, #100	@ 0x64
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2214      	movs	r2, #20
 8000fde:	2150      	movs	r1, #80	@ 0x50
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f002 ff83 	bl	8003eec <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001000:	f007 fd9a 	bl	8008b38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001004:	4b5a      	ldr	r3, [pc, #360]	@ (8001170 <pvPortMallocMicroROS+0x17c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800100c:	f000 f986 	bl	800131c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001010:	4b58      	ldr	r3, [pc, #352]	@ (8001174 <pvPortMallocMicroROS+0x180>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	f040 8090 	bne.w	800113e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01e      	beq.n	8001062 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001024:	2208      	movs	r2, #8
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f023 0307 	bic.w	r3, r3, #7
 800103c:	3308      	adds	r3, #8
 800103e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800104a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800104e:	f383 8811 	msr	BASEPRI, r3
 8001052:	f3bf 8f6f 	isb	sy
 8001056:	f3bf 8f4f 	dsb	sy
 800105a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d06a      	beq.n	800113e <pvPortMallocMicroROS+0x14a>
 8001068:	4b43      	ldr	r3, [pc, #268]	@ (8001178 <pvPortMallocMicroROS+0x184>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d865      	bhi.n	800113e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001072:	4b42      	ldr	r3, [pc, #264]	@ (800117c <pvPortMallocMicroROS+0x188>)
 8001074:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <pvPortMallocMicroROS+0x188>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107c:	e004      	b.n	8001088 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d903      	bls.n	800109a <pvPortMallocMicroROS+0xa6>
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f1      	bne.n	800107e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800109a:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <pvPortMallocMicroROS+0x17c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d04c      	beq.n	800113e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2208      	movs	r2, #8
 80010aa:	4413      	add	r3, r2
 80010ac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1ad2      	subs	r2, r2, r3
 80010be:	2308      	movs	r3, #8
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d920      	bls.n	8001108 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00b      	beq.n	80010f0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010dc:	f383 8811 	msr	BASEPRI, r3
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	f3bf 8f4f 	dsb	sy
 80010e8:	613b      	str	r3, [r7, #16]
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1ad2      	subs	r2, r2, r3
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f000 f96c 	bl	80013e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <pvPortMallocMicroROS+0x184>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <pvPortMallocMicroROS+0x184>)
 8001114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <pvPortMallocMicroROS+0x184>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <pvPortMallocMicroROS+0x18c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d203      	bcs.n	800112a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <pvPortMallocMicroROS+0x184>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a16      	ldr	r2, [pc, #88]	@ (8001180 <pvPortMallocMicroROS+0x18c>)
 8001128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <pvPortMallocMicroROS+0x180>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	431a      	orrs	r2, r3
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800113e:	f007 fd09 	bl	8008b54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800114c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	60fb      	str	r3, [r7, #12]
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001164:	69fb      	ldr	r3, [r7, #28]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20003eec 	.word	0x20003eec
 8001174:	20003ef8 	.word	0x20003ef8
 8001178:	20003ef0 	.word	0x20003ef0
 800117c:	20003ee4 	.word	0x20003ee4
 8001180:	20003ef4 	.word	0x20003ef4

08001184 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d04a      	beq.n	800122c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001196:	2308      	movs	r3, #8
 8001198:	425b      	negs	r3, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10b      	bne.n	80011ca <vPortFreeMicroROS+0x46>
	__asm volatile
 80011b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b6:	f383 8811 	msr	BASEPRI, r3
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	f3bf 8f4f 	dsb	sy
 80011c2:	60fb      	str	r3, [r7, #12]
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	e7fd      	b.n	80011c6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <vPortFreeMicroROS+0x66>
	__asm volatile
 80011d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d6:	f383 8811 	msr	BASEPRI, r3
 80011da:	f3bf 8f6f 	isb	sy
 80011de:	f3bf 8f4f 	dsb	sy
 80011e2:	60bb      	str	r3, [r7, #8]
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	e7fd      	b.n	80011e6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <vPortFreeMicroROS+0xb0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d019      	beq.n	800122c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d115      	bne.n	800122c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <vPortFreeMicroROS+0xb0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001210:	f007 fc92 	bl	8008b38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <vPortFreeMicroROS+0xb4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <vPortFreeMicroROS+0xb4>)
 8001220:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001222:	6938      	ldr	r0, [r7, #16]
 8001224:	f000 f8dc 	bl	80013e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001228:	f007 fc94 	bl	8008b54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20003ef8 	.word	0x20003ef8
 8001238:	20003ef0 	.word	0x20003ef0

0800123c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001248:	2308      	movs	r3, #8
 800124a:	425b      	negs	r3, r3
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	4413      	add	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <getBlockSize+0x38>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	43db      	mvns	r3, r3
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]

	return count;
 8001264:	68fb      	ldr	r3, [r7, #12]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20003ef8 	.word	0x20003ef8

08001278 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001282:	f007 fc59 	bl	8008b38 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff feb4 	bl	8000ff4 <pvPortMallocMicroROS>
 800128c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d017      	beq.n	80012c4 <pvPortReallocMicroROS+0x4c>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d014      	beq.n	80012c4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffce 	bl	800123c <getBlockSize>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2208      	movs	r2, #8
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d201      	bcs.n	80012b4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f016 faa8 	bl	801780e <memcpy>

		vPortFreeMicroROS(pv);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff60 	bl	8001184 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012c4:	f007 fc46 	bl	8008b54 <xTaskResumeAll>

	return newmem;
 80012c8:	68bb      	ldr	r3, [r7, #8]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012dc:	f007 fc2c 	bl	8008b38 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff fe82 	bl	8000ff4 <pvPortMallocMicroROS>
 80012f0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012f6:	e004      	b.n	8001302 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	613a      	str	r2, [r7, #16]
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	617a      	str	r2, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f5      	bne.n	80012f8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800130c:	f007 fc22 	bl	8008b54 <xTaskResumeAll>
  	return mem;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001322:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <prvHeapInit+0xac>)
 800132a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3307      	adds	r3, #7
 800133a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a1f      	ldr	r2, [pc, #124]	@ (80013c8 <prvHeapInit+0xac>)
 800134c:	4413      	add	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <prvHeapInit+0xb0>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <prvHeapInit+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001368:	2208      	movs	r2, #8
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <prvHeapInit+0xb4>)
 800137c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <prvHeapInit+0xb4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <prvHeapInit+0xb4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <prvHeapInit+0xb4>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <prvHeapInit+0xb8>)
 80013aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <prvHeapInit+0xbc>)
 80013b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <prvHeapInit+0xc0>)
 80013b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	200002e4 	.word	0x200002e4
 80013cc:	20003ee4 	.word	0x20003ee4
 80013d0:	20003eec 	.word	0x20003eec
 80013d4:	20003ef4 	.word	0x20003ef4
 80013d8:	20003ef0 	.word	0x20003ef0
 80013dc:	20003ef8 	.word	0x20003ef8

080013e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <prvInsertBlockIntoFreeList+0xac>)
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e002      	b.n	80013f4 <prvInsertBlockIntoFreeList+0x14>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d8f7      	bhi.n	80013ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d108      	bne.n	8001422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	441a      	add	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	441a      	add	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d118      	bne.n	8001468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <prvInsertBlockIntoFreeList+0xb0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d00d      	beq.n	800145e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	441a      	add	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e008      	b.n	8001470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <prvInsertBlockIntoFreeList+0xb0>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e003      	b.n	8001470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d002      	beq.n	800147e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20003ee4 	.word	0x20003ee4
 8001490:	20003eec 	.word	0x20003eec
 8001494:	00000000 	.word	0x00000000

08001498 <subscription_cmd_vel_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void subscription_cmd_vel_callback(const void * msgin)
{
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b088      	sub	sp, #32
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6178      	str	r0, [r7, #20]
	geometry_msgs__msg__Twist * msg = (geometry_msgs__msg__Twist *)msgin;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	61fb      	str	r3, [r7, #28]

	LeftWheelVelocity = msg->linear.x - msg->angular.z*Length;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80014b2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001750 <subscription_cmd_vel_callback+0x2b8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe ff12 	bl	80002e0 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f7ff f83a 	bl	800053c <__aeabi_dsub>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	49a4      	ldr	r1, [pc, #656]	@ (8001760 <subscription_cmd_vel_callback+0x2c8>)
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
		RightWheelVelocity = msg->linear.x + msg->angular.z*Length;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80014de:	a39c      	add	r3, pc, #624	@ (adr r3, 8001750 <subscription_cmd_vel_callback+0x2b8>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7fe fefc 	bl	80002e0 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff f826 	bl	8000540 <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	499a      	ldr	r1, [pc, #616]	@ (8001764 <subscription_cmd_vel_callback+0x2cc>)
 80014fa:	e9c1 2300 	strd	r2, r3, [r1]


//		LeftMotorSpeed = (int)(LeftWheelVelocity/WheelRadius) * 60/6.2831;            //w of motor in rpm
//		RightMotorSpeed = (int)(RightWheelVelocity/WheelRadius) * 60/6.2831;
		LeftMotorSpeed = (int)((LeftWheelVelocity) * 1000);            //w of motor in rpm
 80014fe:	4b98      	ldr	r3, [pc, #608]	@ (8001760 <subscription_cmd_vel_callback+0x2c8>)
 8001500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b97      	ldr	r3, [pc, #604]	@ (8001768 <subscription_cmd_vel_callback+0x2d0>)
 800150a:	f7fe fee9 	bl	80002e0 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fa51 	bl	80009bc <__aeabi_d2iz>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f95b 	bl	80007d8 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4991      	ldr	r1, [pc, #580]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 8001528:	e9c1 2300 	strd	r2, r3, [r1]
		RightMotorSpeed = (int)((RightWheelVelocity) * 1000);
 800152c:	4b8d      	ldr	r3, [pc, #564]	@ (8001764 <subscription_cmd_vel_callback+0x2cc>)
 800152e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b8c      	ldr	r3, [pc, #560]	@ (8001768 <subscription_cmd_vel_callback+0x2d0>)
 8001538:	f7fe fed2 	bl	80002e0 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fa3a 	bl	80009bc <__aeabi_d2iz>
 8001548:	4603      	mov	r3, r0
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f944 	bl	80007d8 <__aeabi_i2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4986      	ldr	r1, [pc, #536]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 8001556:	e9c1 2300 	strd	r2, r3, [r1]

		if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)	//front
 800155a:	4b84      	ldr	r3, [pc, #528]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 800155c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	f7ff fa14 	bl	8000994 <__aeabi_dcmpge>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d042      	beq.n	80015f8 <subscription_cmd_vel_callback+0x160>
 8001572:	4b7e      	ldr	r3, [pc, #504]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 8001574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <subscription_cmd_vel_callback+0x2d0>)
 800157e:	f7ff f9ff 	bl	8000980 <__aeabi_dcmple>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d037      	beq.n	80015f8 <subscription_cmd_vel_callback+0x160>
 8001588:	4b79      	ldr	r3, [pc, #484]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	f7ff f9fd 	bl	8000994 <__aeabi_dcmpge>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d02b      	beq.n	80015f8 <subscription_cmd_vel_callback+0x160>
 80015a0:	4b73      	ldr	r3, [pc, #460]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 80015a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <subscription_cmd_vel_callback+0x2d0>)
 80015ac:	f7ff f9e8 	bl	8000980 <__aeabi_dcmple>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d020      	beq.n	80015f8 <subscription_cmd_vel_callback+0x160>
		{
	 		TIM3->CCR1 = LeftMotorSpeed;
 80015b6:	4b6d      	ldr	r3, [pc, #436]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	4c6d      	ldr	r4, [pc, #436]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa23 	bl	8000a0c <__aeabi_d2uiz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	6363      	str	r3, [r4, #52]	@ 0x34
			TIM3->CCR2 = RightMotorSpeed;
 80015ca:	4b69      	ldr	r3, [pc, #420]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	4c68      	ldr	r4, [pc, #416]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fa19 	bl	8000a0c <__aeabi_d2uiz>
 80015da:	4603      	mov	r3, r0
 80015dc:	63a3      	str	r3, [r4, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e4:	4864      	ldr	r0, [pc, #400]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 80015e6:	f002 fa25 	bl	8003a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f0:	4861      	ldr	r0, [pc, #388]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 80015f2:	f002 fa1f 	bl	8003a34 <HAL_GPIO_WritePin>
 80015f6:	e126      	b.n	8001846 <subscription_cmd_vel_callback+0x3ae>

		}
		else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)	//back
 80015f8:	4b5c      	ldr	r3, [pc, #368]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 80015fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	f7ff f9bb 	bl	8000980 <__aeabi_dcmple>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d04a      	beq.n	80016a6 <subscription_cmd_vel_callback+0x20e>
 8001610:	4b56      	ldr	r3, [pc, #344]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 8001612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001616:	a350      	add	r3, pc, #320	@ (adr r3, 8001758 <subscription_cmd_vel_callback+0x2c0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f9ba 	bl	8000994 <__aeabi_dcmpge>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03f      	beq.n	80016a6 <subscription_cmd_vel_callback+0x20e>
 8001626:	4b52      	ldr	r3, [pc, #328]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 8001628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f7ff f9a4 	bl	8000980 <__aeabi_dcmple>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d033      	beq.n	80016a6 <subscription_cmd_vel_callback+0x20e>
 800163e:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 8001640:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001644:	a344      	add	r3, pc, #272	@ (adr r3, 8001758 <subscription_cmd_vel_callback+0x2c0>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f9a3 	bl	8000994 <__aeabi_dcmpge>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d028      	beq.n	80016a6 <subscription_cmd_vel_callback+0x20e>
		{

			TIM3->CCR1 = -LeftMotorSpeed;
 8001654:	4b45      	ldr	r3, [pc, #276]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4c44      	ldr	r4, [pc, #272]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 8001664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001668:	f7ff f9d0 	bl	8000a0c <__aeabi_d2uiz>
 800166c:	4603      	mov	r3, r0
 800166e:	6363      	str	r3, [r4, #52]	@ 0x34
			TIM3->CCR2 = -RightMotorSpeed;
 8001670:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	603a      	str	r2, [r7, #0]
 8001678:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4c3d      	ldr	r4, [pc, #244]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f7ff f9c2 	bl	8000a0c <__aeabi_d2uiz>
 8001688:	4603      	mov	r3, r0
 800168a:	63a3      	str	r3, [r4, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001692:	4839      	ldr	r0, [pc, #228]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 8001694:	f002 f9ce 	bl	8003a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169e:	4836      	ldr	r0, [pc, #216]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 80016a0:	f002 f9c8 	bl	8003a34 <HAL_GPIO_WritePin>
 80016a4:	e0cf      	b.n	8001846 <subscription_cmd_vel_callback+0x3ae>
		}
		else if (LeftMotorSpeed<=0 && LeftMotorSpeed>=-1000 && RightMotorSpeed>=0 && RightMotorSpeed<=1000)		//left
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 80016a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	f7ff f964 	bl	8000980 <__aeabi_dcmple>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d05e      	beq.n	800177c <subscription_cmd_vel_callback+0x2e4>
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 80016c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c4:	a324      	add	r3, pc, #144	@ (adr r3, 8001758 <subscription_cmd_vel_callback+0x2c0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f963 	bl	8000994 <__aeabi_dcmpge>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d053      	beq.n	800177c <subscription_cmd_vel_callback+0x2e4>
 80016d4:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	f7ff f957 	bl	8000994 <__aeabi_dcmpge>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d047      	beq.n	800177c <subscription_cmd_vel_callback+0x2e4>
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 80016ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <subscription_cmd_vel_callback+0x2d0>)
 80016f8:	f7ff f942 	bl	8000980 <__aeabi_dcmple>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03c      	beq.n	800177c <subscription_cmd_vel_callback+0x2e4>
		{
			TIM3->CCR1 = -LeftMotorSpeed;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <subscription_cmd_vel_callback+0x2d4>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	4692      	mov	sl, r2
 800170a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800170e:	4c19      	ldr	r4, [pc, #100]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 8001710:	4650      	mov	r0, sl
 8001712:	4659      	mov	r1, fp
 8001714:	f7ff f97a 	bl	8000a0c <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	6363      	str	r3, [r4, #52]	@ 0x34
			TIM3->CCR2 = RightMotorSpeed;
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <subscription_cmd_vel_callback+0x2d8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	4c14      	ldr	r4, [pc, #80]	@ (8001774 <subscription_cmd_vel_callback+0x2dc>)
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f970 	bl	8000a0c <__aeabi_d2uiz>
 800172c:	4603      	mov	r3, r0
 800172e:	63a3      	str	r3, [r4, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001736:	4810      	ldr	r0, [pc, #64]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 8001738:	f002 f97c 	bl	8003a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <subscription_cmd_vel_callback+0x2e0>)
 8001744:	f002 f976 	bl	8003a34 <HAL_GPIO_WritePin>
 8001748:	e07d      	b.n	8001846 <subscription_cmd_vel_callback+0x3ae>
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	70a3d70a 	.word	0x70a3d70a
 8001754:	3fd70a3d 	.word	0x3fd70a3d
 8001758:	00000000 	.word	0x00000000
 800175c:	c08f4000 	.word	0xc08f4000
 8001760:	200041b0 	.word	0x200041b0
 8001764:	200041b8 	.word	0x200041b8
 8001768:	408f4000 	.word	0x408f4000
 800176c:	200041c0 	.word	0x200041c0
 8001770:	200041c8 	.word	0x200041c8
 8001774:	40000400 	.word	0x40000400
 8001778:	40020800 	.word	0x40020800
		}
		else if (LeftMotorSpeed>=0 && LeftMotorSpeed<=1000 && RightMotorSpeed<=0 && RightMotorSpeed>=-1000)		//right
 800177c:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <subscription_cmd_vel_callback+0x3c0>)
 800177e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f7ff f903 	bl	8000994 <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d045      	beq.n	8001820 <subscription_cmd_vel_callback+0x388>
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <subscription_cmd_vel_callback+0x3c0>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <subscription_cmd_vel_callback+0x3c4>)
 80017a0:	f7ff f8ee 	bl	8000980 <__aeabi_dcmple>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03a      	beq.n	8001820 <subscription_cmd_vel_callback+0x388>
 80017aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <subscription_cmd_vel_callback+0x3c8>)
 80017ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f7ff f8e2 	bl	8000980 <__aeabi_dcmple>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d02e      	beq.n	8001820 <subscription_cmd_vel_callback+0x388>
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <subscription_cmd_vel_callback+0x3c8>)
 80017c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c8:	a321      	add	r3, pc, #132	@ (adr r3, 8001850 <subscription_cmd_vel_callback+0x3b8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f8e1 	bl	8000994 <__aeabi_dcmpge>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d023      	beq.n	8001820 <subscription_cmd_vel_callback+0x388>
		{
			TIM3->CCR1 = LeftMotorSpeed;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <subscription_cmd_vel_callback+0x3c0>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	4c21      	ldr	r4, [pc, #132]	@ (8001864 <subscription_cmd_vel_callback+0x3cc>)
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f912 	bl	8000a0c <__aeabi_d2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	6363      	str	r3, [r4, #52]	@ 0x34
			TIM3->CCR2 = -RightMotorSpeed;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <subscription_cmd_vel_callback+0x3c8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	4690      	mov	r8, r2
 80017f4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80017f8:	4c1a      	ldr	r4, [pc, #104]	@ (8001864 <subscription_cmd_vel_callback+0x3cc>)
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7ff f905 	bl	8000a0c <__aeabi_d2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	63a3      	str	r3, [r4, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <subscription_cmd_vel_callback+0x3d0>)
 800180e:	f002 f911 	bl	8003a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001818:	4813      	ldr	r0, [pc, #76]	@ (8001868 <subscription_cmd_vel_callback+0x3d0>)
 800181a:	f002 f90b 	bl	8003a34 <HAL_GPIO_WritePin>
 800181e:	e012      	b.n	8001846 <subscription_cmd_vel_callback+0x3ae>
		}
		else
		{
			TIM3->CCR1 = 0;
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <subscription_cmd_vel_callback+0x3cc>)
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR2 = 0;
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <subscription_cmd_vel_callback+0x3cc>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001832:	480e      	ldr	r0, [pc, #56]	@ (800186c <subscription_cmd_vel_callback+0x3d4>)
 8001834:	f002 f8fe 	bl	8003a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800183e:	480b      	ldr	r0, [pc, #44]	@ (800186c <subscription_cmd_vel_callback+0x3d4>)
 8001840:	f002 f8f8 	bl	8003a34 <HAL_GPIO_WritePin>

		}

}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001850:	00000000 	.word	0x00000000
 8001854:	c08f4000 	.word	0xc08f4000
 8001858:	200041c0 	.word	0x200041c0
 800185c:	408f4000 	.word	0x408f4000
 8001860:	200041c8 	.word	0x200041c8
 8001864:	40000400 	.word	0x40000400
 8001868:	40020800 	.word	0x40020800
 800186c:	40020c00 	.word	0x40020c00

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f001 f9a0 	bl	8002bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f830 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f000 f9d6 	bl	8001c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001880:	f000 f99c 	bl	8001bbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001884:	f000 f946 	bl	8001b14 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001888:	f000 f8c4 	bl	8001a14 <MX_TIM3_Init>
  MX_I2C1_Init();
 800188c:	f000 f894 	bl	80019b8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001890:	f000 f96a 	bl	8001b68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <main+0x58>)
 8001898:	f003 ff8a 	bl	80057b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800189c:	2104      	movs	r1, #4
 800189e:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <main+0x58>)
 80018a0:	f003 ff86 	bl	80057b0 <HAL_TIM_PWM_Start>
  BNO055_Init_I2C(&hi2c1);
 80018a4:	4809      	ldr	r0, [pc, #36]	@ (80018cc <main+0x5c>)
 80018a6:	f7ff fa99 	bl	8000ddc <BNO055_Init_I2C>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018aa:	f006 f827 	bl	80078fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <main+0x60>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	4808      	ldr	r0, [pc, #32]	@ (80018d4 <main+0x64>)
 80018b4:	f006 f86c 	bl	8007990 <osThreadNew>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <main+0x68>)
 80018bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018be:	f006 f841 	bl	8007944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <main+0x52>
 80018c6:	bf00      	nop
 80018c8:	20004010 	.word	0x20004010
 80018cc:	20003efc 	.word	0x20003efc
 80018d0:	08018688 	.word	0x08018688
 80018d4:	08001ced 	.word	0x08001ced
 80018d8:	200041a8 	.word	0x200041a8

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	@ 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	2234      	movs	r2, #52	@ 0x34
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f015 fec6 	bl	801767c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <SystemClock_Config+0xd4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4a29      	ldr	r2, [pc, #164]	@ (80019b0 <SystemClock_Config+0xd4>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <SystemClock_Config+0xd4>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <SystemClock_Config+0xd8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <SystemClock_Config+0xd8>)
 800192a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <SystemClock_Config+0xd8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001944:	2310      	movs	r3, #16
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001948:	2302      	movs	r3, #2
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001950:	2310      	movs	r3, #16
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001954:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001958:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800195a:	2304      	movs	r3, #4
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800195e:	2302      	movs	r3, #2
 8001960:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001962:	2302      	movs	r3, #2
 8001964:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fbda 	bl	8005124 <HAL_RCC_OscConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001976:	f000 fb69 	bl	800204c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197a:	230f      	movs	r3, #15
 800197c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197e:	2302      	movs	r3, #2
 8001980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f87a 	bl	8004a90 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80019a2:	f000 fb53 	bl	800204c <Error_Handler>
  }
}
 80019a6:	bf00      	nop
 80019a8:	3750      	adds	r7, #80	@ 0x50
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019be:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <MX_I2C1_Init+0x54>)
 80019c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_I2C1_Init+0x58>)
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f6:	f002 f837 	bl	8003a68 <HAL_I2C_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a00:	f000 fb24 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20003efc 	.word	0x20003efc
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	@ 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a44:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a46:	4a32      	ldr	r2, [pc, #200]	@ (8001b10 <MX_TIM3_Init+0xfc>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a4c:	2253      	movs	r2, #83	@ 0x53
 8001a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a58:	2263      	movs	r2, #99	@ 0x63
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a68:	4828      	ldr	r0, [pc, #160]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a6a:	f003 fdf9 	bl	8005660 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001a74:	f000 faea 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4821      	ldr	r0, [pc, #132]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a86:	f004 f81d 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001a90:	f000 fadc 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a94:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001a96:	f003 fe32 	bl	80056fe <HAL_TIM_PWM_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001aa0:	f000 fad4 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001ab4:	f004 fbe4 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001abe:	f000 fac5 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac2:	2360      	movs	r3, #96	@ 0x60
 8001ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001ada:	f003 ff31 	bl	8005940 <HAL_TIM_PWM_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ae4:	f000 fab2 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2204      	movs	r2, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001af0:	f003 ff26 	bl	8005940 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001afa:	f000 faa7 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001afe:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <MX_TIM3_Init+0xf8>)
 8001b00:	f000 fd08 	bl	8002514 <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3738      	adds	r7, #56	@ 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20004010 	.word	0x20004010
 8001b10:	40000400 	.word	0x40000400

08001b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <MX_USART2_UART_Init+0x50>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f004 fc14 	bl	8006378 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b56:	f000 fa79 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20004058 	.word	0x20004058
 8001b64:	40004400 	.word	0x40004400

08001b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <MX_USART3_UART_Init+0x50>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_USART3_UART_Init+0x4c>)
 8001ba0:	f004 fbea 	bl	8006378 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001baa:	f000 fa4f 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200040a0 	.word	0x200040a0
 8001bb8:	40004800 	.word	0x40004800

08001bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_DMA_Init+0x6c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a17      	ldr	r2, [pc, #92]	@ (8001c28 <MX_DMA_Init+0x6c>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <MX_DMA_Init+0x6c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	200b      	movs	r0, #11
 8001be4:	f001 f959 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001be8:	200b      	movs	r0, #11
 8001bea:	f001 f972 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2010      	movs	r0, #16
 8001bf4:	f001 f951 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bf8:	2010      	movs	r0, #16
 8001bfa:	f001 f96a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2105      	movs	r1, #5
 8001c02:	2011      	movs	r0, #17
 8001c04:	f001 f949 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c08:	2011      	movs	r0, #17
 8001c0a:	f001 f962 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	202f      	movs	r0, #47	@ 0x2f
 8001c14:	f001 f941 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c18:	202f      	movs	r0, #47	@ 0x2f
 8001c1a:	f001 f95a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <MX_GPIO_Init+0xb8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001cb8:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001cba:	f001 febb 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001cd8:	f001 fd18 	bl	800370c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020800 	.word	0x40020800

08001cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b0fa      	sub	sp, #488	@ 0x1e8
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001cf6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cfa:	6018      	str	r0, [r3, #0]
		uint8_t		gyro_readings[18];
		int16_t 	gyro_data[3];
		float		gyro_x, gyro_y, gyro_z;
		   // micro-ROS configuration

		   rmw_uros_set_custom_transport(
 8001cfc:	4bbf      	ldr	r3, [pc, #764]	@ (8001ffc <StartDefaultTask+0x310>)
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	4bbf      	ldr	r3, [pc, #764]	@ (8002000 <StartDefaultTask+0x314>)
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4bbf      	ldr	r3, [pc, #764]	@ (8002004 <StartDefaultTask+0x318>)
 8001d06:	4ac0      	ldr	r2, [pc, #768]	@ (8002008 <StartDefaultTask+0x31c>)
 8001d08:	49c0      	ldr	r1, [pc, #768]	@ (800200c <StartDefaultTask+0x320>)
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f00a ffa8 	bl	800cc60 <rmw_uros_set_custom_transport>
		     cubemx_transport_open,
		     cubemx_transport_close,
		     cubemx_transport_write,
		     cubemx_transport_read);

		   rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001d10:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00a fed5 	bl	800cac4 <rcutils_get_zero_initialized_allocator>
		   freeRTOS_allocator.allocate = microros_allocate;
 8001d1a:	4bbd      	ldr	r3, [pc, #756]	@ (8002010 <StartDefaultTask+0x324>)
 8001d1c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
		   freeRTOS_allocator.deallocate = microros_deallocate;
 8001d20:	4bbc      	ldr	r3, [pc, #752]	@ (8002014 <StartDefaultTask+0x328>)
 8001d22:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
		   freeRTOS_allocator.reallocate = microros_reallocate;
 8001d26:	4bbc      	ldr	r3, [pc, #752]	@ (8002018 <StartDefaultTask+0x32c>)
 8001d28:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
		   freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001d2c:	4bbb      	ldr	r3, [pc, #748]	@ (800201c <StartDefaultTask+0x330>)
 8001d2e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

		   if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001d32:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00a fed2 	bl	800cae0 <rcutils_set_default_allocator>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <StartDefaultTask+0x66>
		       printf("Error on default allocators (line %d)\n", __LINE__);
 8001d48:	f240 212a 	movw	r1, #554	@ 0x22a
 8001d4c:	48b4      	ldr	r0, [pc, #720]	@ (8002020 <StartDefaultTask+0x334>)
 8001d4e:	f015 fba9 	bl	80174a4 <iprintf>
		   std_msgs__msg__Int32 msg;
		   rclc_support_t support;
		   rcl_allocator_t allocator;
		   rcl_node_t node;

		   allocator = rcl_get_default_allocator();
 8001d52:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001d56:	f5a3 7496 	sub.w	r4, r3, #300	@ 0x12c
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00a fedd 	bl	800cb1c <rcutils_get_default_allocator>
 8001d62:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001d66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	6023      	str	r3, [r4, #0]

		   //create init_options
		   rclc_support_init(&support, 0, NULL, &allocator);
 8001d74:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001d78:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f00a fdaa 	bl	800c8d8 <rclc_support_init>

		   // create node
		   rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001d84:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001d88:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001d8c:	4aa5      	ldr	r2, [pc, #660]	@ (8002024 <StartDefaultTask+0x338>)
 8001d8e:	49a6      	ldr	r1, [pc, #664]	@ (8002028 <StartDefaultTask+0x33c>)
 8001d90:	f00a fdec 	bl	800c96c <rclc_node_init_default>

		   // create publisher
		   rclc_publisher_init_default(
 8001d94:	f00b fcbe 	bl	800d714 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001d9e:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8001da2:	4ba2      	ldr	r3, [pc, #648]	@ (800202c <StartDefaultTask+0x340>)
 8001da4:	f00a fe1e 	bl	800c9e4 <rclc_publisher_init_default>
		     &publisher,
		     &node,
		     ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		     "cubemx_publisher");

		   rclc_publisher_init_default(
 8001da8:	f008 fb4e 	bl	800a448 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001db2:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8001db6:	4b9e      	ldr	r3, [pc, #632]	@ (8002030 <StartDefaultTask+0x344>)
 8001db8:	f00a fe14 	bl	800c9e4 <rclc_publisher_init_default>
		   			&imu_pub,
		   	  		&node,
		   	  		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
		   	  		"imu_raw");
		   rclc_subscription_init_default(
 8001dbc:	f008 fb44 	bl	800a448 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001dc6:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001dca:	4b9a      	ldr	r3, [pc, #616]	@ (8002034 <StartDefaultTask+0x348>)
 8001dcc:	f00a fe3e 	bl	800ca4c <rclc_subscription_init_default>
		   	  	     &subscriber_cmd_vel,
		   	  	     &node,
		   	  	     ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
		   	  	     "cmd_vel");

		   rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001dd0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001dd4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00a faa9 	bl	800c330 <rclc_executor_get_zero_initialized_executor>
		   	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001dde:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001de2:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8001de6:	f107 0020 	add.w	r0, r7, #32
 8001dea:	2202      	movs	r2, #2
 8001dec:	f00a faac 	bl	800c348 <rclc_executor_init>
		   	  	rclc_executor_add_subscription(&executor, &subscriber_cmd_vel, &sub_cmd_vel_msg, &subscription_cmd_vel_callback, ON_NEW_DATA);
 8001df0:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001df4:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001df8:	f107 0020 	add.w	r0, r7, #32
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b8d      	ldr	r3, [pc, #564]	@ (8002038 <StartDefaultTask+0x34c>)
 8001e02:	f00a fb11 	bl	800c428 <rclc_executor_add_subscription>

		   msg.data = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

		   for(;;)
		   {
		GetAccelData(&hi2c1, (uint8_t*) imu_readings);
 8001e0c:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8001e10:	4619      	mov	r1, r3
 8001e12:	488a      	ldr	r0, [pc, #552]	@ (800203c <StartDefaultTask+0x350>)
 8001e14:	f7ff f8be 	bl	8000f94 <GetAccelData>
		accel_data[0] = (((int16_t) ((uint8_t*) (imu_readings))[1] << 8)
 8001e18:	f897 31ad 	ldrb.w	r3, [r7, #429]	@ 0x1ad
 8001e1c:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21b      	sxth	r3, r3
		accel_data[0] = (((int16_t) ((uint8_t*) (imu_readings))[1] << 8)
 8001e2a:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
		accel_data[1] = (((int16_t) ((uint8_t*) (imu_readings))[3] << 8)
 8001e2e:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8001e32:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[2]);
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	f897 31ae 	ldrb.w	r3, [r7, #430]	@ 0x1ae
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b21b      	sxth	r3, r3
		accel_data[1] = (((int16_t) ((uint8_t*) (imu_readings))[3] << 8)
 8001e40:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
		accel_data[2] = (((int16_t) ((uint8_t*) (imu_readings))[5] << 8)
 8001e44:	f897 31b1 	ldrb.w	r3, [r7, #433]	@ 0x1b1
 8001e48:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[4]);
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	f897 31b0 	ldrb.w	r3, [r7, #432]	@ 0x1b0
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
		accel_data[2] = (((int16_t) ((uint8_t*) (imu_readings))[5] << 8)
 8001e56:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
		acc_x = ((float) (accel_data[0])) / 100.0f; //m/s2
 8001e5a:	f9b7 31a4 	ldrsh.w	r3, [r7, #420]	@ 0x1a4
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e66:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002040 <StartDefaultTask+0x354>
 8001e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6e:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
		acc_y = ((float) (accel_data[1])) / 100.0f;
 8001e72:	f9b7 31a6 	ldrsh.w	r3, [r7, #422]	@ 0x1a6
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002040 <StartDefaultTask+0x354>
 8001e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e86:	edc7 7a76 	vstr	s15, [r7, #472]	@ 0x1d8
		acc_z = ((float) (accel_data[2])) / 100.0f;
 8001e8a:	f9b7 31a8 	ldrsh.w	r3, [r7, #424]	@ 0x1a8
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e96:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8002040 <StartDefaultTask+0x354>
 8001e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9e:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
		GetGyroData(&hi2c1, (uint8_t*) gyro_readings);
 8001ea2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4864      	ldr	r0, [pc, #400]	@ (800203c <StartDefaultTask+0x350>)
 8001eaa:	f7ff f88b 	bl	8000fc4 <GetGyroData>
		gyro_data[0] = (((int16_t) ((uint8_t*) (imu_readings))[1] << 8)
 8001eae:	f897 31ad 	ldrb.w	r3, [r7, #429]	@ 0x1ad
 8001eb2:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b21b      	sxth	r3, r3
		gyro_data[0] = (((int16_t) ((uint8_t*) (imu_readings))[1] << 8)
 8001ec0:	f8a7 3188 	strh.w	r3, [r7, #392]	@ 0x188
		gyro_data[1] = (((int16_t) ((uint8_t*) (imu_readings))[3] << 8)
 8001ec4:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8001ec8:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[2]);
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	f897 31ae 	ldrb.w	r3, [r7, #430]	@ 0x1ae
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
		gyro_data[1] = (((int16_t) ((uint8_t*) (imu_readings))[3] << 8)
 8001ed6:	f8a7 318a 	strh.w	r3, [r7, #394]	@ 0x18a
		gyro_data[2] = (((int16_t) ((uint8_t*) (imu_readings))[5] << 8)
 8001eda:	f897 31b1 	ldrb.w	r3, [r7, #433]	@ 0x1b1
 8001ede:	021b      	lsls	r3, r3, #8
				| ((uint8_t*) (imu_readings))[4]);
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	f897 31b0 	ldrb.w	r3, [r7, #432]	@ 0x1b0
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21b      	sxth	r3, r3
		gyro_data[2] = (((int16_t) ((uint8_t*) (imu_readings))[5] << 8)
 8001eec:	f8a7 318c 	strh.w	r3, [r7, #396]	@ 0x18c
		gyro_x = ((float) (gyro_data[0])) / 900.0f; //m/s2
 8001ef0:	f9b7 3188 	ldrsh.w	r3, [r7, #392]	@ 0x188
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efc:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002044 <StartDefaultTask+0x358>
 8001f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f04:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0
		gyro_y = ((float) (gyro_data[1])) / 900.0f;
 8001f08:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	@ 0x18a
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f14:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8002044 <StartDefaultTask+0x358>
 8001f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1c:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
		gyro_z = ((float) (gyro_data[2])) / 900.0f;
 8001f20:	f9b7 318c 	ldrsh.w	r3, [r7, #396]	@ 0x18c
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8002044 <StartDefaultTask+0x358>
 8001f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f34:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
		imu.linear.x = acc_x;
 8001f38:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 8001f3c:	f7fe fc5e 	bl	80007fc <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		imu.linear.y = acc_y;
 8001f48:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001f4c:	f7fe fc56 	bl	80007fc <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
		imu.linear.z = acc_z;
 8001f58:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 8001f5c:	f7fe fc4e 	bl	80007fc <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
		imu.angular.x=gyro_x;
 8001f68:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 8001f6c:	f7fe fc46 	bl	80007fc <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		imu.angular.y=gyro_y;
 8001f78:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8001f7c:	f7fe fc3e 	bl	80007fc <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		imu.angular.z=gyro_z;
 8001f88:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8001f8c:	f7fe fc36 	bl	80007fc <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		     rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001f98:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001f9c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f009 fe36 	bl	800bc14 <rcl_publish>
 8001fa8:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
		     rcl_ret_t ret3 = rcl_publish(&imu_pub, &imu, NULL);
 8001fac:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001fb0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f009 fe2c 	bl	800bc14 <rcl_publish>
 8001fbc:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0
		     rclc_executor_spin_some(&executor, 1000);
 8001fc0:	f107 0120 	add.w	r1, r7, #32
 8001fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	4608      	mov	r0, r1
 8001fce:	f00a fc4b 	bl	800c868 <rclc_executor_spin_some>
		     if ((ret|ret3) != RCL_RET_OK)
 8001fd2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8001fd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <StartDefaultTask+0x2fe>
		     {
		       printf("Error publishing (line %d)\n", __LINE__);
 8001fe0:	f240 217a 	movw	r1, #634	@ 0x27a
 8001fe4:	4818      	ldr	r0, [pc, #96]	@ (8002048 <StartDefaultTask+0x35c>)
 8001fe6:	f015 fa5d 	bl	80174a4 <iprintf>
		     }

		     msg.data++;
 8001fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		     osDelay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f005 fd5d 	bl	8007ab4 <osDelay>
		   {
 8001ffa:	e707      	b.n	8001e0c <StartDefaultTask+0x120>
 8001ffc:	08002abd 	.word	0x08002abd
 8002000:	08002a55 	.word	0x08002a55
 8002004:	08002a35 	.word	0x08002a35
 8002008:	08002a09 	.word	0x08002a09
 800200c:	20004058 	.word	0x20004058
 8002010:	08002059 	.word	0x08002059
 8002014:	0800209d 	.word	0x0800209d
 8002018:	080020d5 	.word	0x080020d5
 800201c:	08002141 	.word	0x08002141
 8002020:	080185dc 	.word	0x080185dc
 8002024:	08018604 	.word	0x08018604
 8002028:	08018608 	.word	0x08018608
 800202c:	08018614 	.word	0x08018614
 8002030:	08018628 	.word	0x08018628
 8002034:	08018630 	.word	0x08018630
 8002038:	08001499 	.word	0x08001499
 800203c:	20003efc 	.word	0x20003efc
 8002040:	42c80000 	.word	0x42c80000
 8002044:	44610000 	.word	0x44610000
 8002048:	08018638 	.word	0x08018638

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <Error_Handler+0x8>

08002058 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <microros_allocate+0x3c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <microros_allocate+0x3c>)
 8002070:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <microros_allocate+0x40>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <microros_allocate+0x40>)
 8002080:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe ffb6 	bl	8000ff4 <pvPortMallocMicroROS>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200041d0 	.word	0x200041d0
 8002098:	200041d4 	.word	0x200041d4

0800209c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff f8c5 	bl	800123c <getBlockSize>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <microros_deallocate+0x34>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <microros_deallocate+0x34>)
 80020be:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff f85f 	bl	8001184 <vPortFreeMicroROS>
  }
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200041d4 	.word	0x200041d4

080020d4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <microros_reallocate+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <microros_reallocate+0x64>)
 80020ee:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <microros_reallocate+0x68>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <microros_reallocate+0x68>)
 80020fe:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f7fe ff74 	bl	8000ff4 <pvPortMallocMicroROS>
 800210c:	4603      	mov	r3, r0
 800210e:	e00e      	b.n	800212e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff f893 	bl	800123c <getBlockSize>
 8002116:	4603      	mov	r3, r0
 8002118:	4a08      	ldr	r2, [pc, #32]	@ (800213c <microros_reallocate+0x68>)
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	461a      	mov	r2, r3
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <microros_reallocate+0x68>)
 8002122:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7ff f8a6 	bl	8001278 <pvPortReallocMicroROS>
 800212c:	4603      	mov	r3, r0
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200041d0 	.word	0x200041d0
 800213c:	200041d4 	.word	0x200041d4

08002140 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <microros_zero_allocate+0x48>)
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	461a      	mov	r2, r3
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <microros_zero_allocate+0x48>)
 800215e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	4a08      	ldr	r2, [pc, #32]	@ (800218c <microros_zero_allocate+0x4c>)
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <microros_zero_allocate+0x4c>)
 8002172:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff f8ab 	bl	80012d2 <pvPortCallocMicroROS>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200041d0 	.word	0x200041d0
 800218c:	200041d4 	.word	0x200041d4

08002190 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80021a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a6:	a320      	add	r3, pc, #128	@ (adr r3, 8002228 <UTILS_NanosecondsToTimespec+0x98>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fc4e 	bl	8000a4c <__aeabi_ldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	a31a      	add	r3, pc, #104	@ (adr r3, 8002228 <UTILS_NanosecondsToTimespec+0x98>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fc42 	bl	8000a4c <__aeabi_ldivmod>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da20      	bge.n	8002216 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <UTILS_NanosecondsToTimespec+0x90>)
 80021da:	fb82 1203 	smull	r1, r2, r2, r3
 80021de:	1712      	asrs	r2, r2, #28
 80021e0:	17db      	asrs	r3, r3, #31
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	17c8      	asrs	r0, r1, #31
 80021f2:	460c      	mov	r4, r1
 80021f4:	4605      	mov	r5, r0
 80021f6:	ebb2 0804 	subs.w	r8, r2, r4
 80021fa:	eb63 0905 	sbc.w	r9, r3, r5
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4906      	ldr	r1, [pc, #24]	@ (8002224 <UTILS_NanosecondsToTimespec+0x94>)
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
    }
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002220:	44b82fa1 	.word	0x44b82fa1
 8002224:	3b9aca00 	.word	0x3b9aca00
 8002228:	3b9aca00 	.word	0x3b9aca00
 800222c:	00000000 	.word	0x00000000

08002230 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b08e      	sub	sp, #56	@ 0x38
 8002236:	af00      	add	r7, sp, #0
 8002238:	6278      	str	r0, [r7, #36]	@ 0x24
 800223a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800223c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002240:	2300      	movs	r3, #0
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fef8 	bl	800904c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	17da      	asrs	r2, r3, #31
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	61fa      	str	r2, [r7, #28]
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	69b9      	ldr	r1, [r7, #24]
 800226e:	000b      	movs	r3, r1
 8002270:	2200      	movs	r2, #0
 8002272:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	2200      	movs	r2, #0
 800227a:	461c      	mov	r4, r3
 800227c:	4615      	mov	r5, r2
 800227e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002282:	1911      	adds	r1, r2, r4
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	416b      	adcs	r3, r5
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800228e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002292:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	f04f 0500 	mov.w	r5, #0
 80022a2:	015d      	lsls	r5, r3, #5
 80022a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80022a8:	0154      	lsls	r4, r2, #5
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	ebb2 0800 	subs.w	r8, r2, r0
 80022b2:	eb63 0901 	sbc.w	r9, r3, r1
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80022c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80022c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80022ca:	4690      	mov	r8, r2
 80022cc:	4699      	mov	r9, r3
 80022ce:	eb18 0a00 	adds.w	sl, r8, r0
 80022d2:	eb49 0b01 	adc.w	fp, r9, r1
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ea:	ebb2 040a 	subs.w	r4, r2, sl
 80022ee:	603c      	str	r4, [r7, #0]
 80022f0:	eb63 030b 	sbc.w	r3, r3, fp
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fa:	4623      	mov	r3, r4
 80022fc:	181b      	adds	r3, r3, r0
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	462b      	mov	r3, r5
 8002302:	eb41 0303 	adc.w	r3, r1, r3
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	6a3a      	ldr	r2, [r7, #32]
 800230a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800230e:	f7ff ff3f 	bl	8002190 <UTILS_NanosecondsToTimespec>

    return 0;
 8002312:	2300      	movs	r3, #0
 8002314:	4618      	mov	r0, r3
 8002316:	3738      	adds	r7, #56	@ 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_MspInit+0x54>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a11      	ldr	r2, [pc, #68]	@ (8002374 <HAL_MspInit+0x54>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_MspInit+0x54>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_MspInit+0x54>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_MspInit+0x54>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_MspInit+0x54>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	210f      	movs	r1, #15
 8002362:	f06f 0001 	mvn.w	r0, #1
 8002366:	f000 fd98 	bl	8002e9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	@ 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a47      	ldr	r2, [pc, #284]	@ (80024b4 <HAL_I2C_MspInit+0x13c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f040 8088 	bne.w	80024ac <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	4b45      	ldr	r3, [pc, #276]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	4a44      	ldr	r2, [pc, #272]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ac:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b8:	23c0      	movs	r3, #192	@ 0xc0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c8:	2304      	movs	r3, #4
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	483a      	ldr	r0, [pc, #232]	@ (80024bc <HAL_I2C_MspInit+0x144>)
 80023d4:	f001 f99a 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a35      	ldr	r2, [pc, #212]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <HAL_I2C_MspInit+0x140>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80023f4:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 80023f6:	4a33      	ldr	r2, [pc, #204]	@ (80024c4 <HAL_I2C_MspInit+0x14c>)
 80023f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80023fa:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 80023fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002400:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002402:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002404:	2240      	movs	r2, #64	@ 0x40
 8002406:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002408:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002414:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002416:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800241c:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002422:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 800242a:	2200      	movs	r2, #0
 800242c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002434:	4822      	ldr	r0, [pc, #136]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002436:	f000 fd67 	bl	8002f08 <HAL_DMA_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002440:	f7ff fe04 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 8002448:	635a      	str	r2, [r3, #52]	@ 0x34
 800244a:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_I2C_MspInit+0x148>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002452:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <HAL_I2C_MspInit+0x154>)
 8002454:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800245c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 800246c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002470:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248a:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002490:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 8002492:	f000 fd39 	bl	8002f08 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 800249c:	f7ff fdd6 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80024a6:	4a08      	ldr	r2, [pc, #32]	@ (80024c8 <HAL_I2C_MspInit+0x150>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	@ 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40005400 	.word	0x40005400
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020400 	.word	0x40020400
 80024c0:	20003f50 	.word	0x20003f50
 80024c4:	400260b8 	.word	0x400260b8
 80024c8:	20003fb0 	.word	0x20003fb0
 80024cc:	40026010 	.word	0x40026010

080024d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_TIM_Base_MspInit+0x3c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10d      	bne.n	80024fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <HAL_TIM_Base_MspInit+0x40>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <HAL_TIM_Base_MspInit+0x40>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f2:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <HAL_TIM_Base_MspInit+0x40>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40000400 	.word	0x40000400
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a12      	ldr	r2, [pc, #72]	@ (800257c <HAL_TIM_MspPostInit+0x68>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d11d      	bne.n	8002572 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_TIM_MspPostInit+0x6c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a10      	ldr	r2, [pc, #64]	@ (8002580 <HAL_TIM_MspPostInit+0x6c>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <HAL_TIM_MspPostInit+0x6c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002552:	23c0      	movs	r3, #192	@ 0xc0
 8002554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002562:	2302      	movs	r3, #2
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	@ (8002584 <HAL_TIM_MspPostInit+0x70>)
 800256e:	f001 f8cd 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40000400 	.word	0x40000400
 8002580:	40023800 	.word	0x40023800
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a75      	ldr	r2, [pc, #468]	@ (800277c <HAL_UART_MspInit+0x1f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	f040 8094 	bne.w	80026d4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	4a72      	ldr	r2, [pc, #456]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80025bc:	4b70      	ldr	r3, [pc, #448]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b69      	ldr	r3, [pc, #420]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025e4:	230c      	movs	r3, #12
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025f4:	2307      	movs	r3, #7
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	4861      	ldr	r0, [pc, #388]	@ (8002784 <HAL_UART_MspInit+0x1fc>)
 8002600:	f001 f884 	bl	800370c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002604:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002606:	4a61      	ldr	r2, [pc, #388]	@ (800278c <HAL_UART_MspInit+0x204>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800260a:	4b5f      	ldr	r3, [pc, #380]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800260c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002610:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002612:	4b5d      	ldr	r3, [pc, #372]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002618:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800261e:	4b5a      	ldr	r3, [pc, #360]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002620:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002624:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002626:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262c:	4b56      	ldr	r3, [pc, #344]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002632:	4b55      	ldr	r3, [pc, #340]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002638:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800263a:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800263c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002640:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002642:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002648:	484f      	ldr	r0, [pc, #316]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800264a:	f000 fc5d 	bl	8002f08 <HAL_DMA_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002654:	f7ff fcfa 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a4b      	ldr	r2, [pc, #300]	@ (8002788 <HAL_UART_MspInit+0x200>)
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800265e:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <HAL_UART_MspInit+0x200>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002664:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <HAL_UART_MspInit+0x208>)
 8002666:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <HAL_UART_MspInit+0x20c>)
 8002668:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800266a:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <HAL_UART_MspInit+0x208>)
 800266c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002670:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_UART_MspInit+0x208>)
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b45      	ldr	r3, [pc, #276]	@ (8002790 <HAL_UART_MspInit+0x208>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b44      	ldr	r3, [pc, #272]	@ (8002790 <HAL_UART_MspInit+0x208>)
 8002680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_UART_MspInit+0x208>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <HAL_UART_MspInit+0x208>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002692:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <HAL_UART_MspInit+0x208>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002698:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_UART_MspInit+0x208>)
 800269a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800269e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_UART_MspInit+0x208>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026a6:	483a      	ldr	r0, [pc, #232]	@ (8002790 <HAL_UART_MspInit+0x208>)
 80026a8:	f000 fc2e 	bl	8002f08 <HAL_DMA_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80026b2:	f7ff fccb 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a35      	ldr	r2, [pc, #212]	@ (8002790 <HAL_UART_MspInit+0x208>)
 80026ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80026bc:	4a34      	ldr	r2, [pc, #208]	@ (8002790 <HAL_UART_MspInit+0x208>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2105      	movs	r1, #5
 80026c6:	2026      	movs	r0, #38	@ 0x26
 80026c8:	f000 fbe7 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026cc:	2026      	movs	r0, #38	@ 0x26
 80026ce:	f000 fc00 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026d2:	e04f      	b.n	8002774 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002798 <HAL_UART_MspInit+0x210>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d14a      	bne.n	8002774 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_UART_MspInit+0x1f8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002732:	2320      	movs	r3, #32
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002742:	2307      	movs	r3, #7
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4813      	ldr	r0, [pc, #76]	@ (800279c <HAL_UART_MspInit+0x214>)
 800274e:	f000 ffdd 	bl	800370c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002764:	2307      	movs	r3, #7
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <HAL_UART_MspInit+0x218>)
 8002770:	f000 ffcc 	bl	800370c <HAL_GPIO_Init>
}
 8002774:	bf00      	nop
 8002776:	3730      	adds	r7, #48	@ 0x30
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40004400 	.word	0x40004400
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000
 8002788:	200040e8 	.word	0x200040e8
 800278c:	40026088 	.word	0x40026088
 8002790:	20004148 	.word	0x20004148
 8002794:	400260a0 	.word	0x400260a0
 8002798:	40004800 	.word	0x40004800
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020400 	.word	0x40020400

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <NMI_Handler+0x4>

080027ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <MemManage_Handler+0x4>

080027bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <UsageFault_Handler+0x4>

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027de:	f000 fa3d 	bl	8002c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027e2:	f006 fdb7 	bl	8009354 <xTaskGetSchedulerState>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027ec:	f007 fbac 	bl	8009f48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <DMA1_Stream0_IRQHandler+0x10>)
 80027fa:	f000 fd1d 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20003fb0 	.word	0x20003fb0

08002808 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <DMA1_Stream5_IRQHandler+0x10>)
 800280e:	f000 fd13 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200040e8 	.word	0x200040e8

0800281c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <DMA1_Stream6_IRQHandler+0x10>)
 8002822:	f000 fd09 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20004148 	.word	0x20004148

08002830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <USART2_IRQHandler+0x10>)
 8002836:	f003 ff0f 	bl	8006658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20004058 	.word	0x20004058

08002844 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA1_Stream7_IRQHandler+0x10>)
 800284a:	f000 fcf5 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20003f50 	.word	0x20003f50

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_kill>:

int _kill(int pid, int sig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002872:	f014 ff97 	bl	80177a4 <__errno>
 8002876:	4603      	mov	r3, r0
 8002878:	2216      	movs	r2, #22
 800287a:	601a      	str	r2, [r3, #0]
  return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_exit>:

void _exit (int status)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ffe7 	bl	8002868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <_exit+0x12>

0800289e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e00a      	b.n	80028c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b0:	f3af 8000 	nop.w
 80028b4:	4601      	mov	r1, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dbf0      	blt.n	80028b0 <_read+0x12>
  }

  return len;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e009      	b.n	80028fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	60ba      	str	r2, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf1      	blt.n	80028ea <_write+0x12>
  }
  return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_close>:

int _close(int file)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002938:	605a      	str	r2, [r3, #4]
  return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_isatty>:

int _isatty(int file)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f014 fefc 	bl	80177a4 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20020000 	.word	0x20020000
 80029d8:	00000400 	.word	0x00000400
 80029dc:	200041dc 	.word	0x200041dc
 80029e0:	2000e008 	.word	0x2000e008

080029e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a16:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002a18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a1c:	4904      	ldr	r1, [pc, #16]	@ (8002a30 <cubemx_transport_open+0x28>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f003 fd76 	bl	8006510 <HAL_UART_Receive_DMA>
    return true;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200041e0 	.word	0x200041e0

08002a34 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a42:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f003 fd88 	bl	800655a <HAL_UART_DMAStop>
    return true;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a68:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d11c      	bne.n	8002ab0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f003 fcca 	bl	8006418 <HAL_UART_Transmit_DMA>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a88:	e002      	b.n	8002a90 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f005 f812 	bl	8007ab4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <cubemx_transport_write+0x4e>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d1f3      	bne.n	8002a8a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <cubemx_transport_write+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	e002      	b.n	8002ab2 <cubemx_transport_write+0x5e>
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002ab0:	2300      	movs	r3, #0
    }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ad0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad6:	b672      	cpsid	i
}
 8002ad8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b58 <cubemx_transport_read+0x9c>)
 8002ae8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aea:	b662      	cpsie	i
}
 8002aec:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f004 ffdd 	bl	8007ab4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <cubemx_transport_read+0xa0>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <cubemx_transport_read+0x9c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d103      	bne.n	8002b0e <cubemx_transport_read+0x52>
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbe3      	blt.n	8002ad6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b12:	e011      	b.n	8002b38 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <cubemx_transport_read+0xa0>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	440b      	add	r3, r1
 8002b1e:	4910      	ldr	r1, [pc, #64]	@ (8002b60 <cubemx_transport_read+0xa4>)
 8002b20:	5c8a      	ldrb	r2, [r1, r2]
 8002b22:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002b24:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <cubemx_transport_read+0xa0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <cubemx_transport_read+0xa0>)
 8002b30:	6013      	str	r3, [r2, #0]
        wrote++;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <cubemx_transport_read+0xa0>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <cubemx_transport_read+0x9c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d003      	beq.n	8002b4c <cubemx_transport_read+0x90>
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3e3      	bcc.n	8002b14 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200049e4 	.word	0x200049e4
 8002b5c:	200049e0 	.word	0x200049e0
 8002b60:	200041e0 	.word	0x200041e0

08002b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b68:	f7ff ff3c 	bl	80029e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b6c:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b6e:	490d      	ldr	r1, [pc, #52]	@ (8002ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b74:	e002      	b.n	8002b7c <LoopCopyDataInit>

08002b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7a:	3304      	adds	r3, #4

08002b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b80:	d3f9      	bcc.n	8002b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b82:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b84:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b88:	e001      	b.n	8002b8e <LoopFillZerobss>

08002b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b8c:	3204      	adds	r2, #4

08002b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b90:	d3fb      	bcc.n	8002b8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b92:	f014 fe0d 	bl	80177b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b96:	f7fe fe6b 	bl	8001870 <main>
  bx  lr    
 8002b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002ba8:	0801949c 	.word	0x0801949c
  ldr r2, =_sbss
 8002bac:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002bb0:	2000e004 	.word	0x2000e004

08002bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <HAL_Init+0x40>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <HAL_Init+0x40>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	@ (8002bf8 <HAL_Init+0x40>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f94f 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fb98 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f967 	bl	8002eee <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c38:	f000 f92f 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	@ (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	20000014 	.word	0x20000014
 8002c58:	20000010 	.word	0x20000010

08002c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_IncTick+0x20>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_IncTick+0x24>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <HAL_IncTick+0x24>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	200049e8 	.word	0x200049e8

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	@ (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	200049e8 	.word	0x200049e8

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffee 	bl	8002c84 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_Delay+0x44>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000014 	.word	0x20000014

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	@ (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	@ (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff29 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff3e 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff8e 	bl	8002dd8 <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff31 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffa2 	bl	8002e40 <SysTick_Config>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff feb6 	bl	8002c84 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e099      	b.n	8003058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f44:	e00f      	b.n	8002f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f46:	f7ff fe9d 	bl	8002c84 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d908      	bls.n	8002f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e078      	b.n	8003058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e8      	bne.n	8002f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <HAL_DMA_Init+0x158>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d117      	bne.n	800302a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb01 	bl	8003614 <DMA_CheckFifoParam>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003026:	2301      	movs	r3, #1
 8003028:	e016      	b.n	8003058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fab8 	bl	80035a8 <DMA_CalcBaseAndBitshift>
 8003038:	4603      	mov	r3, r0
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	223f      	movs	r2, #63	@ 0x3f
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	f010803f 	.word	0xf010803f

08003064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_DMA_Start_IT+0x26>
 8003086:	2302      	movs	r3, #2
 8003088:	e040      	b.n	800310c <HAL_DMA_Start_IT+0xa8>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d12f      	bne.n	80030fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa4a 	bl	800354c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	223f      	movs	r2, #63	@ 0x3f
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0216 	orr.w	r2, r2, #22
 80030d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0208 	orr.w	r2, r2, #8
 80030ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e005      	b.n	800310a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003122:	f7ff fdaf 	bl	8002c84 <HAL_GetTick>
 8003126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e052      	b.n	80031ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_Abort+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	e013      	b.n	80031c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003198:	f7ff fd74 	bl	8002c84 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d90c      	bls.n	80031c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e015      	b.n	80031ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e4      	bne.n	8003198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	223f      	movs	r2, #63	@ 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2280      	movs	r2, #128	@ 0x80
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00c      	b.n	800322c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003244:	4b8e      	ldr	r3, [pc, #568]	@ (8003480 <HAL_DMA_IRQHandler+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a8e      	ldr	r2, [pc, #568]	@ (8003484 <HAL_DMA_IRQHandler+0x24c>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	2208      	movs	r2, #8
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2208      	movs	r2, #8
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	2204      	movs	r2, #4
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2210      	movs	r2, #16
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d043      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03c      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2210      	movs	r2, #16
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e01f      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e016      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0208 	bic.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	2220      	movs	r2, #32
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 808f 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8087 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	2220      	movs	r2, #32
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d136      	bne.n	8003450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0216 	bic.w	r2, r2, #22
 80033f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_DMA_IRQHandler+0x1da>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0208 	bic.w	r2, r2, #8
 8003420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	223f      	movs	r2, #63	@ 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
        }
        return;
 800344e:	e079      	b.n	8003544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e02c      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c
 8003484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e01e      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d032      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2205      	movs	r2, #5
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f2      	bne.n	8003504 <HAL_DMA_IRQHandler+0x2cc>
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003544:	bf00      	nop
    }
  }
}
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b40      	cmp	r3, #64	@ 0x40
 8003578:	d108      	bne.n	800358c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358a:	e007      	b.n	800359c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3b10      	subs	r3, #16
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <DMA_CalcBaseAndBitshift+0x64>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c2:	4a13      	ldr	r2, [pc, #76]	@ (8003610 <DMA_CalcBaseAndBitshift+0x68>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d909      	bls.n	80035ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e8:	e007      	b.n	80035fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	aaaaaaab 	.word	0xaaaaaaab
 8003610:	080186c4 	.word	0x080186c4

08003614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11f      	bne.n	800366e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d856      	bhi.n	80036e2 <DMA_CheckFifoParam+0xce>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <DMA_CheckFifoParam+0x28>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	0800365f 	.word	0x0800365f
 8003644:	0800364d 	.word	0x0800364d
 8003648:	080036e3 	.word	0x080036e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d046      	beq.n	80036e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365c:	e043      	b.n	80036e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003666:	d140      	bne.n	80036ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e03d      	b.n	80036ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003676:	d121      	bne.n	80036bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d837      	bhi.n	80036ee <DMA_CheckFifoParam+0xda>
 800367e:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <DMA_CheckFifoParam+0x70>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	08003695 	.word	0x08003695
 8003688:	0800369b 	.word	0x0800369b
 800368c:	08003695 	.word	0x08003695
 8003690:	080036ad 	.word	0x080036ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e030      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d025      	beq.n	80036f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e022      	b.n	80036f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036b4:	d11f      	bne.n	80036f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ba:	e01c      	b.n	80036f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d903      	bls.n	80036ca <DMA_CheckFifoParam+0xb6>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d003      	beq.n	80036d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c8:	e018      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      break;
 80036ce:	e015      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e00b      	b.n	80036fa <DMA_CheckFifoParam+0xe6>
      break;
 80036e2:	bf00      	nop
 80036e4:	e00a      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e008      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e006      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;   
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
    }
  } 
  
  return status; 
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	@ 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e165      	b.n	80039f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 8154 	bne.w	80039ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d005      	beq.n	800375e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375a:	2b02      	cmp	r3, #2
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80ae 	beq.w	80039ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b5d      	ldr	r3, [pc, #372]	@ (8003a0c <HAL_GPIO_Init+0x300>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a0c <HAL_GPIO_Init+0x300>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038a2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a0c <HAL_GPIO_Init+0x300>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003a14 <HAL_GPIO_Init+0x308>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d025      	beq.n	8003926 <HAL_GPIO_Init+0x21a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003a18 <HAL_GPIO_Init+0x30c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <HAL_GPIO_Init+0x216>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4d      	ldr	r2, [pc, #308]	@ (8003a1c <HAL_GPIO_Init+0x310>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003a20 <HAL_GPIO_Init+0x314>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x20e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a24 <HAL_GPIO_Init+0x318>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x20a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003a28 <HAL_GPIO_Init+0x31c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x206>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a49      	ldr	r2, [pc, #292]	@ (8003a2c <HAL_GPIO_Init+0x320>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x202>
 800390a:	2306      	movs	r3, #6
 800390c:	e00c      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800390e:	2307      	movs	r3, #7
 8003910:	e00a      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003912:	2305      	movs	r3, #5
 8003914:	e008      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003916:	2304      	movs	r3, #4
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800391a:	2303      	movs	r3, #3
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003926:	2300      	movs	r3, #0
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	f002 0203 	and.w	r2, r2, #3
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	4093      	lsls	r3, r2
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003938:	4935      	ldr	r1, [pc, #212]	@ (8003a10 <HAL_GPIO_Init+0x304>)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003946:	4b3a      	ldr	r3, [pc, #232]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396a:	4a31      	ldr	r2, [pc, #196]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003970:	4b2f      	ldr	r3, [pc, #188]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003994:	4a26      	ldr	r2, [pc, #152]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399a:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e8:	4a11      	ldr	r2, [pc, #68]	@ (8003a30 <HAL_GPIO_Init+0x324>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3301      	adds	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	f67f ae96 	bls.w	8003728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3724      	adds	r7, #36	@ 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40013800 	.word	0x40013800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020c00 	.word	0x40020c00
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40021400 	.word	0x40021400
 8003a2c:	40021800 	.word	0x40021800
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
 8003a40:	4613      	mov	r3, r2
 8003a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a44:	787b      	ldrb	r3, [r7, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a50:	e003      	b.n	8003a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e12b      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fc72 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	@ 0x24
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003acc:	f001 f8d2 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a81      	ldr	r2, [pc, #516]	@ (8003cdc <HAL_I2C_Init+0x274>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d807      	bhi.n	8003aec <HAL_I2C_Init+0x84>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a80      	ldr	r2, [pc, #512]	@ (8003ce0 <HAL_I2C_Init+0x278>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e006      	b.n	8003afa <HAL_I2C_Init+0x92>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce4 <HAL_I2C_Init+0x27c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0e7      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a78      	ldr	r2, [pc, #480]	@ (8003ce8 <HAL_I2C_Init+0x280>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0c9b      	lsrs	r3, r3, #18
 8003b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a6a      	ldr	r2, [pc, #424]	@ (8003cdc <HAL_I2C_Init+0x274>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d802      	bhi.n	8003b3c <HAL_I2C_Init+0xd4>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	e009      	b.n	8003b50 <HAL_I2C_Init+0xe8>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	4a69      	ldr	r2, [pc, #420]	@ (8003cec <HAL_I2C_Init+0x284>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	3301      	adds	r3, #1
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	495c      	ldr	r1, [pc, #368]	@ (8003cdc <HAL_I2C_Init+0x274>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d819      	bhi.n	8003ba4 <HAL_I2C_Init+0x13c>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e59      	subs	r1, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7e:	1c59      	adds	r1, r3, #1
 8003b80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b84:	400b      	ands	r3, r1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_I2C_Init+0x138>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e59      	subs	r1, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	e051      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e04f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d111      	bne.n	8003bd0 <HAL_I2C_Init+0x168>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1e58      	subs	r0, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e012      	b.n	8003bf6 <HAL_I2C_Init+0x18e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	0099      	lsls	r1, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Init+0x196>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10e      	bne.n	8003c24 <HAL_I2C_Init+0x1bc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e58      	subs	r0, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c22:	e00f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	6809      	ldr	r1, [r1, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6911      	ldr	r1, [r2, #16]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	000186a0 	.word	0x000186a0
 8003ce0:	001e847f 	.word	0x001e847f
 8003ce4:	003d08ff 	.word	0x003d08ff
 8003ce8:	431bde83 	.word	0x431bde83
 8003cec:	10624dd3 	.word	0x10624dd3

08003cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	817b      	strh	r3, [r7, #10]
 8003d00:	4613      	mov	r3, r2
 8003d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7fe ffbe 	bl	8002c84 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	f040 80e0 	bne.w	8003ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2319      	movs	r3, #25
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4970      	ldr	r1, [pc, #448]	@ (8003ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fc7e 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0d3      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2C_Master_Transmit+0x50>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e0cc      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d007      	beq.n	8003d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0201 	orr.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2221      	movs	r2, #33	@ 0x21
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2210      	movs	r2, #16
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	893a      	ldrh	r2, [r7, #8]
 8003d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a50      	ldr	r2, [pc, #320]	@ (8003ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003da6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003da8:	8979      	ldrh	r1, [r7, #10]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 face 	bl	8004350 <I2C_MasterRequestWrite>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e08d      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003dd4:	e066      	b.n	8003ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	6a39      	ldr	r1, [r7, #32]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fd3c 	bl	8004858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d107      	bne.n	8003dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06b      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d11b      	bne.n	8003e78 <HAL_I2C_Master_Transmit+0x188>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	6a39      	ldr	r1, [r7, #32]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fd33 	bl	80048e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e01a      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d194      	bne.n	8003dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	00100002 	.word	0x00100002
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f06:	f7fe febd 	bl	8002c84 <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	f040 8214 	bne.w	8004342 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2319      	movs	r3, #25
 8003f20:	2201      	movs	r2, #1
 8003f22:	497b      	ldr	r1, [pc, #492]	@ (8004110 <HAL_I2C_Mem_Read+0x224>)
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb7d 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	e207      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Mem_Read+0x56>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e200      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d007      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2222      	movs	r2, #34	@ 0x22
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8004114 <HAL_I2C_Mem_Read+0x228>)
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003faa:	88f8      	ldrh	r0, [r7, #6]
 8003fac:	893a      	ldrh	r2, [r7, #8]
 8003fae:	8979      	ldrh	r1, [r7, #10]
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4603      	mov	r3, r0
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fa4a 	bl	8004454 <I2C_RequestMemoryRead>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e1bc      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d113      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e190      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d11b      	bne.n	800403a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e170      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	2b02      	cmp	r3, #2
 8004040:	d11b      	bne.n	800407a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	e150      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004090:	e144      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	2b03      	cmp	r3, #3
 8004098:	f200 80f1 	bhi.w	800427e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d123      	bne.n	80040ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fc65 	bl	8004978 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e145      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040ea:	e117      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d14e      	bne.n	8004192 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	2200      	movs	r2, #0
 80040fc:	4906      	ldr	r1, [pc, #24]	@ (8004118 <HAL_I2C_Mem_Read+0x22c>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa90 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e11a      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
 800410e:	bf00      	nop
 8004110:	00100002 	.word	0x00100002
 8004114:	ffff0000 	.word	0xffff0000
 8004118:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004190:	e0c4      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004198:	2200      	movs	r2, #0
 800419a:	496c      	ldr	r1, [pc, #432]	@ (800434c <HAL_I2C_Mem_Read+0x460>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fa41 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cb      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	2200      	movs	r2, #0
 80041f6:	4955      	ldr	r1, [pc, #340]	@ (800434c <HAL_I2C_Mem_Read+0x460>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fa13 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e09d      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800427c:	e04e      	b.n	800431c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb78 	bl	8004978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e058      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d124      	bne.n	800431c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d107      	bne.n	80042ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f aeb6 	bne.w	8004092 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3728      	adds	r7, #40	@ 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	00010004 	.word	0x00010004

08004350 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d006      	beq.n	800437a <I2C_MasterRequestWrite+0x2a>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d003      	beq.n	800437a <I2C_MasterRequestWrite+0x2a>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004378:	d108      	bne.n	800438c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e00b      	b.n	80043a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	2b12      	cmp	r3, #18
 8004392:	d107      	bne.n	80043a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f937 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d103      	bne.n	80043d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e035      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043e0:	d108      	bne.n	80043f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e01b      	b.n	800442c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	11db      	asrs	r3, r3, #7
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f063 030f 	orn	r3, r3, #15
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <I2C_MasterRequestWrite+0xfc>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f980 	bl	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e010      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4907      	ldr	r1, [pc, #28]	@ (8004450 <I2C_MasterRequestWrite+0x100>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f970 	bl	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	00010008 	.word	0x00010008
 8004450:	00010002 	.word	0x00010002

08004454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	4608      	mov	r0, r1
 800445e:	4611      	mov	r1, r2
 8004460:	461a      	mov	r2, r3
 8004462:	4603      	mov	r3, r0
 8004464:	817b      	strh	r3, [r7, #10]
 8004466:	460b      	mov	r3, r1
 8004468:	813b      	strh	r3, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800447c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800448c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2200      	movs	r2, #0
 8004496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8c2 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b4:	d103      	bne.n	80044be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0aa      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	4952      	ldr	r1, [pc, #328]	@ (8004620 <I2C_RequestMemoryRead+0x1cc>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f91d 	bl	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e097      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f9a8 	bl	8004858 <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e076      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	e021      	b.n	8004580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	b29b      	uxth	r3, r3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454c:	6a39      	ldr	r1, [r7, #32]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f982 	bl	8004858 <I2C_WaitOnTXEFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	2b04      	cmp	r3, #4
 8004560:	d107      	bne.n	8004572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e050      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004576:	893b      	ldrh	r3, [r7, #8]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004582:	6a39      	ldr	r1, [r7, #32]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f967 	bl	8004858 <I2C_WaitOnTXEFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	2b04      	cmp	r3, #4
 8004596:	d107      	bne.n	80045a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e035      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f82b 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e2:	d103      	bne.n	80045ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e013      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	6a3a      	ldr	r2, [r7, #32]
 8004604:	4906      	ldr	r1, [pc, #24]	@ (8004620 <I2C_RequestMemoryRead+0x1cc>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f886 	bl	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	00010002 	.word	0x00010002

08004624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	e048      	b.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800463c:	d044      	beq.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fe fb21 	bl	8002c84 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d139      	bne.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10d      	bne.n	800467a <I2C_WaitOnFlagUntilTimeout+0x56>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	43da      	mvns	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	e00c      	b.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x70>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	43da      	mvns	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4013      	ands	r3, r2
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	429a      	cmp	r2, r3
 8004698:	d116      	bne.n	80046c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e023      	b.n	8004710 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10d      	bne.n	80046ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	43da      	mvns	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	e00c      	b.n	8004708 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	43da      	mvns	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	429a      	cmp	r2, r3
 800470c:	d093      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004726:	e071      	b.n	800480c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004736:	d123      	bne.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e067      	b.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004786:	d041      	beq.n	800480c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004788:	f7fe fa7c 	bl	8002c84 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d302      	bcc.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d136      	bne.n	800480c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d10c      	bne.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e00b      	b.n	80047da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	43da      	mvns	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4013      	ands	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e021      	b.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d10c      	bne.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e00b      	b.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4013      	ands	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf14      	ite	ne
 8004842:	2301      	movne	r3, #1
 8004844:	2300      	moveq	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f af6d 	bne.w	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004864:	e034      	b.n	80048d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8e3 	bl	8004a32 <I2C_IsAcknowledgeFailed>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800487c:	d028      	beq.n	80048d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fe fa01 	bl	8002c84 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11d      	bne.n	80048d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489e:	2b80      	cmp	r3, #128	@ 0x80
 80048a0:	d016      	beq.n	80048d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e007      	b.n	80048e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048da:	2b80      	cmp	r3, #128	@ 0x80
 80048dc:	d1c3      	bne.n	8004866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f4:	e034      	b.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f89b 	bl	8004a32 <I2C_IsAcknowledgeFailed>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e034      	b.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800490c:	d028      	beq.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe f9b9 	bl	8002c84 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11d      	bne.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b04      	cmp	r3, #4
 8004930:	d016      	beq.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e007      	b.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d1c3      	bne.n	80048f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004984:	e049      	b.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d119      	bne.n	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0210 	mvn.w	r2, #16
 800499c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e030      	b.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fe f95c 	bl	8002c84 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11d      	bne.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b40      	cmp	r3, #64	@ 0x40
 80049ea:	d016      	beq.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e007      	b.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	2b40      	cmp	r3, #64	@ 0x40
 8004a26:	d1ae      	bne.n	8004986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a48:	d11b      	bne.n	8004a82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0cc      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b68      	ldr	r3, [pc, #416]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d90c      	bls.n	8004acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b65      	ldr	r3, [pc, #404]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b63      	ldr	r3, [pc, #396]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0b8      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae4:	4b59      	ldr	r3, [pc, #356]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a58      	ldr	r2, [pc, #352]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004afc:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a52      	ldr	r2, [pc, #328]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b50      	ldr	r3, [pc, #320]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	494d      	ldr	r1, [pc, #308]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d044      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	4b47      	ldr	r3, [pc, #284]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d119      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e067      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4934      	ldr	r1, [pc, #208]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b80:	f7fe f880 	bl	8002c84 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fe f87c 	bl	8002c84 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e04f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b25      	ldr	r3, [pc, #148]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d20c      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e032      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be4:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4916      	ldr	r1, [pc, #88]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	490e      	ldr	r1, [pc, #56]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c16:	f000 f855 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	5ccb      	ldrb	r3, [r1, r3]
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a09      	ldr	r2, [pc, #36]	@ (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_ClockConfig+0x1c8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd ffe0 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40023c00 	.word	0x40023c00
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	080186ac 	.word	0x080186ac
 8004c54:	2000000c 	.word	0x2000000c
 8004c58:	20000010 	.word	0x20000010

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b03      	ldr	r3, [pc, #12]	@ (8004c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff0 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	@ (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	080186bc 	.word	0x080186bc

08004c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca0:	f7ff ffdc 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0b5b      	lsrs	r3, r3, #13
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	@ (8004cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	080186bc 	.word	0x080186bc

08004cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b0ae      	sub	sp, #184	@ 0xb8
 8004cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cea:	4bcb      	ldr	r3, [pc, #812]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	f200 8206 	bhi.w	8005104 <HAL_RCC_GetSysClockFreq+0x440>
 8004cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08005105 	.word	0x08005105
 8004d08:	08005105 	.word	0x08005105
 8004d0c:	08005105 	.word	0x08005105
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08005105 	.word	0x08005105
 8004d18:	08005105 	.word	0x08005105
 8004d1c:	08005105 	.word	0x08005105
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08005105 	.word	0x08005105
 8004d28:	08005105 	.word	0x08005105
 8004d2c:	08005105 	.word	0x08005105
 8004d30:	08004f35 	.word	0x08004f35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4bb9      	ldr	r3, [pc, #740]	@ (800501c <HAL_RCC_GetSysClockFreq+0x358>)
 8004d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d3a:	e1e7      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d3c:	4bb8      	ldr	r3, [pc, #736]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d42:	e1e3      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d44:	4bb4      	ldr	r3, [pc, #720]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	4bb1      	ldr	r3, [pc, #708]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d071      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4bae      	ldr	r3, [pc, #696]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	f04f 0000 	mov.w	r0, #0
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	0159      	lsls	r1, r3, #5
 8004d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d94:	0150      	lsls	r0, r2, #5
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	1a51      	subs	r1, r2, r1
 8004d9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004da0:	4629      	mov	r1, r5
 8004da2:	eb63 0301 	sbc.w	r3, r3, r1
 8004da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004db4:	4649      	mov	r1, r9
 8004db6:	018b      	lsls	r3, r1, #6
 8004db8:	4641      	mov	r1, r8
 8004dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	018a      	lsls	r2, r1, #6
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1a51      	subs	r1, r2, r1
 8004dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dc8:	4649      	mov	r1, r9
 8004dca:	eb63 0301 	sbc.w	r3, r3, r1
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ddc:	4649      	mov	r1, r9
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4641      	mov	r1, r8
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4622      	mov	r2, r4
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df6:	462b      	mov	r3, r5
 8004df8:	460a      	mov	r2, r1
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	024b      	lsls	r3, r1, #9
 8004e10:	4621      	mov	r1, r4
 8004e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e16:	4621      	mov	r1, r4
 8004e18:	024a      	lsls	r2, r1, #9
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004e30:	f7fb fe5c 	bl	8000aec <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e3e:	e067      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e40:	4b75      	ldr	r3, [pc, #468]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	f04f 0000 	mov.w	r0, #0
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	0159      	lsls	r1, r3, #5
 8004e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e74:	0150      	lsls	r0, r2, #5
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	1a51      	subs	r1, r2, r1
 8004e7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e80:	4629      	mov	r1, r5
 8004e82:	eb63 0301 	sbc.w	r3, r3, r1
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004e94:	4649      	mov	r1, r9
 8004e96:	018b      	lsls	r3, r1, #6
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	018a      	lsls	r2, r1, #6
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec2:	4692      	mov	sl, r2
 8004ec4:	469b      	mov	fp, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb1a 0303 	adds.w	r3, sl, r3
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	462b      	mov	r3, r5
 8004ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	028b      	lsls	r3, r1, #10
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eec:	4621      	mov	r1, r4
 8004eee:	028a      	lsls	r2, r1, #10
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ef8:	2200      	movs	r2, #0
 8004efa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004efc:	677a      	str	r2, [r7, #116]	@ 0x74
 8004efe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004f02:	f7fb fdf3 	bl	8000aec <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f10:	4b41      	ldr	r3, [pc, #260]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f32:	e0eb      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f34:	4b38      	ldr	r3, [pc, #224]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f40:	4b35      	ldr	r3, [pc, #212]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d06b      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4c:	4b32      	ldr	r3, [pc, #200]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	2200      	movs	r2, #0
 8004f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f60:	2300      	movs	r3, #0
 8004f62:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	f04f 0000 	mov.w	r0, #0
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	0159      	lsls	r1, r3, #5
 8004f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7a:	0150      	lsls	r0, r2, #5
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4621      	mov	r1, r4
 8004f82:	1a51      	subs	r1, r2, r1
 8004f84:	61b9      	str	r1, [r7, #24]
 8004f86:	4629      	mov	r1, r5
 8004f88:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	018b      	lsls	r3, r1, #6
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	018a      	lsls	r2, r1, #6
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ebb2 0801 	subs.w	r8, r2, r1
 8004fae:	4659      	mov	r1, fp
 8004fb0:	eb63 0901 	sbc.w	r9, r3, r1
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fc8:	4690      	mov	r8, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	4623      	mov	r3, r4
 8004fce:	eb18 0303 	adds.w	r3, r8, r3
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	eb49 0303 	adc.w	r3, r9, r3
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004fe8:	4629      	mov	r1, r5
 8004fea:	024b      	lsls	r3, r1, #9
 8004fec:	4621      	mov	r1, r4
 8004fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	024a      	lsls	r2, r1, #9
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ffe:	2200      	movs	r2, #0
 8005000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005002:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005008:	f7fb fd70 	bl	8000aec <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005016:	e065      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x420>
 8005018:	40023800 	.word	0x40023800
 800501c:	00f42400 	.word	0x00f42400
 8005020:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005024:	4b3d      	ldr	r3, [pc, #244]	@ (800511c <HAL_RCC_GetSysClockFreq+0x458>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	099b      	lsrs	r3, r3, #6
 800502a:	2200      	movs	r2, #0
 800502c:	4618      	mov	r0, r3
 800502e:	4611      	mov	r1, r2
 8005030:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005034:	653b      	str	r3, [r7, #80]	@ 0x50
 8005036:	2300      	movs	r3, #0
 8005038:	657b      	str	r3, [r7, #84]	@ 0x54
 800503a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	0159      	lsls	r1, r3, #5
 800504c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005050:	0150      	lsls	r0, r2, #5
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4641      	mov	r1, r8
 8005058:	1a51      	subs	r1, r2, r1
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	4649      	mov	r1, r9
 800505e:	eb63 0301 	sbc.w	r3, r3, r1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005070:	4659      	mov	r1, fp
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507a:	4651      	mov	r1, sl
 800507c:	018a      	lsls	r2, r1, #6
 800507e:	4651      	mov	r1, sl
 8005080:	1a54      	subs	r4, r2, r1
 8005082:	4659      	mov	r1, fp
 8005084:	eb63 0501 	sbc.w	r5, r3, r1
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	00eb      	lsls	r3, r5, #3
 8005092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005096:	00e2      	lsls	r2, r4, #3
 8005098:	4614      	mov	r4, r2
 800509a:	461d      	mov	r5, r3
 800509c:	4643      	mov	r3, r8
 800509e:	18e3      	adds	r3, r4, r3
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	464b      	mov	r3, r9
 80050a4:	eb45 0303 	adc.w	r3, r5, r3
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050b6:	4629      	mov	r1, r5
 80050b8:	028b      	lsls	r3, r1, #10
 80050ba:	4621      	mov	r1, r4
 80050bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050c0:	4621      	mov	r1, r4
 80050c2:	028a      	lsls	r2, r1, #10
 80050c4:	4610      	mov	r0, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050cc:	2200      	movs	r2, #0
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80050d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050d6:	f7fb fd09 	bl	8000aec <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4613      	mov	r3, r2
 80050e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80050e4:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <HAL_RCC_GetSysClockFreq+0x458>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	0f1b      	lsrs	r3, r3, #28
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80050f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005102:	e003      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800510a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005110:	4618      	mov	r0, r3
 8005112:	37b8      	adds	r7, #184	@ 0xb8
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800
 8005120:	00f42400 	.word	0x00f42400

08005124 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e28d      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8083 	beq.w	800524a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005144:	4b94      	ldr	r3, [pc, #592]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 030c 	and.w	r3, r3, #12
 800514c:	2b04      	cmp	r3, #4
 800514e:	d019      	beq.n	8005184 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005150:	4b91      	ldr	r3, [pc, #580]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
        || \
 8005158:	2b08      	cmp	r3, #8
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800515c:	4b8e      	ldr	r3, [pc, #568]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005168:	d00c      	beq.n	8005184 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516a:	4b8b      	ldr	r3, [pc, #556]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d112      	bne.n	800519c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005176:	4b88      	ldr	r3, [pc, #544]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800517e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005182:	d10b      	bne.n	800519c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	4b84      	ldr	r3, [pc, #528]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05b      	beq.n	8005248 <HAL_RCC_OscConfig+0x124>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d157      	bne.n	8005248 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e25a      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d106      	bne.n	80051b4 <HAL_RCC_OscConfig+0x90>
 80051a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e01d      	b.n	80051f0 <HAL_RCC_OscConfig+0xcc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0xb4>
 80051be:	4b76      	ldr	r3, [pc, #472]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a75      	ldr	r2, [pc, #468]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b73      	ldr	r3, [pc, #460]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a72      	ldr	r2, [pc, #456]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0xcc>
 80051d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80051ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd fd44 	bl	8002c84 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005200:	f7fd fd40 	bl	8002c84 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	@ 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e21f      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	4b61      	ldr	r3, [pc, #388]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0xdc>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fd30 	bl	8002c84 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005228:	f7fd fd2c 	bl	8002c84 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	@ 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e20b      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523a:	4b57      	ldr	r3, [pc, #348]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x104>
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d06f      	beq.n	8005336 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005256:	4b50      	ldr	r3, [pc, #320]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005262:	4b4d      	ldr	r3, [pc, #308]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
        || \
 800526a:	2b08      	cmp	r3, #8
 800526c:	d105      	bne.n	800527a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800526e:	4b4a      	ldr	r3, [pc, #296]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800527a:	4b47      	ldr	r3, [pc, #284]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d11c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005286:	4b44      	ldr	r3, [pc, #272]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005292:	4b41      	ldr	r3, [pc, #260]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x186>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e1d3      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4937      	ldr	r1, [pc, #220]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052be:	e03a      	b.n	8005336 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d020      	beq.n	800530a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c8:	4b34      	ldr	r3, [pc, #208]	@ (800539c <HAL_RCC_OscConfig+0x278>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fd fcd9 	bl	8002c84 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d6:	f7fd fcd5 	bl	8002c84 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e1b4      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f4:	4b28      	ldr	r3, [pc, #160]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4925      	ldr	r1, [pc, #148]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]
 8005308:	e015      	b.n	8005336 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800530a:	4b24      	ldr	r3, [pc, #144]	@ (800539c <HAL_RCC_OscConfig+0x278>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fd fcb8 	bl	8002c84 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005318:	f7fd fcb4 	bl	8002c84 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e193      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532a:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d036      	beq.n	80053b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d016      	beq.n	8005378 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800534a:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd fc98 	bl	8002c84 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fd fc94 	bl	8002c84 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e173      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536a:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <HAL_RCC_OscConfig+0x274>)
 800536c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x234>
 8005376:	e01b      	b.n	80053b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005378:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <HAL_RCC_OscConfig+0x27c>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7fd fc81 	bl	8002c84 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005384:	e00e      	b.n	80053a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005386:	f7fd fc7d 	bl	8002c84 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d907      	bls.n	80053a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e15c      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
 8005398:	40023800 	.word	0x40023800
 800539c:	42470000 	.word	0x42470000
 80053a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a4:	4b8a      	ldr	r3, [pc, #552]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1ea      	bne.n	8005386 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8097 	beq.w	80054ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053be:	2300      	movs	r3, #0
 80053c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c2:	4b83      	ldr	r3, [pc, #524]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	4b7f      	ldr	r3, [pc, #508]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	4a7e      	ldr	r2, [pc, #504]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80053d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80053de:	4b7c      	ldr	r3, [pc, #496]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ee:	4b79      	ldr	r3, [pc, #484]	@ (80055d4 <HAL_RCC_OscConfig+0x4b0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d118      	bne.n	800542c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fa:	4b76      	ldr	r3, [pc, #472]	@ (80055d4 <HAL_RCC_OscConfig+0x4b0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a75      	ldr	r2, [pc, #468]	@ (80055d4 <HAL_RCC_OscConfig+0x4b0>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005406:	f7fd fc3d 	bl	8002c84 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540e:	f7fd fc39 	bl	8002c84 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e118      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005420:	4b6c      	ldr	r3, [pc, #432]	@ (80055d4 <HAL_RCC_OscConfig+0x4b0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x31e>
 8005434:	4b66      	ldr	r3, [pc, #408]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005438:	4a65      	ldr	r2, [pc, #404]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005440:	e01c      	b.n	800547c <HAL_RCC_OscConfig+0x358>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b05      	cmp	r3, #5
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x340>
 800544a:	4b61      	ldr	r3, [pc, #388]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	4a60      	ldr	r2, [pc, #384]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005450:	f043 0304 	orr.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	@ 0x70
 8005456:	4b5e      	ldr	r3, [pc, #376]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	4a5d      	ldr	r2, [pc, #372]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	6713      	str	r3, [r2, #112]	@ 0x70
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0x358>
 8005464:	4b5a      	ldr	r3, [pc, #360]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	4a59      	ldr	r2, [pc, #356]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005470:	4b57      	ldr	r3, [pc, #348]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005474:	4a56      	ldr	r2, [pc, #344]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005476:	f023 0304 	bic.w	r3, r3, #4
 800547a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fd fbfe 	bl	8002c84 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	e00a      	b.n	80054a2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fd fbfa 	bl	8002c84 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0d7      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a2:	4b4b      	ldr	r3, [pc, #300]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ee      	beq.n	800548c <HAL_RCC_OscConfig+0x368>
 80054ae:	e014      	b.n	80054da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fd fbe8 	bl	8002c84 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fd fbe4 	bl	8002c84 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0c1      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ce:	4b40      	ldr	r3, [pc, #256]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ee      	bne.n	80054b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054da:	7dfb      	ldrb	r3, [r7, #23]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e0:	4b3b      	ldr	r3, [pc, #236]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	4a3a      	ldr	r2, [pc, #232]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80ad 	beq.w	8005650 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054f6:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d060      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d145      	bne.n	8005596 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550a:	4b33      	ldr	r3, [pc, #204]	@ (80055d8 <HAL_RCC_OscConfig+0x4b4>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fd fbb8 	bl	8002c84 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005518:	f7fd fbb4 	bl	8002c84 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e093      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552a:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	3b01      	subs	r3, #1
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005560:	071b      	lsls	r3, r3, #28
 8005562:	491b      	ldr	r1, [pc, #108]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <HAL_RCC_OscConfig+0x4b4>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fd fb89 	bl	8002c84 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005576:	f7fd fb85 	bl	8002c84 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e064      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005588:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x452>
 8005594:	e05c      	b.n	8005650 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005596:	4b10      	ldr	r3, [pc, #64]	@ (80055d8 <HAL_RCC_OscConfig+0x4b4>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd fb72 	bl	8002c84 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a4:	f7fd fb6e 	bl	8002c84 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e04d      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_OscConfig+0x4ac>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x480>
 80055c2:	e045      	b.n	8005650 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e040      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40007000 	.word	0x40007000
 80055d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055dc:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <HAL_RCC_OscConfig+0x538>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d030      	beq.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d129      	bne.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d122      	bne.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005614:	4293      	cmp	r3, r2
 8005616:	d119      	bne.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	3b01      	subs	r3, #1
 8005626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d10f      	bne.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d107      	bne.n	800564c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800

08005660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e041      	b.n	80056f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc ff22 	bl	80024d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 fad8 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e041      	b.n	8005794 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f839 	bl	800579c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 fa89 	bl	8005c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_TIM_PWM_Start+0x24>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e022      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d109      	bne.n	80057ee <HAL_TIM_PWM_Start+0x3e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e015      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_PWM_Start+0x58>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e008      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e07c      	b.n	800591c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0x82>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005830:	e013      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0x92>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005840:	e00b      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005850:	e003      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fce6 	bl	8006234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2d      	ldr	r2, [pc, #180]	@ (8005924 <HAL_TIM_PWM_Start+0x174>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_TIM_PWM_Start+0xcc>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <HAL_TIM_PWM_Start+0x178>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_TIM_PWM_Start+0xd0>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_TIM_PWM_Start+0xd2>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a22      	ldr	r2, [pc, #136]	@ (8005924 <HAL_TIM_PWM_Start+0x174>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a8:	d01d      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <HAL_TIM_PWM_Start+0x17c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <HAL_TIM_PWM_Start+0x180>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <HAL_TIM_PWM_Start+0x184>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a16      	ldr	r2, [pc, #88]	@ (8005928 <HAL_TIM_PWM_Start+0x178>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_TIM_PWM_Start+0x188>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x136>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a16      	ldr	r2, [pc, #88]	@ (800593c <HAL_TIM_PWM_Start+0x18c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d111      	bne.n	800590a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d010      	beq.n	800591a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005908:	e007      	b.n	800591a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40014000 	.word	0x40014000
 800593c:	40001800 	.word	0x40001800

08005940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e0ae      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b0c      	cmp	r3, #12
 800596a:	f200 809f 	bhi.w	8005aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800596e:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059a9 	.word	0x080059a9
 8005978:	08005aad 	.word	0x08005aad
 800597c:	08005aad 	.word	0x08005aad
 8005980:	08005aad 	.word	0x08005aad
 8005984:	080059e9 	.word	0x080059e9
 8005988:	08005aad 	.word	0x08005aad
 800598c:	08005aad 	.word	0x08005aad
 8005990:	08005aad 	.word	0x08005aad
 8005994:	08005a2b 	.word	0x08005a2b
 8005998:	08005aad 	.word	0x08005aad
 800599c:	08005aad 	.word	0x08005aad
 80059a0:	08005aad 	.word	0x08005aad
 80059a4:	08005a6b 	.word	0x08005a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f9f6 	bl	8005da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0208 	orr.w	r2, r2, #8
 80059c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6999      	ldr	r1, [r3, #24]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	619a      	str	r2, [r3, #24]
      break;
 80059e6:	e064      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fa46 	bl	8005e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	021a      	lsls	r2, r3, #8
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	619a      	str	r2, [r3, #24]
      break;
 8005a28:	e043      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fa9b 	bl	8005f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0208 	orr.w	r2, r2, #8
 8005a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0204 	bic.w	r2, r2, #4
 8005a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69d9      	ldr	r1, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	61da      	str	r2, [r3, #28]
      break;
 8005a68:	e023      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 faef 	bl	8006054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69d9      	ldr	r1, [r3, #28]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	021a      	lsls	r2, r3, #8
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	61da      	str	r2, [r3, #28]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b4      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x186>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd4>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	f000 8086 	beq.w	8005c36 <HAL_TIM_ConfigClockSource+0x172>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b70      	cmp	r3, #112	@ 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa6>
 8005b34:	2b70      	cmp	r3, #112	@ 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b60      	cmp	r3, #96	@ 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x11a>
 8005b3c:	2b60      	cmp	r3, #96	@ 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b50      	cmp	r3, #80	@ 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xfa>
 8005b44:	2b50      	cmp	r3, #80	@ 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x13a>
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b30      	cmp	r3, #48	@ 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b7a:	f000 fb3b 	bl	80061f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04f      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba8:	f000 fb24 	bl	80061f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fa98 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	@ 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 faf1 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fab7 	bl	800615e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	@ 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fae1 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fa78 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	@ 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fad1 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 fac8 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a43      	ldr	r2, [pc, #268]	@ (8005d74 <TIM_Base_SetConfig+0x120>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d00f      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a40      	ldr	r2, [pc, #256]	@ (8005d78 <TIM_Base_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d7c <TIM_Base_SetConfig+0x128>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3e      	ldr	r2, [pc, #248]	@ (8005d80 <TIM_Base_SetConfig+0x12c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8005d84 <TIM_Base_SetConfig+0x130>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a32      	ldr	r2, [pc, #200]	@ (8005d74 <TIM_Base_SetConfig+0x120>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb4:	d027      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <TIM_Base_SetConfig+0x124>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d023      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005d7c <TIM_Base_SetConfig+0x128>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <TIM_Base_SetConfig+0x12c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <TIM_Base_SetConfig+0x130>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <TIM_Base_SetConfig+0x134>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d8c <TIM_Base_SetConfig+0x138>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a29      	ldr	r2, [pc, #164]	@ (8005d90 <TIM_Base_SetConfig+0x13c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a28      	ldr	r2, [pc, #160]	@ (8005d94 <TIM_Base_SetConfig+0x140>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a27      	ldr	r2, [pc, #156]	@ (8005d98 <TIM_Base_SetConfig+0x144>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <TIM_Base_SetConfig+0x148>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a0e      	ldr	r2, [pc, #56]	@ (8005d74 <TIM_Base_SetConfig+0x120>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0xf2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a10      	ldr	r2, [pc, #64]	@ (8005d84 <TIM_Base_SetConfig+0x130>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d103      	bne.n	8005d4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40001800 	.word	0x40001800
 8005d98:	40001c00 	.word	0x40001c00
 8005d9c:	40002000 	.word	0x40002000

08005da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0201 	bic.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f023 0302 	bic.w	r3, r3, #2
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a20      	ldr	r2, [pc, #128]	@ (8005e78 <TIM_OC1_SetConfig+0xd8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_OC1_SetConfig+0x64>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <TIM_OC1_SetConfig+0xdc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10c      	bne.n	8005e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0308 	bic.w	r3, r3, #8
 8005e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0304 	bic.w	r3, r3, #4
 8005e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <TIM_OC1_SetConfig+0xd8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC1_SetConfig+0x8e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <TIM_OC1_SetConfig+0xdc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d111      	bne.n	8005e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 0210 	bic.w	r2, r3, #16
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0320 	bic.w	r3, r3, #32
 8005eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <TIM_OC2_SetConfig+0xe4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC2_SetConfig+0x68>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	@ (8005f68 <TIM_OC2_SetConfig+0xe8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10d      	bne.n	8005f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a17      	ldr	r2, [pc, #92]	@ (8005f64 <TIM_OC2_SetConfig+0xe4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC2_SetConfig+0x94>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a16      	ldr	r2, [pc, #88]	@ (8005f68 <TIM_OC2_SetConfig+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d113      	bne.n	8005f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40010400 	.word	0x40010400

08005f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a21      	ldr	r2, [pc, #132]	@ (800604c <TIM_OC3_SetConfig+0xe0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC3_SetConfig+0x66>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a20      	ldr	r2, [pc, #128]	@ (8006050 <TIM_OC3_SetConfig+0xe4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10d      	bne.n	8005fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a16      	ldr	r2, [pc, #88]	@ (800604c <TIM_OC3_SetConfig+0xe0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC3_SetConfig+0x92>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <TIM_OC3_SetConfig+0xe4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d113      	bne.n	8006026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800600c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a12      	ldr	r2, [pc, #72]	@ (80060f8 <TIM_OC4_SetConfig+0xa4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a11      	ldr	r2, [pc, #68]	@ (80060fc <TIM_OC4_SetConfig+0xa8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d109      	bne.n	80060d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	019b      	lsls	r3, r3, #6
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400

08006100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 0210 	bic.w	r2, r3, #16
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f043 0307 	orr.w	r3, r3, #7
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	021a      	lsls	r2, r3, #8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	431a      	orrs	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	609a      	str	r2, [r3, #8]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2201      	movs	r2, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1a      	ldr	r2, [r3, #32]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e05a      	b.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a21      	ldr	r2, [pc, #132]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e4:	d01d      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a18      	ldr	r2, [pc, #96]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a15      	ldr	r2, [pc, #84]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10c      	bne.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4313      	orrs	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40010400 	.word	0x40010400
 8006370:	40014000 	.word	0x40014000
 8006374:	40001800 	.word	0x40001800

08006378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e042      	b.n	8006410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc f8f2 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2224      	movs	r2, #36	@ 0x24
 80063a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fff5 	bl	80073ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	@ 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b20      	cmp	r3, #32
 8006430:	d162      	bne.n	80064f8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_UART_Transmit_DMA+0x26>
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e05b      	b.n	80064fa <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	88fa      	ldrh	r2, [r7, #6]
 800644c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2221      	movs	r2, #33	@ 0x21
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	4a27      	ldr	r2, [pc, #156]	@ (8006504 <HAL_UART_Transmit_DMA+0xec>)
 8006468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646e:	4a26      	ldr	r2, [pc, #152]	@ (8006508 <HAL_UART_Transmit_DMA+0xf0>)
 8006470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	4a25      	ldr	r2, [pc, #148]	@ (800650c <HAL_UART_Transmit_DMA+0xf4>)
 8006478:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	2200      	movs	r2, #0
 8006480:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3304      	adds	r3, #4
 8006496:	461a      	mov	r2, r3
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	f7fc fde3 	bl	8003064 <HAL_DMA_Start_IT>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2210      	movs	r2, #16
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e021      	b.n	80064fa <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	617b      	str	r3, [r7, #20]
   return(result);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3314      	adds	r3, #20
 80064de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80064e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	@ 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08006c29 	.word	0x08006c29
 8006508:	08006cc3 	.word	0x08006cc3
 800650c:	08006e47 	.word	0x08006e47

08006510 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b20      	cmp	r3, #32
 8006528:	d112      	bne.n	8006550 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_UART_Receive_DMA+0x26>
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e00b      	b.n	8006552 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	461a      	mov	r2, r3
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fcc8 	bl	8006edc <UART_Start_Receive_DMA>
 800654c:	4603      	mov	r3, r0
 800654e:	e000      	b.n	8006552 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b090      	sub	sp, #64	@ 0x40
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006570:	2b80      	cmp	r3, #128	@ 0x80
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b21      	cmp	r3, #33	@ 0x21
 8006586:	d128      	bne.n	80065da <HAL_UART_DMAStop+0x80>
 8006588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d025      	beq.n	80065da <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	623b      	str	r3, [r7, #32]
   return(result);
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fc fda0 	bl	8003114 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fd27 	bl	8007028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b22      	cmp	r3, #34	@ 0x22
 80065fa:	d128      	bne.n	800664e <HAL_UART_DMAStop+0xf4>
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d025      	beq.n	800664e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	60fb      	str	r3, [r7, #12]
   return(result);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006622:	61fa      	str	r2, [r7, #28]
 8006624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	69b9      	ldr	r1, [r7, #24]
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	617b      	str	r3, [r7, #20]
   return(result);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006642:	4618      	mov	r0, r3
 8006644:	f7fc fd66 	bl	8003114 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fd15 	bl	8007078 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3740      	adds	r7, #64	@ 0x40
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b0ba      	sub	sp, #232	@ 0xe8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800667e:	2300      	movs	r3, #0
 8006680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10f      	bne.n	80066be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_UART_IRQHandler+0x66>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fdba 	bl	8007230 <UART_Receive_IT>
      return;
 80066bc:	e273      	b.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80de 	beq.w	8006884 <HAL_UART_IRQHandler+0x22c>
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80d1 	beq.w	8006884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <HAL_UART_IRQHandler+0xae>
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <HAL_UART_IRQHandler+0xd2>
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f043 0202 	orr.w	r2, r3, #2
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <HAL_UART_IRQHandler+0xf6>
 8006736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <HAL_UART_IRQHandler+0x126>
 800675a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f043 0208 	orr.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 820a 	beq.w	8006b9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_UART_IRQHandler+0x14e>
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd45 	bl	8007230 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b0:	2b40      	cmp	r3, #64	@ 0x40
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <HAL_UART_IRQHandler+0x17a>
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04f      	beq.n	8006872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fc50 	bl	8007078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e2:	2b40      	cmp	r3, #64	@ 0x40
 80067e4:	d141      	bne.n	800686a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3314      	adds	r3, #20
 800680e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800681e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800682a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1d9      	bne.n	80067e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d013      	beq.n	8006862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800683e:	4a8a      	ldr	r2, [pc, #552]	@ (8006a68 <HAL_UART_IRQHandler+0x410>)
 8006840:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006846:	4618      	mov	r0, r3
 8006848:	f7fc fcd4 	bl	80031f4 <HAL_DMA_Abort_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e00e      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9ca 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	e00a      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9c6 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	e006      	b.n	8006880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9c2 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800687e:	e18d      	b.n	8006b9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	bf00      	nop
    return;
 8006882:	e18b      	b.n	8006b9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	2b01      	cmp	r3, #1
 800688a:	f040 8167 	bne.w	8006b5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8160 	beq.w	8006b5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8159 	beq.w	8006b5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	f040 80ce 	bne.w	8006a6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80a9 	beq.w	8006a38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ee:	429a      	cmp	r2, r3
 80068f0:	f080 80a2 	bcs.w	8006a38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006906:	f000 8088 	beq.w	8006a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800693a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800694e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800697a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800697e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800698c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e1      	bne.n	8006956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e3      	bne.n	8006992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ea:	f023 0310 	bic.w	r3, r3, #16
 80069ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e3      	bne.n	80069d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fc fb7d 	bl	8003114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8ed 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a36:	e0b3      	b.n	8006ba0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a40:	429a      	cmp	r2, r3
 8006a42:	f040 80ad 	bne.w	8006ba0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a50:	f040 80a6 	bne.w	8006ba0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8d5 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
      return;
 8006a66:	e09b      	b.n	8006ba0 <HAL_UART_IRQHandler+0x548>
 8006a68:	0800713f 	.word	0x0800713f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 808e 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8089 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e3      	bne.n	8006a92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b34:	61fa      	str	r2, [r7, #28]
 8006b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e3      	bne.n	8006b10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f85b 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b5a:	e023      	b.n	8006ba4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <HAL_UART_IRQHandler+0x524>
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 faf3 	bl	8007160 <UART_Transmit_IT>
    return;
 8006b7a:	e014      	b.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb33 	bl	8007200 <UART_EndTransmit_IT>
    return;
 8006b9a:	e004      	b.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
    return;
 8006b9c:	bf00      	nop
 8006b9e:	e002      	b.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
      return;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <HAL_UART_IRQHandler+0x54e>
      return;
 8006ba4:	bf00      	nop
  }
}
 8006ba6:	37e8      	adds	r7, #232	@ 0xe8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b090      	sub	sp, #64	@ 0x40
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d137      	bne.n	8006cb4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c46:	2200      	movs	r2, #0
 8006c48:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c9e:	61fa      	str	r2, [r7, #28]
 8006ca0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	69b9      	ldr	r1, [r7, #24]
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	617b      	str	r3, [r7, #20]
   return(result);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cb2:	e002      	b.n	8006cba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006cb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006cb6:	f7ff ff79 	bl	8006bac <HAL_UART_TxCpltCallback>
}
 8006cba:	bf00      	nop
 8006cbc:	3740      	adds	r7, #64	@ 0x40
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff ff75 	bl	8006bc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b09c      	sub	sp, #112	@ 0x70
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d172      	bne.n	8006de0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d54:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	623b      	str	r3, [r7, #32]
   return(result);
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3314      	adds	r3, #20
 8006d86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d88:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d119      	bne.n	8006de0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dcc:	61fa      	str	r2, [r7, #28]
 8006dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de2:	2200      	movs	r2, #0
 8006de4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d106      	bne.n	8006dfc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006df2:	4619      	mov	r1, r3
 8006df4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006df6:	f7ff ff0b 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dfa:	e002      	b.n	8006e02 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006dfc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dfe:	f7ff fee9 	bl	8006bd4 <HAL_UART_RxCpltCallback>
}
 8006e02:	bf00      	nop
 8006e04:	3770      	adds	r7, #112	@ 0x70
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d108      	bne.n	8006e38 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e2a:	085b      	lsrs	r3, r3, #1
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff feed 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e36:	e002      	b.n	8006e3e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fed5 	bl	8006be8 <HAL_UART_RxHalfCpltCallback>
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e62:	2b80      	cmp	r3, #128	@ 0x80
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b21      	cmp	r3, #33	@ 0x21
 8006e78:	d108      	bne.n	8006e8c <UART_DMAError+0x46>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e86:	68b8      	ldr	r0, [r7, #8]
 8006e88:	f000 f8ce 	bl	8007028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b22      	cmp	r3, #34	@ 0x22
 8006eac:	d108      	bne.n	8006ec0 <UART_DMAError+0x7a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f000 f8dc 	bl	8007078 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec4:	f043 0210 	orr.w	r2, r3, #16
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ecc:	68b8      	ldr	r0, [r7, #8]
 8006ece:	f7ff fe95 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b098      	sub	sp, #96	@ 0x60
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2222      	movs	r2, #34	@ 0x22
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	4a44      	ldr	r2, [pc, #272]	@ (800701c <UART_Start_Receive_DMA+0x140>)
 8006f0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	4a43      	ldr	r2, [pc, #268]	@ (8007020 <UART_Start_Receive_DMA+0x144>)
 8006f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f18:	4a42      	ldr	r2, [pc, #264]	@ (8007024 <UART_Start_Receive_DMA+0x148>)
 8006f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	2200      	movs	r2, #0
 8006f22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	f7fc f892 	bl	8003064 <HAL_DMA_Start_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2210      	movs	r2, #16
 8006f4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e05d      	b.n	8007014 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d019      	beq.n	8006faa <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f96:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e5      	bne.n	8006f76 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fca:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	617b      	str	r3, [r7, #20]
   return(result);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ffe:	627a      	str	r2, [r7, #36]	@ 0x24
 8007000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6a39      	ldr	r1, [r7, #32]
 8007004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	61fb      	str	r3, [r7, #28]
   return(result);
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3760      	adds	r7, #96	@ 0x60
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	08006cdf 	.word	0x08006cdf
 8007020:	08006e0b 	.word	0x08006e0b
 8007024:	08006e47 	.word	0x08006e47

08007028 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	@ 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	61ba      	str	r2, [r7, #24]
 8007052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6979      	ldr	r1, [r7, #20]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	613b      	str	r3, [r7, #16]
   return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800706c:	bf00      	nop
 800706e:	3724      	adds	r7, #36	@ 0x24
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b095      	sub	sp, #84	@ 0x54
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e5      	bne.n	8007080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3314      	adds	r3, #20
 80070ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3314      	adds	r3, #20
 80070d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e5      	bne.n	80070b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d119      	bne.n	8007124 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	647b      	str	r3, [r7, #68]	@ 0x44
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007110:	61ba      	str	r2, [r7, #24]
 8007112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6979      	ldr	r1, [r7, #20]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	613b      	str	r3, [r7, #16]
   return(result);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e5      	bne.n	80070f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007132:	bf00      	nop
 8007134:	3754      	adds	r7, #84	@ 0x54
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff fd52 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b21      	cmp	r3, #33	@ 0x21
 8007172:	d13e      	bne.n	80071f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800717c:	d114      	bne.n	80071a8 <UART_Transmit_IT+0x48>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d110      	bne.n	80071a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800719a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]
 80071a6:	e008      	b.n	80071ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	1c59      	adds	r1, r3, #1
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6211      	str	r1, [r2, #32]
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007216:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff fcc3 	bl	8006bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08c      	sub	sp, #48	@ 0x30
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b22      	cmp	r3, #34	@ 0x22
 800724a:	f040 80aa 	bne.w	80073a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007256:	d115      	bne.n	8007284 <UART_Receive_IT+0x54>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d111      	bne.n	8007284 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	b29a      	uxth	r2, r3
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	1c9a      	adds	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	629a      	str	r2, [r3, #40]	@ 0x28
 8007282:	e024      	b.n	80072ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007292:	d007      	beq.n	80072a4 <UART_Receive_IT+0x74>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <UART_Receive_IT+0x82>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	e008      	b.n	80072c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d15d      	bne.n	800739e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0220 	bic.w	r2, r2, #32
 80072f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695a      	ldr	r2, [r3, #20]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0201 	bic.w	r2, r2, #1
 8007310:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007324:	2b01      	cmp	r3, #1
 8007326:	d135      	bne.n	8007394 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	613b      	str	r3, [r7, #16]
   return(result);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f023 0310 	bic.w	r3, r3, #16
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734e:	623a      	str	r2, [r7, #32]
 8007350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	69f9      	ldr	r1, [r7, #28]
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	61bb      	str	r3, [r7, #24]
   return(result);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b10      	cmp	r3, #16
 800736e:	d10a      	bne.n	8007386 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff fc3f 	bl	8006c10 <HAL_UARTEx_RxEventCallback>
 8007392:	e002      	b.n	800739a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fc1d 	bl	8006bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e002      	b.n	80073a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3730      	adds	r7, #48	@ 0x30
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b0:	b0c0      	sub	sp, #256	@ 0x100
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	68d9      	ldr	r1, [r3, #12]
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	ea40 0301 	orr.w	r3, r0, r1
 80073d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007404:	f021 010c 	bic.w	r1, r1, #12
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007412:	430b      	orrs	r3, r1
 8007414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	6999      	ldr	r1, [r3, #24]
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	ea40 0301 	orr.w	r3, r0, r1
 8007432:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b8f      	ldr	r3, [pc, #572]	@ (8007678 <UART_SetConfig+0x2cc>)
 800743c:	429a      	cmp	r2, r3
 800743e:	d005      	beq.n	800744c <UART_SetConfig+0xa0>
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	4b8d      	ldr	r3, [pc, #564]	@ (800767c <UART_SetConfig+0x2d0>)
 8007448:	429a      	cmp	r2, r3
 800744a:	d104      	bne.n	8007456 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fd fc26 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 8007450:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007454:	e003      	b.n	800745e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007456:	f7fd fc0d 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800745a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007468:	f040 810c 	bne.w	8007684 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800746c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007470:	2200      	movs	r2, #0
 8007472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007476:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800747a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	1891      	adds	r1, r2, r2
 8007484:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007486:	415b      	adcs	r3, r3
 8007488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800748a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800748e:	4621      	mov	r1, r4
 8007490:	eb12 0801 	adds.w	r8, r2, r1
 8007494:	4629      	mov	r1, r5
 8007496:	eb43 0901 	adc.w	r9, r3, r1
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ae:	4690      	mov	r8, r2
 80074b0:	4699      	mov	r9, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	eb18 0303 	adds.w	r3, r8, r3
 80074b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074bc:	462b      	mov	r3, r5
 80074be:	eb49 0303 	adc.w	r3, r9, r3
 80074c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074da:	460b      	mov	r3, r1
 80074dc:	18db      	adds	r3, r3, r3
 80074de:	653b      	str	r3, [r7, #80]	@ 0x50
 80074e0:	4613      	mov	r3, r2
 80074e2:	eb42 0303 	adc.w	r3, r2, r3
 80074e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074f0:	f7f9 fafc 	bl	8000aec <__aeabi_uldivmod>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4b61      	ldr	r3, [pc, #388]	@ (8007680 <UART_SetConfig+0x2d4>)
 80074fa:	fba3 2302 	umull	r2, r3, r3, r2
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	011c      	lsls	r4, r3, #4
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007506:	2200      	movs	r2, #0
 8007508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800750c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007510:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007514:	4642      	mov	r2, r8
 8007516:	464b      	mov	r3, r9
 8007518:	1891      	adds	r1, r2, r2
 800751a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800751c:	415b      	adcs	r3, r3
 800751e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007524:	4641      	mov	r1, r8
 8007526:	eb12 0a01 	adds.w	sl, r2, r1
 800752a:	4649      	mov	r1, r9
 800752c:	eb43 0b01 	adc.w	fp, r3, r1
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800753c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007544:	4692      	mov	sl, r2
 8007546:	469b      	mov	fp, r3
 8007548:	4643      	mov	r3, r8
 800754a:	eb1a 0303 	adds.w	r3, sl, r3
 800754e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007552:	464b      	mov	r3, r9
 8007554:	eb4b 0303 	adc.w	r3, fp, r3
 8007558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007568:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800756c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007570:	460b      	mov	r3, r1
 8007572:	18db      	adds	r3, r3, r3
 8007574:	643b      	str	r3, [r7, #64]	@ 0x40
 8007576:	4613      	mov	r3, r2
 8007578:	eb42 0303 	adc.w	r3, r2, r3
 800757c:	647b      	str	r3, [r7, #68]	@ 0x44
 800757e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007582:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007586:	f7f9 fab1 	bl	8000aec <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4611      	mov	r1, r2
 8007590:	4b3b      	ldr	r3, [pc, #236]	@ (8007680 <UART_SetConfig+0x2d4>)
 8007592:	fba3 2301 	umull	r2, r3, r3, r1
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2264      	movs	r2, #100	@ 0x64
 800759a:	fb02 f303 	mul.w	r3, r2, r3
 800759e:	1acb      	subs	r3, r1, r3
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075a6:	4b36      	ldr	r3, [pc, #216]	@ (8007680 <UART_SetConfig+0x2d4>)
 80075a8:	fba3 2302 	umull	r2, r3, r3, r2
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075b4:	441c      	add	r4, r3
 80075b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	1891      	adds	r1, r2, r2
 80075ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075d0:	415b      	adcs	r3, r3
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075d8:	4641      	mov	r1, r8
 80075da:	1851      	adds	r1, r2, r1
 80075dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80075de:	4649      	mov	r1, r9
 80075e0:	414b      	adcs	r3, r1
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075f0:	4659      	mov	r1, fp
 80075f2:	00cb      	lsls	r3, r1, #3
 80075f4:	4651      	mov	r1, sl
 80075f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075fa:	4651      	mov	r1, sl
 80075fc:	00ca      	lsls	r2, r1, #3
 80075fe:	4610      	mov	r0, r2
 8007600:	4619      	mov	r1, r3
 8007602:	4603      	mov	r3, r0
 8007604:	4642      	mov	r2, r8
 8007606:	189b      	adds	r3, r3, r2
 8007608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800760c:	464b      	mov	r3, r9
 800760e:	460a      	mov	r2, r1
 8007610:	eb42 0303 	adc.w	r3, r2, r3
 8007614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007624:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800762c:	460b      	mov	r3, r1
 800762e:	18db      	adds	r3, r3, r3
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007632:	4613      	mov	r3, r2
 8007634:	eb42 0303 	adc.w	r3, r2, r3
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800763a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800763e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007642:	f7f9 fa53 	bl	8000aec <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <UART_SetConfig+0x2d4>)
 800764c:	fba3 1302 	umull	r1, r3, r3, r2
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	2164      	movs	r1, #100	@ 0x64
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	3332      	adds	r3, #50	@ 0x32
 800765e:	4a08      	ldr	r2, [pc, #32]	@ (8007680 <UART_SetConfig+0x2d4>)
 8007660:	fba2 2303 	umull	r2, r3, r2, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f003 0207 	and.w	r2, r3, #7
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4422      	add	r2, r4
 8007672:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007674:	e106      	b.n	8007884 <UART_SetConfig+0x4d8>
 8007676:	bf00      	nop
 8007678:	40011000 	.word	0x40011000
 800767c:	40011400 	.word	0x40011400
 8007680:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007688:	2200      	movs	r2, #0
 800768a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800768e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007692:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007696:	4642      	mov	r2, r8
 8007698:	464b      	mov	r3, r9
 800769a:	1891      	adds	r1, r2, r2
 800769c:	6239      	str	r1, [r7, #32]
 800769e:	415b      	adcs	r3, r3
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076a6:	4641      	mov	r1, r8
 80076a8:	1854      	adds	r4, r2, r1
 80076aa:	4649      	mov	r1, r9
 80076ac:	eb43 0501 	adc.w	r5, r3, r1
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	00eb      	lsls	r3, r5, #3
 80076ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076be:	00e2      	lsls	r2, r4, #3
 80076c0:	4614      	mov	r4, r2
 80076c2:	461d      	mov	r5, r3
 80076c4:	4643      	mov	r3, r8
 80076c6:	18e3      	adds	r3, r4, r3
 80076c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076cc:	464b      	mov	r3, r9
 80076ce:	eb45 0303 	adc.w	r3, r5, r3
 80076d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	f04f 0300 	mov.w	r3, #0
 80076ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076f2:	4629      	mov	r1, r5
 80076f4:	008b      	lsls	r3, r1, #2
 80076f6:	4621      	mov	r1, r4
 80076f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076fc:	4621      	mov	r1, r4
 80076fe:	008a      	lsls	r2, r1, #2
 8007700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007704:	f7f9 f9f2 	bl	8000aec <__aeabi_uldivmod>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4b60      	ldr	r3, [pc, #384]	@ (8007890 <UART_SetConfig+0x4e4>)
 800770e:	fba3 2302 	umull	r2, r3, r3, r2
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	011c      	lsls	r4, r3, #4
 8007716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007724:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	1891      	adds	r1, r2, r2
 800772e:	61b9      	str	r1, [r7, #24]
 8007730:	415b      	adcs	r3, r3
 8007732:	61fb      	str	r3, [r7, #28]
 8007734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007738:	4641      	mov	r1, r8
 800773a:	1851      	adds	r1, r2, r1
 800773c:	6139      	str	r1, [r7, #16]
 800773e:	4649      	mov	r1, r9
 8007740:	414b      	adcs	r3, r1
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007750:	4659      	mov	r1, fp
 8007752:	00cb      	lsls	r3, r1, #3
 8007754:	4651      	mov	r1, sl
 8007756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800775a:	4651      	mov	r1, sl
 800775c:	00ca      	lsls	r2, r1, #3
 800775e:	4610      	mov	r0, r2
 8007760:	4619      	mov	r1, r3
 8007762:	4603      	mov	r3, r0
 8007764:	4642      	mov	r2, r8
 8007766:	189b      	adds	r3, r3, r2
 8007768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800776c:	464b      	mov	r3, r9
 800776e:	460a      	mov	r2, r1
 8007770:	eb42 0303 	adc.w	r3, r2, r3
 8007774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007782:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007790:	4649      	mov	r1, r9
 8007792:	008b      	lsls	r3, r1, #2
 8007794:	4641      	mov	r1, r8
 8007796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800779a:	4641      	mov	r1, r8
 800779c:	008a      	lsls	r2, r1, #2
 800779e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077a2:	f7f9 f9a3 	bl	8000aec <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	4b38      	ldr	r3, [pc, #224]	@ (8007890 <UART_SetConfig+0x4e4>)
 80077ae:	fba3 2301 	umull	r2, r3, r3, r1
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	2264      	movs	r2, #100	@ 0x64
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	1acb      	subs	r3, r1, r3
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	3332      	adds	r3, #50	@ 0x32
 80077c0:	4a33      	ldr	r2, [pc, #204]	@ (8007890 <UART_SetConfig+0x4e4>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077cc:	441c      	add	r4, r3
 80077ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d2:	2200      	movs	r2, #0
 80077d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	1891      	adds	r1, r2, r2
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	415b      	adcs	r3, r3
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077ec:	4641      	mov	r1, r8
 80077ee:	1851      	adds	r1, r2, r1
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	4649      	mov	r1, r9
 80077f4:	414b      	adcs	r3, r1
 80077f6:	607b      	str	r3, [r7, #4]
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007804:	4659      	mov	r1, fp
 8007806:	00cb      	lsls	r3, r1, #3
 8007808:	4651      	mov	r1, sl
 800780a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800780e:	4651      	mov	r1, sl
 8007810:	00ca      	lsls	r2, r1, #3
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	4603      	mov	r3, r0
 8007818:	4642      	mov	r2, r8
 800781a:	189b      	adds	r3, r3, r2
 800781c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800781e:	464b      	mov	r3, r9
 8007820:	460a      	mov	r2, r1
 8007822:	eb42 0303 	adc.w	r3, r2, r3
 8007826:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	663b      	str	r3, [r7, #96]	@ 0x60
 8007832:	667a      	str	r2, [r7, #100]	@ 0x64
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007840:	4649      	mov	r1, r9
 8007842:	008b      	lsls	r3, r1, #2
 8007844:	4641      	mov	r1, r8
 8007846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800784a:	4641      	mov	r1, r8
 800784c:	008a      	lsls	r2, r1, #2
 800784e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007852:	f7f9 f94b 	bl	8000aec <__aeabi_uldivmod>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4b0d      	ldr	r3, [pc, #52]	@ (8007890 <UART_SetConfig+0x4e4>)
 800785c:	fba3 1302 	umull	r1, r3, r3, r2
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	2164      	movs	r1, #100	@ 0x64
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	3332      	adds	r3, #50	@ 0x32
 800786e:	4a08      	ldr	r2, [pc, #32]	@ (8007890 <UART_SetConfig+0x4e4>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4422      	add	r2, r4
 8007882:	609a      	str	r2, [r3, #8]
}
 8007884:	bf00      	nop
 8007886:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800788a:	46bd      	mov	sp, r7
 800788c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007890:	51eb851f 	.word	0x51eb851f

08007894 <__NVIC_SetPriority>:
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db0a      	blt.n	80078be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	490c      	ldr	r1, [pc, #48]	@ (80078e0 <__NVIC_SetPriority+0x4c>)
 80078ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b2:	0112      	lsls	r2, r2, #4
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	440b      	add	r3, r1
 80078b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80078bc:	e00a      	b.n	80078d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4908      	ldr	r1, [pc, #32]	@ (80078e4 <__NVIC_SetPriority+0x50>)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	3b04      	subs	r3, #4
 80078cc:	0112      	lsls	r2, r2, #4
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	440b      	add	r3, r1
 80078d2:	761a      	strb	r2, [r3, #24]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	e000e100 	.word	0xe000e100
 80078e4:	e000ed00 	.word	0xe000ed00

080078e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	f06f 0004 	mvn.w	r0, #4
 80078f2:	f7ff ffcf 	bl	8007894 <__NVIC_SetPriority>
#endif
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007902:	f3ef 8305 	mrs	r3, IPSR
 8007906:	603b      	str	r3, [r7, #0]
  return(result);
 8007908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800790e:	f06f 0305 	mvn.w	r3, #5
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e00c      	b.n	8007930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007916:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <osKernelInitialize+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800791e:	4b08      	ldr	r3, [pc, #32]	@ (8007940 <osKernelInitialize+0x44>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007924:	2300      	movs	r3, #0
 8007926:	607b      	str	r3, [r7, #4]
 8007928:	e002      	b.n	8007930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800792e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007930:	687b      	ldr	r3, [r7, #4]
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	200049ec 	.word	0x200049ec

08007944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794a:	f3ef 8305 	mrs	r3, IPSR
 800794e:	603b      	str	r3, [r7, #0]
  return(result);
 8007950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007956:	f06f 0305 	mvn.w	r3, #5
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	e010      	b.n	8007980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800795e:	4b0b      	ldr	r3, [pc, #44]	@ (800798c <osKernelStart+0x48>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d109      	bne.n	800797a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007966:	f7ff ffbf 	bl	80078e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800796a:	4b08      	ldr	r3, [pc, #32]	@ (800798c <osKernelStart+0x48>)
 800796c:	2202      	movs	r2, #2
 800796e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007970:	f001 f87a 	bl	8008a68 <vTaskStartScheduler>
      stat = osOK;
 8007974:	2300      	movs	r3, #0
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	e002      	b.n	8007980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800797e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007980:	687b      	ldr	r3, [r7, #4]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200049ec 	.word	0x200049ec

08007990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	@ 0x38
 8007994:	af04      	add	r7, sp, #16
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a0:	f3ef 8305 	mrs	r3, IPSR
 80079a4:	617b      	str	r3, [r7, #20]
  return(result);
 80079a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d17e      	bne.n	8007aaa <osThreadNew+0x11a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d07b      	beq.n	8007aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079b2:	2380      	movs	r3, #128	@ 0x80
 80079b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079b6:	2318      	movs	r3, #24
 80079b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d045      	beq.n	8007a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <osThreadNew+0x48>
        name = attr->name;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <osThreadNew+0x6e>
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b38      	cmp	r3, #56	@ 0x38
 80079f0:	d805      	bhi.n	80079fe <osThreadNew+0x6e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <osThreadNew+0x72>
        return (NULL);
 80079fe:	2300      	movs	r3, #0
 8007a00:	e054      	b.n	8007aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <osThreadNew+0xa8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a20:	d90a      	bls.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <osThreadNew+0xa8>
        mem = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e010      	b.n	8007a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <osThreadNew+0xca>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <osThreadNew+0xca>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <osThreadNew+0xca>
          mem = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e001      	b.n	8007a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d110      	bne.n	8007a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fe1a 	bl	80086b0 <xTaskCreateStatic>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	e013      	b.n	8007aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d110      	bne.n	8007aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fe68 	bl	8008770 <xTaskCreate>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d001      	beq.n	8007aaa <osThreadNew+0x11a>
            hTask = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007aaa:	693b      	ldr	r3, [r7, #16]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3728      	adds	r7, #40	@ 0x28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abc:	f3ef 8305 	mrs	r3, IPSR
 8007ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <osDelay+0x1c>
    stat = osErrorISR;
 8007ac8:	f06f 0305 	mvn.w	r3, #5
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e007      	b.n	8007ae0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 ff8e 	bl	80089fc <vTaskDelay>
    }
  }

  return (stat);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a07      	ldr	r2, [pc, #28]	@ (8007b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8007afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4a06      	ldr	r2, [pc, #24]	@ (8007b1c <vApplicationGetIdleTaskMemory+0x30>)
 8007b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2280      	movs	r2, #128	@ 0x80
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	200049f0 	.word	0x200049f0
 8007b1c:	20004a4c 	.word	0x20004a4c

08007b20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4a07      	ldr	r2, [pc, #28]	@ (8007b4c <vApplicationGetTimerTaskMemory+0x2c>)
 8007b30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4a06      	ldr	r2, [pc, #24]	@ (8007b50 <vApplicationGetTimerTaskMemory+0x30>)
 8007b36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b3e:	601a      	str	r2, [r3, #0]
}
 8007b40:	bf00      	nop
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20004c4c 	.word	0x20004c4c
 8007b50:	20004ca8 	.word	0x20004ca8

08007b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f103 0208 	add.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f103 0208 	add.w	r2, r3, #8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f103 0208 	add.w	r2, r3, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c0c:	d103      	bne.n	8007c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e00c      	b.n	8007c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e002      	b.n	8007c24 <vListInsert+0x2e>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d2f6      	bcs.n	8007c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6892      	ldr	r2, [r2, #8]
 8007c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6852      	ldr	r2, [r2, #4]
 8007c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d103      	bne.n	8007c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	1e5a      	subs	r2, r3, #1
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <xQueueGenericReset+0x2c>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60bb      	str	r3, [r7, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ce8:	f002 f89e 	bl	8009e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cf8:	fb01 f303 	mul.w	r3, r1, r3
 8007cfc:	441a      	add	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d1e:	fb01 f303 	mul.w	r3, r1, r3
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	22ff      	movs	r2, #255	@ 0xff
 8007d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	@ 0xff
 8007d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d114      	bne.n	8007d68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01a      	beq.n	8007d7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3310      	adds	r3, #16
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f91a 	bl	8008f84 <xTaskRemoveFromEventList>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d012      	beq.n	8007d7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <xQueueGenericReset+0xd0>)
 8007d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	e009      	b.n	8007d7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3310      	adds	r3, #16
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fef1 	bl	8007b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3324      	adds	r3, #36	@ 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff feec 	bl	8007b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d7c:	f002 f886 	bl	8009e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d80:	2301      	movs	r3, #1
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08e      	sub	sp, #56	@ 0x38
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <xQueueGenericCreateStatic+0x56>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <xQueueGenericCreateStatic+0x5a>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <xQueueGenericCreateStatic+0x5c>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <xQueueGenericCreateStatic+0x84>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <xQueueGenericCreateStatic+0x88>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <xQueueGenericCreateStatic+0x8a>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	61fb      	str	r3, [r7, #28]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e36:	2350      	movs	r3, #80	@ 0x50
 8007e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b50      	cmp	r3, #80	@ 0x50
 8007e3e:	d00b      	beq.n	8007e58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61bb      	str	r3, [r7, #24]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00d      	beq.n	8007e80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	4613      	mov	r3, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f805 	bl	8007e8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3730      	adds	r7, #48	@ 0x30
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e002      	b.n	8007eac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eb8:	2101      	movs	r1, #1
 8007eba:	69b8      	ldr	r0, [r7, #24]
 8007ebc:	f7ff fefe 	bl	8007cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08e      	sub	sp, #56	@ 0x38
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xQueueGenericSend+0x34>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <xQueueGenericSend+0x42>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <xQueueGenericSend+0x46>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <xQueueGenericSend+0x48>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10b      	bne.n	8007f34 <xQueueGenericSend+0x64>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d103      	bne.n	8007f42 <xQueueGenericSend+0x72>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <xQueueGenericSend+0x76>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <xQueueGenericSend+0x78>
 8007f46:	2300      	movs	r3, #0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xQueueGenericSend+0x94>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	623b      	str	r3, [r7, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f64:	f001 f9f6 	bl	8009354 <xTaskGetSchedulerState>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <xQueueGenericSend+0xa4>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <xQueueGenericSend+0xa8>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <xQueueGenericSend+0xaa>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <xQueueGenericSend+0xc6>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	61fb      	str	r3, [r7, #28]
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f96:	f001 ff47 	bl	8009e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d302      	bcc.n	8007fac <xQueueGenericSend+0xdc>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d129      	bne.n	8008000 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fb2:	f000 fa0f 	bl	80083d4 <prvCopyDataToQueue>
 8007fb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	3324      	adds	r3, #36	@ 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ffdd 	bl	8008f84 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d013      	beq.n	8007ff8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80080d0 <xQueueGenericSend+0x200>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	e00a      	b.n	8007ff8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b39      	ldr	r3, [pc, #228]	@ (80080d0 <xQueueGenericSend+0x200>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ff8:	f001 ff48 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e063      	b.n	80080c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008006:	f001 ff41 	bl	8009e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800800a:	2300      	movs	r3, #0
 800800c:	e05c      	b.n	80080c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800800e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008014:	f107 0314 	add.w	r3, r7, #20
 8008018:	4618      	mov	r0, r3
 800801a:	f001 f83f 	bl	800909c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800801e:	2301      	movs	r3, #1
 8008020:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008022:	f001 ff33 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008026:	f000 fd87 	bl	8008b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800802a:	f001 fefd 	bl	8009e28 <vPortEnterCritical>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803a:	d103      	bne.n	8008044 <xQueueGenericSend+0x174>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008050:	d103      	bne.n	800805a <xQueueGenericSend+0x18a>
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800805a:	f001 ff17 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800805e:	1d3a      	adds	r2, r7, #4
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f001 f82e 	bl	80090c8 <xTaskCheckForTimeOut>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d124      	bne.n	80080bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008074:	f000 faa6 	bl	80085c4 <prvIsQueueFull>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d018      	beq.n	80080b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	3310      	adds	r3, #16
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 ff2a 	bl	8008ee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800808c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800808e:	f000 fa31 	bl	80084f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008092:	f000 fd5f 	bl	8008b54 <xTaskResumeAll>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f af7c 	bne.w	8007f96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800809e:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <xQueueGenericSend+0x200>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	e772      	b.n	8007f96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080b2:	f000 fa1f 	bl	80084f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080b6:	f000 fd4d 	bl	8008b54 <xTaskResumeAll>
 80080ba:	e76c      	b.n	8007f96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080be:	f000 fa19 	bl	80084f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c2:	f000 fd47 	bl	8008b54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3738      	adds	r7, #56	@ 0x38
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b090      	sub	sp, #64	@ 0x40
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d103      	bne.n	8008112 <xQueueGenericSendFromISR+0x3e>
 800810a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <xQueueGenericSendFromISR+0x42>
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <xQueueGenericSendFromISR+0x44>
 8008116:	2300      	movs	r3, #0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10b      	bne.n	8008134 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d103      	bne.n	8008142 <xQueueGenericSendFromISR+0x6e>
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <xQueueGenericSendFromISR+0x72>
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <xQueueGenericSendFromISR+0x74>
 8008146:	2300      	movs	r3, #0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	623b      	str	r3, [r7, #32]
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008164:	f001 ff40 	bl	8009fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008168:	f3ef 8211 	mrs	r2, BASEPRI
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	61fa      	str	r2, [r7, #28]
 800817e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008180:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <xQueueGenericSendFromISR+0xc2>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d12f      	bne.n	80081f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800819c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081ac:	f000 f912 	bl	80083d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081b8:	d112      	bne.n	80081e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d016      	beq.n	80081f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c4:	3324      	adds	r3, #36	@ 0x24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fedc 	bl	8008f84 <xTaskRemoveFromEventList>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e007      	b.n	80081f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081e4:	3301      	adds	r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	b25a      	sxtb	r2, r3
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081f4:	e001      	b.n	80081fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008208:	4618      	mov	r0, r3
 800820a:	3740      	adds	r7, #64	@ 0x40
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	@ 0x30
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <xQueueReceive+0x32>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	623b      	str	r3, [r7, #32]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <xQueueReceive+0x40>
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <xQueueReceive+0x44>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <xQueueReceive+0x46>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <xQueueReceive+0x62>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61fb      	str	r3, [r7, #28]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008272:	f001 f86f 	bl	8009354 <xTaskGetSchedulerState>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <xQueueReceive+0x72>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <xQueueReceive+0x76>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <xQueueReceive+0x78>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueReceive+0x94>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	61bb      	str	r3, [r7, #24]
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a4:	f001 fdc0 	bl	8009e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01f      	beq.n	80082f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082b8:	f000 f8f6 	bl	80084a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	3310      	adds	r3, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fe57 	bl	8008f84 <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082dc:	4b3c      	ldr	r3, [pc, #240]	@ (80083d0 <xQueueReceive+0x1c0>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ec:	f001 fdce 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e069      	b.n	80083c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082fa:	f001 fdc7 	bl	8009e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082fe:	2300      	movs	r3, #0
 8008300:	e062      	b.n	80083c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fec5 	bl	800909c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008316:	f001 fdb9 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800831a:	f000 fc0d 	bl	8008b38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831e:	f001 fd83 	bl	8009e28 <vPortEnterCritical>
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008328:	b25b      	sxtb	r3, r3
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800832e:	d103      	bne.n	8008338 <xQueueReceive+0x128>
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800833e:	b25b      	sxtb	r3, r3
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008344:	d103      	bne.n	800834e <xQueueReceive+0x13e>
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800834e:	f001 fd9d 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008352:	1d3a      	adds	r2, r7, #4
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f000 feb4 	bl	80090c8 <xTaskCheckForTimeOut>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d123      	bne.n	80083ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008368:	f000 f916 	bl	8008598 <prvIsQueueEmpty>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	3324      	adds	r3, #36	@ 0x24
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fdb0 	bl	8008ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008382:	f000 f8b7 	bl	80084f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008386:	f000 fbe5 	bl	8008b54 <xTaskResumeAll>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d189      	bne.n	80082a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008390:	4b0f      	ldr	r3, [pc, #60]	@ (80083d0 <xQueueReceive+0x1c0>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	e780      	b.n	80082a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a4:	f000 f8a6 	bl	80084f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a8:	f000 fbd4 	bl	8008b54 <xTaskResumeAll>
 80083ac:	e77a      	b.n	80082a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b0:	f000 f8a0 	bl	80084f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b4:	f000 fbce 	bl	8008b54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ba:	f000 f8ed 	bl	8008598 <prvIsQueueEmpty>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f43f af6f 	beq.w	80082a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3730      	adds	r7, #48	@ 0x30
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10d      	bne.n	800840e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d14d      	bne.n	8008496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 ffc6 	bl	8009390 <xTaskPriorityDisinherit>
 8008404:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	609a      	str	r2, [r3, #8]
 800840c:	e043      	b.n	8008496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d119      	bne.n	8008448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6858      	ldr	r0, [r3, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	461a      	mov	r2, r3
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	f00f f9f5 	bl	801780e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	d32b      	bcc.n	8008496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	605a      	str	r2, [r3, #4]
 8008446:	e026      	b.n	8008496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68d8      	ldr	r0, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008450:	461a      	mov	r2, r3
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	f00f f9db 	bl	801780e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008460:	425b      	negs	r3, r3
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d207      	bcs.n	8008484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	425b      	negs	r3, r3
 800847e:	441a      	add	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b02      	cmp	r3, #2
 8008488:	d105      	bne.n	8008496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3b01      	subs	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800849e:	697b      	ldr	r3, [r7, #20]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d018      	beq.n	80084ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	441a      	add	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d303      	bcc.n	80084dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68d9      	ldr	r1, [r3, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e4:	461a      	mov	r2, r3
 80084e6:	6838      	ldr	r0, [r7, #0]
 80084e8:	f00f f991 	bl	801780e <memcpy>
	}
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084fc:	f001 fc94 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008506:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008508:	e011      	b.n	800852e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d012      	beq.n	8008538 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3324      	adds	r3, #36	@ 0x24
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fd34 	bl	8008f84 <xTaskRemoveFromEventList>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008522:	f000 fe35 	bl	8009190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	3b01      	subs	r3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800852e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	dce9      	bgt.n	800850a <prvUnlockQueue+0x16>
 8008536:	e000      	b.n	800853a <prvUnlockQueue+0x46>
					break;
 8008538:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	22ff      	movs	r2, #255	@ 0xff
 800853e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008542:	f001 fca3 	bl	8009e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008546:	f001 fc6f 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008550:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008552:	e011      	b.n	8008578 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d012      	beq.n	8008582 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3310      	adds	r3, #16
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fd0f 	bl	8008f84 <xTaskRemoveFromEventList>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800856c:	f000 fe10 	bl	8009190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	3b01      	subs	r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dce9      	bgt.n	8008554 <prvUnlockQueue+0x60>
 8008580:	e000      	b.n	8008584 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008582:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	22ff      	movs	r2, #255	@ 0xff
 8008588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800858c:	f001 fc7e 	bl	8009e8c <vPortExitCritical>
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085a0:	f001 fc42 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085ac:	2301      	movs	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e001      	b.n	80085b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085b6:	f001 fc69 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 80085ba:	68fb      	ldr	r3, [r7, #12]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085cc:	f001 fc2c 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	429a      	cmp	r2, r3
 80085da:	d102      	bne.n	80085e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e001      	b.n	80085e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085e6:	f001 fc51 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 80085ea:	68fb      	ldr	r3, [r7, #12]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e014      	b.n	800862e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008604:	4a0f      	ldr	r2, [pc, #60]	@ (8008644 <vQueueAddToRegistry+0x50>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10b      	bne.n	8008628 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008610:	490c      	ldr	r1, [pc, #48]	@ (8008644 <vQueueAddToRegistry+0x50>)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800861a:	4a0a      	ldr	r2, [pc, #40]	@ (8008644 <vQueueAddToRegistry+0x50>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	4413      	add	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008626:	e006      	b.n	8008636 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b07      	cmp	r3, #7
 8008632:	d9e7      	bls.n	8008604 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	200050a8 	.word	0x200050a8

08008648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008658:	f001 fbe6 	bl	8009e28 <vPortEnterCritical>
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008662:	b25b      	sxtb	r3, r3
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008668:	d103      	bne.n	8008672 <vQueueWaitForMessageRestricted+0x2a>
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008678:	b25b      	sxtb	r3, r3
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800867e:	d103      	bne.n	8008688 <vQueueWaitForMessageRestricted+0x40>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008688:	f001 fc00 	bl	8009e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	3324      	adds	r3, #36	@ 0x24
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fc45 	bl	8008f2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086a2:	6978      	ldr	r0, [r7, #20]
 80086a4:	f7ff ff26 	bl	80084f4 <prvUnlockQueue>
	}
 80086a8:	bf00      	nop
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08e      	sub	sp, #56	@ 0x38
 80086b4:	af04      	add	r7, sp, #16
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10b      	bne.n	80086dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	623b      	str	r3, [r7, #32]
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	61fb      	str	r3, [r7, #28]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086fa:	235c      	movs	r3, #92	@ 0x5c
 80086fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b5c      	cmp	r3, #92	@ 0x5c
 8008702:	d00b      	beq.n	800871c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	61bb      	str	r3, [r7, #24]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800871c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01e      	beq.n	8008762 <xTaskCreateStatic+0xb2>
 8008724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01b      	beq.n	8008762 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800873c:	2300      	movs	r3, #0
 800873e:	9303      	str	r3, [sp, #12]
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	f107 0314 	add.w	r3, r7, #20
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f850 	bl	80087fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800875a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800875c:	f000 f8de 	bl	800891c <prvAddNewTaskToReadyList>
 8008760:	e001      	b.n	8008766 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008766:	697b      	ldr	r3, [r7, #20]
	}
 8008768:	4618      	mov	r0, r3
 800876a:	3728      	adds	r7, #40	@ 0x28
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08c      	sub	sp, #48	@ 0x30
 8008774:	af04      	add	r7, sp, #16
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	4613      	mov	r3, r2
 800877e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fc71 	bl	800a06c <pvPortMalloc>
 800878a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008792:	205c      	movs	r0, #92	@ 0x5c
 8008794:	f001 fc6a 	bl	800a06c <pvPortMalloc>
 8008798:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80087a6:	e005      	b.n	80087b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f001 fd2d 	bl	800a208 <vPortFree>
 80087ae:	e001      	b.n	80087b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d017      	beq.n	80087ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087c2:	88fa      	ldrh	r2, [r7, #6]
 80087c4:	2300      	movs	r3, #0
 80087c6:	9303      	str	r3, [sp, #12]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f80e 	bl	80087fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087de:	69f8      	ldr	r0, [r7, #28]
 80087e0:	f000 f89c 	bl	800891c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087e4:	2301      	movs	r3, #1
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	e002      	b.n	80087f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087f0:	69bb      	ldr	r3, [r7, #24]
	}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b088      	sub	sp, #32
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	461a      	mov	r2, r3
 8008812:	21a5      	movs	r1, #165	@ 0xa5
 8008814:	f00e ff32 	bl	801767c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008822:	3b01      	subs	r3, #1
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f023 0307 	bic.w	r3, r3, #7
 8008830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	617b      	str	r3, [r7, #20]
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01f      	beq.n	800889a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	e012      	b.n	8008886 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	7819      	ldrb	r1, [r3, #0]
 8008868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	3334      	adds	r3, #52	@ 0x34
 8008870:	460a      	mov	r2, r1
 8008872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	4413      	add	r3, r2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d006      	beq.n	800888e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	2b0f      	cmp	r3, #15
 800888a:	d9e9      	bls.n	8008860 <prvInitialiseNewTask+0x66>
 800888c:	e000      	b.n	8008890 <prvInitialiseNewTask+0x96>
			{
				break;
 800888e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008898:	e003      	b.n	80088a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	2b37      	cmp	r3, #55	@ 0x37
 80088a6:	d901      	bls.n	80088ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a8:	2337      	movs	r3, #55	@ 0x37
 80088aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	2200      	movs	r2, #0
 80088bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	3304      	adds	r3, #4
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff f966 	bl	8007b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	3318      	adds	r3, #24
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff f961 	bl	8007b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	2200      	movs	r2, #0
 80088ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	69b8      	ldr	r0, [r7, #24]
 80088fc:	f001 f966 	bl	8009bcc <pxPortInitialiseStack>
 8008900:	4602      	mov	r2, r0
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800890c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008912:	bf00      	nop
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008924:	f001 fa80 	bl	8009e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008928:	4b2d      	ldr	r3, [pc, #180]	@ (80089e0 <prvAddNewTaskToReadyList+0xc4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3301      	adds	r3, #1
 800892e:	4a2c      	ldr	r2, [pc, #176]	@ (80089e0 <prvAddNewTaskToReadyList+0xc4>)
 8008930:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008932:	4b2c      	ldr	r3, [pc, #176]	@ (80089e4 <prvAddNewTaskToReadyList+0xc8>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800893a:	4a2a      	ldr	r2, [pc, #168]	@ (80089e4 <prvAddNewTaskToReadyList+0xc8>)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008940:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <prvAddNewTaskToReadyList+0xc4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d110      	bne.n	800896a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008948:	f000 fc46 	bl	80091d8 <prvInitialiseTaskLists>
 800894c:	e00d      	b.n	800896a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800894e:	4b26      	ldr	r3, [pc, #152]	@ (80089e8 <prvAddNewTaskToReadyList+0xcc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008956:	4b23      	ldr	r3, [pc, #140]	@ (80089e4 <prvAddNewTaskToReadyList+0xc8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008960:	429a      	cmp	r2, r3
 8008962:	d802      	bhi.n	800896a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008964:	4a1f      	ldr	r2, [pc, #124]	@ (80089e4 <prvAddNewTaskToReadyList+0xc8>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800896a:	4b20      	ldr	r3, [pc, #128]	@ (80089ec <prvAddNewTaskToReadyList+0xd0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3301      	adds	r3, #1
 8008970:	4a1e      	ldr	r2, [pc, #120]	@ (80089ec <prvAddNewTaskToReadyList+0xd0>)
 8008972:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008974:	4b1d      	ldr	r3, [pc, #116]	@ (80089ec <prvAddNewTaskToReadyList+0xd0>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008980:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <prvAddNewTaskToReadyList+0xd4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d903      	bls.n	8008990 <prvAddNewTaskToReadyList+0x74>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <prvAddNewTaskToReadyList+0xd4>)
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4a15      	ldr	r2, [pc, #84]	@ (80089f4 <prvAddNewTaskToReadyList+0xd8>)
 800899e:	441a      	add	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7ff f901 	bl	8007bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089ac:	f001 fa6e 	bl	8009e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089b0:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <prvAddNewTaskToReadyList+0xcc>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089b8:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <prvAddNewTaskToReadyList+0xc8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d207      	bcs.n	80089d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089c6:	4b0c      	ldr	r3, [pc, #48]	@ (80089f8 <prvAddNewTaskToReadyList+0xdc>)
 80089c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200055bc 	.word	0x200055bc
 80089e4:	200050e8 	.word	0x200050e8
 80089e8:	200055c8 	.word	0x200055c8
 80089ec:	200055d8 	.word	0x200055d8
 80089f0:	200055c4 	.word	0x200055c4
 80089f4:	200050ec 	.word	0x200050ec
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d018      	beq.n	8008a40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a0e:	4b14      	ldr	r3, [pc, #80]	@ (8008a60 <vTaskDelay+0x64>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <vTaskDelay+0x32>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60bb      	str	r3, [r7, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a2e:	f000 f883 	bl	8008b38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fd1b 	bl	8009470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a3a:	f000 f88b 	bl	8008b54 <xTaskResumeAll>
 8008a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d107      	bne.n	8008a56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a46:	4b07      	ldr	r3, [pc, #28]	@ (8008a64 <vTaskDelay+0x68>)
 8008a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	200055e4 	.word	0x200055e4
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	@ 0x28
 8008a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a76:	463a      	mov	r2, r7
 8008a78:	1d39      	adds	r1, r7, #4
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff f834 	bl	8007aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	9202      	str	r2, [sp, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	460a      	mov	r2, r1
 8008a96:	4922      	ldr	r1, [pc, #136]	@ (8008b20 <vTaskStartScheduler+0xb8>)
 8008a98:	4822      	ldr	r0, [pc, #136]	@ (8008b24 <vTaskStartScheduler+0xbc>)
 8008a9a:	f7ff fe09 	bl	80086b0 <xTaskCreateStatic>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4a21      	ldr	r2, [pc, #132]	@ (8008b28 <vTaskStartScheduler+0xc0>)
 8008aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aa4:	4b20      	ldr	r3, [pc, #128]	@ (8008b28 <vTaskStartScheduler+0xc0>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e001      	b.n	8008ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d102      	bne.n	8008ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008abc:	f000 fd2c 	bl	8009518 <xTimerCreateTimerTask>
 8008ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d116      	bne.n	8008af6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	613b      	str	r3, [r7, #16]
}
 8008ada:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008adc:	4b13      	ldr	r3, [pc, #76]	@ (8008b2c <vTaskStartScheduler+0xc4>)
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ae2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ae4:	4b12      	ldr	r3, [pc, #72]	@ (8008b30 <vTaskStartScheduler+0xc8>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aea:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <vTaskStartScheduler+0xcc>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008af0:	f001 f8f6 	bl	8009ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008af4:	e00f      	b.n	8008b16 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008afc:	d10b      	bne.n	8008b16 <vTaskStartScheduler+0xae>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vTaskStartScheduler+0xaa>
}
 8008b16:	bf00      	nop
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08018654 	.word	0x08018654
 8008b24:	080091a9 	.word	0x080091a9
 8008b28:	200055e0 	.word	0x200055e0
 8008b2c:	200055dc 	.word	0x200055dc
 8008b30:	200055c8 	.word	0x200055c8
 8008b34:	200055c0 	.word	0x200055c0

08008b38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <vTaskSuspendAll+0x18>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	4a03      	ldr	r2, [pc, #12]	@ (8008b50 <vTaskSuspendAll+0x18>)
 8008b44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b46:	bf00      	nop
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	200055e4 	.word	0x200055e4

08008b54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b62:	4b42      	ldr	r3, [pc, #264]	@ (8008c6c <xTaskResumeAll+0x118>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <xTaskResumeAll+0x2e>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	603b      	str	r3, [r7, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b82:	f001 f951 	bl	8009e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b86:	4b39      	ldr	r3, [pc, #228]	@ (8008c6c <xTaskResumeAll+0x118>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4a37      	ldr	r2, [pc, #220]	@ (8008c6c <xTaskResumeAll+0x118>)
 8008b8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b90:	4b36      	ldr	r3, [pc, #216]	@ (8008c6c <xTaskResumeAll+0x118>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d162      	bne.n	8008c5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b98:	4b35      	ldr	r3, [pc, #212]	@ (8008c70 <xTaskResumeAll+0x11c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d05e      	beq.n	8008c5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ba0:	e02f      	b.n	8008c02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba2:	4b34      	ldr	r3, [pc, #208]	@ (8008c74 <xTaskResumeAll+0x120>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3318      	adds	r3, #24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff f85a 	bl	8007c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff f855 	bl	8007c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8008c78 <xTaskResumeAll+0x124>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d903      	bls.n	8008bd2 <xTaskResumeAll+0x7e>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bce:	4a2a      	ldr	r2, [pc, #168]	@ (8008c78 <xTaskResumeAll+0x124>)
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4a27      	ldr	r2, [pc, #156]	@ (8008c7c <xTaskResumeAll+0x128>)
 8008be0:	441a      	add	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7fe ffe0 	bl	8007bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4b23      	ldr	r3, [pc, #140]	@ (8008c80 <xTaskResumeAll+0x12c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008bfc:	4b21      	ldr	r3, [pc, #132]	@ (8008c84 <xTaskResumeAll+0x130>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c02:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <xTaskResumeAll+0x120>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1cb      	bne.n	8008ba2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c10:	f000 fb80 	bl	8009314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c14:	4b1c      	ldr	r3, [pc, #112]	@ (8008c88 <xTaskResumeAll+0x134>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d010      	beq.n	8008c42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c20:	f000 f846 	bl	8008cb0 <xTaskIncrementTick>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c2a:	4b16      	ldr	r3, [pc, #88]	@ (8008c84 <xTaskResumeAll+0x130>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f1      	bne.n	8008c20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c3c:	4b12      	ldr	r3, [pc, #72]	@ (8008c88 <xTaskResumeAll+0x134>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c42:	4b10      	ldr	r3, [pc, #64]	@ (8008c84 <xTaskResumeAll+0x130>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c8c <xTaskResumeAll+0x138>)
 8008c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c5e:	f001 f915 	bl	8009e8c <vPortExitCritical>

	return xAlreadyYielded;
 8008c62:	68bb      	ldr	r3, [r7, #8]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200055e4 	.word	0x200055e4
 8008c70:	200055bc 	.word	0x200055bc
 8008c74:	2000557c 	.word	0x2000557c
 8008c78:	200055c4 	.word	0x200055c4
 8008c7c:	200050ec 	.word	0x200050ec
 8008c80:	200050e8 	.word	0x200050e8
 8008c84:	200055d0 	.word	0x200055d0
 8008c88:	200055cc 	.word	0x200055cc
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c96:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <xTaskGetTickCount+0x1c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c9c:	687b      	ldr	r3, [r7, #4]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	200055c0 	.word	0x200055c0

08008cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cba:	4b4f      	ldr	r3, [pc, #316]	@ (8008df8 <xTaskIncrementTick+0x148>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f040 8090 	bne.w	8008de4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8008dfc <xTaskIncrementTick+0x14c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8008dfc <xTaskIncrementTick+0x14c>)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d121      	bne.n	8008d1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cd8:	4b49      	ldr	r3, [pc, #292]	@ (8008e00 <xTaskIncrementTick+0x150>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	603b      	str	r3, [r7, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xTaskIncrementTick+0x46>
 8008cfa:	4b41      	ldr	r3, [pc, #260]	@ (8008e00 <xTaskIncrementTick+0x150>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	4b40      	ldr	r3, [pc, #256]	@ (8008e04 <xTaskIncrementTick+0x154>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a3e      	ldr	r2, [pc, #248]	@ (8008e00 <xTaskIncrementTick+0x150>)
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	4a3e      	ldr	r2, [pc, #248]	@ (8008e04 <xTaskIncrementTick+0x154>)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e08 <xTaskIncrementTick+0x158>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a3c      	ldr	r2, [pc, #240]	@ (8008e08 <xTaskIncrementTick+0x158>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	f000 fafc 	bl	8009314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e0c <xTaskIncrementTick+0x15c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d349      	bcc.n	8008dba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d26:	4b36      	ldr	r3, [pc, #216]	@ (8008e00 <xTaskIncrementTick+0x150>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d30:	4b36      	ldr	r3, [pc, #216]	@ (8008e0c <xTaskIncrementTick+0x15c>)
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d36:	601a      	str	r2, [r3, #0]
					break;
 8008d38:	e03f      	b.n	8008dba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3a:	4b31      	ldr	r3, [pc, #196]	@ (8008e00 <xTaskIncrementTick+0x150>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d203      	bcs.n	8008d5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d52:	4a2e      	ldr	r2, [pc, #184]	@ (8008e0c <xTaskIncrementTick+0x15c>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d58:	e02f      	b.n	8008dba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe ff82 	bl	8007c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3318      	adds	r3, #24
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe ff79 	bl	8007c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7a:	4b25      	ldr	r3, [pc, #148]	@ (8008e10 <xTaskIncrementTick+0x160>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d903      	bls.n	8008d8a <xTaskIncrementTick+0xda>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4a22      	ldr	r2, [pc, #136]	@ (8008e10 <xTaskIncrementTick+0x160>)
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a1f      	ldr	r2, [pc, #124]	@ (8008e14 <xTaskIncrementTick+0x164>)
 8008d98:	441a      	add	r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7fe ff04 	bl	8007bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008daa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <xTaskIncrementTick+0x168>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d3b8      	bcc.n	8008d26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008db4:	2301      	movs	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db8:	e7b5      	b.n	8008d26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dba:	4b17      	ldr	r3, [pc, #92]	@ (8008e18 <xTaskIncrementTick+0x168>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc0:	4914      	ldr	r1, [pc, #80]	@ (8008e14 <xTaskIncrementTick+0x164>)
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d901      	bls.n	8008dd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dd6:	4b11      	ldr	r3, [pc, #68]	@ (8008e1c <xTaskIncrementTick+0x16c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d007      	beq.n	8008dee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e004      	b.n	8008dee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <xTaskIncrementTick+0x170>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	4a0d      	ldr	r2, [pc, #52]	@ (8008e20 <xTaskIncrementTick+0x170>)
 8008dec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dee:	697b      	ldr	r3, [r7, #20]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	200055e4 	.word	0x200055e4
 8008dfc:	200055c0 	.word	0x200055c0
 8008e00:	20005574 	.word	0x20005574
 8008e04:	20005578 	.word	0x20005578
 8008e08:	200055d4 	.word	0x200055d4
 8008e0c:	200055dc 	.word	0x200055dc
 8008e10:	200055c4 	.word	0x200055c4
 8008e14:	200050ec 	.word	0x200050ec
 8008e18:	200050e8 	.word	0x200050e8
 8008e1c:	200055d0 	.word	0x200055d0
 8008e20:	200055cc 	.word	0x200055cc

08008e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e2a:	4b28      	ldr	r3, [pc, #160]	@ (8008ecc <vTaskSwitchContext+0xa8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e32:	4b27      	ldr	r3, [pc, #156]	@ (8008ed0 <vTaskSwitchContext+0xac>)
 8008e34:	2201      	movs	r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e38:	e042      	b.n	8008ec0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008e3a:	4b25      	ldr	r3, [pc, #148]	@ (8008ed0 <vTaskSwitchContext+0xac>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e40:	4b24      	ldr	r3, [pc, #144]	@ (8008ed4 <vTaskSwitchContext+0xb0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e011      	b.n	8008e6c <vTaskSwitchContext+0x48>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10b      	bne.n	8008e66 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	e7fd      	b.n	8008e62 <vTaskSwitchContext+0x3e>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	491a      	ldr	r1, [pc, #104]	@ (8008ed8 <vTaskSwitchContext+0xb4>)
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0e3      	beq.n	8008e48 <vTaskSwitchContext+0x24>
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4a13      	ldr	r2, [pc, #76]	@ (8008ed8 <vTaskSwitchContext+0xb4>)
 8008e8c:	4413      	add	r3, r2
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d104      	bne.n	8008eb0 <vTaskSwitchContext+0x8c>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	605a      	str	r2, [r3, #4]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4a09      	ldr	r2, [pc, #36]	@ (8008edc <vTaskSwitchContext+0xb8>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	4a06      	ldr	r2, [pc, #24]	@ (8008ed4 <vTaskSwitchContext+0xb0>)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	200055e4 	.word	0x200055e4
 8008ed0:	200055d0 	.word	0x200055d0
 8008ed4:	200055c4 	.word	0x200055c4
 8008ed8:	200050ec 	.word	0x200050ec
 8008edc:	200050e8 	.word	0x200050e8

08008ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60fb      	str	r3, [r7, #12]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f08:	4b07      	ldr	r3, [pc, #28]	@ (8008f28 <vTaskPlaceOnEventList+0x48>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3318      	adds	r3, #24
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fe fe70 	bl	8007bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f16:	2101      	movs	r1, #1
 8008f18:	6838      	ldr	r0, [r7, #0]
 8008f1a:	f000 faa9 	bl	8009470 <prvAddCurrentTaskToDelayedList>
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200050e8 	.word	0x200050e8

08008f2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	617b      	str	r3, [r7, #20]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f56:	4b0a      	ldr	r3, [pc, #40]	@ (8008f80 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7fe fe25 	bl	8007bae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	68b8      	ldr	r0, [r7, #8]
 8008f74:	f000 fa7c 	bl	8009470 <prvAddCurrentTaskToDelayedList>
	}
 8008f78:	bf00      	nop
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200050e8 	.word	0x200050e8

08008f84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	60fb      	str	r3, [r7, #12]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fe56 	bl	8007c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8009034 <xTaskRemoveFromEventList+0xb0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d11d      	bne.n	8009000 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fe4d 	bl	8007c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd2:	4b19      	ldr	r3, [pc, #100]	@ (8009038 <xTaskRemoveFromEventList+0xb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d903      	bls.n	8008fe2 <xTaskRemoveFromEventList+0x5e>
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <xTaskRemoveFromEventList+0xb4>)
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4a13      	ldr	r2, [pc, #76]	@ (800903c <xTaskRemoveFromEventList+0xb8>)
 8008ff0:	441a      	add	r2, r3
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f7fe fdd8 	bl	8007bae <vListInsertEnd>
 8008ffe:	e005      	b.n	800900c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	3318      	adds	r3, #24
 8009004:	4619      	mov	r1, r3
 8009006:	480e      	ldr	r0, [pc, #56]	@ (8009040 <xTaskRemoveFromEventList+0xbc>)
 8009008:	f7fe fdd1 	bl	8007bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	4b0c      	ldr	r3, [pc, #48]	@ (8009044 <xTaskRemoveFromEventList+0xc0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	429a      	cmp	r2, r3
 8009018:	d905      	bls.n	8009026 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800901e:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <xTaskRemoveFromEventList+0xc4>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	e001      	b.n	800902a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800902a:	697b      	ldr	r3, [r7, #20]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200055e4 	.word	0x200055e4
 8009038:	200055c4 	.word	0x200055c4
 800903c:	200050ec 	.word	0x200050ec
 8009040:	2000557c 	.word	0x2000557c
 8009044:	200050e8 	.word	0x200050e8
 8009048:	200055d0 	.word	0x200055d0

0800904c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	60fb      	str	r3, [r7, #12]
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	e7fd      	b.n	800906e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009072:	f000 fed9 	bl	8009e28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009076:	4b07      	ldr	r3, [pc, #28]	@ (8009094 <vTaskSetTimeOutState+0x48>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800907e:	4b06      	ldr	r3, [pc, #24]	@ (8009098 <vTaskSetTimeOutState+0x4c>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009086:	f000 ff01 	bl	8009e8c <vPortExitCritical>
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200055d4 	.word	0x200055d4
 8009098:	200055c0 	.word	0x200055c0

0800909c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <vTaskInternalSetTimeOutState+0x24>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090ac:	4b05      	ldr	r3, [pc, #20]	@ (80090c4 <vTaskInternalSetTimeOutState+0x28>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	605a      	str	r2, [r3, #4]
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	200055d4 	.word	0x200055d4
 80090c4:	200055c0 	.word	0x200055c0

080090c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	613b      	str	r3, [r7, #16]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800910e:	f000 fe8b 	bl	8009e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009112:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <xTaskCheckForTimeOut+0xc0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800912a:	d102      	bne.n	8009132 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e023      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b15      	ldr	r3, [pc, #84]	@ (800918c <xTaskCheckForTimeOut+0xc4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d007      	beq.n	800914e <xTaskCheckForTimeOut+0x86>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	e015      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	429a      	cmp	r2, r3
 8009156:	d20b      	bcs.n	8009170 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff ff99 	bl	800909c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e004      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009176:	2301      	movs	r3, #1
 8009178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800917a:	f000 fe87 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 800917e:	69fb      	ldr	r3, [r7, #28]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	200055c0 	.word	0x200055c0
 800918c:	200055d4 	.word	0x200055d4

08009190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009194:	4b03      	ldr	r3, [pc, #12]	@ (80091a4 <vTaskMissedYield+0x14>)
 8009196:	2201      	movs	r2, #1
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	200055d0 	.word	0x200055d0

080091a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091b0:	f000 f852 	bl	8009258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091b4:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <prvIdleTask+0x28>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d9f9      	bls.n	80091b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091bc:	4b05      	ldr	r3, [pc, #20]	@ (80091d4 <prvIdleTask+0x2c>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091cc:	e7f0      	b.n	80091b0 <prvIdleTask+0x8>
 80091ce:	bf00      	nop
 80091d0:	200050ec 	.word	0x200050ec
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091de:	2300      	movs	r3, #0
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	e00c      	b.n	80091fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a12      	ldr	r2, [pc, #72]	@ (8009238 <prvInitialiseTaskLists+0x60>)
 80091f0:	4413      	add	r3, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe fcae 	bl	8007b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3301      	adds	r3, #1
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b37      	cmp	r3, #55	@ 0x37
 8009202:	d9ef      	bls.n	80091e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009204:	480d      	ldr	r0, [pc, #52]	@ (800923c <prvInitialiseTaskLists+0x64>)
 8009206:	f7fe fca5 	bl	8007b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800920a:	480d      	ldr	r0, [pc, #52]	@ (8009240 <prvInitialiseTaskLists+0x68>)
 800920c:	f7fe fca2 	bl	8007b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009210:	480c      	ldr	r0, [pc, #48]	@ (8009244 <prvInitialiseTaskLists+0x6c>)
 8009212:	f7fe fc9f 	bl	8007b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009216:	480c      	ldr	r0, [pc, #48]	@ (8009248 <prvInitialiseTaskLists+0x70>)
 8009218:	f7fe fc9c 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800921c:	480b      	ldr	r0, [pc, #44]	@ (800924c <prvInitialiseTaskLists+0x74>)
 800921e:	f7fe fc99 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009222:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <prvInitialiseTaskLists+0x78>)
 8009224:	4a05      	ldr	r2, [pc, #20]	@ (800923c <prvInitialiseTaskLists+0x64>)
 8009226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <prvInitialiseTaskLists+0x7c>)
 800922a:	4a05      	ldr	r2, [pc, #20]	@ (8009240 <prvInitialiseTaskLists+0x68>)
 800922c:	601a      	str	r2, [r3, #0]
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200050ec 	.word	0x200050ec
 800923c:	2000554c 	.word	0x2000554c
 8009240:	20005560 	.word	0x20005560
 8009244:	2000557c 	.word	0x2000557c
 8009248:	20005590 	.word	0x20005590
 800924c:	200055a8 	.word	0x200055a8
 8009250:	20005574 	.word	0x20005574
 8009254:	20005578 	.word	0x20005578

08009258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800925e:	e019      	b.n	8009294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009260:	f000 fde2 	bl	8009e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009264:	4b10      	ldr	r3, [pc, #64]	@ (80092a8 <prvCheckTasksWaitingTermination+0x50>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fcf9 	bl	8007c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <prvCheckTasksWaitingTermination+0x54>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a0b      	ldr	r2, [pc, #44]	@ (80092ac <prvCheckTasksWaitingTermination+0x54>)
 800927e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009280:	4b0b      	ldr	r3, [pc, #44]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3b01      	subs	r3, #1
 8009286:	4a0a      	ldr	r2, [pc, #40]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800928a:	f000 fdff 	bl	8009e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f810 	bl	80092b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009294:	4b06      	ldr	r3, [pc, #24]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e1      	bne.n	8009260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20005590 	.word	0x20005590
 80092ac:	200055bc 	.word	0x200055bc
 80092b0:	200055a4 	.word	0x200055a4

080092b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d108      	bne.n	80092d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 ff9c 	bl	800a208 <vPortFree>
				vPortFree( pxTCB );
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 ff99 	bl	800a208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092d6:	e019      	b.n	800930c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d103      	bne.n	80092ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 ff90 	bl	800a208 <vPortFree>
	}
 80092e8:	e010      	b.n	800930c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d00b      	beq.n	800930c <prvDeleteTCB+0x58>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <prvDeleteTCB+0x54>
	}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800931a:	4b0c      	ldr	r3, [pc, #48]	@ (800934c <prvResetNextTaskUnblockTime+0x38>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009324:	4b0a      	ldr	r3, [pc, #40]	@ (8009350 <prvResetNextTaskUnblockTime+0x3c>)
 8009326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800932a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800932c:	e008      	b.n	8009340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932e:	4b07      	ldr	r3, [pc, #28]	@ (800934c <prvResetNextTaskUnblockTime+0x38>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4a04      	ldr	r2, [pc, #16]	@ (8009350 <prvResetNextTaskUnblockTime+0x3c>)
 800933e:	6013      	str	r3, [r2, #0]
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20005574 	.word	0x20005574
 8009350:	200055dc 	.word	0x200055dc

08009354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800935a:	4b0b      	ldr	r3, [pc, #44]	@ (8009388 <xTaskGetSchedulerState+0x34>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d102      	bne.n	8009368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009362:	2301      	movs	r3, #1
 8009364:	607b      	str	r3, [r7, #4]
 8009366:	e008      	b.n	800937a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009368:	4b08      	ldr	r3, [pc, #32]	@ (800938c <xTaskGetSchedulerState+0x38>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009370:	2302      	movs	r3, #2
 8009372:	607b      	str	r3, [r7, #4]
 8009374:	e001      	b.n	800937a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800937a:	687b      	ldr	r3, [r7, #4]
	}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	200055c8 	.word	0x200055c8
 800938c:	200055e4 	.word	0x200055e4

08009390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d058      	beq.n	8009458 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093a6:	4b2f      	ldr	r3, [pc, #188]	@ (8009464 <xTaskPriorityDisinherit+0xd4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d00b      	beq.n	80093c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10b      	bne.n	80093e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60bb      	str	r3, [r7, #8]
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	e7fd      	b.n	80093e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ec:	1e5a      	subs	r2, r3, #1
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d02c      	beq.n	8009458 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009402:	2b00      	cmp	r3, #0
 8009404:	d128      	bne.n	8009458 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3304      	adds	r3, #4
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fc2c 	bl	8007c68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009428:	4b0f      	ldr	r3, [pc, #60]	@ (8009468 <xTaskPriorityDisinherit+0xd8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d903      	bls.n	8009438 <xTaskPriorityDisinherit+0xa8>
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	4a0c      	ldr	r2, [pc, #48]	@ (8009468 <xTaskPriorityDisinherit+0xd8>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4a09      	ldr	r2, [pc, #36]	@ (800946c <xTaskPriorityDisinherit+0xdc>)
 8009446:	441a      	add	r2, r3
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7fe fbad 	bl	8007bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009454:	2301      	movs	r3, #1
 8009456:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009458:	697b      	ldr	r3, [r7, #20]
	}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	200050e8 	.word	0x200050e8
 8009468:	200055c4 	.word	0x200055c4
 800946c:	200050ec 	.word	0x200050ec

08009470 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800947a:	4b21      	ldr	r3, [pc, #132]	@ (8009500 <prvAddCurrentTaskToDelayedList+0x90>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009480:	4b20      	ldr	r3, [pc, #128]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x94>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3304      	adds	r3, #4
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fbee 	bl	8007c68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009492:	d10a      	bne.n	80094aa <prvAddCurrentTaskToDelayedList+0x3a>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949a:	4b1a      	ldr	r3, [pc, #104]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x94>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4819      	ldr	r0, [pc, #100]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x98>)
 80094a4:	f7fe fb83 	bl	8007bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094a8:	e026      	b.n	80094f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094b2:	4b14      	ldr	r3, [pc, #80]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d209      	bcs.n	80094d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094c2:	4b12      	ldr	r3, [pc, #72]	@ (800950c <prvAddCurrentTaskToDelayedList+0x9c>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3304      	adds	r3, #4
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f7fe fb91 	bl	8007bf6 <vListInsert>
}
 80094d4:	e010      	b.n	80094f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009510 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	4b0a      	ldr	r3, [pc, #40]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x94>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7fe fb87 	bl	8007bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d202      	bcs.n	80094f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094f2:	4a08      	ldr	r2, [pc, #32]	@ (8009514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6013      	str	r3, [r2, #0]
}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	200055c0 	.word	0x200055c0
 8009504:	200050e8 	.word	0x200050e8
 8009508:	200055a8 	.word	0x200055a8
 800950c:	20005578 	.word	0x20005578
 8009510:	20005574 	.word	0x20005574
 8009514:	200055dc 	.word	0x200055dc

08009518 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	@ 0x28
 800951c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009522:	f000 fb13 	bl	8009b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009526:	4b1d      	ldr	r3, [pc, #116]	@ (800959c <xTimerCreateTimerTask+0x84>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d021      	beq.n	8009572 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009536:	1d3a      	adds	r2, r7, #4
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	f107 030c 	add.w	r3, r7, #12
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe faed 	bl	8007b20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	9202      	str	r2, [sp, #8]
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	2302      	movs	r3, #2
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	460a      	mov	r2, r1
 8009558:	4911      	ldr	r1, [pc, #68]	@ (80095a0 <xTimerCreateTimerTask+0x88>)
 800955a:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <xTimerCreateTimerTask+0x8c>)
 800955c:	f7ff f8a8 	bl	80086b0 <xTaskCreateStatic>
 8009560:	4603      	mov	r3, r0
 8009562:	4a11      	ldr	r2, [pc, #68]	@ (80095a8 <xTimerCreateTimerTask+0x90>)
 8009564:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009566:	4b10      	ldr	r3, [pc, #64]	@ (80095a8 <xTimerCreateTimerTask+0x90>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800956e:	2301      	movs	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10b      	bne.n	8009590 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	613b      	str	r3, [r7, #16]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009590:	697b      	ldr	r3, [r7, #20]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20005618 	.word	0x20005618
 80095a0:	0801865c 	.word	0x0801865c
 80095a4:	080096e5 	.word	0x080096e5
 80095a8:	2000561c 	.word	0x2000561c

080095ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08a      	sub	sp, #40	@ 0x28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10b      	bne.n	80095dc <xTimerGenericCommand+0x30>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	623b      	str	r3, [r7, #32]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095dc:	4b19      	ldr	r3, [pc, #100]	@ (8009644 <xTimerGenericCommand+0x98>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d02a      	beq.n	800963a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	dc18      	bgt.n	8009628 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095f6:	f7ff fead 	bl	8009354 <xTaskGetSchedulerState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d109      	bne.n	8009614 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009600:	4b10      	ldr	r3, [pc, #64]	@ (8009644 <xTimerGenericCommand+0x98>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	f107 0110 	add.w	r1, r7, #16
 8009608:	2300      	movs	r3, #0
 800960a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800960c:	f7fe fc60 	bl	8007ed0 <xQueueGenericSend>
 8009610:	6278      	str	r0, [r7, #36]	@ 0x24
 8009612:	e012      	b.n	800963a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009614:	4b0b      	ldr	r3, [pc, #44]	@ (8009644 <xTimerGenericCommand+0x98>)
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	f107 0110 	add.w	r1, r7, #16
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	f7fe fc56 	bl	8007ed0 <xQueueGenericSend>
 8009624:	6278      	str	r0, [r7, #36]	@ 0x24
 8009626:	e008      	b.n	800963a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009628:	4b06      	ldr	r3, [pc, #24]	@ (8009644 <xTimerGenericCommand+0x98>)
 800962a:	6818      	ldr	r0, [r3, #0]
 800962c:	f107 0110 	add.w	r1, r7, #16
 8009630:	2300      	movs	r3, #0
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	f7fe fd4e 	bl	80080d4 <xQueueGenericSendFromISR>
 8009638:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800963c:	4618      	mov	r0, r3
 800963e:	3728      	adds	r7, #40	@ 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20005618 	.word	0x20005618

08009648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009652:	4b23      	ldr	r3, [pc, #140]	@ (80096e0 <prvProcessExpiredTimer+0x98>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	3304      	adds	r3, #4
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fb01 	bl	8007c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d023      	beq.n	80096bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	699a      	ldr	r2, [r3, #24]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	18d1      	adds	r1, r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	6978      	ldr	r0, [r7, #20]
 8009682:	f000 f8d5 	bl	8009830 <prvInsertTimerInActiveList>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d020      	beq.n	80096ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800968c:	2300      	movs	r3, #0
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	2300      	movs	r3, #0
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	2100      	movs	r1, #0
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f7ff ff88 	bl	80095ac <xTimerGenericCommand>
 800969c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d114      	bne.n	80096ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	60fb      	str	r3, [r7, #12]
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	e7fd      	b.n	80096b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	4798      	blx	r3
}
 80096d6:	bf00      	nop
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20005610 	.word	0x20005610

080096e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f859 	bl	80097a8 <prvGetNextExpireTime>
 80096f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	4619      	mov	r1, r3
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f805 	bl	800970c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009702:	f000 f8d7 	bl	80098b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009706:	bf00      	nop
 8009708:	e7f0      	b.n	80096ec <prvTimerTask+0x8>
	...

0800970c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009716:	f7ff fa0f 	bl	8008b38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	4618      	mov	r0, r3
 8009720:	f000 f866 	bl	80097f0 <prvSampleTimeNow>
 8009724:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d130      	bne.n	800978e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <prvProcessTimerOrBlockTask+0x3c>
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	429a      	cmp	r2, r3
 8009738:	d806      	bhi.n	8009748 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800973a:	f7ff fa0b 	bl	8008b54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800973e:	68f9      	ldr	r1, [r7, #12]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff ff81 	bl	8009648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009746:	e024      	b.n	8009792 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d008      	beq.n	8009760 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800974e:	4b13      	ldr	r3, [pc, #76]	@ (800979c <prvProcessTimerOrBlockTask+0x90>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <prvProcessTimerOrBlockTask+0x50>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <prvProcessTimerOrBlockTask+0x52>
 800975c:	2300      	movs	r3, #0
 800975e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009760:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <prvProcessTimerOrBlockTask+0x94>)
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	f7fe ff6b 	bl	8008648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009772:	f7ff f9ef 	bl	8008b54 <xTaskResumeAll>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800977c:	4b09      	ldr	r3, [pc, #36]	@ (80097a4 <prvProcessTimerOrBlockTask+0x98>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	f3bf 8f6f 	isb	sy
}
 800978c:	e001      	b.n	8009792 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800978e:	f7ff f9e1 	bl	8008b54 <xTaskResumeAll>
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20005614 	.word	0x20005614
 80097a0:	20005618 	.word	0x20005618
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097b0:	4b0e      	ldr	r3, [pc, #56]	@ (80097ec <prvGetNextExpireTime+0x44>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <prvGetNextExpireTime+0x16>
 80097ba:	2201      	movs	r2, #1
 80097bc:	e000      	b.n	80097c0 <prvGetNextExpireTime+0x18>
 80097be:	2200      	movs	r2, #0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d105      	bne.n	80097d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097cc:	4b07      	ldr	r3, [pc, #28]	@ (80097ec <prvGetNextExpireTime+0x44>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e001      	b.n	80097dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20005610 	.word	0x20005610

080097f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097f8:	f7ff fa4a 	bl	8008c90 <xTaskGetTickCount>
 80097fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097fe:	4b0b      	ldr	r3, [pc, #44]	@ (800982c <prvSampleTimeNow+0x3c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	429a      	cmp	r2, r3
 8009806:	d205      	bcs.n	8009814 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009808:	f000 f93a 	bl	8009a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	e002      	b.n	800981a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800981a:	4a04      	ldr	r2, [pc, #16]	@ (800982c <prvSampleTimeNow+0x3c>)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009820:	68fb      	ldr	r3, [r7, #12]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20005620 	.word	0x20005620

08009830 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d812      	bhi.n	800987c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	1ad2      	subs	r2, r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	429a      	cmp	r2, r3
 8009862:	d302      	bcc.n	800986a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009864:	2301      	movs	r3, #1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e01b      	b.n	80098a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800986a:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <prvInsertTimerInActiveList+0x7c>)
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3304      	adds	r3, #4
 8009872:	4619      	mov	r1, r3
 8009874:	4610      	mov	r0, r2
 8009876:	f7fe f9be 	bl	8007bf6 <vListInsert>
 800987a:	e012      	b.n	80098a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d206      	bcs.n	8009892 <prvInsertTimerInActiveList+0x62>
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d302      	bcc.n	8009892 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e007      	b.n	80098a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009892:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <prvInsertTimerInActiveList+0x80>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7fe f9aa 	bl	8007bf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098a2:	697b      	ldr	r3, [r7, #20]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20005614 	.word	0x20005614
 80098b0:	20005610 	.word	0x20005610

080098b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08e      	sub	sp, #56	@ 0x38
 80098b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ba:	e0ce      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	da19      	bge.n	80098f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098c2:	1d3b      	adds	r3, r7, #4
 80098c4:	3304      	adds	r3, #4
 80098c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10b      	bne.n	80098e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	61fb      	str	r3, [r7, #28]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ec:	6850      	ldr	r0, [r2, #4]
 80098ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f0:	6892      	ldr	r2, [r2, #8]
 80098f2:	4611      	mov	r1, r2
 80098f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f2c0 80ae 	blt.w	8009a5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800990a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990c:	3304      	adds	r3, #4
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe f9aa 	bl	8007c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009914:	463b      	mov	r3, r7
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff ff6a 	bl	80097f0 <prvSampleTimeNow>
 800991c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b09      	cmp	r3, #9
 8009922:	f200 8097 	bhi.w	8009a54 <prvProcessReceivedCommands+0x1a0>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <prvProcessReceivedCommands+0x78>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009955 	.word	0x08009955
 8009930:	08009955 	.word	0x08009955
 8009934:	08009955 	.word	0x08009955
 8009938:	080099cb 	.word	0x080099cb
 800993c:	080099df 	.word	0x080099df
 8009940:	08009a2b 	.word	0x08009a2b
 8009944:	08009955 	.word	0x08009955
 8009948:	08009955 	.word	0x08009955
 800994c:	080099cb 	.word	0x080099cb
 8009950:	080099df 	.word	0x080099df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	b2da      	uxtb	r2, r3
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	18d1      	adds	r1, r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009974:	f7ff ff5c 	bl	8009830 <prvInsertTimerInActiveList>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d06c      	beq.n	8009a58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009984:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d061      	beq.n	8009a58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	441a      	add	r2, r3
 800999c:	2300      	movs	r3, #0
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	2100      	movs	r1, #0
 80099a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099a6:	f7ff fe01 	bl	80095ac <xTimerGenericCommand>
 80099aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d152      	bne.n	8009a58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	61bb      	str	r3, [r7, #24]
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	e7fd      	b.n	80099c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d0:	f023 0301 	bic.w	r3, r3, #1
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099dc:	e03d      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	617b      	str	r3, [r7, #20]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	18d1      	adds	r1, r2, r3
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a24:	f7ff ff04 	bl	8009830 <prvInsertTimerInActiveList>
					break;
 8009a28:	e017      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a3a:	f000 fbe5 	bl	800a208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a3e:	e00c      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a46:	f023 0301 	bic.w	r3, r3, #1
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a52:	e002      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <prvProcessReceivedCommands+0x1a6>
					break;
 8009a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a5a:	4b08      	ldr	r3, [pc, #32]	@ (8009a7c <prvProcessReceivedCommands+0x1c8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1d39      	adds	r1, r7, #4
 8009a60:	2200      	movs	r2, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fbd4 	bl	8008210 <xQueueReceive>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f47f af26 	bne.w	80098bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	3730      	adds	r7, #48	@ 0x30
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20005618 	.word	0x20005618

08009a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a86:	e049      	b.n	8009b1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a88:	4b2e      	ldr	r3, [pc, #184]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a92:	4b2c      	ldr	r3, [pc, #176]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe f8e1 	bl	8007c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02f      	beq.n	8009b1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d90e      	bls.n	8009aec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ada:	4b1a      	ldr	r3, [pc, #104]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f7fe f886 	bl	8007bf6 <vListInsert>
 8009aea:	e017      	b.n	8009b1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aec:	2300      	movs	r3, #0
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2300      	movs	r3, #0
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	2100      	movs	r1, #0
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff fd58 	bl	80095ac <xTimerGenericCommand>
 8009afc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10b      	bne.n	8009b1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	603b      	str	r3, [r7, #0]
}
 8009b16:	bf00      	nop
 8009b18:	bf00      	nop
 8009b1a:	e7fd      	b.n	8009b18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b1c:	4b09      	ldr	r3, [pc, #36]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1b0      	bne.n	8009a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b26:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <prvSwitchTimerLists+0xc8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a04      	ldr	r2, [pc, #16]	@ (8009b44 <prvSwitchTimerLists+0xc4>)
 8009b32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b34:	4a04      	ldr	r2, [pc, #16]	@ (8009b48 <prvSwitchTimerLists+0xc8>)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	6013      	str	r3, [r2, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20005610 	.word	0x20005610
 8009b48:	20005614 	.word	0x20005614

08009b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b52:	f000 f969 	bl	8009e28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b56:	4b15      	ldr	r3, [pc, #84]	@ (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d120      	bne.n	8009ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b5e:	4814      	ldr	r0, [pc, #80]	@ (8009bb0 <prvCheckForValidListAndQueue+0x64>)
 8009b60:	f7fd fff8 	bl	8007b54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b64:	4813      	ldr	r0, [pc, #76]	@ (8009bb4 <prvCheckForValidListAndQueue+0x68>)
 8009b66:	f7fd fff5 	bl	8007b54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b6a:	4b13      	ldr	r3, [pc, #76]	@ (8009bb8 <prvCheckForValidListAndQueue+0x6c>)
 8009b6c:	4a10      	ldr	r2, [pc, #64]	@ (8009bb0 <prvCheckForValidListAndQueue+0x64>)
 8009b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b70:	4b12      	ldr	r3, [pc, #72]	@ (8009bbc <prvCheckForValidListAndQueue+0x70>)
 8009b72:	4a10      	ldr	r2, [pc, #64]	@ (8009bb4 <prvCheckForValidListAndQueue+0x68>)
 8009b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b76:	2300      	movs	r3, #0
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <prvCheckForValidListAndQueue+0x74>)
 8009b7c:	4a11      	ldr	r2, [pc, #68]	@ (8009bc4 <prvCheckForValidListAndQueue+0x78>)
 8009b7e:	2110      	movs	r1, #16
 8009b80:	200a      	movs	r0, #10
 8009b82:	f7fe f905 	bl	8007d90 <xQueueGenericCreateStatic>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4a08      	ldr	r2, [pc, #32]	@ (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b8c:	4b07      	ldr	r3, [pc, #28]	@ (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b94:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <prvCheckForValidListAndQueue+0x60>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	490b      	ldr	r1, [pc, #44]	@ (8009bc8 <prvCheckForValidListAndQueue+0x7c>)
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fd2a 	bl	80085f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ba0:	f000 f974 	bl	8009e8c <vPortExitCritical>
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20005618 	.word	0x20005618
 8009bb0:	200055e8 	.word	0x200055e8
 8009bb4:	200055fc 	.word	0x200055fc
 8009bb8:	20005610 	.word	0x20005610
 8009bbc:	20005614 	.word	0x20005614
 8009bc0:	200056c4 	.word	0x200056c4
 8009bc4:	20005624 	.word	0x20005624
 8009bc8:	08018664 	.word	0x08018664

08009bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3b04      	subs	r3, #4
 8009bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3b04      	subs	r3, #4
 8009bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f023 0201 	bic.w	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8009c30 <pxPortInitialiseStack+0x64>)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b14      	subs	r3, #20
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3b04      	subs	r3, #4
 8009c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f06f 0202 	mvn.w	r2, #2
 8009c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3b20      	subs	r3, #32
 8009c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c22:	68fb      	ldr	r3, [r7, #12]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	08009c35 	.word	0x08009c35

08009c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c3e:	4b13      	ldr	r3, [pc, #76]	@ (8009c8c <prvTaskExitError+0x58>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c46:	d00b      	beq.n	8009c60 <prvTaskExitError+0x2c>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	60fb      	str	r3, [r7, #12]
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	e7fd      	b.n	8009c5c <prvTaskExitError+0x28>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60bb      	str	r3, [r7, #8]
}
 8009c72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c74:	bf00      	nop
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0fc      	beq.n	8009c76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	20000018 	.word	0x20000018

08009c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <pxCurrentTCBConst2>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	6808      	ldr	r0, [r1, #0]
 8009c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f380 8809 	msr	PSP, r0
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	4770      	bx	lr
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst2>:
 8009cb0:	200050e8 	.word	0x200050e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cb8:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <prvPortStartFirstTask+0x24>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f380 8808 	msr	MSP, r0
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8814 	msr	CONTROL, r0
 8009cca:	b662      	cpsie	i
 8009ccc:	b661      	cpsie	f
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	df00      	svc	0
 8009cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cda:	bf00      	nop
 8009cdc:	e000ed08 	.word	0xe000ed08

08009ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ce6:	4b47      	ldr	r3, [pc, #284]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a47      	ldr	r2, [pc, #284]	@ (8009e08 <xPortStartScheduler+0x128>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10b      	bne.n	8009d08 <xPortStartScheduler+0x28>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	613b      	str	r3, [r7, #16]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d08:	4b3e      	ldr	r3, [pc, #248]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009e0c <xPortStartScheduler+0x12c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d10b      	bne.n	8009d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60fb      	str	r3, [r7, #12]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d2a:	4b39      	ldr	r3, [pc, #228]	@ (8009e10 <xPortStartScheduler+0x130>)
 8009d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	22ff      	movs	r2, #255	@ 0xff
 8009d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b31      	ldr	r3, [pc, #196]	@ (8009e14 <xPortStartScheduler+0x134>)
 8009d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d52:	4b31      	ldr	r3, [pc, #196]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d54:	2207      	movs	r2, #7
 8009d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d58:	e009      	b.n	8009d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	4a2d      	ldr	r2, [pc, #180]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d76:	2b80      	cmp	r3, #128	@ 0x80
 8009d78:	d0ef      	beq.n	8009d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d7a:	4b27      	ldr	r3, [pc, #156]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f1c3 0307 	rsb	r3, r3, #7
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d00b      	beq.n	8009d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009da8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009db0:	4a19      	ldr	r2, [pc, #100]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dbc:	4b17      	ldr	r3, [pc, #92]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dc8:	4b14      	ldr	r3, [pc, #80]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a13      	ldr	r2, [pc, #76]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dd4:	f000 f8da 	bl	8009f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dd8:	4b11      	ldr	r3, [pc, #68]	@ (8009e20 <xPortStartScheduler+0x140>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dde:	f000 f8f9 	bl	8009fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dee:	f7ff ff63 	bl	8009cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009df2:	f7ff f817 	bl	8008e24 <vTaskSwitchContext>
	prvTaskExitError();
 8009df6:	f7ff ff1d 	bl	8009c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed00 	.word	0xe000ed00
 8009e08:	410fc271 	.word	0x410fc271
 8009e0c:	410fc270 	.word	0x410fc270
 8009e10:	e000e400 	.word	0xe000e400
 8009e14:	20005714 	.word	0x20005714
 8009e18:	20005718 	.word	0x20005718
 8009e1c:	e000ed20 	.word	0xe000ed20
 8009e20:	20000018 	.word	0x20000018
 8009e24:	e000ef34 	.word	0xe000ef34

08009e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	607b      	str	r3, [r7, #4]
}
 8009e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e42:	4b10      	ldr	r3, [pc, #64]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a0e      	ldr	r2, [pc, #56]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d110      	bne.n	8009e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e54:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <vPortEnterCritical+0x60>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00b      	beq.n	8009e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	603b      	str	r3, [r7, #0]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <vPortEnterCritical+0x4a>
	}
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000018 	.word	0x20000018
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <vPortExitCritical+0x50>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <vPortExitCritical+0x26>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <vPortExitCritical+0x50>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <vPortExitCritical+0x50>)
 8009eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ebc:	4b07      	ldr	r3, [pc, #28]	@ (8009edc <vPortExitCritical+0x50>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d105      	bne.n	8009ed0 <vPortExitCritical+0x44>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20000018 	.word	0x20000018

08009ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ee0:	f3ef 8009 	mrs	r0, PSP
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4b15      	ldr	r3, [pc, #84]	@ (8009f40 <pxCurrentTCBConst>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	f01e 0f10 	tst.w	lr, #16
 8009ef0:	bf08      	it	eq
 8009ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f04:	f380 8811 	msr	BASEPRI, r0
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f7fe ff88 	bl	8008e24 <vTaskSwitchContext>
 8009f14:	f04f 0000 	mov.w	r0, #0
 8009f18:	f380 8811 	msr	BASEPRI, r0
 8009f1c:	bc09      	pop	{r0, r3}
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	6808      	ldr	r0, [r1, #0]
 8009f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f26:	f01e 0f10 	tst.w	lr, #16
 8009f2a:	bf08      	it	eq
 8009f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f30:	f380 8809 	msr	PSP, r0
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w

08009f40 <pxCurrentTCBConst>:
 8009f40:	200050e8 	.word	0x200050e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f62:	f7fe fea5 	bl	8008cb0 <xTaskIncrementTick>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <xPortSysTickHandler+0x40>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f96:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <vPortSetupTimerInterrupt+0x38>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc8 <vPortSetupTimerInterrupt+0x3c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8009fcc <vPortSetupTimerInterrupt+0x40>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	4a09      	ldr	r2, [pc, #36]	@ (8009fd0 <vPortSetupTimerInterrupt+0x44>)
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fae:	4b04      	ldr	r3, [pc, #16]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	e000e010 	.word	0xe000e010
 8009fc4:	e000e018 	.word	0xe000e018
 8009fc8:	2000000c 	.word	0x2000000c
 8009fcc:	10624dd3 	.word	0x10624dd3
 8009fd0:	e000e014 	.word	0xe000e014

08009fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fe4 <vPortEnableVFP+0x10>
 8009fd8:	6801      	ldr	r1, [r0, #0]
 8009fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fde:	6001      	str	r1, [r0, #0]
 8009fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fe2:	bf00      	nop
 8009fe4:	e000ed88 	.word	0xe000ed88

08009fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fee:	f3ef 8305 	mrs	r3, IPSR
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b0f      	cmp	r3, #15
 8009ff8:	d915      	bls.n	800a026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ffa:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <vPortValidateInterruptPriority+0x74>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a004:	4b16      	ldr	r3, [pc, #88]	@ (800a060 <vPortValidateInterruptPriority+0x78>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	7afa      	ldrb	r2, [r7, #11]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d20b      	bcs.n	800a026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	e7fd      	b.n	800a022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a026:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <vPortValidateInterruptPriority+0x7c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a02e:	4b0e      	ldr	r3, [pc, #56]	@ (800a068 <vPortValidateInterruptPriority+0x80>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d90b      	bls.n	800a04e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	603b      	str	r3, [r7, #0]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <vPortValidateInterruptPriority+0x62>
	}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	e000e3f0 	.word	0xe000e3f0
 800a060:	20005714 	.word	0x20005714
 800a064:	e000ed0c 	.word	0xe000ed0c
 800a068:	20005718 	.word	0x20005718

0800a06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	@ 0x28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a078:	f7fe fd5e 	bl	8008b38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a07c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a084:	f000 f924 	bl	800a2d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a088:	4b5a      	ldr	r3, [pc, #360]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 8095 	bne.w	800a1c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01e      	beq.n	800a0da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a09c:	2208      	movs	r2, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d015      	beq.n	800a0da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <pvPortMalloc+0x6e>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	e7fd      	b.n	800a0d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d06f      	beq.n	800a1c0 <pvPortMalloc+0x154>
 800a0e0:	4b45      	ldr	r3, [pc, #276]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d86a      	bhi.n	800a1c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ea:	4b44      	ldr	r3, [pc, #272]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ee:	4b43      	ldr	r3, [pc, #268]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f4:	e004      	b.n	800a100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d903      	bls.n	800a112 <pvPortMalloc+0xa6>
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f1      	bne.n	800a0f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a112:	4b37      	ldr	r3, [pc, #220]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a118:	429a      	cmp	r2, r3
 800a11a:	d051      	beq.n	800a1c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2208      	movs	r2, #8
 800a122:	4413      	add	r3, r2
 800a124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	2308      	movs	r3, #8
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d920      	bls.n	800a180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4413      	add	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <pvPortMalloc+0xfc>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a17a:	69b8      	ldr	r0, [r7, #24]
 800a17c:	f000 f90a 	bl	800a394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a180:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a18c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <pvPortMalloc+0x194>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d203      	bcs.n	800a1a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a19a:	4b17      	ldr	r3, [pc, #92]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a18      	ldr	r2, [pc, #96]	@ (800a200 <pvPortMalloc+0x194>)
 800a1a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <pvPortMalloc+0x198>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	4a11      	ldr	r2, [pc, #68]	@ (800a204 <pvPortMalloc+0x198>)
 800a1be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1c0:	f7fe fcc8 	bl	8008b54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3728      	adds	r7, #40	@ 0x28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	20009324 	.word	0x20009324
 800a1f4:	20009338 	.word	0x20009338
 800a1f8:	20009328 	.word	0x20009328
 800a1fc:	2000931c 	.word	0x2000931c
 800a200:	2000932c 	.word	0x2000932c
 800a204:	20009330 	.word	0x20009330

0800a208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d04f      	beq.n	800a2ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a21a:	2308      	movs	r3, #8
 800a21c:	425b      	negs	r3, r3
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b25      	ldr	r3, [pc, #148]	@ (800a2c4 <vPortFree+0xbc>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4013      	ands	r3, r2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <vPortFree+0x46>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60fb      	str	r3, [r7, #12]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <vPortFree+0x66>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60bb      	str	r3, [r7, #8]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <vPortFree+0xbc>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4013      	ands	r3, r2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01e      	beq.n	800a2ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11a      	bne.n	800a2ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <vPortFree+0xbc>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a294:	f7fe fc50 	bl	8008b38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <vPortFree+0xc0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4a09      	ldr	r2, [pc, #36]	@ (800a2c8 <vPortFree+0xc0>)
 800a2a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2a6:	6938      	ldr	r0, [r7, #16]
 800a2a8:	f000 f874 	bl	800a394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2ac:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <vPortFree+0xc4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a06      	ldr	r2, [pc, #24]	@ (800a2cc <vPortFree+0xc4>)
 800a2b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2b6:	f7fe fc4d 	bl	8008b54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20009338 	.word	0x20009338
 800a2c8:	20009328 	.word	0x20009328
 800a2cc:	20009334 	.word	0x20009334

0800a2d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a2da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2dc:	4b27      	ldr	r3, [pc, #156]	@ (800a37c <prvHeapInit+0xac>)
 800a2de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3307      	adds	r3, #7
 800a2ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a37c <prvHeapInit+0xac>)
 800a300:	4413      	add	r3, r2
 800a302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a308:	4a1d      	ldr	r2, [pc, #116]	@ (800a380 <prvHeapInit+0xb0>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a30e:	4b1c      	ldr	r3, [pc, #112]	@ (800a380 <prvHeapInit+0xb0>)
 800a310:	2200      	movs	r2, #0
 800a312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	4413      	add	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a31c:	2208      	movs	r2, #8
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <prvHeapInit+0xb4>)
 800a330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a332:	4b14      	ldr	r3, [pc, #80]	@ (800a384 <prvHeapInit+0xb4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a33a:	4b12      	ldr	r3, [pc, #72]	@ (800a384 <prvHeapInit+0xb4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	1ad2      	subs	r2, r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a350:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <prvHeapInit+0xb4>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4a0a      	ldr	r2, [pc, #40]	@ (800a388 <prvHeapInit+0xb8>)
 800a35e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	4a09      	ldr	r2, [pc, #36]	@ (800a38c <prvHeapInit+0xbc>)
 800a366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a368:	4b09      	ldr	r3, [pc, #36]	@ (800a390 <prvHeapInit+0xc0>)
 800a36a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a36e:	601a      	str	r2, [r3, #0]
}
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	2000571c 	.word	0x2000571c
 800a380:	2000931c 	.word	0x2000931c
 800a384:	20009324 	.word	0x20009324
 800a388:	2000932c 	.word	0x2000932c
 800a38c:	20009328 	.word	0x20009328
 800a390:	20009338 	.word	0x20009338

0800a394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a39c:	4b28      	ldr	r3, [pc, #160]	@ (800a440 <prvInsertBlockIntoFreeList+0xac>)
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	e002      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x14>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d8f7      	bhi.n	800a3a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d108      	bne.n	800a3d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d118      	bne.n	800a41c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	4b15      	ldr	r3, [pc, #84]	@ (800a444 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d00d      	beq.n	800a412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	441a      	add	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e008      	b.n	800a424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a412:	4b0c      	ldr	r3, [pc, #48]	@ (800a444 <prvInsertBlockIntoFreeList+0xb0>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	e003      	b.n	800a424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	2000931c 	.word	0x2000931c
 800a444:	20009324 	.word	0x20009324

0800a448 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a448:	4b04      	ldr	r3, [pc, #16]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	b10a      	cbz	r2, 800a452 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a44e:	4803      	ldr	r0, [pc, #12]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a450:	4770      	bx	lr
 800a452:	4a03      	ldr	r2, [pc, #12]	@ (800a460 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a454:	4801      	ldr	r0, [pc, #4]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	4770      	bx	lr
 800a45c:	20000024 	.word	0x20000024
 800a460:	200001d8 	.word	0x200001d8

0800a464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a464:	4a02      	ldr	r2, [pc, #8]	@ (800a470 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a466:	4b03      	ldr	r3, [pc, #12]	@ (800a474 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	200001d8 	.word	0x200001d8
 800a474:	20000024 	.word	0x20000024

0800a478 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a478:	f003 b9a4 	b.w	800d7c4 <geometry_msgs__msg__Twist__init>

0800a47c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a47c:	f003 b9c6 	b.w	800d80c <geometry_msgs__msg__Twist__fini>

0800a480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a480:	b510      	push	{r4, lr}
 800a482:	f000 f819 	bl	800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a486:	4c07      	ldr	r4, [pc, #28]	@ (800a4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a488:	60e0      	str	r0, [r4, #12]
 800a48a:	f000 f815 	bl	800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a48e:	4b06      	ldr	r3, [pc, #24]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a490:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	b10a      	cbz	r2, 800a49a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a496:	4804      	ldr	r0, [pc, #16]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	4a04      	ldr	r2, [pc, #16]	@ (800a4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a49c:	4802      	ldr	r0, [pc, #8]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	20000030 	.word	0x20000030
 800a4a8:	200000a8 	.word	0x200000a8
 800a4ac:	200001dc 	.word	0x200001dc

0800a4b0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a4b0:	f003 b9b8 	b.w	800d824 <geometry_msgs__msg__Vector3__init>

0800a4b4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a4b4:	f003 b9ba 	b.w	800d82c <geometry_msgs__msg__Vector3__fini>

0800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	b10a      	cbz	r2, 800a4c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a4be:	4803      	ldr	r0, [pc, #12]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4c0:	4770      	bx	lr
 800a4c2:	4a03      	ldr	r2, [pc, #12]	@ (800a4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a4c4:	4801      	ldr	r0, [pc, #4]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	4770      	bx	lr
 800a4cc:	20000168 	.word	0x20000168
 800a4d0:	200001dc 	.word	0x200001dc

0800a4d4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b148      	cbz	r0, 800a4ee <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a4da:	460d      	mov	r5, r1
 800a4dc:	f000 f860 	bl	800a5a0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	1829      	adds	r1, r5, r0
 800a4e4:	f104 0018 	add.w	r0, r4, #24
 800a4e8:	f000 f85a 	bl	800a5a0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4ec:	4430      	add	r0, r6
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}

0800a4f0 <_Twist__cdr_deserialize>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b189      	cbz	r1, 800a51a <_Twist__cdr_deserialize+0x2a>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	f000 f8de 	bl	800a6b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4fc:	6843      	ldr	r3, [r0, #4]
 800a4fe:	4621      	mov	r1, r4
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	4628      	mov	r0, r5
 800a504:	4798      	blx	r3
 800a506:	f000 f8d7 	bl	800a6b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a50a:	6843      	ldr	r3, [r0, #4]
 800a50c:	f104 0118 	add.w	r1, r4, #24
 800a510:	4628      	mov	r0, r5
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a518:	4718      	bx	r3
 800a51a:	4608      	mov	r0, r1
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	bf00      	nop

0800a520 <_Twist__cdr_serialize>:
 800a520:	b510      	push	{r4, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	9101      	str	r1, [sp, #4]
 800a526:	b190      	cbz	r0, 800a54e <_Twist__cdr_serialize+0x2e>
 800a528:	4604      	mov	r4, r0
 800a52a:	f000 f8c5 	bl	800a6b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a52e:	6843      	ldr	r3, [r0, #4]
 800a530:	9901      	ldr	r1, [sp, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	4620      	mov	r0, r4
 800a536:	4798      	blx	r3
 800a538:	f000 f8be 	bl	800a6b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a53c:	6843      	ldr	r3, [r0, #4]
 800a53e:	9901      	ldr	r1, [sp, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f104 0018 	add.w	r0, r4, #24
 800a546:	b002      	add	sp, #8
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	4718      	bx	r3
 800a54e:	b002      	add	sp, #8
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop

0800a554 <_Twist__get_serialized_size>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4604      	mov	r4, r0
 800a558:	b148      	cbz	r0, 800a56e <_Twist__get_serialized_size+0x1a>
 800a55a:	2100      	movs	r1, #0
 800a55c:	f000 f820 	bl	800a5a0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a560:	4605      	mov	r5, r0
 800a562:	4601      	mov	r1, r0
 800a564:	f104 0018 	add.w	r0, r4, #24
 800a568:	f000 f81a 	bl	800a5a0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a56c:	4428      	add	r0, r5
 800a56e:	bd38      	pop	{r3, r4, r5, pc}

0800a570 <_Twist__max_serialized_size>:
 800a570:	b510      	push	{r4, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	2301      	movs	r3, #1
 800a576:	2100      	movs	r1, #0
 800a578:	f10d 0007 	add.w	r0, sp, #7
 800a57c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a580:	f000 f87e 	bl	800a680 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a584:	4604      	mov	r4, r0
 800a586:	4601      	mov	r1, r0
 800a588:	f10d 0007 	add.w	r0, sp, #7
 800a58c:	f000 f878 	bl	800a680 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a590:	4420      	add	r0, r4
 800a592:	b002      	add	sp, #8
 800a594:	bd10      	pop	{r4, pc}
 800a596:	bf00      	nop

0800a598 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a598:	4800      	ldr	r0, [pc, #0]	@ (800a59c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a59a:	4770      	bx	lr
 800a59c:	20000174 	.word	0x20000174

0800a5a0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a5a0:	b1b8      	cbz	r0, 800a5d2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a5a2:	b538      	push	{r3, r4, r5, lr}
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	2108      	movs	r1, #8
 800a5aa:	f001 f9fd 	bl	800b9a8 <ucdr_alignment>
 800a5ae:	f105 0308 	add.w	r3, r5, #8
 800a5b2:	181c      	adds	r4, r3, r0
 800a5b4:	2108      	movs	r1, #8
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f001 f9f6 	bl	800b9a8 <ucdr_alignment>
 800a5bc:	3008      	adds	r0, #8
 800a5be:	4404      	add	r4, r0
 800a5c0:	2108      	movs	r1, #8
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f001 f9f0 	bl	800b9a8 <ucdr_alignment>
 800a5c8:	f1c5 0508 	rsb	r5, r5, #8
 800a5cc:	4428      	add	r0, r5
 800a5ce:	4420      	add	r0, r4
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	4770      	bx	lr

0800a5d4 <_Vector3__cdr_deserialize>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	b171      	cbz	r1, 800a5f8 <_Vector3__cdr_deserialize+0x24>
 800a5da:	4605      	mov	r5, r0
 800a5dc:	f001 f8c6 	bl	800b76c <ucdr_deserialize_double>
 800a5e0:	f104 0108 	add.w	r1, r4, #8
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f001 f8c1 	bl	800b76c <ucdr_deserialize_double>
 800a5ea:	f104 0110 	add.w	r1, r4, #16
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f4:	f001 b8ba 	b.w	800b76c <ucdr_deserialize_double>
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}

0800a5fc <_Vector3__cdr_serialize>:
 800a5fc:	b198      	cbz	r0, 800a626 <_Vector3__cdr_serialize+0x2a>
 800a5fe:	b538      	push	{r3, r4, r5, lr}
 800a600:	ed90 0b00 	vldr	d0, [r0]
 800a604:	460d      	mov	r5, r1
 800a606:	4604      	mov	r4, r0
 800a608:	4608      	mov	r0, r1
 800a60a:	f000 ffdf 	bl	800b5cc <ucdr_serialize_double>
 800a60e:	ed94 0b02 	vldr	d0, [r4, #8]
 800a612:	4628      	mov	r0, r5
 800a614:	f000 ffda 	bl	800b5cc <ucdr_serialize_double>
 800a618:	ed94 0b04 	vldr	d0, [r4, #16]
 800a61c:	4628      	mov	r0, r5
 800a61e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a622:	f000 bfd3 	b.w	800b5cc <ucdr_serialize_double>
 800a626:	4770      	bx	lr

0800a628 <_Vector3__get_serialized_size>:
 800a628:	b198      	cbz	r0, 800a652 <_Vector3__get_serialized_size+0x2a>
 800a62a:	b510      	push	{r4, lr}
 800a62c:	2108      	movs	r1, #8
 800a62e:	2000      	movs	r0, #0
 800a630:	f001 f9ba 	bl	800b9a8 <ucdr_alignment>
 800a634:	f100 0408 	add.w	r4, r0, #8
 800a638:	2108      	movs	r1, #8
 800a63a:	4620      	mov	r0, r4
 800a63c:	f001 f9b4 	bl	800b9a8 <ucdr_alignment>
 800a640:	3008      	adds	r0, #8
 800a642:	4404      	add	r4, r0
 800a644:	2108      	movs	r1, #8
 800a646:	4620      	mov	r0, r4
 800a648:	f001 f9ae 	bl	800b9a8 <ucdr_alignment>
 800a64c:	3008      	adds	r0, #8
 800a64e:	4420      	add	r0, r4
 800a650:	bd10      	pop	{r4, pc}
 800a652:	4770      	bx	lr

0800a654 <_Vector3__max_serialized_size>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	2108      	movs	r1, #8
 800a658:	2000      	movs	r0, #0
 800a65a:	f001 f9a5 	bl	800b9a8 <ucdr_alignment>
 800a65e:	f100 0508 	add.w	r5, r0, #8
 800a662:	2108      	movs	r1, #8
 800a664:	4628      	mov	r0, r5
 800a666:	f001 f99f 	bl	800b9a8 <ucdr_alignment>
 800a66a:	f100 0408 	add.w	r4, r0, #8
 800a66e:	442c      	add	r4, r5
 800a670:	2108      	movs	r1, #8
 800a672:	4620      	mov	r0, r4
 800a674:	f001 f998 	bl	800b9a8 <ucdr_alignment>
 800a678:	3008      	adds	r0, #8
 800a67a:	4420      	add	r0, r4
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
 800a67e:	bf00      	nop

0800a680 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	2301      	movs	r3, #1
 800a684:	460c      	mov	r4, r1
 800a686:	7003      	strb	r3, [r0, #0]
 800a688:	2108      	movs	r1, #8
 800a68a:	4620      	mov	r0, r4
 800a68c:	f001 f98c 	bl	800b9a8 <ucdr_alignment>
 800a690:	f104 0508 	add.w	r5, r4, #8
 800a694:	1946      	adds	r6, r0, r5
 800a696:	2108      	movs	r1, #8
 800a698:	4630      	mov	r0, r6
 800a69a:	f001 f985 	bl	800b9a8 <ucdr_alignment>
 800a69e:	f100 0508 	add.w	r5, r0, #8
 800a6a2:	4435      	add	r5, r6
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f001 f97e 	bl	800b9a8 <ucdr_alignment>
 800a6ac:	f1c4 0408 	rsb	r4, r4, #8
 800a6b0:	4420      	add	r0, r4
 800a6b2:	4428      	add	r0, r5
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	bf00      	nop

0800a6b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a6b8:	4800      	ldr	r0, [pc, #0]	@ (800a6bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a6ba:	4770      	bx	lr
 800a6bc:	2000019c 	.word	0x2000019c

0800a6c0 <ucdr_serialize_bool>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	f001 f922 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a6cc:	b148      	cbz	r0, 800a6e2 <ucdr_serialize_bool+0x22>
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	701d      	strb	r5, [r3, #0]
 800a6d2:	68a2      	ldr	r2, [r4, #8]
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	440a      	add	r2, r1
 800a6da:	440b      	add	r3, r1
 800a6dc:	60a2      	str	r2, [r4, #8]
 800a6de:	6123      	str	r3, [r4, #16]
 800a6e0:	7561      	strb	r1, [r4, #21]
 800a6e2:	7da0      	ldrb	r0, [r4, #22]
 800a6e4:	f080 0001 	eor.w	r0, r0, #1
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	bf00      	nop

0800a6ec <ucdr_deserialize_bool>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	460d      	mov	r5, r1
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	f001 f90c 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a6f8:	b160      	cbz	r0, 800a714 <ucdr_deserialize_bool+0x28>
 800a6fa:	68a2      	ldr	r2, [r4, #8]
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a702:	3900      	subs	r1, #0
 800a704:	bf18      	it	ne
 800a706:	2101      	movne	r1, #1
 800a708:	7029      	strb	r1, [r5, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	2101      	movs	r1, #1
 800a70e:	60a2      	str	r2, [r4, #8]
 800a710:	6123      	str	r3, [r4, #16]
 800a712:	7561      	strb	r1, [r4, #21]
 800a714:	7da0      	ldrb	r0, [r4, #22]
 800a716:	f080 0001 	eor.w	r0, r0, #1
 800a71a:	bd38      	pop	{r3, r4, r5, pc}

0800a71c <ucdr_serialize_uint8_t>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	460d      	mov	r5, r1
 800a720:	2101      	movs	r1, #1
 800a722:	4604      	mov	r4, r0
 800a724:	f001 f8f4 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a728:	b148      	cbz	r0, 800a73e <ucdr_serialize_uint8_t+0x22>
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	701d      	strb	r5, [r3, #0]
 800a72e:	68a2      	ldr	r2, [r4, #8]
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	2101      	movs	r1, #1
 800a734:	440a      	add	r2, r1
 800a736:	440b      	add	r3, r1
 800a738:	60a2      	str	r2, [r4, #8]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	7561      	strb	r1, [r4, #21]
 800a73e:	7da0      	ldrb	r0, [r4, #22]
 800a740:	f080 0001 	eor.w	r0, r0, #1
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop

0800a748 <ucdr_deserialize_uint8_t>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	460d      	mov	r5, r1
 800a74c:	2101      	movs	r1, #1
 800a74e:	4604      	mov	r4, r0
 800a750:	f001 f8de 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a754:	b150      	cbz	r0, 800a76c <ucdr_deserialize_uint8_t+0x24>
 800a756:	68a3      	ldr	r3, [r4, #8]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	702b      	strb	r3, [r5, #0]
 800a75c:	68a2      	ldr	r2, [r4, #8]
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	2101      	movs	r1, #1
 800a762:	440a      	add	r2, r1
 800a764:	440b      	add	r3, r1
 800a766:	60a2      	str	r2, [r4, #8]
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	7561      	strb	r1, [r4, #21]
 800a76c:	7da0      	ldrb	r0, [r4, #22]
 800a76e:	f080 0001 	eor.w	r0, r0, #1
 800a772:	bd38      	pop	{r3, r4, r5, pc}

0800a774 <ucdr_serialize_uint16_t>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	460b      	mov	r3, r1
 800a77c:	2102      	movs	r1, #2
 800a77e:	4604      	mov	r4, r0
 800a780:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a784:	f001 f918 	bl	800b9b8 <ucdr_buffer_alignment>
 800a788:	4601      	mov	r1, r0
 800a78a:	4620      	mov	r0, r4
 800a78c:	7d67      	ldrb	r7, [r4, #21]
 800a78e:	f001 f957 	bl	800ba40 <ucdr_advance_buffer>
 800a792:	2102      	movs	r1, #2
 800a794:	4620      	mov	r0, r4
 800a796:	f001 f8af 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800a79a:	bb78      	cbnz	r0, 800a7fc <ucdr_serialize_uint16_t+0x88>
 800a79c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	d926      	bls.n	800a7f2 <ucdr_serialize_uint16_t+0x7e>
 800a7a4:	1b5e      	subs	r6, r3, r5
 800a7a6:	60a3      	str	r3, [r4, #8]
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	f1c6 0802 	rsb	r8, r6, #2
 800a7ae:	4433      	add	r3, r6
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f001 f8ab 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d03b      	beq.n	800a836 <ucdr_serialize_uint16_t+0xc2>
 800a7be:	7d23      	ldrb	r3, [r4, #20]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d04a      	beq.n	800a85a <ucdr_serialize_uint16_t+0xe6>
 800a7c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a7c8:	702b      	strb	r3, [r5, #0]
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d040      	beq.n	800a850 <ucdr_serialize_uint16_t+0xdc>
 800a7ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a7d2:	706b      	strb	r3, [r5, #1]
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	68a2      	ldr	r2, [r4, #8]
 800a7d8:	7da0      	ldrb	r0, [r4, #22]
 800a7da:	3302      	adds	r3, #2
 800a7dc:	1b9e      	subs	r6, r3, r6
 800a7de:	4442      	add	r2, r8
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	f080 0001 	eor.w	r0, r0, #1
 800a7e6:	60a2      	str	r2, [r4, #8]
 800a7e8:	6126      	str	r6, [r4, #16]
 800a7ea:	7563      	strb	r3, [r4, #21]
 800a7ec:	b002      	add	sp, #8
 800a7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 f88b 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a7fa:	b190      	cbz	r0, 800a822 <ucdr_serialize_uint16_t+0xae>
 800a7fc:	7d23      	ldrb	r3, [r4, #20]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	68a3      	ldr	r3, [r4, #8]
 800a802:	d014      	beq.n	800a82e <ucdr_serialize_uint16_t+0xba>
 800a804:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a810:	705a      	strb	r2, [r3, #1]
 800a812:	68a2      	ldr	r2, [r4, #8]
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	3202      	adds	r2, #2
 800a818:	3302      	adds	r3, #2
 800a81a:	2102      	movs	r1, #2
 800a81c:	60a2      	str	r2, [r4, #8]
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	7561      	strb	r1, [r4, #21]
 800a822:	7da0      	ldrb	r0, [r4, #22]
 800a824:	f080 0001 	eor.w	r0, r0, #1
 800a828:	b002      	add	sp, #8
 800a82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	e7ed      	b.n	800a812 <ucdr_serialize_uint16_t+0x9e>
 800a836:	68a2      	ldr	r2, [r4, #8]
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	7da0      	ldrb	r0, [r4, #22]
 800a83c:	7567      	strb	r7, [r4, #21]
 800a83e:	1b92      	subs	r2, r2, r6
 800a840:	1b9b      	subs	r3, r3, r6
 800a842:	f080 0001 	eor.w	r0, r0, #1
 800a846:	60a2      	str	r2, [r4, #8]
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	b002      	add	sp, #8
 800a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a856:	701a      	strb	r2, [r3, #0]
 800a858:	e7bc      	b.n	800a7d4 <ucdr_serialize_uint16_t+0x60>
 800a85a:	4628      	mov	r0, r5
 800a85c:	f10d 0506 	add.w	r5, sp, #6
 800a860:	4629      	mov	r1, r5
 800a862:	4632      	mov	r2, r6
 800a864:	f00c ffd3 	bl	801780e <memcpy>
 800a868:	68a0      	ldr	r0, [r4, #8]
 800a86a:	4642      	mov	r2, r8
 800a86c:	19a9      	adds	r1, r5, r6
 800a86e:	f00c ffce 	bl	801780e <memcpy>
 800a872:	e7af      	b.n	800a7d4 <ucdr_serialize_uint16_t+0x60>

0800a874 <ucdr_serialize_endian_uint16_t>:
 800a874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a878:	b083      	sub	sp, #12
 800a87a:	460d      	mov	r5, r1
 800a87c:	2102      	movs	r1, #2
 800a87e:	4604      	mov	r4, r0
 800a880:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a884:	f001 f898 	bl	800b9b8 <ucdr_buffer_alignment>
 800a888:	4601      	mov	r1, r0
 800a88a:	4620      	mov	r0, r4
 800a88c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a890:	f001 f8d6 	bl	800ba40 <ucdr_advance_buffer>
 800a894:	2102      	movs	r1, #2
 800a896:	4620      	mov	r0, r4
 800a898:	f001 f82e 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800a89c:	bb70      	cbnz	r0, 800a8fc <ucdr_serialize_endian_uint16_t+0x88>
 800a89e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a8a2:	42be      	cmp	r6, r7
 800a8a4:	d925      	bls.n	800a8f2 <ucdr_serialize_endian_uint16_t+0x7e>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	60a6      	str	r6, [r4, #8]
 800a8aa:	1bf6      	subs	r6, r6, r7
 800a8ac:	4433      	add	r3, r6
 800a8ae:	f1c6 0902 	rsb	r9, r6, #2
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f001 f82a 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d039      	beq.n	800a934 <ucdr_serialize_endian_uint16_t+0xc0>
 800a8c0:	2d01      	cmp	r5, #1
 800a8c2:	d04a      	beq.n	800a95a <ucdr_serialize_endian_uint16_t+0xe6>
 800a8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a8c8:	703b      	strb	r3, [r7, #0]
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	d040      	beq.n	800a950 <ucdr_serialize_endian_uint16_t+0xdc>
 800a8ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a8d2:	707b      	strb	r3, [r7, #1]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	68a2      	ldr	r2, [r4, #8]
 800a8d8:	7da0      	ldrb	r0, [r4, #22]
 800a8da:	3302      	adds	r3, #2
 800a8dc:	444a      	add	r2, r9
 800a8de:	1b9b      	subs	r3, r3, r6
 800a8e0:	2102      	movs	r1, #2
 800a8e2:	f080 0001 	eor.w	r0, r0, #1
 800a8e6:	60a2      	str	r2, [r4, #8]
 800a8e8:	6123      	str	r3, [r4, #16]
 800a8ea:	7561      	strb	r1, [r4, #21]
 800a8ec:	b003      	add	sp, #12
 800a8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f001 f80b 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a8fa:	b188      	cbz	r0, 800a920 <ucdr_serialize_endian_uint16_t+0xac>
 800a8fc:	2d01      	cmp	r5, #1
 800a8fe:	68a3      	ldr	r3, [r4, #8]
 800a900:	d014      	beq.n	800a92c <ucdr_serialize_endian_uint16_t+0xb8>
 800a902:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a906:	701a      	strb	r2, [r3, #0]
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a90e:	705a      	strb	r2, [r3, #1]
 800a910:	68a2      	ldr	r2, [r4, #8]
 800a912:	6923      	ldr	r3, [r4, #16]
 800a914:	3202      	adds	r2, #2
 800a916:	3302      	adds	r3, #2
 800a918:	2102      	movs	r1, #2
 800a91a:	60a2      	str	r2, [r4, #8]
 800a91c:	6123      	str	r3, [r4, #16]
 800a91e:	7561      	strb	r1, [r4, #21]
 800a920:	7da0      	ldrb	r0, [r4, #22]
 800a922:	f080 0001 	eor.w	r0, r0, #1
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	e7ed      	b.n	800a910 <ucdr_serialize_endian_uint16_t+0x9c>
 800a934:	68a2      	ldr	r2, [r4, #8]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	7da0      	ldrb	r0, [r4, #22]
 800a93a:	f884 8015 	strb.w	r8, [r4, #21]
 800a93e:	1b92      	subs	r2, r2, r6
 800a940:	1b9b      	subs	r3, r3, r6
 800a942:	f080 0001 	eor.w	r0, r0, #1
 800a946:	60a2      	str	r2, [r4, #8]
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	b003      	add	sp, #12
 800a94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a950:	68a3      	ldr	r3, [r4, #8]
 800a952:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e7bc      	b.n	800a8d4 <ucdr_serialize_endian_uint16_t+0x60>
 800a95a:	f10d 0506 	add.w	r5, sp, #6
 800a95e:	4629      	mov	r1, r5
 800a960:	4632      	mov	r2, r6
 800a962:	4638      	mov	r0, r7
 800a964:	f00c ff53 	bl	801780e <memcpy>
 800a968:	68a0      	ldr	r0, [r4, #8]
 800a96a:	464a      	mov	r2, r9
 800a96c:	19a9      	adds	r1, r5, r6
 800a96e:	f00c ff4e 	bl	801780e <memcpy>
 800a972:	e7af      	b.n	800a8d4 <ucdr_serialize_endian_uint16_t+0x60>

0800a974 <ucdr_deserialize_uint16_t>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	460d      	mov	r5, r1
 800a97a:	2102      	movs	r1, #2
 800a97c:	4604      	mov	r4, r0
 800a97e:	f001 f81b 	bl	800b9b8 <ucdr_buffer_alignment>
 800a982:	4601      	mov	r1, r0
 800a984:	4620      	mov	r0, r4
 800a986:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a98a:	f001 f859 	bl	800ba40 <ucdr_advance_buffer>
 800a98e:	2102      	movs	r1, #2
 800a990:	4620      	mov	r0, r4
 800a992:	f000 ffb1 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800a996:	bb60      	cbnz	r0, 800a9f2 <ucdr_deserialize_uint16_t+0x7e>
 800a998:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a99c:	42be      	cmp	r6, r7
 800a99e:	d923      	bls.n	800a9e8 <ucdr_deserialize_uint16_t+0x74>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	60a6      	str	r6, [r4, #8]
 800a9a4:	1bf6      	subs	r6, r6, r7
 800a9a6:	4433      	add	r3, r6
 800a9a8:	f1c6 0902 	rsb	r9, r6, #2
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f000 ffad 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d034      	beq.n	800aa24 <ucdr_deserialize_uint16_t+0xb0>
 800a9ba:	7d23      	ldrb	r3, [r4, #20]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d042      	beq.n	800aa46 <ucdr_deserialize_uint16_t+0xd2>
 800a9c0:	787b      	ldrb	r3, [r7, #1]
 800a9c2:	702b      	strb	r3, [r5, #0]
 800a9c4:	2e00      	cmp	r6, #0
 800a9c6:	d03a      	beq.n	800aa3e <ucdr_deserialize_uint16_t+0xca>
 800a9c8:	783b      	ldrb	r3, [r7, #0]
 800a9ca:	706b      	strb	r3, [r5, #1]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	68a2      	ldr	r2, [r4, #8]
 800a9d0:	7da0      	ldrb	r0, [r4, #22]
 800a9d2:	2102      	movs	r1, #2
 800a9d4:	3302      	adds	r3, #2
 800a9d6:	444a      	add	r2, r9
 800a9d8:	1b9b      	subs	r3, r3, r6
 800a9da:	7561      	strb	r1, [r4, #21]
 800a9dc:	60a2      	str	r2, [r4, #8]
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f080 0001 	eor.w	r0, r0, #1
 800a9e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 ff90 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800a9f0:	b180      	cbz	r0, 800aa14 <ucdr_deserialize_uint16_t+0xa0>
 800a9f2:	7d23      	ldrb	r3, [r4, #20]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	d011      	beq.n	800aa1e <ucdr_deserialize_uint16_t+0xaa>
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	702b      	strb	r3, [r5, #0]
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	706b      	strb	r3, [r5, #1]
 800aa04:	68a2      	ldr	r2, [r4, #8]
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	3202      	adds	r2, #2
 800aa0a:	3302      	adds	r3, #2
 800aa0c:	2102      	movs	r1, #2
 800aa0e:	60a2      	str	r2, [r4, #8]
 800aa10:	6123      	str	r3, [r4, #16]
 800aa12:	7561      	strb	r1, [r4, #21]
 800aa14:	7da0      	ldrb	r0, [r4, #22]
 800aa16:	f080 0001 	eor.w	r0, r0, #1
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	802b      	strh	r3, [r5, #0]
 800aa22:	e7ef      	b.n	800aa04 <ucdr_deserialize_uint16_t+0x90>
 800aa24:	68a2      	ldr	r2, [r4, #8]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	7da0      	ldrb	r0, [r4, #22]
 800aa2a:	f884 8015 	strb.w	r8, [r4, #21]
 800aa2e:	1b92      	subs	r2, r2, r6
 800aa30:	1b9b      	subs	r3, r3, r6
 800aa32:	60a2      	str	r2, [r4, #8]
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	f080 0001 	eor.w	r0, r0, #1
 800aa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	706b      	strb	r3, [r5, #1]
 800aa44:	e7c2      	b.n	800a9cc <ucdr_deserialize_uint16_t+0x58>
 800aa46:	4639      	mov	r1, r7
 800aa48:	4632      	mov	r2, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f00c fedf 	bl	801780e <memcpy>
 800aa50:	68a1      	ldr	r1, [r4, #8]
 800aa52:	464a      	mov	r2, r9
 800aa54:	19a8      	adds	r0, r5, r6
 800aa56:	f00c feda 	bl	801780e <memcpy>
 800aa5a:	e7b7      	b.n	800a9cc <ucdr_deserialize_uint16_t+0x58>

0800aa5c <ucdr_deserialize_endian_uint16_t>:
 800aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	460e      	mov	r6, r1
 800aa62:	2102      	movs	r1, #2
 800aa64:	4604      	mov	r4, r0
 800aa66:	4615      	mov	r5, r2
 800aa68:	f000 ffa6 	bl	800b9b8 <ucdr_buffer_alignment>
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aa74:	f000 ffe4 	bl	800ba40 <ucdr_advance_buffer>
 800aa78:	2102      	movs	r1, #2
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 ff3c 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800aa80:	bb70      	cbnz	r0, 800aae0 <ucdr_deserialize_endian_uint16_t+0x84>
 800aa82:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aa86:	4547      	cmp	r7, r8
 800aa88:	d925      	bls.n	800aad6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	60a7      	str	r7, [r4, #8]
 800aa8e:	eba7 0708 	sub.w	r7, r7, r8
 800aa92:	443b      	add	r3, r7
 800aa94:	f1c7 0a02 	rsb	sl, r7, #2
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	4651      	mov	r1, sl
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 ff37 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d034      	beq.n	800ab10 <ucdr_deserialize_endian_uint16_t+0xb4>
 800aaa6:	2e01      	cmp	r6, #1
 800aaa8:	d043      	beq.n	800ab32 <ucdr_deserialize_endian_uint16_t+0xd6>
 800aaaa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aaae:	702b      	strb	r3, [r5, #0]
 800aab0:	2f00      	cmp	r7, #0
 800aab2:	d03a      	beq.n	800ab2a <ucdr_deserialize_endian_uint16_t+0xce>
 800aab4:	f898 3000 	ldrb.w	r3, [r8]
 800aab8:	706b      	strb	r3, [r5, #1]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	68a2      	ldr	r2, [r4, #8]
 800aabe:	7da0      	ldrb	r0, [r4, #22]
 800aac0:	2102      	movs	r1, #2
 800aac2:	3302      	adds	r3, #2
 800aac4:	4452      	add	r2, sl
 800aac6:	1bdb      	subs	r3, r3, r7
 800aac8:	7561      	strb	r1, [r4, #21]
 800aaca:	60a2      	str	r2, [r4, #8]
 800aacc:	6123      	str	r3, [r4, #16]
 800aace:	f080 0001 	eor.w	r0, r0, #1
 800aad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad6:	2102      	movs	r1, #2
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 ff19 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800aade:	b178      	cbz	r0, 800ab00 <ucdr_deserialize_endian_uint16_t+0xa4>
 800aae0:	2e01      	cmp	r6, #1
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	d011      	beq.n	800ab0a <ucdr_deserialize_endian_uint16_t+0xae>
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	702b      	strb	r3, [r5, #0]
 800aaea:	68a3      	ldr	r3, [r4, #8]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	706b      	strb	r3, [r5, #1]
 800aaf0:	68a2      	ldr	r2, [r4, #8]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	3202      	adds	r2, #2
 800aaf6:	3302      	adds	r3, #2
 800aaf8:	2102      	movs	r1, #2
 800aafa:	60a2      	str	r2, [r4, #8]
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	7561      	strb	r1, [r4, #21]
 800ab00:	7da0      	ldrb	r0, [r4, #22]
 800ab02:	f080 0001 	eor.w	r0, r0, #1
 800ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	802b      	strh	r3, [r5, #0]
 800ab0e:	e7ef      	b.n	800aaf0 <ucdr_deserialize_endian_uint16_t+0x94>
 800ab10:	68a2      	ldr	r2, [r4, #8]
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	7da0      	ldrb	r0, [r4, #22]
 800ab16:	f884 9015 	strb.w	r9, [r4, #21]
 800ab1a:	1bd2      	subs	r2, r2, r7
 800ab1c:	1bdb      	subs	r3, r3, r7
 800ab1e:	60a2      	str	r2, [r4, #8]
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	f080 0001 	eor.w	r0, r0, #1
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	706b      	strb	r3, [r5, #1]
 800ab30:	e7c3      	b.n	800aaba <ucdr_deserialize_endian_uint16_t+0x5e>
 800ab32:	4641      	mov	r1, r8
 800ab34:	463a      	mov	r2, r7
 800ab36:	4628      	mov	r0, r5
 800ab38:	f00c fe69 	bl	801780e <memcpy>
 800ab3c:	68a1      	ldr	r1, [r4, #8]
 800ab3e:	4652      	mov	r2, sl
 800ab40:	19e8      	adds	r0, r5, r7
 800ab42:	f00c fe64 	bl	801780e <memcpy>
 800ab46:	e7b8      	b.n	800aaba <ucdr_deserialize_endian_uint16_t+0x5e>

0800ab48 <ucdr_serialize_uint32_t>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	4604      	mov	r4, r0
 800ab50:	9101      	str	r1, [sp, #4]
 800ab52:	2104      	movs	r1, #4
 800ab54:	f000 ff30 	bl	800b9b8 <ucdr_buffer_alignment>
 800ab58:	4601      	mov	r1, r0
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	7d67      	ldrb	r7, [r4, #21]
 800ab5e:	f000 ff6f 	bl	800ba40 <ucdr_advance_buffer>
 800ab62:	2104      	movs	r1, #4
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fec7 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d139      	bne.n	800abe2 <ucdr_serialize_uint32_t+0x9a>
 800ab6e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ab72:	42ab      	cmp	r3, r5
 800ab74:	d930      	bls.n	800abd8 <ucdr_serialize_uint32_t+0x90>
 800ab76:	1b5e      	subs	r6, r3, r5
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	f1c6 0804 	rsb	r8, r6, #4
 800ab80:	4433      	add	r3, r6
 800ab82:	6123      	str	r3, [r4, #16]
 800ab84:	4641      	mov	r1, r8
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 fec2 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d04c      	beq.n	800ac2a <ucdr_serialize_uint32_t+0xe2>
 800ab90:	7d23      	ldrb	r3, [r4, #20]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d063      	beq.n	800ac5e <ucdr_serialize_uint32_t+0x116>
 800ab96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab9a:	702b      	strb	r3, [r5, #0]
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	d051      	beq.n	800ac44 <ucdr_serialize_uint32_t+0xfc>
 800aba0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aba4:	706b      	strb	r3, [r5, #1]
 800aba6:	2e01      	cmp	r6, #1
 800aba8:	d050      	beq.n	800ac4c <ucdr_serialize_uint32_t+0x104>
 800abaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800abae:	70ab      	strb	r3, [r5, #2]
 800abb0:	2e02      	cmp	r6, #2
 800abb2:	d04f      	beq.n	800ac54 <ucdr_serialize_uint32_t+0x10c>
 800abb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800abb8:	70eb      	strb	r3, [r5, #3]
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	68a2      	ldr	r2, [r4, #8]
 800abbe:	7da0      	ldrb	r0, [r4, #22]
 800abc0:	3304      	adds	r3, #4
 800abc2:	1b9e      	subs	r6, r3, r6
 800abc4:	4442      	add	r2, r8
 800abc6:	2304      	movs	r3, #4
 800abc8:	f080 0001 	eor.w	r0, r0, #1
 800abcc:	60a2      	str	r2, [r4, #8]
 800abce:	6126      	str	r6, [r4, #16]
 800abd0:	7563      	strb	r3, [r4, #21]
 800abd2:	b002      	add	sp, #8
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	2104      	movs	r1, #4
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 fe98 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800abe0:	b1d0      	cbz	r0, 800ac18 <ucdr_serialize_uint32_t+0xd0>
 800abe2:	7d23      	ldrb	r3, [r4, #20]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	d01c      	beq.n	800ac24 <ucdr_serialize_uint32_t+0xdc>
 800abea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abee:	701a      	strb	r2, [r3, #0]
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abf6:	705a      	strb	r2, [r3, #1]
 800abf8:	68a3      	ldr	r3, [r4, #8]
 800abfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abfe:	709a      	strb	r2, [r3, #2]
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac06:	70da      	strb	r2, [r3, #3]
 800ac08:	68a2      	ldr	r2, [r4, #8]
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	3204      	adds	r2, #4
 800ac0e:	3304      	adds	r3, #4
 800ac10:	2104      	movs	r1, #4
 800ac12:	60a2      	str	r2, [r4, #8]
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	7561      	strb	r1, [r4, #21]
 800ac18:	7da0      	ldrb	r0, [r4, #22]
 800ac1a:	f080 0001 	eor.w	r0, r0, #1
 800ac1e:	b002      	add	sp, #8
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	9a01      	ldr	r2, [sp, #4]
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	e7ee      	b.n	800ac08 <ucdr_serialize_uint32_t+0xc0>
 800ac2a:	68a2      	ldr	r2, [r4, #8]
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	7da0      	ldrb	r0, [r4, #22]
 800ac30:	7567      	strb	r7, [r4, #21]
 800ac32:	1b92      	subs	r2, r2, r6
 800ac34:	1b9b      	subs	r3, r3, r6
 800ac36:	f080 0001 	eor.w	r0, r0, #1
 800ac3a:	60a2      	str	r2, [r4, #8]
 800ac3c:	6123      	str	r3, [r4, #16]
 800ac3e:	b002      	add	sp, #8
 800ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac52:	701a      	strb	r2, [r3, #0]
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	e7ad      	b.n	800abba <ucdr_serialize_uint32_t+0x72>
 800ac5e:	4628      	mov	r0, r5
 800ac60:	ad01      	add	r5, sp, #4
 800ac62:	4629      	mov	r1, r5
 800ac64:	4632      	mov	r2, r6
 800ac66:	f00c fdd2 	bl	801780e <memcpy>
 800ac6a:	68a0      	ldr	r0, [r4, #8]
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	19a9      	adds	r1, r5, r6
 800ac70:	f00c fdcd 	bl	801780e <memcpy>
 800ac74:	e7a1      	b.n	800abba <ucdr_serialize_uint32_t+0x72>
 800ac76:	bf00      	nop

0800ac78 <ucdr_serialize_endian_uint32_t>:
 800ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	460d      	mov	r5, r1
 800ac80:	2104      	movs	r1, #4
 800ac82:	4604      	mov	r4, r0
 800ac84:	9201      	str	r2, [sp, #4]
 800ac86:	f000 fe97 	bl	800b9b8 <ucdr_buffer_alignment>
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac92:	f000 fed5 	bl	800ba40 <ucdr_advance_buffer>
 800ac96:	2104      	movs	r1, #4
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fe2d 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d138      	bne.n	800ad14 <ucdr_serialize_endian_uint32_t+0x9c>
 800aca2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aca6:	42b7      	cmp	r7, r6
 800aca8:	d92f      	bls.n	800ad0a <ucdr_serialize_endian_uint32_t+0x92>
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	60a7      	str	r7, [r4, #8]
 800acae:	1bbf      	subs	r7, r7, r6
 800acb0:	443b      	add	r3, r7
 800acb2:	f1c7 0904 	rsb	r9, r7, #4
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	4649      	mov	r1, r9
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fe28 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d04a      	beq.n	800ad5a <ucdr_serialize_endian_uint32_t+0xe2>
 800acc4:	2d01      	cmp	r5, #1
 800acc6:	d063      	beq.n	800ad90 <ucdr_serialize_endian_uint32_t+0x118>
 800acc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800accc:	7033      	strb	r3, [r6, #0]
 800acce:	2f00      	cmp	r7, #0
 800acd0:	d051      	beq.n	800ad76 <ucdr_serialize_endian_uint32_t+0xfe>
 800acd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acd6:	7073      	strb	r3, [r6, #1]
 800acd8:	2f01      	cmp	r7, #1
 800acda:	d050      	beq.n	800ad7e <ucdr_serialize_endian_uint32_t+0x106>
 800acdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ace0:	70b3      	strb	r3, [r6, #2]
 800ace2:	2f02      	cmp	r7, #2
 800ace4:	d04f      	beq.n	800ad86 <ucdr_serialize_endian_uint32_t+0x10e>
 800ace6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acea:	70f3      	strb	r3, [r6, #3]
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	68a2      	ldr	r2, [r4, #8]
 800acf0:	7da0      	ldrb	r0, [r4, #22]
 800acf2:	3304      	adds	r3, #4
 800acf4:	444a      	add	r2, r9
 800acf6:	1bdb      	subs	r3, r3, r7
 800acf8:	2104      	movs	r1, #4
 800acfa:	f080 0001 	eor.w	r0, r0, #1
 800acfe:	60a2      	str	r2, [r4, #8]
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	7561      	strb	r1, [r4, #21]
 800ad04:	b003      	add	sp, #12
 800ad06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	2104      	movs	r1, #4
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fdff 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800ad12:	b1c8      	cbz	r0, 800ad48 <ucdr_serialize_endian_uint32_t+0xd0>
 800ad14:	2d01      	cmp	r5, #1
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	d01c      	beq.n	800ad54 <ucdr_serialize_endian_uint32_t+0xdc>
 800ad1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad26:	705a      	strb	r2, [r3, #1]
 800ad28:	68a3      	ldr	r3, [r4, #8]
 800ad2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad2e:	709a      	strb	r2, [r3, #2]
 800ad30:	68a3      	ldr	r3, [r4, #8]
 800ad32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad36:	70da      	strb	r2, [r3, #3]
 800ad38:	68a2      	ldr	r2, [r4, #8]
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	3204      	adds	r2, #4
 800ad3e:	3304      	adds	r3, #4
 800ad40:	2104      	movs	r1, #4
 800ad42:	60a2      	str	r2, [r4, #8]
 800ad44:	6123      	str	r3, [r4, #16]
 800ad46:	7561      	strb	r1, [r4, #21]
 800ad48:	7da0      	ldrb	r0, [r4, #22]
 800ad4a:	f080 0001 	eor.w	r0, r0, #1
 800ad4e:	b003      	add	sp, #12
 800ad50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad54:	9a01      	ldr	r2, [sp, #4]
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	e7ee      	b.n	800ad38 <ucdr_serialize_endian_uint32_t+0xc0>
 800ad5a:	68a2      	ldr	r2, [r4, #8]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	7da0      	ldrb	r0, [r4, #22]
 800ad60:	f884 8015 	strb.w	r8, [r4, #21]
 800ad64:	1bd2      	subs	r2, r2, r7
 800ad66:	1bdb      	subs	r3, r3, r7
 800ad68:	f080 0001 	eor.w	r0, r0, #1
 800ad6c:	60a2      	str	r2, [r4, #8]
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	b003      	add	sp, #12
 800ad72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	68a3      	ldr	r3, [r4, #8]
 800ad80:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	e7ad      	b.n	800acec <ucdr_serialize_endian_uint32_t+0x74>
 800ad90:	ad01      	add	r5, sp, #4
 800ad92:	4629      	mov	r1, r5
 800ad94:	463a      	mov	r2, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	f00c fd39 	bl	801780e <memcpy>
 800ad9c:	68a0      	ldr	r0, [r4, #8]
 800ad9e:	464a      	mov	r2, r9
 800ada0:	19e9      	adds	r1, r5, r7
 800ada2:	f00c fd34 	bl	801780e <memcpy>
 800ada6:	e7a1      	b.n	800acec <ucdr_serialize_endian_uint32_t+0x74>

0800ada8 <ucdr_deserialize_uint32_t>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	460d      	mov	r5, r1
 800adae:	2104      	movs	r1, #4
 800adb0:	4604      	mov	r4, r0
 800adb2:	f000 fe01 	bl	800b9b8 <ucdr_buffer_alignment>
 800adb6:	4601      	mov	r1, r0
 800adb8:	4620      	mov	r0, r4
 800adba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800adbe:	f000 fe3f 	bl	800ba40 <ucdr_advance_buffer>
 800adc2:	2104      	movs	r1, #4
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 fd97 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d138      	bne.n	800ae40 <ucdr_deserialize_uint32_t+0x98>
 800adce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800add2:	42b7      	cmp	r7, r6
 800add4:	d92f      	bls.n	800ae36 <ucdr_deserialize_uint32_t+0x8e>
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	60a7      	str	r7, [r4, #8]
 800adda:	1bbf      	subs	r7, r7, r6
 800addc:	443b      	add	r3, r7
 800adde:	f1c7 0904 	rsb	r9, r7, #4
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	4649      	mov	r1, r9
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 fd92 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800adec:	2800      	cmp	r0, #0
 800adee:	d046      	beq.n	800ae7e <ucdr_deserialize_uint32_t+0xd6>
 800adf0:	7d23      	ldrb	r3, [r4, #20]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d05c      	beq.n	800aeb0 <ucdr_deserialize_uint32_t+0x108>
 800adf6:	78f3      	ldrb	r3, [r6, #3]
 800adf8:	702b      	strb	r3, [r5, #0]
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	d04c      	beq.n	800ae98 <ucdr_deserialize_uint32_t+0xf0>
 800adfe:	78b3      	ldrb	r3, [r6, #2]
 800ae00:	706b      	strb	r3, [r5, #1]
 800ae02:	2f01      	cmp	r7, #1
 800ae04:	f105 0302 	add.w	r3, r5, #2
 800ae08:	d04a      	beq.n	800aea0 <ucdr_deserialize_uint32_t+0xf8>
 800ae0a:	7873      	ldrb	r3, [r6, #1]
 800ae0c:	70ab      	strb	r3, [r5, #2]
 800ae0e:	2f02      	cmp	r7, #2
 800ae10:	f105 0303 	add.w	r3, r5, #3
 800ae14:	d048      	beq.n	800aea8 <ucdr_deserialize_uint32_t+0x100>
 800ae16:	7833      	ldrb	r3, [r6, #0]
 800ae18:	70eb      	strb	r3, [r5, #3]
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	68a2      	ldr	r2, [r4, #8]
 800ae1e:	7da0      	ldrb	r0, [r4, #22]
 800ae20:	2104      	movs	r1, #4
 800ae22:	3304      	adds	r3, #4
 800ae24:	444a      	add	r2, r9
 800ae26:	1bdb      	subs	r3, r3, r7
 800ae28:	7561      	strb	r1, [r4, #21]
 800ae2a:	60a2      	str	r2, [r4, #8]
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	f080 0001 	eor.w	r0, r0, #1
 800ae32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae36:	2104      	movs	r1, #4
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 fd69 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800ae3e:	b1b0      	cbz	r0, 800ae6e <ucdr_deserialize_uint32_t+0xc6>
 800ae40:	7d23      	ldrb	r3, [r4, #20]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	d017      	beq.n	800ae78 <ucdr_deserialize_uint32_t+0xd0>
 800ae48:	78db      	ldrb	r3, [r3, #3]
 800ae4a:	702b      	strb	r3, [r5, #0]
 800ae4c:	68a3      	ldr	r3, [r4, #8]
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	706b      	strb	r3, [r5, #1]
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	785b      	ldrb	r3, [r3, #1]
 800ae56:	70ab      	strb	r3, [r5, #2]
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	70eb      	strb	r3, [r5, #3]
 800ae5e:	68a2      	ldr	r2, [r4, #8]
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	3204      	adds	r2, #4
 800ae64:	3304      	adds	r3, #4
 800ae66:	2104      	movs	r1, #4
 800ae68:	60a2      	str	r2, [r4, #8]
 800ae6a:	6123      	str	r3, [r4, #16]
 800ae6c:	7561      	strb	r1, [r4, #21]
 800ae6e:	7da0      	ldrb	r0, [r4, #22]
 800ae70:	f080 0001 	eor.w	r0, r0, #1
 800ae74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	e7ef      	b.n	800ae5e <ucdr_deserialize_uint32_t+0xb6>
 800ae7e:	68a2      	ldr	r2, [r4, #8]
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	7da0      	ldrb	r0, [r4, #22]
 800ae84:	f884 8015 	strb.w	r8, [r4, #21]
 800ae88:	1bd2      	subs	r2, r2, r7
 800ae8a:	1bdb      	subs	r3, r3, r7
 800ae8c:	60a2      	str	r2, [r4, #8]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	f080 0001 	eor.w	r0, r0, #1
 800ae94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae98:	68a3      	ldr	r3, [r4, #8]
 800ae9a:	789b      	ldrb	r3, [r3, #2]
 800ae9c:	706b      	strb	r3, [r5, #1]
 800ae9e:	1cab      	adds	r3, r5, #2
 800aea0:	68a2      	ldr	r2, [r4, #8]
 800aea2:	7852      	ldrb	r2, [r2, #1]
 800aea4:	f803 2b01 	strb.w	r2, [r3], #1
 800aea8:	68a2      	ldr	r2, [r4, #8]
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e7b4      	b.n	800ae1a <ucdr_deserialize_uint32_t+0x72>
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f00c fcaa 	bl	801780e <memcpy>
 800aeba:	68a1      	ldr	r1, [r4, #8]
 800aebc:	464a      	mov	r2, r9
 800aebe:	19e8      	adds	r0, r5, r7
 800aec0:	f00c fca5 	bl	801780e <memcpy>
 800aec4:	e7a9      	b.n	800ae1a <ucdr_deserialize_uint32_t+0x72>
 800aec6:	bf00      	nop

0800aec8 <ucdr_deserialize_endian_uint32_t>:
 800aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	460e      	mov	r6, r1
 800aece:	2104      	movs	r1, #4
 800aed0:	4604      	mov	r4, r0
 800aed2:	4615      	mov	r5, r2
 800aed4:	f000 fd70 	bl	800b9b8 <ucdr_buffer_alignment>
 800aed8:	4601      	mov	r1, r0
 800aeda:	4620      	mov	r0, r4
 800aedc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aee0:	f000 fdae 	bl	800ba40 <ucdr_advance_buffer>
 800aee4:	2104      	movs	r1, #4
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 fd06 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d13c      	bne.n	800af6a <ucdr_deserialize_endian_uint32_t+0xa2>
 800aef0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800aef4:	42bb      	cmp	r3, r7
 800aef6:	d933      	bls.n	800af60 <ucdr_deserialize_endian_uint32_t+0x98>
 800aef8:	eba3 0807 	sub.w	r8, r3, r7
 800aefc:	60a3      	str	r3, [r4, #8]
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	f1c8 0a04 	rsb	sl, r8, #4
 800af04:	4443      	add	r3, r8
 800af06:	6123      	str	r3, [r4, #16]
 800af08:	4651      	mov	r1, sl
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 fd00 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800af10:	2800      	cmp	r0, #0
 800af12:	d048      	beq.n	800afa6 <ucdr_deserialize_endian_uint32_t+0xde>
 800af14:	2e01      	cmp	r6, #1
 800af16:	d061      	beq.n	800afdc <ucdr_deserialize_endian_uint32_t+0x114>
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	702b      	strb	r3, [r5, #0]
 800af1c:	f1b8 0f00 	cmp.w	r8, #0
 800af20:	d050      	beq.n	800afc4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800af22:	78bb      	ldrb	r3, [r7, #2]
 800af24:	706b      	strb	r3, [r5, #1]
 800af26:	f1b8 0f01 	cmp.w	r8, #1
 800af2a:	f105 0302 	add.w	r3, r5, #2
 800af2e:	d04d      	beq.n	800afcc <ucdr_deserialize_endian_uint32_t+0x104>
 800af30:	787b      	ldrb	r3, [r7, #1]
 800af32:	70ab      	strb	r3, [r5, #2]
 800af34:	f1b8 0f02 	cmp.w	r8, #2
 800af38:	f105 0303 	add.w	r3, r5, #3
 800af3c:	d04a      	beq.n	800afd4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800af3e:	783b      	ldrb	r3, [r7, #0]
 800af40:	70eb      	strb	r3, [r5, #3]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	68a2      	ldr	r2, [r4, #8]
 800af46:	7da0      	ldrb	r0, [r4, #22]
 800af48:	2104      	movs	r1, #4
 800af4a:	3304      	adds	r3, #4
 800af4c:	4452      	add	r2, sl
 800af4e:	eba3 0308 	sub.w	r3, r3, r8
 800af52:	7561      	strb	r1, [r4, #21]
 800af54:	60a2      	str	r2, [r4, #8]
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	f080 0001 	eor.w	r0, r0, #1
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	2104      	movs	r1, #4
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fcd4 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800af68:	b1a8      	cbz	r0, 800af96 <ucdr_deserialize_endian_uint32_t+0xce>
 800af6a:	2e01      	cmp	r6, #1
 800af6c:	68a3      	ldr	r3, [r4, #8]
 800af6e:	d017      	beq.n	800afa0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800af70:	78db      	ldrb	r3, [r3, #3]
 800af72:	702b      	strb	r3, [r5, #0]
 800af74:	68a3      	ldr	r3, [r4, #8]
 800af76:	789b      	ldrb	r3, [r3, #2]
 800af78:	706b      	strb	r3, [r5, #1]
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	785b      	ldrb	r3, [r3, #1]
 800af7e:	70ab      	strb	r3, [r5, #2]
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	70eb      	strb	r3, [r5, #3]
 800af86:	68a2      	ldr	r2, [r4, #8]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	3204      	adds	r2, #4
 800af8c:	3304      	adds	r3, #4
 800af8e:	2104      	movs	r1, #4
 800af90:	60a2      	str	r2, [r4, #8]
 800af92:	6123      	str	r3, [r4, #16]
 800af94:	7561      	strb	r1, [r4, #21]
 800af96:	7da0      	ldrb	r0, [r4, #22]
 800af98:	f080 0001 	eor.w	r0, r0, #1
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	602b      	str	r3, [r5, #0]
 800afa4:	e7ef      	b.n	800af86 <ucdr_deserialize_endian_uint32_t+0xbe>
 800afa6:	68a2      	ldr	r2, [r4, #8]
 800afa8:	6923      	ldr	r3, [r4, #16]
 800afaa:	7da0      	ldrb	r0, [r4, #22]
 800afac:	f884 9015 	strb.w	r9, [r4, #21]
 800afb0:	eba2 0208 	sub.w	r2, r2, r8
 800afb4:	eba3 0308 	sub.w	r3, r3, r8
 800afb8:	60a2      	str	r2, [r4, #8]
 800afba:	6123      	str	r3, [r4, #16]
 800afbc:	f080 0001 	eor.w	r0, r0, #1
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	68a3      	ldr	r3, [r4, #8]
 800afc6:	789b      	ldrb	r3, [r3, #2]
 800afc8:	706b      	strb	r3, [r5, #1]
 800afca:	1cab      	adds	r3, r5, #2
 800afcc:	68a2      	ldr	r2, [r4, #8]
 800afce:	7852      	ldrb	r2, [r2, #1]
 800afd0:	f803 2b01 	strb.w	r2, [r3], #1
 800afd4:	68a2      	ldr	r2, [r4, #8]
 800afd6:	7812      	ldrb	r2, [r2, #0]
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	e7b2      	b.n	800af42 <ucdr_deserialize_endian_uint32_t+0x7a>
 800afdc:	4639      	mov	r1, r7
 800afde:	4642      	mov	r2, r8
 800afe0:	4628      	mov	r0, r5
 800afe2:	f00c fc14 	bl	801780e <memcpy>
 800afe6:	68a1      	ldr	r1, [r4, #8]
 800afe8:	4652      	mov	r2, sl
 800afea:	eb05 0008 	add.w	r0, r5, r8
 800afee:	f00c fc0e 	bl	801780e <memcpy>
 800aff2:	e7a6      	b.n	800af42 <ucdr_deserialize_endian_uint32_t+0x7a>

0800aff4 <ucdr_serialize_uint64_t>:
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	2108      	movs	r1, #8
 800affa:	b082      	sub	sp, #8
 800affc:	4604      	mov	r4, r0
 800affe:	e9cd 2300 	strd	r2, r3, [sp]
 800b002:	f000 fcd9 	bl	800b9b8 <ucdr_buffer_alignment>
 800b006:	4601      	mov	r1, r0
 800b008:	4620      	mov	r0, r4
 800b00a:	7d67      	ldrb	r7, [r4, #21]
 800b00c:	f000 fd18 	bl	800ba40 <ucdr_advance_buffer>
 800b010:	2108      	movs	r1, #8
 800b012:	4620      	mov	r0, r4
 800b014:	f000 fc70 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d14e      	bne.n	800b0ba <ucdr_serialize_uint64_t+0xc6>
 800b01c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b020:	42ab      	cmp	r3, r5
 800b022:	d945      	bls.n	800b0b0 <ucdr_serialize_uint64_t+0xbc>
 800b024:	1b5e      	subs	r6, r3, r5
 800b026:	60a3      	str	r3, [r4, #8]
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	f1c6 0808 	rsb	r8, r6, #8
 800b02e:	4433      	add	r3, r6
 800b030:	6123      	str	r3, [r4, #16]
 800b032:	4641      	mov	r1, r8
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fc6b 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d074      	beq.n	800b128 <ucdr_serialize_uint64_t+0x134>
 800b03e:	7d23      	ldrb	r3, [r4, #20]
 800b040:	2b01      	cmp	r3, #1
 800b042:	f000 809b 	beq.w	800b17c <ucdr_serialize_uint64_t+0x188>
 800b046:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b04a:	702b      	strb	r3, [r5, #0]
 800b04c:	2e00      	cmp	r6, #0
 800b04e:	d078      	beq.n	800b142 <ucdr_serialize_uint64_t+0x14e>
 800b050:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b054:	706b      	strb	r3, [r5, #1]
 800b056:	2e01      	cmp	r6, #1
 800b058:	d077      	beq.n	800b14a <ucdr_serialize_uint64_t+0x156>
 800b05a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b05e:	70ab      	strb	r3, [r5, #2]
 800b060:	2e02      	cmp	r6, #2
 800b062:	d076      	beq.n	800b152 <ucdr_serialize_uint64_t+0x15e>
 800b064:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b068:	70eb      	strb	r3, [r5, #3]
 800b06a:	2e03      	cmp	r6, #3
 800b06c:	d075      	beq.n	800b15a <ucdr_serialize_uint64_t+0x166>
 800b06e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b072:	712b      	strb	r3, [r5, #4]
 800b074:	2e04      	cmp	r6, #4
 800b076:	d074      	beq.n	800b162 <ucdr_serialize_uint64_t+0x16e>
 800b078:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b07c:	716b      	strb	r3, [r5, #5]
 800b07e:	2e05      	cmp	r6, #5
 800b080:	d073      	beq.n	800b16a <ucdr_serialize_uint64_t+0x176>
 800b082:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b086:	71ab      	strb	r3, [r5, #6]
 800b088:	2e06      	cmp	r6, #6
 800b08a:	d072      	beq.n	800b172 <ucdr_serialize_uint64_t+0x17e>
 800b08c:	f89d 3000 	ldrb.w	r3, [sp]
 800b090:	71eb      	strb	r3, [r5, #7]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	68a2      	ldr	r2, [r4, #8]
 800b096:	7da0      	ldrb	r0, [r4, #22]
 800b098:	3308      	adds	r3, #8
 800b09a:	1b9e      	subs	r6, r3, r6
 800b09c:	4442      	add	r2, r8
 800b09e:	2308      	movs	r3, #8
 800b0a0:	f080 0001 	eor.w	r0, r0, #1
 800b0a4:	60a2      	str	r2, [r4, #8]
 800b0a6:	6126      	str	r6, [r4, #16]
 800b0a8:	7563      	strb	r3, [r4, #21]
 800b0aa:	b002      	add	sp, #8
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	2108      	movs	r1, #8
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fc2c 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b0b8:	b350      	cbz	r0, 800b110 <ucdr_serialize_uint64_t+0x11c>
 800b0ba:	7d23      	ldrb	r3, [r4, #20]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d02d      	beq.n	800b11c <ucdr_serialize_uint64_t+0x128>
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	68a3      	ldr	r3, [r4, #8]
 800b0ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0ce:	705a      	strb	r2, [r3, #1]
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0d6:	709a      	strb	r2, [r3, #2]
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0de:	70da      	strb	r2, [r3, #3]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b0e6:	711a      	strb	r2, [r3, #4]
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b0ee:	715a      	strb	r2, [r3, #5]
 800b0f0:	68a3      	ldr	r3, [r4, #8]
 800b0f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b0f6:	719a      	strb	r2, [r3, #6]
 800b0f8:	68a3      	ldr	r3, [r4, #8]
 800b0fa:	f89d 2000 	ldrb.w	r2, [sp]
 800b0fe:	71da      	strb	r2, [r3, #7]
 800b100:	68a2      	ldr	r2, [r4, #8]
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	3208      	adds	r2, #8
 800b106:	3308      	adds	r3, #8
 800b108:	2108      	movs	r1, #8
 800b10a:	60a2      	str	r2, [r4, #8]
 800b10c:	6123      	str	r3, [r4, #16]
 800b10e:	7561      	strb	r1, [r4, #21]
 800b110:	7da0      	ldrb	r0, [r4, #22]
 800b112:	f080 0001 	eor.w	r0, r0, #1
 800b116:	b002      	add	sp, #8
 800b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11c:	466b      	mov	r3, sp
 800b11e:	cb03      	ldmia	r3!, {r0, r1}
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	6018      	str	r0, [r3, #0]
 800b124:	6059      	str	r1, [r3, #4]
 800b126:	e7eb      	b.n	800b100 <ucdr_serialize_uint64_t+0x10c>
 800b128:	68a2      	ldr	r2, [r4, #8]
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	7da0      	ldrb	r0, [r4, #22]
 800b12e:	7567      	strb	r7, [r4, #21]
 800b130:	1b92      	subs	r2, r2, r6
 800b132:	1b9b      	subs	r3, r3, r6
 800b134:	f080 0001 	eor.w	r0, r0, #1
 800b138:	60a2      	str	r2, [r4, #8]
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	b002      	add	sp, #8
 800b13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	f89d 2000 	ldrb.w	r2, [sp]
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	e78a      	b.n	800b092 <ucdr_serialize_uint64_t+0x9e>
 800b17c:	4628      	mov	r0, r5
 800b17e:	466d      	mov	r5, sp
 800b180:	4629      	mov	r1, r5
 800b182:	4632      	mov	r2, r6
 800b184:	f00c fb43 	bl	801780e <memcpy>
 800b188:	68a0      	ldr	r0, [r4, #8]
 800b18a:	4642      	mov	r2, r8
 800b18c:	19a9      	adds	r1, r5, r6
 800b18e:	f00c fb3e 	bl	801780e <memcpy>
 800b192:	e77e      	b.n	800b092 <ucdr_serialize_uint64_t+0x9e>

0800b194 <ucdr_serialize_int16_t>:
 800b194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	460b      	mov	r3, r1
 800b19c:	2102      	movs	r1, #2
 800b19e:	4604      	mov	r4, r0
 800b1a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b1a4:	f000 fc08 	bl	800b9b8 <ucdr_buffer_alignment>
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	7d67      	ldrb	r7, [r4, #21]
 800b1ae:	f000 fc47 	bl	800ba40 <ucdr_advance_buffer>
 800b1b2:	2102      	movs	r1, #2
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fb9f 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b1ba:	bb78      	cbnz	r0, 800b21c <ucdr_serialize_int16_t+0x88>
 800b1bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1c0:	42ab      	cmp	r3, r5
 800b1c2:	d926      	bls.n	800b212 <ucdr_serialize_int16_t+0x7e>
 800b1c4:	1b5e      	subs	r6, r3, r5
 800b1c6:	60a3      	str	r3, [r4, #8]
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	f1c6 0802 	rsb	r8, r6, #2
 800b1ce:	4433      	add	r3, r6
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fb9b 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d03b      	beq.n	800b256 <ucdr_serialize_int16_t+0xc2>
 800b1de:	7d23      	ldrb	r3, [r4, #20]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d04a      	beq.n	800b27a <ucdr_serialize_int16_t+0xe6>
 800b1e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1e8:	702b      	strb	r3, [r5, #0]
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	d040      	beq.n	800b270 <ucdr_serialize_int16_t+0xdc>
 800b1ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1f2:	706b      	strb	r3, [r5, #1]
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	68a2      	ldr	r2, [r4, #8]
 800b1f8:	7da0      	ldrb	r0, [r4, #22]
 800b1fa:	3302      	adds	r3, #2
 800b1fc:	1b9e      	subs	r6, r3, r6
 800b1fe:	4442      	add	r2, r8
 800b200:	2302      	movs	r3, #2
 800b202:	f080 0001 	eor.w	r0, r0, #1
 800b206:	60a2      	str	r2, [r4, #8]
 800b208:	6126      	str	r6, [r4, #16]
 800b20a:	7563      	strb	r3, [r4, #21]
 800b20c:	b002      	add	sp, #8
 800b20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b212:	2102      	movs	r1, #2
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fb7b 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b21a:	b190      	cbz	r0, 800b242 <ucdr_serialize_int16_t+0xae>
 800b21c:	7d23      	ldrb	r3, [r4, #20]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	d014      	beq.n	800b24e <ucdr_serialize_int16_t+0xba>
 800b224:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b230:	705a      	strb	r2, [r3, #1]
 800b232:	68a2      	ldr	r2, [r4, #8]
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	3202      	adds	r2, #2
 800b238:	3302      	adds	r3, #2
 800b23a:	2102      	movs	r1, #2
 800b23c:	60a2      	str	r2, [r4, #8]
 800b23e:	6123      	str	r3, [r4, #16]
 800b240:	7561      	strb	r1, [r4, #21]
 800b242:	7da0      	ldrb	r0, [r4, #22]
 800b244:	f080 0001 	eor.w	r0, r0, #1
 800b248:	b002      	add	sp, #8
 800b24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	e7ed      	b.n	800b232 <ucdr_serialize_int16_t+0x9e>
 800b256:	68a2      	ldr	r2, [r4, #8]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	7da0      	ldrb	r0, [r4, #22]
 800b25c:	7567      	strb	r7, [r4, #21]
 800b25e:	1b92      	subs	r2, r2, r6
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	f080 0001 	eor.w	r0, r0, #1
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	6123      	str	r3, [r4, #16]
 800b26a:	b002      	add	sp, #8
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	68a3      	ldr	r3, [r4, #8]
 800b272:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	e7bc      	b.n	800b1f4 <ucdr_serialize_int16_t+0x60>
 800b27a:	4628      	mov	r0, r5
 800b27c:	f10d 0506 	add.w	r5, sp, #6
 800b280:	4629      	mov	r1, r5
 800b282:	4632      	mov	r2, r6
 800b284:	f00c fac3 	bl	801780e <memcpy>
 800b288:	68a0      	ldr	r0, [r4, #8]
 800b28a:	4642      	mov	r2, r8
 800b28c:	19a9      	adds	r1, r5, r6
 800b28e:	f00c fabe 	bl	801780e <memcpy>
 800b292:	e7af      	b.n	800b1f4 <ucdr_serialize_int16_t+0x60>

0800b294 <ucdr_deserialize_int16_t>:
 800b294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b298:	460d      	mov	r5, r1
 800b29a:	2102      	movs	r1, #2
 800b29c:	4604      	mov	r4, r0
 800b29e:	f000 fb8b 	bl	800b9b8 <ucdr_buffer_alignment>
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b2aa:	f000 fbc9 	bl	800ba40 <ucdr_advance_buffer>
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fb21 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b2b6:	bb60      	cbnz	r0, 800b312 <ucdr_deserialize_int16_t+0x7e>
 800b2b8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b2bc:	42be      	cmp	r6, r7
 800b2be:	d923      	bls.n	800b308 <ucdr_deserialize_int16_t+0x74>
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	60a6      	str	r6, [r4, #8]
 800b2c4:	1bf6      	subs	r6, r6, r7
 800b2c6:	4433      	add	r3, r6
 800b2c8:	f1c6 0902 	rsb	r9, r6, #2
 800b2cc:	6123      	str	r3, [r4, #16]
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb1d 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d034      	beq.n	800b344 <ucdr_deserialize_int16_t+0xb0>
 800b2da:	7d23      	ldrb	r3, [r4, #20]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d042      	beq.n	800b366 <ucdr_deserialize_int16_t+0xd2>
 800b2e0:	787b      	ldrb	r3, [r7, #1]
 800b2e2:	702b      	strb	r3, [r5, #0]
 800b2e4:	2e00      	cmp	r6, #0
 800b2e6:	d03a      	beq.n	800b35e <ucdr_deserialize_int16_t+0xca>
 800b2e8:	783b      	ldrb	r3, [r7, #0]
 800b2ea:	706b      	strb	r3, [r5, #1]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	68a2      	ldr	r2, [r4, #8]
 800b2f0:	7da0      	ldrb	r0, [r4, #22]
 800b2f2:	2102      	movs	r1, #2
 800b2f4:	3302      	adds	r3, #2
 800b2f6:	444a      	add	r2, r9
 800b2f8:	1b9b      	subs	r3, r3, r6
 800b2fa:	7561      	strb	r1, [r4, #21]
 800b2fc:	60a2      	str	r2, [r4, #8]
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	f080 0001 	eor.w	r0, r0, #1
 800b304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b308:	2102      	movs	r1, #2
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fb00 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b310:	b180      	cbz	r0, 800b334 <ucdr_deserialize_int16_t+0xa0>
 800b312:	7d23      	ldrb	r3, [r4, #20]
 800b314:	2b01      	cmp	r3, #1
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	d011      	beq.n	800b33e <ucdr_deserialize_int16_t+0xaa>
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	702b      	strb	r3, [r5, #0]
 800b31e:	68a3      	ldr	r3, [r4, #8]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	706b      	strb	r3, [r5, #1]
 800b324:	68a2      	ldr	r2, [r4, #8]
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	3202      	adds	r2, #2
 800b32a:	3302      	adds	r3, #2
 800b32c:	2102      	movs	r1, #2
 800b32e:	60a2      	str	r2, [r4, #8]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	7561      	strb	r1, [r4, #21]
 800b334:	7da0      	ldrb	r0, [r4, #22]
 800b336:	f080 0001 	eor.w	r0, r0, #1
 800b33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	802b      	strh	r3, [r5, #0]
 800b342:	e7ef      	b.n	800b324 <ucdr_deserialize_int16_t+0x90>
 800b344:	68a2      	ldr	r2, [r4, #8]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	7da0      	ldrb	r0, [r4, #22]
 800b34a:	f884 8015 	strb.w	r8, [r4, #21]
 800b34e:	1b92      	subs	r2, r2, r6
 800b350:	1b9b      	subs	r3, r3, r6
 800b352:	60a2      	str	r2, [r4, #8]
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	f080 0001 	eor.w	r0, r0, #1
 800b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35e:	68a3      	ldr	r3, [r4, #8]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	706b      	strb	r3, [r5, #1]
 800b364:	e7c2      	b.n	800b2ec <ucdr_deserialize_int16_t+0x58>
 800b366:	4639      	mov	r1, r7
 800b368:	4632      	mov	r2, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	f00c fa4f 	bl	801780e <memcpy>
 800b370:	68a1      	ldr	r1, [r4, #8]
 800b372:	464a      	mov	r2, r9
 800b374:	19a8      	adds	r0, r5, r6
 800b376:	f00c fa4a 	bl	801780e <memcpy>
 800b37a:	e7b7      	b.n	800b2ec <ucdr_deserialize_int16_t+0x58>

0800b37c <ucdr_serialize_int32_t>:
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	4604      	mov	r4, r0
 800b384:	9101      	str	r1, [sp, #4]
 800b386:	2104      	movs	r1, #4
 800b388:	f000 fb16 	bl	800b9b8 <ucdr_buffer_alignment>
 800b38c:	4601      	mov	r1, r0
 800b38e:	4620      	mov	r0, r4
 800b390:	7d67      	ldrb	r7, [r4, #21]
 800b392:	f000 fb55 	bl	800ba40 <ucdr_advance_buffer>
 800b396:	2104      	movs	r1, #4
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 faad 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d139      	bne.n	800b416 <ucdr_serialize_int32_t+0x9a>
 800b3a2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3a6:	42ab      	cmp	r3, r5
 800b3a8:	d930      	bls.n	800b40c <ucdr_serialize_int32_t+0x90>
 800b3aa:	1b5e      	subs	r6, r3, r5
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	f1c6 0804 	rsb	r8, r6, #4
 800b3b4:	4433      	add	r3, r6
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 faa8 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d04c      	beq.n	800b45e <ucdr_serialize_int32_t+0xe2>
 800b3c4:	7d23      	ldrb	r3, [r4, #20]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d063      	beq.n	800b492 <ucdr_serialize_int32_t+0x116>
 800b3ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3ce:	702b      	strb	r3, [r5, #0]
 800b3d0:	2e00      	cmp	r6, #0
 800b3d2:	d051      	beq.n	800b478 <ucdr_serialize_int32_t+0xfc>
 800b3d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3d8:	706b      	strb	r3, [r5, #1]
 800b3da:	2e01      	cmp	r6, #1
 800b3dc:	d050      	beq.n	800b480 <ucdr_serialize_int32_t+0x104>
 800b3de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3e2:	70ab      	strb	r3, [r5, #2]
 800b3e4:	2e02      	cmp	r6, #2
 800b3e6:	d04f      	beq.n	800b488 <ucdr_serialize_int32_t+0x10c>
 800b3e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3ec:	70eb      	strb	r3, [r5, #3]
 800b3ee:	6923      	ldr	r3, [r4, #16]
 800b3f0:	68a2      	ldr	r2, [r4, #8]
 800b3f2:	7da0      	ldrb	r0, [r4, #22]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	1b9e      	subs	r6, r3, r6
 800b3f8:	4442      	add	r2, r8
 800b3fa:	2304      	movs	r3, #4
 800b3fc:	f080 0001 	eor.w	r0, r0, #1
 800b400:	60a2      	str	r2, [r4, #8]
 800b402:	6126      	str	r6, [r4, #16]
 800b404:	7563      	strb	r3, [r4, #21]
 800b406:	b002      	add	sp, #8
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40c:	2104      	movs	r1, #4
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fa7e 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b414:	b1d0      	cbz	r0, 800b44c <ucdr_serialize_int32_t+0xd0>
 800b416:	7d23      	ldrb	r3, [r4, #20]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	d01c      	beq.n	800b458 <ucdr_serialize_int32_t+0xdc>
 800b41e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b42a:	705a      	strb	r2, [r3, #1]
 800b42c:	68a3      	ldr	r3, [r4, #8]
 800b42e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b432:	709a      	strb	r2, [r3, #2]
 800b434:	68a3      	ldr	r3, [r4, #8]
 800b436:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b43a:	70da      	strb	r2, [r3, #3]
 800b43c:	68a2      	ldr	r2, [r4, #8]
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	3204      	adds	r2, #4
 800b442:	3304      	adds	r3, #4
 800b444:	2104      	movs	r1, #4
 800b446:	60a2      	str	r2, [r4, #8]
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	7561      	strb	r1, [r4, #21]
 800b44c:	7da0      	ldrb	r0, [r4, #22]
 800b44e:	f080 0001 	eor.w	r0, r0, #1
 800b452:	b002      	add	sp, #8
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	9a01      	ldr	r2, [sp, #4]
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e7ee      	b.n	800b43c <ucdr_serialize_int32_t+0xc0>
 800b45e:	68a2      	ldr	r2, [r4, #8]
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	7da0      	ldrb	r0, [r4, #22]
 800b464:	7567      	strb	r7, [r4, #21]
 800b466:	1b92      	subs	r2, r2, r6
 800b468:	1b9b      	subs	r3, r3, r6
 800b46a:	f080 0001 	eor.w	r0, r0, #1
 800b46e:	60a2      	str	r2, [r4, #8]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	b002      	add	sp, #8
 800b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b478:	68a3      	ldr	r3, [r4, #8]
 800b47a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	68a3      	ldr	r3, [r4, #8]
 800b482:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e7ad      	b.n	800b3ee <ucdr_serialize_int32_t+0x72>
 800b492:	4628      	mov	r0, r5
 800b494:	ad01      	add	r5, sp, #4
 800b496:	4629      	mov	r1, r5
 800b498:	4632      	mov	r2, r6
 800b49a:	f00c f9b8 	bl	801780e <memcpy>
 800b49e:	68a0      	ldr	r0, [r4, #8]
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	19a9      	adds	r1, r5, r6
 800b4a4:	f00c f9b3 	bl	801780e <memcpy>
 800b4a8:	e7a1      	b.n	800b3ee <ucdr_serialize_int32_t+0x72>
 800b4aa:	bf00      	nop

0800b4ac <ucdr_deserialize_int32_t>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	2104      	movs	r1, #4
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	f000 fa7f 	bl	800b9b8 <ucdr_buffer_alignment>
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4c2:	f000 fabd 	bl	800ba40 <ucdr_advance_buffer>
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fa15 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d138      	bne.n	800b544 <ucdr_deserialize_int32_t+0x98>
 800b4d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4d6:	42b7      	cmp	r7, r6
 800b4d8:	d92f      	bls.n	800b53a <ucdr_deserialize_int32_t+0x8e>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	60a7      	str	r7, [r4, #8]
 800b4de:	1bbf      	subs	r7, r7, r6
 800b4e0:	443b      	add	r3, r7
 800b4e2:	f1c7 0904 	rsb	r9, r7, #4
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fa10 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d046      	beq.n	800b582 <ucdr_deserialize_int32_t+0xd6>
 800b4f4:	7d23      	ldrb	r3, [r4, #20]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d05c      	beq.n	800b5b4 <ucdr_deserialize_int32_t+0x108>
 800b4fa:	78f3      	ldrb	r3, [r6, #3]
 800b4fc:	702b      	strb	r3, [r5, #0]
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d04c      	beq.n	800b59c <ucdr_deserialize_int32_t+0xf0>
 800b502:	78b3      	ldrb	r3, [r6, #2]
 800b504:	706b      	strb	r3, [r5, #1]
 800b506:	2f01      	cmp	r7, #1
 800b508:	f105 0302 	add.w	r3, r5, #2
 800b50c:	d04a      	beq.n	800b5a4 <ucdr_deserialize_int32_t+0xf8>
 800b50e:	7873      	ldrb	r3, [r6, #1]
 800b510:	70ab      	strb	r3, [r5, #2]
 800b512:	2f02      	cmp	r7, #2
 800b514:	f105 0303 	add.w	r3, r5, #3
 800b518:	d048      	beq.n	800b5ac <ucdr_deserialize_int32_t+0x100>
 800b51a:	7833      	ldrb	r3, [r6, #0]
 800b51c:	70eb      	strb	r3, [r5, #3]
 800b51e:	6923      	ldr	r3, [r4, #16]
 800b520:	68a2      	ldr	r2, [r4, #8]
 800b522:	7da0      	ldrb	r0, [r4, #22]
 800b524:	2104      	movs	r1, #4
 800b526:	3304      	adds	r3, #4
 800b528:	444a      	add	r2, r9
 800b52a:	1bdb      	subs	r3, r3, r7
 800b52c:	7561      	strb	r1, [r4, #21]
 800b52e:	60a2      	str	r2, [r4, #8]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	f080 0001 	eor.w	r0, r0, #1
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	2104      	movs	r1, #4
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 f9e7 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b542:	b1b0      	cbz	r0, 800b572 <ucdr_deserialize_int32_t+0xc6>
 800b544:	7d23      	ldrb	r3, [r4, #20]
 800b546:	2b01      	cmp	r3, #1
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	d017      	beq.n	800b57c <ucdr_deserialize_int32_t+0xd0>
 800b54c:	78db      	ldrb	r3, [r3, #3]
 800b54e:	702b      	strb	r3, [r5, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	789b      	ldrb	r3, [r3, #2]
 800b554:	706b      	strb	r3, [r5, #1]
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	785b      	ldrb	r3, [r3, #1]
 800b55a:	70ab      	strb	r3, [r5, #2]
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	70eb      	strb	r3, [r5, #3]
 800b562:	68a2      	ldr	r2, [r4, #8]
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	3204      	adds	r2, #4
 800b568:	3304      	adds	r3, #4
 800b56a:	2104      	movs	r1, #4
 800b56c:	60a2      	str	r2, [r4, #8]
 800b56e:	6123      	str	r3, [r4, #16]
 800b570:	7561      	strb	r1, [r4, #21]
 800b572:	7da0      	ldrb	r0, [r4, #22]
 800b574:	f080 0001 	eor.w	r0, r0, #1
 800b578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	e7ef      	b.n	800b562 <ucdr_deserialize_int32_t+0xb6>
 800b582:	68a2      	ldr	r2, [r4, #8]
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	7da0      	ldrb	r0, [r4, #22]
 800b588:	f884 8015 	strb.w	r8, [r4, #21]
 800b58c:	1bd2      	subs	r2, r2, r7
 800b58e:	1bdb      	subs	r3, r3, r7
 800b590:	60a2      	str	r2, [r4, #8]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	f080 0001 	eor.w	r0, r0, #1
 800b598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59c:	68a3      	ldr	r3, [r4, #8]
 800b59e:	789b      	ldrb	r3, [r3, #2]
 800b5a0:	706b      	strb	r3, [r5, #1]
 800b5a2:	1cab      	adds	r3, r5, #2
 800b5a4:	68a2      	ldr	r2, [r4, #8]
 800b5a6:	7852      	ldrb	r2, [r2, #1]
 800b5a8:	f803 2b01 	strb.w	r2, [r3], #1
 800b5ac:	68a2      	ldr	r2, [r4, #8]
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	e7b4      	b.n	800b51e <ucdr_deserialize_int32_t+0x72>
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f00c f928 	bl	801780e <memcpy>
 800b5be:	68a1      	ldr	r1, [r4, #8]
 800b5c0:	464a      	mov	r2, r9
 800b5c2:	19e8      	adds	r0, r5, r7
 800b5c4:	f00c f923 	bl	801780e <memcpy>
 800b5c8:	e7a9      	b.n	800b51e <ucdr_deserialize_int32_t+0x72>
 800b5ca:	bf00      	nop

0800b5cc <ucdr_serialize_double>:
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	2108      	movs	r1, #8
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	ed8d 0b00 	vstr	d0, [sp]
 800b5da:	f000 f9ed 	bl	800b9b8 <ucdr_buffer_alignment>
 800b5de:	4601      	mov	r1, r0
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	7d67      	ldrb	r7, [r4, #21]
 800b5e4:	f000 fa2c 	bl	800ba40 <ucdr_advance_buffer>
 800b5e8:	2108      	movs	r1, #8
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 f984 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d14e      	bne.n	800b692 <ucdr_serialize_double+0xc6>
 800b5f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b5f8:	42ab      	cmp	r3, r5
 800b5fa:	d945      	bls.n	800b688 <ucdr_serialize_double+0xbc>
 800b5fc:	1b5e      	subs	r6, r3, r5
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	f1c6 0808 	rsb	r8, r6, #8
 800b606:	4433      	add	r3, r6
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	4641      	mov	r1, r8
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 f97f 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b612:	2800      	cmp	r0, #0
 800b614:	d074      	beq.n	800b700 <ucdr_serialize_double+0x134>
 800b616:	7d23      	ldrb	r3, [r4, #20]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	f000 809b 	beq.w	800b754 <ucdr_serialize_double+0x188>
 800b61e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b622:	702b      	strb	r3, [r5, #0]
 800b624:	2e00      	cmp	r6, #0
 800b626:	d078      	beq.n	800b71a <ucdr_serialize_double+0x14e>
 800b628:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b62c:	706b      	strb	r3, [r5, #1]
 800b62e:	2e01      	cmp	r6, #1
 800b630:	d077      	beq.n	800b722 <ucdr_serialize_double+0x156>
 800b632:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b636:	70ab      	strb	r3, [r5, #2]
 800b638:	2e02      	cmp	r6, #2
 800b63a:	d076      	beq.n	800b72a <ucdr_serialize_double+0x15e>
 800b63c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b640:	70eb      	strb	r3, [r5, #3]
 800b642:	2e03      	cmp	r6, #3
 800b644:	d075      	beq.n	800b732 <ucdr_serialize_double+0x166>
 800b646:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b64a:	712b      	strb	r3, [r5, #4]
 800b64c:	2e04      	cmp	r6, #4
 800b64e:	d074      	beq.n	800b73a <ucdr_serialize_double+0x16e>
 800b650:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b654:	716b      	strb	r3, [r5, #5]
 800b656:	2e05      	cmp	r6, #5
 800b658:	d073      	beq.n	800b742 <ucdr_serialize_double+0x176>
 800b65a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b65e:	71ab      	strb	r3, [r5, #6]
 800b660:	2e06      	cmp	r6, #6
 800b662:	d072      	beq.n	800b74a <ucdr_serialize_double+0x17e>
 800b664:	f89d 3000 	ldrb.w	r3, [sp]
 800b668:	71eb      	strb	r3, [r5, #7]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	68a2      	ldr	r2, [r4, #8]
 800b66e:	7da0      	ldrb	r0, [r4, #22]
 800b670:	3308      	adds	r3, #8
 800b672:	1b9e      	subs	r6, r3, r6
 800b674:	4442      	add	r2, r8
 800b676:	2308      	movs	r3, #8
 800b678:	f080 0001 	eor.w	r0, r0, #1
 800b67c:	60a2      	str	r2, [r4, #8]
 800b67e:	6126      	str	r6, [r4, #16]
 800b680:	7563      	strb	r3, [r4, #21]
 800b682:	b002      	add	sp, #8
 800b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b688:	2108      	movs	r1, #8
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 f940 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b690:	b350      	cbz	r0, 800b6e8 <ucdr_serialize_double+0x11c>
 800b692:	7d23      	ldrb	r3, [r4, #20]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d02d      	beq.n	800b6f4 <ucdr_serialize_double+0x128>
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6a6:	705a      	strb	r2, [r3, #1]
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6ae:	709a      	strb	r2, [r3, #2]
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6b6:	70da      	strb	r2, [r3, #3]
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b6be:	711a      	strb	r2, [r3, #4]
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b6c6:	715a      	strb	r2, [r3, #5]
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b6ce:	719a      	strb	r2, [r3, #6]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f89d 2000 	ldrb.w	r2, [sp]
 800b6d6:	71da      	strb	r2, [r3, #7]
 800b6d8:	68a2      	ldr	r2, [r4, #8]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	3208      	adds	r2, #8
 800b6de:	3308      	adds	r3, #8
 800b6e0:	2108      	movs	r1, #8
 800b6e2:	60a2      	str	r2, [r4, #8]
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	7561      	strb	r1, [r4, #21]
 800b6e8:	7da0      	ldrb	r0, [r4, #22]
 800b6ea:	f080 0001 	eor.w	r0, r0, #1
 800b6ee:	b002      	add	sp, #8
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	466b      	mov	r3, sp
 800b6f6:	cb03      	ldmia	r3!, {r0, r1}
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	6018      	str	r0, [r3, #0]
 800b6fc:	6059      	str	r1, [r3, #4]
 800b6fe:	e7eb      	b.n	800b6d8 <ucdr_serialize_double+0x10c>
 800b700:	68a2      	ldr	r2, [r4, #8]
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	7da0      	ldrb	r0, [r4, #22]
 800b706:	7567      	strb	r7, [r4, #21]
 800b708:	1b92      	subs	r2, r2, r6
 800b70a:	1b9b      	subs	r3, r3, r6
 800b70c:	f080 0001 	eor.w	r0, r0, #1
 800b710:	60a2      	str	r2, [r4, #8]
 800b712:	6123      	str	r3, [r4, #16]
 800b714:	b002      	add	sp, #8
 800b716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	68a3      	ldr	r3, [r4, #8]
 800b73c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	f89d 2000 	ldrb.w	r2, [sp]
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	e78a      	b.n	800b66a <ucdr_serialize_double+0x9e>
 800b754:	4628      	mov	r0, r5
 800b756:	466d      	mov	r5, sp
 800b758:	4629      	mov	r1, r5
 800b75a:	4632      	mov	r2, r6
 800b75c:	f00c f857 	bl	801780e <memcpy>
 800b760:	68a0      	ldr	r0, [r4, #8]
 800b762:	4642      	mov	r2, r8
 800b764:	19a9      	adds	r1, r5, r6
 800b766:	f00c f852 	bl	801780e <memcpy>
 800b76a:	e77e      	b.n	800b66a <ucdr_serialize_double+0x9e>

0800b76c <ucdr_deserialize_double>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	460d      	mov	r5, r1
 800b772:	2108      	movs	r1, #8
 800b774:	4604      	mov	r4, r0
 800b776:	f000 f91f 	bl	800b9b8 <ucdr_buffer_alignment>
 800b77a:	4601      	mov	r1, r0
 800b77c:	4620      	mov	r0, r4
 800b77e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b782:	f000 f95d 	bl	800ba40 <ucdr_advance_buffer>
 800b786:	2108      	movs	r1, #8
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 f8b5 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d151      	bne.n	800b836 <ucdr_deserialize_double+0xca>
 800b792:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b796:	42be      	cmp	r6, r7
 800b798:	d948      	bls.n	800b82c <ucdr_deserialize_double+0xc0>
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	60a6      	str	r6, [r4, #8]
 800b79e:	1bf6      	subs	r6, r6, r7
 800b7a0:	4433      	add	r3, r6
 800b7a2:	f1c6 0808 	rsb	r8, r6, #8
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 f8b0 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d06d      	beq.n	800b890 <ucdr_deserialize_double+0x124>
 800b7b4:	7d23      	ldrb	r3, [r4, #20]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	f000 8093 	beq.w	800b8e2 <ucdr_deserialize_double+0x176>
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	702b      	strb	r3, [r5, #0]
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	d072      	beq.n	800b8aa <ucdr_deserialize_double+0x13e>
 800b7c4:	79bb      	ldrb	r3, [r7, #6]
 800b7c6:	706b      	strb	r3, [r5, #1]
 800b7c8:	2e01      	cmp	r6, #1
 800b7ca:	f105 0302 	add.w	r3, r5, #2
 800b7ce:	d070      	beq.n	800b8b2 <ucdr_deserialize_double+0x146>
 800b7d0:	797b      	ldrb	r3, [r7, #5]
 800b7d2:	70ab      	strb	r3, [r5, #2]
 800b7d4:	2e02      	cmp	r6, #2
 800b7d6:	f105 0303 	add.w	r3, r5, #3
 800b7da:	d06e      	beq.n	800b8ba <ucdr_deserialize_double+0x14e>
 800b7dc:	793b      	ldrb	r3, [r7, #4]
 800b7de:	70eb      	strb	r3, [r5, #3]
 800b7e0:	2e03      	cmp	r6, #3
 800b7e2:	f105 0304 	add.w	r3, r5, #4
 800b7e6:	d06c      	beq.n	800b8c2 <ucdr_deserialize_double+0x156>
 800b7e8:	78fb      	ldrb	r3, [r7, #3]
 800b7ea:	712b      	strb	r3, [r5, #4]
 800b7ec:	2e04      	cmp	r6, #4
 800b7ee:	f105 0305 	add.w	r3, r5, #5
 800b7f2:	d06a      	beq.n	800b8ca <ucdr_deserialize_double+0x15e>
 800b7f4:	78bb      	ldrb	r3, [r7, #2]
 800b7f6:	716b      	strb	r3, [r5, #5]
 800b7f8:	2e05      	cmp	r6, #5
 800b7fa:	f105 0306 	add.w	r3, r5, #6
 800b7fe:	d068      	beq.n	800b8d2 <ucdr_deserialize_double+0x166>
 800b800:	787b      	ldrb	r3, [r7, #1]
 800b802:	71ab      	strb	r3, [r5, #6]
 800b804:	2e06      	cmp	r6, #6
 800b806:	f105 0307 	add.w	r3, r5, #7
 800b80a:	d066      	beq.n	800b8da <ucdr_deserialize_double+0x16e>
 800b80c:	783b      	ldrb	r3, [r7, #0]
 800b80e:	71eb      	strb	r3, [r5, #7]
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	68a2      	ldr	r2, [r4, #8]
 800b814:	7da0      	ldrb	r0, [r4, #22]
 800b816:	3308      	adds	r3, #8
 800b818:	1b9e      	subs	r6, r3, r6
 800b81a:	2308      	movs	r3, #8
 800b81c:	4442      	add	r2, r8
 800b81e:	7563      	strb	r3, [r4, #21]
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	6126      	str	r6, [r4, #16]
 800b824:	f080 0001 	eor.w	r0, r0, #1
 800b828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82c:	2108      	movs	r1, #8
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 f86e 	bl	800b910 <ucdr_check_final_buffer_behavior>
 800b834:	b310      	cbz	r0, 800b87c <ucdr_deserialize_double+0x110>
 800b836:	7d23      	ldrb	r3, [r4, #20]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	d023      	beq.n	800b886 <ucdr_deserialize_double+0x11a>
 800b83e:	79db      	ldrb	r3, [r3, #7]
 800b840:	702b      	strb	r3, [r5, #0]
 800b842:	68a3      	ldr	r3, [r4, #8]
 800b844:	799b      	ldrb	r3, [r3, #6]
 800b846:	706b      	strb	r3, [r5, #1]
 800b848:	68a3      	ldr	r3, [r4, #8]
 800b84a:	795b      	ldrb	r3, [r3, #5]
 800b84c:	70ab      	strb	r3, [r5, #2]
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	791b      	ldrb	r3, [r3, #4]
 800b852:	70eb      	strb	r3, [r5, #3]
 800b854:	68a3      	ldr	r3, [r4, #8]
 800b856:	78db      	ldrb	r3, [r3, #3]
 800b858:	712b      	strb	r3, [r5, #4]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	789b      	ldrb	r3, [r3, #2]
 800b85e:	716b      	strb	r3, [r5, #5]
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	785b      	ldrb	r3, [r3, #1]
 800b864:	71ab      	strb	r3, [r5, #6]
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	71eb      	strb	r3, [r5, #7]
 800b86c:	68a2      	ldr	r2, [r4, #8]
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	3208      	adds	r2, #8
 800b872:	3308      	adds	r3, #8
 800b874:	2108      	movs	r1, #8
 800b876:	60a2      	str	r2, [r4, #8]
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	7561      	strb	r1, [r4, #21]
 800b87c:	7da0      	ldrb	r0, [r4, #22]
 800b87e:	f080 0001 	eor.w	r0, r0, #1
 800b882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	606b      	str	r3, [r5, #4]
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	e7ed      	b.n	800b86c <ucdr_deserialize_double+0x100>
 800b890:	68a2      	ldr	r2, [r4, #8]
 800b892:	6923      	ldr	r3, [r4, #16]
 800b894:	7da0      	ldrb	r0, [r4, #22]
 800b896:	f884 9015 	strb.w	r9, [r4, #21]
 800b89a:	1b92      	subs	r2, r2, r6
 800b89c:	1b9b      	subs	r3, r3, r6
 800b89e:	60a2      	str	r2, [r4, #8]
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	f080 0001 	eor.w	r0, r0, #1
 800b8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	799b      	ldrb	r3, [r3, #6]
 800b8ae:	706b      	strb	r3, [r5, #1]
 800b8b0:	1cab      	adds	r3, r5, #2
 800b8b2:	68a2      	ldr	r2, [r4, #8]
 800b8b4:	7952      	ldrb	r2, [r2, #5]
 800b8b6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8ba:	68a2      	ldr	r2, [r4, #8]
 800b8bc:	7912      	ldrb	r2, [r2, #4]
 800b8be:	f803 2b01 	strb.w	r2, [r3], #1
 800b8c2:	68a2      	ldr	r2, [r4, #8]
 800b8c4:	78d2      	ldrb	r2, [r2, #3]
 800b8c6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8ca:	68a2      	ldr	r2, [r4, #8]
 800b8cc:	7892      	ldrb	r2, [r2, #2]
 800b8ce:	f803 2b01 	strb.w	r2, [r3], #1
 800b8d2:	68a2      	ldr	r2, [r4, #8]
 800b8d4:	7852      	ldrb	r2, [r2, #1]
 800b8d6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8da:	68a2      	ldr	r2, [r4, #8]
 800b8dc:	7812      	ldrb	r2, [r2, #0]
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e796      	b.n	800b810 <ucdr_deserialize_double+0xa4>
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f00b ff91 	bl	801780e <memcpy>
 800b8ec:	68a1      	ldr	r1, [r4, #8]
 800b8ee:	4642      	mov	r2, r8
 800b8f0:	19a8      	adds	r0, r5, r6
 800b8f2:	f00b ff8c 	bl	801780e <memcpy>
 800b8f6:	e78b      	b.n	800b810 <ucdr_deserialize_double+0xa4>

0800b8f8 <ucdr_check_buffer_available_for>:
 800b8f8:	7d83      	ldrb	r3, [r0, #22]
 800b8fa:	b93b      	cbnz	r3, 800b90c <ucdr_check_buffer_available_for+0x14>
 800b8fc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b900:	4419      	add	r1, r3
 800b902:	4288      	cmp	r0, r1
 800b904:	bf34      	ite	cc
 800b906:	2000      	movcc	r0, #0
 800b908:	2001      	movcs	r0, #1
 800b90a:	4770      	bx	lr
 800b90c:	2000      	movs	r0, #0
 800b90e:	4770      	bx	lr

0800b910 <ucdr_check_final_buffer_behavior>:
 800b910:	7d83      	ldrb	r3, [r0, #22]
 800b912:	b943      	cbnz	r3, 800b926 <ucdr_check_final_buffer_behavior+0x16>
 800b914:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b918:	4291      	cmp	r1, r2
 800b91a:	b510      	push	{r4, lr}
 800b91c:	4604      	mov	r4, r0
 800b91e:	d205      	bcs.n	800b92c <ucdr_check_final_buffer_behavior+0x1c>
 800b920:	2301      	movs	r3, #1
 800b922:	4618      	mov	r0, r3
 800b924:	bd10      	pop	{r4, pc}
 800b926:	2300      	movs	r3, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	4770      	bx	lr
 800b92c:	6982      	ldr	r2, [r0, #24]
 800b92e:	b13a      	cbz	r2, 800b940 <ucdr_check_final_buffer_behavior+0x30>
 800b930:	69c1      	ldr	r1, [r0, #28]
 800b932:	4790      	blx	r2
 800b934:	f080 0301 	eor.w	r3, r0, #1
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	75a0      	strb	r0, [r4, #22]
 800b93c:	4618      	mov	r0, r3
 800b93e:	bd10      	pop	{r4, pc}
 800b940:	2001      	movs	r0, #1
 800b942:	75a0      	strb	r0, [r4, #22]
 800b944:	e7fa      	b.n	800b93c <ucdr_check_final_buffer_behavior+0x2c>
 800b946:	bf00      	nop

0800b948 <ucdr_set_on_full_buffer_callback>:
 800b948:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop

0800b950 <ucdr_init_buffer_origin_offset_endian>:
 800b950:	b410      	push	{r4}
 800b952:	9c01      	ldr	r4, [sp, #4]
 800b954:	6001      	str	r1, [r0, #0]
 800b956:	440a      	add	r2, r1
 800b958:	6042      	str	r2, [r0, #4]
 800b95a:	190a      	adds	r2, r1, r4
 800b95c:	441c      	add	r4, r3
 800b95e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b962:	6082      	str	r2, [r0, #8]
 800b964:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b968:	7503      	strb	r3, [r0, #20]
 800b96a:	2200      	movs	r2, #0
 800b96c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b974:	7542      	strb	r2, [r0, #21]
 800b976:	7582      	strb	r2, [r0, #22]
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop

0800b97c <ucdr_init_buffer_origin_offset>:
 800b97c:	b510      	push	{r4, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	9c04      	ldr	r4, [sp, #16]
 800b982:	9400      	str	r4, [sp, #0]
 800b984:	2401      	movs	r4, #1
 800b986:	9401      	str	r4, [sp, #4]
 800b988:	f7ff ffe2 	bl	800b950 <ucdr_init_buffer_origin_offset_endian>
 800b98c:	b002      	add	sp, #8
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <ucdr_init_buffer_origin>:
 800b990:	b510      	push	{r4, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	2400      	movs	r4, #0
 800b996:	9400      	str	r4, [sp, #0]
 800b998:	f7ff fff0 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800b99c:	b002      	add	sp, #8
 800b99e:	bd10      	pop	{r4, pc}

0800b9a0 <ucdr_init_buffer>:
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f7ff bff5 	b.w	800b990 <ucdr_init_buffer_origin>
 800b9a6:	bf00      	nop

0800b9a8 <ucdr_alignment>:
 800b9a8:	fbb0 f3f1 	udiv	r3, r0, r1
 800b9ac:	fb03 0011 	mls	r0, r3, r1, r0
 800b9b0:	1a08      	subs	r0, r1, r0
 800b9b2:	3901      	subs	r1, #1
 800b9b4:	4008      	ands	r0, r1
 800b9b6:	4770      	bx	lr

0800b9b8 <ucdr_buffer_alignment>:
 800b9b8:	7d43      	ldrb	r3, [r0, #21]
 800b9ba:	428b      	cmp	r3, r1
 800b9bc:	d208      	bcs.n	800b9d0 <ucdr_buffer_alignment+0x18>
 800b9be:	6900      	ldr	r0, [r0, #16]
 800b9c0:	fbb0 f3f1 	udiv	r3, r0, r1
 800b9c4:	fb01 0013 	mls	r0, r1, r3, r0
 800b9c8:	1a08      	subs	r0, r1, r0
 800b9ca:	3901      	subs	r1, #1
 800b9cc:	4008      	ands	r0, r1
 800b9ce:	4770      	bx	lr
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	4770      	bx	lr

0800b9d4 <ucdr_align_to>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	460d      	mov	r5, r1
 800b9da:	f7ff ffed 	bl	800b9b8 <ucdr_buffer_alignment>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	6921      	ldr	r1, [r4, #16]
 800b9e2:	7565      	strb	r5, [r4, #21]
 800b9e4:	181a      	adds	r2, r3, r0
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	4408      	add	r0, r1
 800b9ec:	bf28      	it	cs
 800b9ee:	4613      	movcs	r3, r2
 800b9f0:	6120      	str	r0, [r4, #16]
 800b9f2:	60a3      	str	r3, [r4, #8]
 800b9f4:	bd38      	pop	{r3, r4, r5, pc}
 800b9f6:	bf00      	nop

0800b9f8 <ucdr_buffer_length>:
 800b9f8:	6882      	ldr	r2, [r0, #8]
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	1a10      	subs	r0, r2, r0
 800b9fe:	4770      	bx	lr

0800ba00 <ucdr_buffer_remaining>:
 800ba00:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ba04:	1a10      	subs	r0, r2, r0
 800ba06:	4770      	bx	lr

0800ba08 <ucdr_check_final_buffer_behavior_array>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	7d83      	ldrb	r3, [r0, #22]
 800ba0c:	b963      	cbnz	r3, 800ba28 <ucdr_check_final_buffer_behavior_array+0x20>
 800ba0e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	d308      	bcc.n	800ba2c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba1a:	b139      	cbz	r1, 800ba2c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba1c:	6983      	ldr	r3, [r0, #24]
 800ba1e:	b163      	cbz	r3, 800ba3a <ucdr_check_final_buffer_behavior_array+0x32>
 800ba20:	69c1      	ldr	r1, [r0, #28]
 800ba22:	4798      	blx	r3
 800ba24:	75a0      	strb	r0, [r4, #22]
 800ba26:	b108      	cbz	r0, 800ba2c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff ffe7 	bl	800ba00 <ucdr_buffer_remaining>
 800ba32:	42a8      	cmp	r0, r5
 800ba34:	bf28      	it	cs
 800ba36:	4628      	movcs	r0, r5
 800ba38:	bd38      	pop	{r3, r4, r5, pc}
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	7583      	strb	r3, [r0, #22]
 800ba3e:	e7f3      	b.n	800ba28 <ucdr_check_final_buffer_behavior_array+0x20>

0800ba40 <ucdr_advance_buffer>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4604      	mov	r4, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	f7ff ff57 	bl	800b8f8 <ucdr_check_buffer_available_for>
 800ba4a:	b178      	cbz	r0, 800ba6c <ucdr_advance_buffer+0x2c>
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	68a2      	ldr	r2, [r4, #8]
 800ba50:	442b      	add	r3, r5
 800ba52:	6123      	str	r3, [r4, #16]
 800ba54:	2301      	movs	r3, #1
 800ba56:	442a      	add	r2, r5
 800ba58:	7563      	strb	r3, [r4, #21]
 800ba5a:	60a2      	str	r2, [r4, #8]
 800ba5c:	bd38      	pop	{r3, r4, r5, pc}
 800ba5e:	68a2      	ldr	r2, [r4, #8]
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	4402      	add	r2, r0
 800ba64:	4403      	add	r3, r0
 800ba66:	1a2d      	subs	r5, r5, r0
 800ba68:	60a2      	str	r2, [r4, #8]
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	2201      	movs	r2, #1
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7ff ffc9 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d1f1      	bne.n	800ba5e <ucdr_advance_buffer+0x1e>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	7563      	strb	r3, [r4, #21]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}

0800ba80 <rcl_get_zero_initialized_publisher>:
 800ba80:	4b01      	ldr	r3, [pc, #4]	@ (800ba88 <rcl_get_zero_initialized_publisher+0x8>)
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	0801888c 	.word	0x0801888c

0800ba8c <rcl_publisher_init>:
 800ba8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba90:	b088      	sub	sp, #32
 800ba92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	d069      	beq.n	800bb6c <rcl_publisher_init+0xe0>
 800ba98:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4648      	mov	r0, r9
 800baa0:	460e      	mov	r6, r1
 800baa2:	4690      	mov	r8, r2
 800baa4:	461f      	mov	r7, r3
 800baa6:	f001 f847 	bl	800cb38 <rcutils_allocator_is_valid>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d05e      	beq.n	800bb6c <rcl_publisher_init+0xe0>
 800baae:	2c00      	cmp	r4, #0
 800bab0:	d05c      	beq.n	800bb6c <rcl_publisher_init+0xe0>
 800bab2:	f8d4 a000 	ldr.w	sl, [r4]
 800bab6:	f1ba 0f00 	cmp.w	sl, #0
 800baba:	d004      	beq.n	800bac6 <rcl_publisher_init+0x3a>
 800babc:	2764      	movs	r7, #100	@ 0x64
 800babe:	4638      	mov	r0, r7
 800bac0:	b008      	add	sp, #32
 800bac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac6:	4630      	mov	r0, r6
 800bac8:	f005 f9a6 	bl	8010e18 <rcl_node_is_valid>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d052      	beq.n	800bb76 <rcl_publisher_init+0xea>
 800bad0:	f1b8 0f00 	cmp.w	r8, #0
 800bad4:	d04a      	beq.n	800bb6c <rcl_publisher_init+0xe0>
 800bad6:	2f00      	cmp	r7, #0
 800bad8:	d048      	beq.n	800bb6c <rcl_publisher_init+0xe0>
 800bada:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bade:	aa07      	add	r2, sp, #28
 800bae0:	9205      	str	r2, [sp, #20]
 800bae2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800baea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800baee:	f8cd a01c 	str.w	sl, [sp, #28]
 800baf2:	4639      	mov	r1, r7
 800baf4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800baf8:	4630      	mov	r0, r6
 800bafa:	f005 f9e1 	bl	8010ec0 <rcl_node_resolve_name>
 800bafe:	4607      	mov	r7, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d14f      	bne.n	800bba4 <rcl_publisher_init+0x118>
 800bb04:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bb06:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bb08:	20c8      	movs	r0, #200	@ 0xc8
 800bb0a:	4798      	blx	r3
 800bb0c:	6020      	str	r0, [r4, #0]
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d04e      	beq.n	800bbb0 <rcl_publisher_init+0x124>
 800bb12:	4630      	mov	r0, r6
 800bb14:	f005 f9a2 	bl	8010e5c <rcl_node_get_rmw_handle>
 800bb18:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	9a07      	ldr	r2, [sp, #28]
 800bb20:	6827      	ldr	r7, [r4, #0]
 800bb22:	462b      	mov	r3, r5
 800bb24:	4641      	mov	r1, r8
 800bb26:	f001 f915 	bl	800cd54 <rmw_create_publisher>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bb30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bb34:	b370      	cbz	r0, 800bb94 <rcl_publisher_init+0x108>
 800bb36:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800bb3a:	f001 f9e9 	bl	800cf10 <rmw_publisher_get_actual_qos>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	4607      	mov	r7, r0
 800bb42:	b9d0      	cbnz	r0, 800bb7a <rcl_publisher_init+0xee>
 800bb44:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bb48:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	2270      	movs	r2, #112	@ 0x70
 800bb50:	4618      	mov	r0, r3
 800bb52:	f00b fe5c 	bl	801780e <memcpy>
 800bb56:	6832      	ldr	r2, [r6, #0]
 800bb58:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bb5c:	9807      	ldr	r0, [sp, #28]
 800bb5e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bb60:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bb62:	4798      	blx	r3
 800bb64:	4638      	mov	r0, r7
 800bb66:	b008      	add	sp, #32
 800bb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6c:	270b      	movs	r7, #11
 800bb6e:	4638      	mov	r0, r7
 800bb70:	b008      	add	sp, #32
 800bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb76:	27c8      	movs	r7, #200	@ 0xc8
 800bb78:	e7a1      	b.n	800babe <rcl_publisher_init+0x32>
 800bb7a:	b18b      	cbz	r3, 800bba0 <rcl_publisher_init+0x114>
 800bb7c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bb80:	b142      	cbz	r2, 800bb94 <rcl_publisher_init+0x108>
 800bb82:	4630      	mov	r0, r6
 800bb84:	f005 f96a 	bl	8010e5c <rcl_node_get_rmw_handle>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bb8e:	f001 f9cf 	bl	800cf30 <rmw_destroy_publisher>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bb96:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bb98:	4618      	mov	r0, r3
 800bb9a:	4790      	blx	r2
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	2701      	movs	r7, #1
 800bba2:	e7db      	b.n	800bb5c <rcl_publisher_init+0xd0>
 800bba4:	2867      	cmp	r0, #103	@ 0x67
 800bba6:	d0d9      	beq.n	800bb5c <rcl_publisher_init+0xd0>
 800bba8:	2869      	cmp	r0, #105	@ 0x69
 800bbaa:	d003      	beq.n	800bbb4 <rcl_publisher_init+0x128>
 800bbac:	280a      	cmp	r0, #10
 800bbae:	d1f7      	bne.n	800bba0 <rcl_publisher_init+0x114>
 800bbb0:	270a      	movs	r7, #10
 800bbb2:	e7d3      	b.n	800bb5c <rcl_publisher_init+0xd0>
 800bbb4:	2767      	movs	r7, #103	@ 0x67
 800bbb6:	e7d1      	b.n	800bb5c <rcl_publisher_init+0xd0>

0800bbb8 <rcl_publisher_get_default_options>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4d14      	ldr	r5, [pc, #80]	@ (800bc0c <rcl_publisher_get_default_options+0x54>)
 800bbbc:	4914      	ldr	r1, [pc, #80]	@ (800bc10 <rcl_publisher_get_default_options+0x58>)
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	2250      	movs	r2, #80	@ 0x50
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f00b fe22 	bl	801780e <memcpy>
 800bbca:	a802      	add	r0, sp, #8
 800bbcc:	f000 ffa6 	bl	800cb1c <rcutils_get_default_allocator>
 800bbd0:	f10d 0c08 	add.w	ip, sp, #8
 800bbd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbd8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bbdc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bbe0:	466e      	mov	r6, sp
 800bbe2:	f8dc 3000 	ldr.w	r3, [ip]
 800bbe6:	f8ce 3000 	str.w	r3, [lr]
 800bbea:	4630      	mov	r0, r6
 800bbec:	f001 f834 	bl	800cc58 <rmw_get_default_publisher_options>
 800bbf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bbf4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bbf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800bbfc:	2270      	movs	r2, #112	@ 0x70
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4620      	mov	r0, r4
 800bc02:	f00b fe04 	bl	801780e <memcpy>
 800bc06:	4620      	mov	r0, r4
 800bc08:	b008      	add	sp, #32
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	20009340 	.word	0x20009340
 800bc10:	08018890 	.word	0x08018890

0800bc14 <rcl_publish>:
 800bc14:	b1f8      	cbz	r0, 800bc56 <rcl_publish+0x42>
 800bc16:	6803      	ldr	r3, [r0, #0]
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	b1b3      	cbz	r3, 800bc4c <rcl_publish+0x38>
 800bc1e:	4616      	mov	r6, r2
 800bc20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bc24:	b192      	cbz	r2, 800bc4c <rcl_publish+0x38>
 800bc26:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bc2a:	460d      	mov	r5, r1
 800bc2c:	f004 fd30 	bl	8010690 <rcl_context_is_valid>
 800bc30:	b160      	cbz	r0, 800bc4c <rcl_publish+0x38>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bc38:	b140      	cbz	r0, 800bc4c <rcl_publish+0x38>
 800bc3a:	b155      	cbz	r5, 800bc52 <rcl_publish+0x3e>
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f001 f828 	bl	800cc94 <rmw_publish>
 800bc44:	3800      	subs	r0, #0
 800bc46:	bf18      	it	ne
 800bc48:	2001      	movne	r0, #1
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc50:	bd70      	pop	{r4, r5, r6, pc}
 800bc52:	200b      	movs	r0, #11
 800bc54:	bd70      	pop	{r4, r5, r6, pc}
 800bc56:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc5a:	4770      	bx	lr

0800bc5c <rcl_publisher_is_valid>:
 800bc5c:	b1a0      	cbz	r0, 800bc88 <rcl_publisher_is_valid+0x2c>
 800bc5e:	6803      	ldr	r3, [r0, #0]
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	b173      	cbz	r3, 800bc84 <rcl_publisher_is_valid+0x28>
 800bc66:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bc6a:	b15a      	cbz	r2, 800bc84 <rcl_publisher_is_valid+0x28>
 800bc6c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bc70:	f004 fd0e 	bl	8010690 <rcl_context_is_valid>
 800bc74:	b130      	cbz	r0, 800bc84 <rcl_publisher_is_valid+0x28>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bc7c:	3800      	subs	r0, #0
 800bc7e:	bf18      	it	ne
 800bc80:	2001      	movne	r0, #1
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	2000      	movs	r0, #0
 800bc86:	bd10      	pop	{r4, pc}
 800bc88:	2000      	movs	r0, #0
 800bc8a:	4770      	bx	lr

0800bc8c <rcl_publisher_is_valid_except_context>:
 800bc8c:	b130      	cbz	r0, 800bc9c <rcl_publisher_is_valid_except_context+0x10>
 800bc8e:	6800      	ldr	r0, [r0, #0]
 800bc90:	b120      	cbz	r0, 800bc9c <rcl_publisher_is_valid_except_context+0x10>
 800bc92:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bc96:	3800      	subs	r0, #0
 800bc98:	bf18      	it	ne
 800bc9a:	2001      	movne	r0, #1
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop

0800bca0 <_rclc_check_for_new_data>:
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d046      	beq.n	800bd32 <_rclc_check_for_new_data+0x92>
 800bca4:	b510      	push	{r4, lr}
 800bca6:	7802      	ldrb	r2, [r0, #0]
 800bca8:	b084      	sub	sp, #16
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2a0a      	cmp	r2, #10
 800bcae:	d842      	bhi.n	800bd36 <_rclc_check_for_new_data+0x96>
 800bcb0:	e8df f002 	tbb	[pc, r2]
 800bcb4:	14181212 	.word	0x14181212
 800bcb8:	06060614 	.word	0x06060614
 800bcbc:	2e1a      	.short	0x2e1a
 800bcbe:	16          	.byte	0x16
 800bcbf:	00          	.byte	0x00
 800bcc0:	6a0a      	ldr	r2, [r1, #32]
 800bcc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bcc4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bcc8:	2000      	movs	r0, #0
 800bcca:	1a12      	subs	r2, r2, r0
 800bccc:	bf18      	it	ne
 800bcce:	2201      	movne	r2, #1
 800bcd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bcd4:	b004      	add	sp, #16
 800bcd6:	bd10      	pop	{r4, pc}
 800bcd8:	680a      	ldr	r2, [r1, #0]
 800bcda:	e7f2      	b.n	800bcc2 <_rclc_check_for_new_data+0x22>
 800bcdc:	698a      	ldr	r2, [r1, #24]
 800bcde:	e7f0      	b.n	800bcc2 <_rclc_check_for_new_data+0x22>
 800bce0:	688a      	ldr	r2, [r1, #8]
 800bce2:	e7ee      	b.n	800bcc2 <_rclc_check_for_new_data+0x22>
 800bce4:	690a      	ldr	r2, [r1, #16]
 800bce6:	e7ec      	b.n	800bcc2 <_rclc_check_for_new_data+0x22>
 800bce8:	685c      	ldr	r4, [r3, #4]
 800bcea:	4608      	mov	r0, r1
 800bcec:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bcf0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bcf4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bcf8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bd02:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bd06:	f104 0110 	add.w	r1, r4, #16
 800bd0a:	f006 fc41 	bl	8012590 <rcl_action_client_wait_set_get_entities_ready>
 800bd0e:	e7e1      	b.n	800bcd4 <_rclc_check_for_new_data+0x34>
 800bd10:	685c      	ldr	r4, [r3, #4]
 800bd12:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bd16:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bd1a:	e9cd 3200 	strd	r3, r2, [sp]
 800bd1e:	4608      	mov	r0, r1
 800bd20:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bd24:	f104 0220 	add.w	r2, r4, #32
 800bd28:	f104 0110 	add.w	r1, r4, #16
 800bd2c:	f006 fe48 	bl	80129c0 <rcl_action_server_wait_set_get_entities_ready>
 800bd30:	e7d0      	b.n	800bcd4 <_rclc_check_for_new_data+0x34>
 800bd32:	200b      	movs	r0, #11
 800bd34:	4770      	bx	lr
 800bd36:	2001      	movs	r0, #1
 800bd38:	e7cc      	b.n	800bcd4 <_rclc_check_for_new_data+0x34>
 800bd3a:	bf00      	nop

0800bd3c <_rclc_take_new_data>:
 800bd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3e:	b09b      	sub	sp, #108	@ 0x6c
 800bd40:	2800      	cmp	r0, #0
 800bd42:	f000 8088 	beq.w	800be56 <_rclc_take_new_data+0x11a>
 800bd46:	7803      	ldrb	r3, [r0, #0]
 800bd48:	4604      	mov	r4, r0
 800bd4a:	2b0a      	cmp	r3, #10
 800bd4c:	f200 8167 	bhi.w	800c01e <_rclc_take_new_data+0x2e2>
 800bd50:	e8df f003 	tbb	[pc, r3]
 800bd54:	44152d2d 	.word	0x44152d2d
 800bd58:	19191944 	.word	0x19191944
 800bd5c:	065a      	.short	0x065a
 800bd5e:	15          	.byte	0x15
 800bd5f:	00          	.byte	0x00
 800bd60:	6840      	ldr	r0, [r0, #4]
 800bd62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f040 80b2 	bne.w	800bed0 <_rclc_take_new_data+0x194>
 800bd6c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 80e4 	bne.w	800bf3e <_rclc_take_new_data+0x202>
 800bd76:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d16f      	bne.n	800be5e <_rclc_take_new_data+0x122>
 800bd7e:	2500      	movs	r5, #0
 800bd80:	4628      	mov	r0, r5
 800bd82:	b01b      	add	sp, #108	@ 0x6c
 800bd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd86:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bd88:	6a0b      	ldr	r3, [r1, #32]
 800bd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f5      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800bd92:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bd96:	f104 0110 	add.w	r1, r4, #16
 800bd9a:	f005 f93f 	bl	801101c <rcl_take_request>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d0ec      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800bda4:	f240 2359 	movw	r3, #601	@ 0x259
 800bda8:	4298      	cmp	r0, r3
 800bdaa:	d013      	beq.n	800bdd4 <_rclc_take_new_data+0x98>
 800bdac:	e029      	b.n	800be02 <_rclc_take_new_data+0xc6>
 800bdae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bdb0:	680b      	ldr	r3, [r1, #0]
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d0e1      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800bdba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	aa0a      	add	r2, sp, #40	@ 0x28
 800bdc2:	f005 fa69 	bl	8011298 <rcl_take>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d0d9      	beq.n	800bd80 <_rclc_take_new_data+0x44>
 800bdcc:	f240 1391 	movw	r3, #401	@ 0x191
 800bdd0:	4298      	cmp	r0, r3
 800bdd2:	d116      	bne.n	800be02 <_rclc_take_new_data+0xc6>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bdda:	e7d1      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800bddc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bdde:	698b      	ldr	r3, [r1, #24]
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0ca      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800bde8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bdec:	f104 0110 	add.w	r1, r4, #16
 800bdf0:	f004 fbde 	bl	80105b0 <rcl_take_response>
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0c1      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800bdfa:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bdfe:	4298      	cmp	r0, r3
 800be00:	d0be      	beq.n	800bd80 <_rclc_take_new_data+0x44>
 800be02:	f000 febd 	bl	800cb80 <rcutils_reset_error>
 800be06:	e7bb      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800be08:	6840      	ldr	r0, [r0, #4]
 800be0a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d17d      	bne.n	800bf0e <_rclc_take_new_data+0x1d2>
 800be12:	69c3      	ldr	r3, [r0, #28]
 800be14:	b11b      	cbz	r3, 800be1e <_rclc_take_new_data+0xe2>
 800be16:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d144      	bne.n	800bea8 <_rclc_take_new_data+0x16c>
 800be1e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800be22:	2b00      	cmp	r3, #0
 800be24:	f040 80ac 	bne.w	800bf80 <_rclc_take_new_data+0x244>
 800be28:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0a6      	beq.n	800bd7e <_rclc_take_new_data+0x42>
 800be30:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800be32:	a90a      	add	r1, sp, #40	@ 0x28
 800be34:	3010      	adds	r0, #16
 800be36:	f006 fa83 	bl	8012340 <rcl_action_take_result_response>
 800be3a:	4605      	mov	r5, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d1e0      	bne.n	800be02 <_rclc_take_new_data+0xc6>
 800be40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be44:	6860      	ldr	r0, [r4, #4]
 800be46:	f006 fedf 	bl	8012c08 <rclc_action_find_handle_by_result_request_sequence_number>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d098      	beq.n	800bd80 <_rclc_take_new_data+0x44>
 800be4e:	2301      	movs	r3, #1
 800be50:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800be54:	e794      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800be56:	250b      	movs	r5, #11
 800be58:	4628      	mov	r0, r5
 800be5a:	b01b      	add	sp, #108	@ 0x6c
 800be5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be5e:	ae04      	add	r6, sp, #16
 800be60:	aa0a      	add	r2, sp, #40	@ 0x28
 800be62:	3010      	adds	r0, #16
 800be64:	4631      	mov	r1, r6
 800be66:	f006 fcdf 	bl	8012828 <rcl_action_take_cancel_request>
 800be6a:	4605      	mov	r5, r0
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d1c8      	bne.n	800be02 <_rclc_take_new_data+0xc6>
 800be70:	6860      	ldr	r0, [r4, #4]
 800be72:	a90a      	add	r1, sp, #40	@ 0x28
 800be74:	f006 fe86 	bl	8012b84 <rclc_action_find_goal_handle_by_uuid>
 800be78:	4607      	mov	r7, r0
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f000 80bb 	beq.w	800bff6 <_rclc_take_new_data+0x2ba>
 800be80:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800be84:	2101      	movs	r1, #1
 800be86:	f006 fe07 	bl	8012a98 <rcl_action_transition_goal_state>
 800be8a:	2803      	cmp	r0, #3
 800be8c:	4684      	mov	ip, r0
 800be8e:	f040 80a7 	bne.w	800bfe0 <_rclc_take_new_data+0x2a4>
 800be92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be94:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800be98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be9a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800be9e:	e884 0003 	stmia.w	r4, {r0, r1}
 800bea2:	f887 c008 	strb.w	ip, [r7, #8]
 800bea6:	e76b      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800bea8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800beaa:	3010      	adds	r0, #16
 800beac:	f006 fac8 	bl	8012440 <rcl_action_take_feedback>
 800beb0:	4605      	mov	r5, r0
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d1a5      	bne.n	800be02 <_rclc_take_new_data+0xc6>
 800beb6:	6860      	ldr	r0, [r4, #4]
 800beb8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800beba:	f006 fe63 	bl	8012b84 <rclc_action_find_goal_handle_by_uuid>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2800      	cmp	r0, #0
 800bec2:	f000 80a3 	beq.w	800c00c <_rclc_take_new_data+0x2d0>
 800bec6:	2201      	movs	r2, #1
 800bec8:	6860      	ldr	r0, [r4, #4]
 800beca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800bece:	e7a6      	b.n	800be1e <_rclc_take_new_data+0xe2>
 800bed0:	f006 fe32 	bl	8012b38 <rclc_action_take_goal_handle>
 800bed4:	4606      	mov	r6, r0
 800bed6:	6860      	ldr	r0, [r4, #4]
 800bed8:	2e00      	cmp	r6, #0
 800beda:	f43f af47 	beq.w	800bd6c <_rclc_take_new_data+0x30>
 800bede:	6070      	str	r0, [r6, #4]
 800bee0:	69f2      	ldr	r2, [r6, #28]
 800bee2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800bee6:	3010      	adds	r0, #16
 800bee8:	f006 fbe6 	bl	80126b8 <rcl_action_take_goal_request>
 800beec:	4605      	mov	r5, r0
 800beee:	2800      	cmp	r0, #0
 800bef0:	f040 808e 	bne.w	800c010 <_rclc_take_new_data+0x2d4>
 800bef4:	69f7      	ldr	r7, [r6, #28]
 800bef6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bef8:	7235      	strb	r5, [r6, #8]
 800befa:	f8c6 0009 	str.w	r0, [r6, #9]
 800befe:	f8c6 100d 	str.w	r1, [r6, #13]
 800bf02:	6860      	ldr	r0, [r4, #4]
 800bf04:	f8c6 2011 	str.w	r2, [r6, #17]
 800bf08:	f8c6 3015 	str.w	r3, [r6, #21]
 800bf0c:	e72e      	b.n	800bd6c <_rclc_take_new_data+0x30>
 800bf0e:	aa04      	add	r2, sp, #16
 800bf10:	a90a      	add	r1, sp, #40	@ 0x28
 800bf12:	3010      	adds	r0, #16
 800bf14:	f006 f99c 	bl	8012250 <rcl_action_take_goal_response>
 800bf18:	4605      	mov	r5, r0
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	f47f af71 	bne.w	800be02 <_rclc_take_new_data+0xc6>
 800bf20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf24:	6860      	ldr	r0, [r4, #4]
 800bf26:	f006 fe5d 	bl	8012be4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800bf2a:	b130      	cbz	r0, 800bf3a <_rclc_take_new_data+0x1fe>
 800bf2c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bf30:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bf34:	2201      	movs	r2, #1
 800bf36:	f880 2020 	strb.w	r2, [r0, #32]
 800bf3a:	6860      	ldr	r0, [r4, #4]
 800bf3c:	e769      	b.n	800be12 <_rclc_take_new_data+0xd6>
 800bf3e:	aa04      	add	r2, sp, #16
 800bf40:	3010      	adds	r0, #16
 800bf42:	a90a      	add	r1, sp, #40	@ 0x28
 800bf44:	f006 fc30 	bl	80127a8 <rcl_action_take_result_request>
 800bf48:	4605      	mov	r5, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f47f af59 	bne.w	800be02 <_rclc_take_new_data+0xc6>
 800bf50:	6860      	ldr	r0, [r4, #4]
 800bf52:	a904      	add	r1, sp, #16
 800bf54:	f006 fe16 	bl	8012b84 <rclc_action_find_goal_handle_by_uuid>
 800bf58:	4607      	mov	r7, r0
 800bf5a:	b160      	cbz	r0, 800bf76 <_rclc_take_new_data+0x23a>
 800bf5c:	ad0a      	add	r5, sp, #40	@ 0x28
 800bf5e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800bf62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bf66:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf6a:	f04f 0c02 	mov.w	ip, #2
 800bf6e:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf72:	f887 c008 	strb.w	ip, [r7, #8]
 800bf76:	6860      	ldr	r0, [r4, #4]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800bf7e:	e6fa      	b.n	800bd76 <_rclc_take_new_data+0x3a>
 800bf80:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bf84:	a90a      	add	r1, sp, #40	@ 0x28
 800bf86:	3010      	adds	r0, #16
 800bf88:	f006 fa1a 	bl	80123c0 <rcl_action_take_cancel_response>
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	f47f af37 	bne.w	800be02 <_rclc_take_new_data+0xc6>
 800bf94:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf98:	6860      	ldr	r0, [r4, #4]
 800bf9a:	f006 fe47 	bl	8012c2c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	6860      	ldr	r0, [r4, #4]
 800bfa2:	2e00      	cmp	r6, #0
 800bfa4:	f43f af40 	beq.w	800be28 <_rclc_take_new_data+0xec>
 800bfa8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bfaa:	2701      	movs	r7, #1
 800bfac:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f43f af3a 	beq.w	800be28 <_rclc_take_new_data+0xec>
 800bfb4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bfb6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bfba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bfbe:	f006 fde1 	bl	8012b84 <rclc_action_find_goal_handle_by_uuid>
 800bfc2:	b138      	cbz	r0, 800bfd4 <_rclc_take_new_data+0x298>
 800bfc4:	6860      	ldr	r0, [r4, #4]
 800bfc6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bfc8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bfcc:	3501      	adds	r5, #1
 800bfce:	42ab      	cmp	r3, r5
 800bfd0:	d8f0      	bhi.n	800bfb4 <_rclc_take_new_data+0x278>
 800bfd2:	e729      	b.n	800be28 <_rclc_take_new_data+0xec>
 800bfd4:	6860      	ldr	r0, [r4, #4]
 800bfd6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bfd8:	3501      	adds	r5, #1
 800bfda:	42ab      	cmp	r3, r5
 800bfdc:	d8ea      	bhi.n	800bfb4 <_rclc_take_new_data+0x278>
 800bfde:	e723      	b.n	800be28 <_rclc_take_new_data+0xec>
 800bfe0:	ab06      	add	r3, sp, #24
 800bfe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfe4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bfe8:	2103      	movs	r1, #3
 800bfea:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bfee:	6860      	ldr	r0, [r4, #4]
 800bff0:	f006 fe92 	bl	8012d18 <rclc_action_server_goal_cancel_reject>
 800bff4:	e6c4      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800bff6:	ab06      	add	r3, sp, #24
 800bff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bffa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bffe:	2102      	movs	r1, #2
 800c000:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c004:	6860      	ldr	r0, [r4, #4]
 800c006:	f006 fe87 	bl	8012d18 <rclc_action_server_goal_cancel_reject>
 800c00a:	e6b9      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800c00c:	6860      	ldr	r0, [r4, #4]
 800c00e:	e706      	b.n	800be1e <_rclc_take_new_data+0xe2>
 800c010:	6860      	ldr	r0, [r4, #4]
 800c012:	4631      	mov	r1, r6
 800c014:	f006 fda0 	bl	8012b58 <rclc_action_remove_used_goal_handle>
 800c018:	f000 fdb2 	bl	800cb80 <rcutils_reset_error>
 800c01c:	e6b0      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800c01e:	2501      	movs	r5, #1
 800c020:	e6ae      	b.n	800bd80 <_rclc_take_new_data+0x44>
 800c022:	bf00      	nop

0800c024 <_rclc_execute.part.0>:
 800c024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c026:	7803      	ldrb	r3, [r0, #0]
 800c028:	b087      	sub	sp, #28
 800c02a:	4604      	mov	r4, r0
 800c02c:	2b0a      	cmp	r3, #10
 800c02e:	f200 8136 	bhi.w	800c29e <_rclc_execute.part.0+0x27a>
 800c032:	e8df f003 	tbb	[pc, r3]
 800c036:	435e      	.short	0x435e
 800c038:	06a1664f 	.word	0x06a1664f
 800c03c:	6c1e0606 	.word	0x6c1e0606
 800c040:	59          	.byte	0x59
 800c041:	00          	.byte	0x00
 800c042:	2b06      	cmp	r3, #6
 800c044:	f000 8122 	beq.w	800c28c <_rclc_execute.part.0+0x268>
 800c048:	2b07      	cmp	r3, #7
 800c04a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c04c:	f040 8118 	bne.w	800c280 <_rclc_execute.part.0+0x25c>
 800c050:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c054:	6880      	ldr	r0, [r0, #8]
 800c056:	4798      	blx	r3
 800c058:	f104 0110 	add.w	r1, r4, #16
 800c05c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c05e:	6860      	ldr	r0, [r4, #4]
 800c060:	f005 f81c 	bl	801109c <rcl_send_response>
 800c064:	2800      	cmp	r0, #0
 800c066:	d033      	beq.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c068:	9005      	str	r0, [sp, #20]
 800c06a:	f000 fd89 	bl	800cb80 <rcutils_reset_error>
 800c06e:	9805      	ldr	r0, [sp, #20]
 800c070:	e02e      	b.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c072:	6840      	ldr	r0, [r0, #4]
 800c074:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8086 	beq.w	800c18a <_rclc_execute.part.0+0x166>
 800c07e:	2600      	movs	r6, #0
 800c080:	2701      	movs	r7, #1
 800c082:	e004      	b.n	800c08e <_rclc_execute.part.0+0x6a>
 800c084:	f006 fd32 	bl	8012aec <rclc_action_send_result_request>
 800c088:	b998      	cbnz	r0, 800c0b2 <_rclc_execute.part.0+0x8e>
 800c08a:	722f      	strb	r7, [r5, #8]
 800c08c:	6860      	ldr	r0, [r4, #4]
 800c08e:	f006 fddf 	bl	8012c50 <rclc_action_find_first_handle_with_goal_response>
 800c092:	4605      	mov	r5, r0
 800c094:	2800      	cmp	r0, #0
 800c096:	d077      	beq.n	800c188 <_rclc_execute.part.0+0x164>
 800c098:	6863      	ldr	r3, [r4, #4]
 800c09a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c0a2:	f885 6020 	strb.w	r6, [r5, #32]
 800c0a6:	4798      	blx	r3
 800c0a8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e8      	bne.n	800c084 <_rclc_execute.part.0+0x60>
 800c0b2:	6860      	ldr	r0, [r4, #4]
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	f006 fd4f 	bl	8012b58 <rclc_action_remove_used_goal_handle>
 800c0ba:	e7e7      	b.n	800c08c <_rclc_execute.part.0+0x68>
 800c0bc:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c0c0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c0c4:	2d00      	cmp	r5, #0
 800c0c6:	f000 80c9 	beq.w	800c25c <_rclc_execute.part.0+0x238>
 800c0ca:	6880      	ldr	r0, [r0, #8]
 800c0cc:	4798      	blx	r3
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	b007      	add	sp, #28
 800c0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d4:	6840      	ldr	r0, [r0, #4]
 800c0d6:	f005 f9e3 	bl	80114a0 <rcl_timer_call>
 800c0da:	f240 3321 	movw	r3, #801	@ 0x321
 800c0de:	4298      	cmp	r0, r3
 800c0e0:	d004      	beq.n	800c0ec <_rclc_execute.part.0+0xc8>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0f4      	beq.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c0e6:	e7bf      	b.n	800c068 <_rclc_execute.part.0+0x44>
 800c0e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c0ea:	4798      	blx	r3
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	b007      	add	sp, #28
 800c0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c0f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c0f8:	b925      	cbnz	r5, 800c104 <_rclc_execute.part.0+0xe0>
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	4798      	blx	r3
 800c0fe:	4628      	mov	r0, r5
 800c100:	e7e6      	b.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c102:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c104:	68a0      	ldr	r0, [r4, #8]
 800c106:	4798      	blx	r3
 800c108:	2000      	movs	r0, #0
 800c10a:	b007      	add	sp, #28
 800c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10e:	6840      	ldr	r0, [r0, #4]
 800c110:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c114:	bb3b      	cbnz	r3, 800c166 <_rclc_execute.part.0+0x142>
 800c116:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d07b      	beq.n	800c216 <_rclc_execute.part.0+0x1f2>
 800c11e:	f640 0634 	movw	r6, #2100	@ 0x834
 800c122:	2701      	movs	r7, #1
 800c124:	e007      	b.n	800c136 <_rclc_execute.part.0+0x112>
 800c126:	4628      	mov	r0, r5
 800c128:	f006 fdaa 	bl	8012c80 <rclc_action_server_response_goal_request>
 800c12c:	6860      	ldr	r0, [r4, #4]
 800c12e:	4629      	mov	r1, r5
 800c130:	f006 fd12 	bl	8012b58 <rclc_action_remove_used_goal_handle>
 800c134:	6860      	ldr	r0, [r4, #4]
 800c136:	2100      	movs	r1, #0
 800c138:	f006 fd3c 	bl	8012bb4 <rclc_action_find_first_handle_by_status>
 800c13c:	4605      	mov	r5, r0
 800c13e:	2800      	cmp	r0, #0
 800c140:	d066      	beq.n	800c210 <_rclc_execute.part.0+0x1ec>
 800c142:	6863      	ldr	r3, [r4, #4]
 800c144:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4798      	blx	r3
 800c14a:	42b0      	cmp	r0, r6
 800c14c:	f04f 0100 	mov.w	r1, #0
 800c150:	d1e9      	bne.n	800c126 <_rclc_execute.part.0+0x102>
 800c152:	2101      	movs	r1, #1
 800c154:	4628      	mov	r0, r5
 800c156:	f006 fd93 	bl	8012c80 <rclc_action_server_response_goal_request>
 800c15a:	722f      	strb	r7, [r5, #8]
 800c15c:	e7ea      	b.n	800c134 <_rclc_execute.part.0+0x110>
 800c15e:	6848      	ldr	r0, [r1, #4]
 800c160:	f006 fcfa 	bl	8012b58 <rclc_action_remove_used_goal_handle>
 800c164:	6860      	ldr	r0, [r4, #4]
 800c166:	f006 fd31 	bl	8012bcc <rclc_action_find_first_terminated_handle>
 800c16a:	4601      	mov	r1, r0
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d1f6      	bne.n	800c15e <_rclc_execute.part.0+0x13a>
 800c170:	6860      	ldr	r0, [r4, #4]
 800c172:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c176:	e7ce      	b.n	800c116 <_rclc_execute.part.0+0xf2>
 800c178:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c17a:	6880      	ldr	r0, [r0, #8]
 800c17c:	f104 0110 	add.w	r1, r4, #16
 800c180:	4798      	blx	r3
 800c182:	2000      	movs	r0, #0
 800c184:	b007      	add	sp, #28
 800c186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c188:	6860      	ldr	r0, [r4, #4]
 800c18a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c18e:	b18b      	cbz	r3, 800c1b4 <_rclc_execute.part.0+0x190>
 800c190:	68c5      	ldr	r5, [r0, #12]
 800c192:	b32d      	cbz	r5, 800c1e0 <_rclc_execute.part.0+0x1bc>
 800c194:	2600      	movs	r6, #0
 800c196:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c19a:	b143      	cbz	r3, 800c1ae <_rclc_execute.part.0+0x18a>
 800c19c:	69c3      	ldr	r3, [r0, #28]
 800c19e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c1a2:	b123      	cbz	r3, 800c1ae <_rclc_execute.part.0+0x18a>
 800c1a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	4798      	blx	r3
 800c1ac:	6860      	ldr	r0, [r4, #4]
 800c1ae:	682d      	ldr	r5, [r5, #0]
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	d1f0      	bne.n	800c196 <_rclc_execute.part.0+0x172>
 800c1b4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c1b8:	b193      	cbz	r3, 800c1e0 <_rclc_execute.part.0+0x1bc>
 800c1ba:	68c5      	ldr	r5, [r0, #12]
 800c1bc:	b185      	cbz	r5, 800c1e0 <_rclc_execute.part.0+0x1bc>
 800c1be:	2600      	movs	r6, #0
 800c1c0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c1c4:	b14b      	cbz	r3, 800c1da <_rclc_execute.part.0+0x1b6>
 800c1c6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c1c8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c1cc:	b12b      	cbz	r3, 800c1da <_rclc_execute.part.0+0x1b6>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c1d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c1d6:	4798      	blx	r3
 800c1d8:	6860      	ldr	r0, [r4, #4]
 800c1da:	682d      	ldr	r5, [r5, #0]
 800c1dc:	2d00      	cmp	r5, #0
 800c1de:	d1ef      	bne.n	800c1c0 <_rclc_execute.part.0+0x19c>
 800c1e0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d081      	beq.n	800c0ec <_rclc_execute.part.0+0xc8>
 800c1e8:	2700      	movs	r7, #0
 800c1ea:	e00b      	b.n	800c204 <_rclc_execute.part.0+0x1e0>
 800c1ec:	6863      	ldr	r3, [r4, #4]
 800c1ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c1f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c1f2:	6a1e      	ldr	r6, [r3, #32]
 800c1f4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c1f8:	47b0      	blx	r6
 800c1fa:	6860      	ldr	r0, [r4, #4]
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f006 fcab 	bl	8012b58 <rclc_action_remove_used_goal_handle>
 800c202:	6860      	ldr	r0, [r4, #4]
 800c204:	f006 fd30 	bl	8012c68 <rclc_action_find_first_handle_with_result_response>
 800c208:	4605      	mov	r5, r0
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d1ee      	bne.n	800c1ec <_rclc_execute.part.0+0x1c8>
 800c20e:	e76d      	b.n	800c0ec <_rclc_execute.part.0+0xc8>
 800c210:	6860      	ldr	r0, [r4, #4]
 800c212:	f880 5020 	strb.w	r5, [r0, #32]
 800c216:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f43f af66 	beq.w	800c0ec <_rclc_execute.part.0+0xc8>
 800c220:	68c5      	ldr	r5, [r0, #12]
 800c222:	b1b5      	cbz	r5, 800c252 <_rclc_execute.part.0+0x22e>
 800c224:	2602      	movs	r6, #2
 800c226:	e001      	b.n	800c22c <_rclc_execute.part.0+0x208>
 800c228:	682d      	ldr	r5, [r5, #0]
 800c22a:	b195      	cbz	r5, 800c252 <_rclc_execute.part.0+0x22e>
 800c22c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c230:	2b03      	cmp	r3, #3
 800c232:	d1f9      	bne.n	800c228 <_rclc_execute.part.0+0x204>
 800c234:	69c3      	ldr	r3, [r0, #28]
 800c236:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c238:	4628      	mov	r0, r5
 800c23a:	4798      	blx	r3
 800c23c:	4603      	mov	r3, r0
 800c23e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c242:	4628      	mov	r0, r5
 800c244:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c248:	b163      	cbz	r3, 800c264 <_rclc_execute.part.0+0x240>
 800c24a:	f006 fd39 	bl	8012cc0 <rclc_action_server_goal_cancel_accept>
 800c24e:	6860      	ldr	r0, [r4, #4]
 800c250:	e7ea      	b.n	800c228 <_rclc_execute.part.0+0x204>
 800c252:	2300      	movs	r3, #0
 800c254:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c258:	4618      	mov	r0, r3
 800c25a:	e739      	b.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c25c:	4628      	mov	r0, r5
 800c25e:	4798      	blx	r3
 800c260:	4628      	mov	r0, r5
 800c262:	e735      	b.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c264:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c266:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c26a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c272:	6860      	ldr	r0, [r4, #4]
 800c274:	2101      	movs	r1, #1
 800c276:	f006 fd4f 	bl	8012d18 <rclc_action_server_goal_cancel_reject>
 800c27a:	722e      	strb	r6, [r5, #8]
 800c27c:	6860      	ldr	r0, [r4, #4]
 800c27e:	e7d3      	b.n	800c228 <_rclc_execute.part.0+0x204>
 800c280:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c282:	6880      	ldr	r0, [r0, #8]
 800c284:	4798      	blx	r3
 800c286:	f104 0110 	add.w	r1, r4, #16
 800c28a:	e6e7      	b.n	800c05c <_rclc_execute.part.0+0x38>
 800c28c:	f100 0110 	add.w	r1, r0, #16
 800c290:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c292:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c294:	6880      	ldr	r0, [r0, #8]
 800c296:	9105      	str	r1, [sp, #20]
 800c298:	4798      	blx	r3
 800c29a:	9905      	ldr	r1, [sp, #20]
 800c29c:	e6de      	b.n	800c05c <_rclc_execute.part.0+0x38>
 800c29e:	2001      	movs	r0, #1
 800c2a0:	e716      	b.n	800c0d0 <_rclc_execute.part.0+0xac>
 800c2a2:	bf00      	nop

0800c2a4 <rclc_executor_trigger_any>:
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d03f      	beq.n	800c328 <rclc_executor_trigger_any+0x84>
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	d03e      	beq.n	800c32a <rclc_executor_trigger_any+0x86>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d037      	beq.n	800c328 <rclc_executor_trigger_any+0x84>
 800c2b8:	b430      	push	{r4, r5}
 800c2ba:	f893 c000 	ldrb.w	ip, [r3]
 800c2be:	f1bc 0f08 	cmp.w	ip, #8
 800c2c2:	d11e      	bne.n	800c302 <rclc_executor_trigger_any+0x5e>
 800c2c4:	685c      	ldr	r4, [r3, #4]
 800c2c6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c2c8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c2cc:	d105      	bne.n	800c2da <rclc_executor_trigger_any+0x36>
 800c2ce:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c2d2:	b910      	cbnz	r0, 800c2da <rclc_executor_trigger_any+0x36>
 800c2d4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c2d8:	b128      	cbz	r0, 800c2e6 <rclc_executor_trigger_any+0x42>
 800c2da:	bc30      	pop	{r4, r5}
 800c2dc:	4770      	bx	lr
 800c2de:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d1f9      	bne.n	800c2da <rclc_executor_trigger_any+0x36>
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	4291      	cmp	r1, r2
 800c2ea:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c2ee:	d018      	beq.n	800c322 <rclc_executor_trigger_any+0x7e>
 800c2f0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d0f0      	beq.n	800c2da <rclc_executor_trigger_any+0x36>
 800c2f8:	f893 c000 	ldrb.w	ip, [r3]
 800c2fc:	f1bc 0f08 	cmp.w	ip, #8
 800c300:	d0e0      	beq.n	800c2c4 <rclc_executor_trigger_any+0x20>
 800c302:	f1bc 0f09 	cmp.w	ip, #9
 800c306:	d1ea      	bne.n	800c2de <rclc_executor_trigger_any+0x3a>
 800c308:	685c      	ldr	r4, [r3, #4]
 800c30a:	6a25      	ldr	r5, [r4, #32]
 800c30c:	2d00      	cmp	r5, #0
 800c30e:	d1e4      	bne.n	800c2da <rclc_executor_trigger_any+0x36>
 800c310:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c314:	2800      	cmp	r0, #0
 800c316:	d1e0      	bne.n	800c2da <rclc_executor_trigger_any+0x36>
 800c318:	3201      	adds	r2, #1
 800c31a:	4291      	cmp	r1, r2
 800c31c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c320:	d1e6      	bne.n	800c2f0 <rclc_executor_trigger_any+0x4c>
 800c322:	2000      	movs	r0, #0
 800c324:	bc30      	pop	{r4, r5}
 800c326:	4770      	bx	lr
 800c328:	4770      	bx	lr
 800c32a:	4608      	mov	r0, r1
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop

0800c330 <rclc_executor_get_zero_initialized_executor>:
 800c330:	b510      	push	{r4, lr}
 800c332:	4903      	ldr	r1, [pc, #12]	@ (800c340 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c334:	4604      	mov	r4, r0
 800c336:	2288      	movs	r2, #136	@ 0x88
 800c338:	f00b fa69 	bl	801780e <memcpy>
 800c33c:	4620      	mov	r0, r4
 800c33e:	bd10      	pop	{r4, pc}
 800c340:	080188e0 	.word	0x080188e0
 800c344:	00000000 	.word	0x00000000

0800c348 <rclc_executor_init>:
 800c348:	2800      	cmp	r0, #0
 800c34a:	d05f      	beq.n	800c40c <rclc_executor_init+0xc4>
 800c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	460c      	mov	r4, r1
 800c352:	b0b0      	sub	sp, #192	@ 0xc0
 800c354:	2900      	cmp	r1, #0
 800c356:	d051      	beq.n	800c3fc <rclc_executor_init+0xb4>
 800c358:	4605      	mov	r5, r0
 800c35a:	4618      	mov	r0, r3
 800c35c:	4616      	mov	r6, r2
 800c35e:	461f      	mov	r7, r3
 800c360:	f000 fbea 	bl	800cb38 <rcutils_allocator_is_valid>
 800c364:	2800      	cmp	r0, #0
 800c366:	d049      	beq.n	800c3fc <rclc_executor_init+0xb4>
 800c368:	2e00      	cmp	r6, #0
 800c36a:	d047      	beq.n	800c3fc <rclc_executor_init+0xb4>
 800c36c:	492c      	ldr	r1, [pc, #176]	@ (800c420 <rclc_executor_init+0xd8>)
 800c36e:	2288      	movs	r2, #136	@ 0x88
 800c370:	a80e      	add	r0, sp, #56	@ 0x38
 800c372:	f00b fa4c 	bl	801780e <memcpy>
 800c376:	a90e      	add	r1, sp, #56	@ 0x38
 800c378:	2288      	movs	r2, #136	@ 0x88
 800c37a:	4628      	mov	r0, r5
 800c37c:	f00b fa47 	bl	801780e <memcpy>
 800c380:	602c      	str	r4, [r5, #0]
 800c382:	4668      	mov	r0, sp
 800c384:	60ae      	str	r6, [r5, #8]
 800c386:	466c      	mov	r4, sp
 800c388:	f005 f992 	bl	80116b0 <rcl_get_zero_initialized_wait_set>
 800c38c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c38e:	f105 0c14 	add.w	ip, r5, #20
 800c392:	f8d7 8000 	ldr.w	r8, [r7]
 800c396:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c39a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c39c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3a6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c418 <rclc_executor_init+0xd0>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f8cc 3000 	str.w	r3, [ip]
 800c3b0:	6939      	ldr	r1, [r7, #16]
 800c3b2:	612f      	str	r7, [r5, #16]
 800c3b4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c3b8:	01b0      	lsls	r0, r6, #6
 800c3ba:	47c0      	blx	r8
 800c3bc:	6068      	str	r0, [r5, #4]
 800c3be:	b338      	cbz	r0, 800c410 <rclc_executor_init+0xc8>
 800c3c0:	2400      	movs	r4, #0
 800c3c2:	e000      	b.n	800c3c6 <rclc_executor_init+0x7e>
 800c3c4:	6868      	ldr	r0, [r5, #4]
 800c3c6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	3401      	adds	r4, #1
 800c3ce:	f000 fa6b 	bl	800c8a8 <rclc_executor_handle_init>
 800c3d2:	42a6      	cmp	r6, r4
 800c3d4:	d1f6      	bne.n	800c3c4 <rclc_executor_init+0x7c>
 800c3d6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c3da:	f000 fa5b 	bl	800c894 <rclc_executor_handle_counters_zero_init>
 800c3de:	4a11      	ldr	r2, [pc, #68]	@ (800c424 <rclc_executor_init+0xdc>)
 800c3e0:	686b      	ldr	r3, [r5, #4]
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c3e8:	b163      	cbz	r3, 800c404 <rclc_executor_init+0xbc>
 800c3ea:	692b      	ldr	r3, [r5, #16]
 800c3ec:	b153      	cbz	r3, 800c404 <rclc_executor_init+0xbc>
 800c3ee:	68ab      	ldr	r3, [r5, #8]
 800c3f0:	b143      	cbz	r3, 800c404 <rclc_executor_init+0xbc>
 800c3f2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c3f6:	b030      	add	sp, #192	@ 0xc0
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fc:	200b      	movs	r0, #11
 800c3fe:	b030      	add	sp, #192	@ 0xc0
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c404:	4618      	mov	r0, r3
 800c406:	b030      	add	sp, #192	@ 0xc0
 800c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40c:	200b      	movs	r0, #11
 800c40e:	4770      	bx	lr
 800c410:	200a      	movs	r0, #10
 800c412:	e7f4      	b.n	800c3fe <rclc_executor_init+0xb6>
 800c414:	f3af 8000 	nop.w
 800c418:	3b9aca00 	.word	0x3b9aca00
 800c41c:	00000000 	.word	0x00000000
 800c420:	080188e0 	.word	0x080188e0
 800c424:	0800c2a5 	.word	0x0800c2a5

0800c428 <rclc_executor_add_subscription>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c42e:	b338      	cbz	r0, 800c480 <rclc_executor_add_subscription+0x58>
 800c430:	b331      	cbz	r1, 800c480 <rclc_executor_add_subscription+0x58>
 800c432:	b32a      	cbz	r2, 800c480 <rclc_executor_add_subscription+0x58>
 800c434:	b323      	cbz	r3, 800c480 <rclc_executor_add_subscription+0x58>
 800c436:	4604      	mov	r4, r0
 800c438:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c43c:	42a8      	cmp	r0, r5
 800c43e:	d301      	bcc.n	800c444 <rclc_executor_add_subscription+0x1c>
 800c440:	2001      	movs	r0, #1
 800c442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c444:	6866      	ldr	r6, [r4, #4]
 800c446:	0187      	lsls	r7, r0, #6
 800c448:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c44c:	2500      	movs	r5, #0
 800c44e:	55f5      	strb	r5, [r6, r7]
 800c450:	3001      	adds	r0, #1
 800c452:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c456:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c45a:	2301      	movs	r3, #1
 800c45c:	f104 0514 	add.w	r5, r4, #20
 800c460:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c464:	f88c e001 	strb.w	lr, [ip, #1]
 800c468:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c46c:	60e0      	str	r0, [r4, #12]
 800c46e:	4628      	mov	r0, r5
 800c470:	f005 f932 	bl	80116d8 <rcl_wait_set_is_valid>
 800c474:	b930      	cbnz	r0, 800c484 <rclc_executor_add_subscription+0x5c>
 800c476:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c478:	3301      	adds	r3, #1
 800c47a:	2000      	movs	r0, #0
 800c47c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c480:	200b      	movs	r0, #11
 800c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c484:	4628      	mov	r0, r5
 800c486:	f005 f92d 	bl	80116e4 <rcl_wait_set_fini>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d0f3      	beq.n	800c476 <rclc_executor_add_subscription+0x4e>
 800c48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c490 <rclc_executor_prepare>:
 800c490:	2800      	cmp	r0, #0
 800c492:	d044      	beq.n	800c51e <rclc_executor_prepare+0x8e>
 800c494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c496:	f100 0514 	add.w	r5, r0, #20
 800c49a:	b09b      	sub	sp, #108	@ 0x6c
 800c49c:	4604      	mov	r4, r0
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f005 f91a 	bl	80116d8 <rcl_wait_set_is_valid>
 800c4a4:	b110      	cbz	r0, 800c4ac <rclc_executor_prepare+0x1c>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	b01b      	add	sp, #108	@ 0x6c
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f005 f919 	bl	80116e4 <rcl_wait_set_fini>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d130      	bne.n	800c518 <rclc_executor_prepare+0x88>
 800c4b6:	a80c      	add	r0, sp, #48	@ 0x30
 800c4b8:	f005 f8fa 	bl	80116b0 <rcl_get_zero_initialized_wait_set>
 800c4bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c4c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4c4:	46ae      	mov	lr, r5
 800c4c6:	6927      	ldr	r7, [r4, #16]
 800c4c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4dc:	f8dc 3000 	ldr.w	r3, [ip]
 800c4e0:	f8ce 3000 	str.w	r3, [lr]
 800c4e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c4e6:	ae04      	add	r6, sp, #16
 800c4e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	6033      	str	r3, [r6, #0]
 800c4f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4f2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c4f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c4f8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c4fc:	e9cd 2100 	strd	r2, r1, [sp]
 800c500:	4628      	mov	r0, r5
 800c502:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c504:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c506:	f005 fbeb 	bl	8011ce0 <rcl_wait_set_init>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0cc      	beq.n	800c4a8 <rclc_executor_prepare+0x18>
 800c50e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c510:	f000 fb36 	bl	800cb80 <rcutils_reset_error>
 800c514:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c516:	e7c7      	b.n	800c4a8 <rclc_executor_prepare+0x18>
 800c518:	f000 fb32 	bl	800cb80 <rcutils_reset_error>
 800c51c:	e7cb      	b.n	800c4b6 <rclc_executor_prepare+0x26>
 800c51e:	200b      	movs	r0, #11
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop

0800c524 <rclc_executor_spin_some.part.0>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	f100 0614 	add.w	r6, r0, #20
 800c52c:	b083      	sub	sp, #12
 800c52e:	4691      	mov	r9, r2
 800c530:	4698      	mov	r8, r3
 800c532:	4605      	mov	r5, r0
 800c534:	f7ff ffac 	bl	800c490 <rclc_executor_prepare>
 800c538:	4630      	mov	r0, r6
 800c53a:	f005 f99f 	bl	801187c <rcl_wait_set_clear>
 800c53e:	4607      	mov	r7, r0
 800c540:	2800      	cmp	r0, #0
 800c542:	f040 80ed 	bne.w	800c720 <rclc_executor_spin_some.part.0+0x1fc>
 800c546:	68ab      	ldr	r3, [r5, #8]
 800c548:	4604      	mov	r4, r0
 800c54a:	b303      	cbz	r3, 800c58e <rclc_executor_spin_some.part.0+0x6a>
 800c54c:	6869      	ldr	r1, [r5, #4]
 800c54e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c552:	01a2      	lsls	r2, r4, #6
 800c554:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c558:	b1cb      	cbz	r3, 800c58e <rclc_executor_spin_some.part.0+0x6a>
 800c55a:	5c8b      	ldrb	r3, [r1, r2]
 800c55c:	2b0a      	cmp	r3, #10
 800c55e:	f200 80d8 	bhi.w	800c712 <rclc_executor_spin_some.part.0+0x1ee>
 800c562:	e8df f003 	tbb	[pc, r3]
 800c566:	9c9c      	.short	0x9c9c
 800c568:	068c8ca7 	.word	0x068c8ca7
 800c56c:	bdc90606 	.word	0xbdc90606
 800c570:	b2          	.byte	0xb2
 800c571:	00          	.byte	0x00
 800c572:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c576:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c57a:	4630      	mov	r0, r6
 800c57c:	f005 fcc6 	bl	8011f0c <rcl_wait_set_add_service>
 800c580:	2800      	cmp	r0, #0
 800c582:	f040 8086 	bne.w	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c586:	68ab      	ldr	r3, [r5, #8]
 800c588:	3401      	adds	r4, #1
 800c58a:	429c      	cmp	r4, r3
 800c58c:	d3de      	bcc.n	800c54c <rclc_executor_spin_some.part.0+0x28>
 800c58e:	4643      	mov	r3, r8
 800c590:	464a      	mov	r2, r9
 800c592:	4630      	mov	r0, r6
 800c594:	f005 fce8 	bl	8011f68 <rcl_wait>
 800c598:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80c7 	beq.w	800c730 <rclc_executor_spin_some.part.0+0x20c>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	f040 80b5 	bne.w	800c712 <rclc_executor_spin_some.part.0+0x1ee>
 800c5a8:	68ab      	ldr	r3, [r5, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 8159 	beq.w	800c862 <rclc_executor_spin_some.part.0+0x33e>
 800c5b0:	2400      	movs	r4, #0
 800c5b2:	46a0      	mov	r8, r4
 800c5b4:	f240 1991 	movw	r9, #401	@ 0x191
 800c5b8:	e00a      	b.n	800c5d0 <rclc_executor_spin_some.part.0+0xac>
 800c5ba:	f7ff fb71 	bl	800bca0 <_rclc_check_for_new_data>
 800c5be:	4604      	mov	r4, r0
 800c5c0:	b110      	cbz	r0, 800c5c8 <rclc_executor_spin_some.part.0+0xa4>
 800c5c2:	4548      	cmp	r0, r9
 800c5c4:	f040 80b2 	bne.w	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c5c8:	68ab      	ldr	r3, [r5, #8]
 800c5ca:	4598      	cmp	r8, r3
 800c5cc:	f080 8126 	bcs.w	800c81c <rclc_executor_spin_some.part.0+0x2f8>
 800c5d0:	686a      	ldr	r2, [r5, #4]
 800c5d2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c5dc:	f108 0801 	add.w	r8, r8, #1
 800c5e0:	f1bc 0f00 	cmp.w	ip, #0
 800c5e4:	d1e9      	bne.n	800c5ba <rclc_executor_spin_some.part.0+0x96>
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c5ee:	4798      	blx	r3
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f000 809b 	beq.w	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c5f6:	68ab      	ldr	r3, [r5, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 8097 	beq.w	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c5fe:	f04f 0800 	mov.w	r8, #0
 800c602:	f240 1991 	movw	r9, #401	@ 0x191
 800c606:	e009      	b.n	800c61c <rclc_executor_spin_some.part.0+0xf8>
 800c608:	f7ff fb98 	bl	800bd3c <_rclc_take_new_data>
 800c60c:	4604      	mov	r4, r0
 800c60e:	b110      	cbz	r0, 800c616 <rclc_executor_spin_some.part.0+0xf2>
 800c610:	4548      	cmp	r0, r9
 800c612:	f040 808b 	bne.w	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c616:	68ab      	ldr	r3, [r5, #8]
 800c618:	4598      	cmp	r8, r3
 800c61a:	d209      	bcs.n	800c630 <rclc_executor_spin_some.part.0+0x10c>
 800c61c:	6868      	ldr	r0, [r5, #4]
 800c61e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c622:	4631      	mov	r1, r6
 800c624:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c628:	f108 0801 	add.w	r8, r8, #1
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	d1eb      	bne.n	800c608 <rclc_executor_spin_some.part.0+0xe4>
 800c630:	2600      	movs	r6, #0
 800c632:	b97b      	cbnz	r3, 800c654 <rclc_executor_spin_some.part.0+0x130>
 800c634:	e07a      	b.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c636:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c63a:	2a08      	cmp	r2, #8
 800c63c:	f000 80fd 	beq.w	800c83a <rclc_executor_spin_some.part.0+0x316>
 800c640:	2a09      	cmp	r2, #9
 800c642:	f000 80ef 	beq.w	800c824 <rclc_executor_spin_some.part.0+0x300>
 800c646:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c64a:	b98a      	cbnz	r2, 800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c64c:	3601      	adds	r6, #1
 800c64e:	429e      	cmp	r6, r3
 800c650:	d262      	bcs.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c652:	2400      	movs	r4, #0
 800c654:	686a      	ldr	r2, [r5, #4]
 800c656:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c65a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c65e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c662:	2900      	cmp	r1, #0
 800c664:	d062      	beq.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c666:	7841      	ldrb	r1, [r0, #1]
 800c668:	2900      	cmp	r1, #0
 800c66a:	d0e4      	beq.n	800c636 <rclc_executor_spin_some.part.0+0x112>
 800c66c:	2901      	cmp	r1, #1
 800c66e:	d1ed      	bne.n	800c64c <rclc_executor_spin_some.part.0+0x128>
 800c670:	f7ff fcd8 	bl	800c024 <_rclc_execute.part.0>
 800c674:	2800      	cmp	r0, #0
 800c676:	f040 80b6 	bne.w	800c7e6 <rclc_executor_spin_some.part.0+0x2c2>
 800c67a:	68ab      	ldr	r3, [r5, #8]
 800c67c:	e7e6      	b.n	800c64c <rclc_executor_spin_some.part.0+0x128>
 800c67e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c682:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c686:	4630      	mov	r0, r6
 800c688:	f005 fc14 	bl	8011eb4 <rcl_wait_set_add_client>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f43f af7a 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c692:	9001      	str	r0, [sp, #4]
 800c694:	f000 fa74 	bl	800cb80 <rcutils_reset_error>
 800c698:	9801      	ldr	r0, [sp, #4]
 800c69a:	4607      	mov	r7, r0
 800c69c:	e03c      	b.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c69e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f005 f8bc 	bl	8011824 <rcl_wait_set_add_subscription>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f43f af6a 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c6b2:	e7ee      	b.n	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c6b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6b8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f005 fbc9 	bl	8011e54 <rcl_wait_set_add_timer>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f43f af5f 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c6c8:	e7e3      	b.n	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c6ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6ce:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f005 fb92 	bl	8011dfc <rcl_wait_set_add_guard_condition>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f43f af54 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c6de:	e7d8      	b.n	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c6e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6e4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6e8:	3110      	adds	r1, #16
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f006 f914 	bl	8012918 <rcl_action_wait_set_add_action_server>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f43f af48 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c6f6:	e7cc      	b.n	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c6f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6fc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c700:	3110      	adds	r1, #16
 800c702:	2300      	movs	r3, #0
 800c704:	4630      	mov	r0, r6
 800c706:	f005 fedf 	bl	80124c8 <rcl_action_wait_set_add_action_client>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f43f af3b 	beq.w	800c586 <rclc_executor_spin_some.part.0+0x62>
 800c710:	e7bf      	b.n	800c692 <rclc_executor_spin_some.part.0+0x16e>
 800c712:	f000 fa35 	bl	800cb80 <rcutils_reset_error>
 800c716:	2701      	movs	r7, #1
 800c718:	4638      	mov	r0, r7
 800c71a:	b003      	add	sp, #12
 800c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c720:	f000 fa2e 	bl	800cb80 <rcutils_reset_error>
 800c724:	4638      	mov	r0, r7
 800c726:	b003      	add	sp, #12
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	4627      	mov	r7, r4
 800c72e:	e7f3      	b.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c730:	68ab      	ldr	r3, [r5, #8]
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 8092 	beq.w	800c85c <rclc_executor_spin_some.part.0+0x338>
 800c738:	2400      	movs	r4, #0
 800c73a:	46a0      	mov	r8, r4
 800c73c:	f240 1991 	movw	r9, #401	@ 0x191
 800c740:	e008      	b.n	800c754 <rclc_executor_spin_some.part.0+0x230>
 800c742:	f7ff faad 	bl	800bca0 <_rclc_check_for_new_data>
 800c746:	4604      	mov	r4, r0
 800c748:	b108      	cbz	r0, 800c74e <rclc_executor_spin_some.part.0+0x22a>
 800c74a:	4548      	cmp	r0, r9
 800c74c:	d1ee      	bne.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c74e:	68ab      	ldr	r3, [r5, #8]
 800c750:	4598      	cmp	r8, r3
 800c752:	d265      	bcs.n	800c820 <rclc_executor_spin_some.part.0+0x2fc>
 800c754:	686a      	ldr	r2, [r5, #4]
 800c756:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c75a:	4631      	mov	r1, r6
 800c75c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c760:	f108 0801 	add.w	r8, r8, #1
 800c764:	f1bc 0f00 	cmp.w	ip, #0
 800c768:	d1eb      	bne.n	800c742 <rclc_executor_spin_some.part.0+0x21e>
 800c76a:	4619      	mov	r1, r3
 800c76c:	4610      	mov	r0, r2
 800c76e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c772:	4798      	blx	r3
 800c774:	2800      	cmp	r0, #0
 800c776:	d0d9      	beq.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c778:	68ab      	ldr	r3, [r5, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0d6      	beq.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c77e:	f04f 0800 	mov.w	r8, #0
 800c782:	f240 1991 	movw	r9, #401	@ 0x191
 800c786:	f240 2a59 	movw	sl, #601	@ 0x259
 800c78a:	e00e      	b.n	800c7aa <rclc_executor_spin_some.part.0+0x286>
 800c78c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c790:	2b08      	cmp	r3, #8
 800c792:	d033      	beq.n	800c7fc <rclc_executor_spin_some.part.0+0x2d8>
 800c794:	2b09      	cmp	r3, #9
 800c796:	d028      	beq.n	800c7ea <rclc_executor_spin_some.part.0+0x2c6>
 800c798:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c79c:	b9fb      	cbnz	r3, 800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c79e:	68ab      	ldr	r3, [r5, #8]
 800c7a0:	f108 0801 	add.w	r8, r8, #1
 800c7a4:	4598      	cmp	r8, r3
 800c7a6:	d2b7      	bcs.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c7a8:	2400      	movs	r4, #0
 800c7aa:	6868      	ldr	r0, [r5, #4]
 800c7ac:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c7b0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c7b4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0b7      	beq.n	800c72c <rclc_executor_spin_some.part.0+0x208>
 800c7bc:	4631      	mov	r1, r6
 800c7be:	f7ff fabd 	bl	800bd3c <_rclc_take_new_data>
 800c7c2:	b118      	cbz	r0, 800c7cc <rclc_executor_spin_some.part.0+0x2a8>
 800c7c4:	4548      	cmp	r0, r9
 800c7c6:	d001      	beq.n	800c7cc <rclc_executor_spin_some.part.0+0x2a8>
 800c7c8:	4550      	cmp	r0, sl
 800c7ca:	d10c      	bne.n	800c7e6 <rclc_executor_spin_some.part.0+0x2c2>
 800c7cc:	686b      	ldr	r3, [r5, #4]
 800c7ce:	eb13 000b 	adds.w	r0, r3, fp
 800c7d2:	d021      	beq.n	800c818 <rclc_executor_spin_some.part.0+0x2f4>
 800c7d4:	7842      	ldrb	r2, [r0, #1]
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	d0d8      	beq.n	800c78c <rclc_executor_spin_some.part.0+0x268>
 800c7da:	2a01      	cmp	r2, #1
 800c7dc:	d1df      	bne.n	800c79e <rclc_executor_spin_some.part.0+0x27a>
 800c7de:	f7ff fc21 	bl	800c024 <_rclc_execute.part.0>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0db      	beq.n	800c79e <rclc_executor_spin_some.part.0+0x27a>
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	e796      	b.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c7ea:	6843      	ldr	r3, [r0, #4]
 800c7ec:	6a1a      	ldr	r2, [r3, #32]
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	d1f5      	bne.n	800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c7f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0d1      	beq.n	800c79e <rclc_executor_spin_some.part.0+0x27a>
 800c7fa:	e7f0      	b.n	800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c7fc:	6843      	ldr	r3, [r0, #4]
 800c7fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c800:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c804:	d1eb      	bne.n	800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c806:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	d1e7      	bne.n	800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c80e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0c3      	beq.n	800c79e <rclc_executor_spin_some.part.0+0x27a>
 800c816:	e7e2      	b.n	800c7de <rclc_executor_spin_some.part.0+0x2ba>
 800c818:	270b      	movs	r7, #11
 800c81a:	e77d      	b.n	800c718 <rclc_executor_spin_some.part.0+0x1f4>
 800c81c:	686a      	ldr	r2, [r5, #4]
 800c81e:	e6e2      	b.n	800c5e6 <rclc_executor_spin_some.part.0+0xc2>
 800c820:	686a      	ldr	r2, [r5, #4]
 800c822:	e7a2      	b.n	800c76a <rclc_executor_spin_some.part.0+0x246>
 800c824:	6842      	ldr	r2, [r0, #4]
 800c826:	6a11      	ldr	r1, [r2, #32]
 800c828:	2900      	cmp	r1, #0
 800c82a:	f47f af21 	bne.w	800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c82e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c832:	2a00      	cmp	r2, #0
 800c834:	f43f af0a 	beq.w	800c64c <rclc_executor_spin_some.part.0+0x128>
 800c838:	e71a      	b.n	800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c83a:	6842      	ldr	r2, [r0, #4]
 800c83c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c83e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c842:	f47f af15 	bne.w	800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c846:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c84a:	2900      	cmp	r1, #0
 800c84c:	f47f af10 	bne.w	800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c850:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c854:	2a00      	cmp	r2, #0
 800c856:	f43f aef9 	beq.w	800c64c <rclc_executor_spin_some.part.0+0x128>
 800c85a:	e709      	b.n	800c670 <rclc_executor_spin_some.part.0+0x14c>
 800c85c:	686a      	ldr	r2, [r5, #4]
 800c85e:	461c      	mov	r4, r3
 800c860:	e783      	b.n	800c76a <rclc_executor_spin_some.part.0+0x246>
 800c862:	686a      	ldr	r2, [r5, #4]
 800c864:	461c      	mov	r4, r3
 800c866:	e6be      	b.n	800c5e6 <rclc_executor_spin_some.part.0+0xc2>

0800c868 <rclc_executor_spin_some>:
 800c868:	b190      	cbz	r0, 800c890 <rclc_executor_spin_some+0x28>
 800c86a:	b570      	push	{r4, r5, r6, lr}
 800c86c:	4604      	mov	r4, r0
 800c86e:	6800      	ldr	r0, [r0, #0]
 800c870:	4616      	mov	r6, r2
 800c872:	461d      	mov	r5, r3
 800c874:	f003 ff0c 	bl	8010690 <rcl_context_is_valid>
 800c878:	b130      	cbz	r0, 800c888 <rclc_executor_spin_some+0x20>
 800c87a:	4632      	mov	r2, r6
 800c87c:	462b      	mov	r3, r5
 800c87e:	4620      	mov	r0, r4
 800c880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c884:	f7ff be4e 	b.w	800c524 <rclc_executor_spin_some.part.0>
 800c888:	f000 f97a 	bl	800cb80 <rcutils_reset_error>
 800c88c:	2001      	movs	r0, #1
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	200b      	movs	r0, #11
 800c892:	4770      	bx	lr

0800c894 <rclc_executor_handle_counters_zero_init>:
 800c894:	b130      	cbz	r0, 800c8a4 <rclc_executor_handle_counters_zero_init+0x10>
 800c896:	b508      	push	{r3, lr}
 800c898:	2220      	movs	r2, #32
 800c89a:	2100      	movs	r1, #0
 800c89c:	f00a feee 	bl	801767c <memset>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	bd08      	pop	{r3, pc}
 800c8a4:	200b      	movs	r0, #11
 800c8a6:	4770      	bx	lr

0800c8a8 <rclc_executor_handle_init>:
 800c8a8:	b168      	cbz	r0, 800c8c6 <rclc_executor_handle_init+0x1e>
 800c8aa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c8d0 <rclc_executor_handle_init+0x28>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	220b      	movs	r2, #11
 800c8b2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c8b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c8ba:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c8be:	8002      	strh	r2, [r0, #0]
 800c8c0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	4770      	bx	lr
 800c8c6:	200b      	movs	r0, #11
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	f3af 8000 	nop.w
	...

0800c8d8 <rclc_support_init>:
 800c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8dc:	b086      	sub	sp, #24
 800c8de:	b3b8      	cbz	r0, 800c950 <rclc_support_init+0x78>
 800c8e0:	461c      	mov	r4, r3
 800c8e2:	b3ab      	cbz	r3, 800c950 <rclc_support_init+0x78>
 800c8e4:	460f      	mov	r7, r1
 800c8e6:	4690      	mov	r8, r2
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	f004 f825 	bl	8010938 <rcl_get_zero_initialized_init_options>
 800c8ee:	f104 030c 	add.w	r3, r4, #12
 800c8f2:	9005      	str	r0, [sp, #20]
 800c8f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c8fc:	a805      	add	r0, sp, #20
 800c8fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c902:	f004 f81b 	bl	801093c <rcl_init_options_init>
 800c906:	4605      	mov	r5, r0
 800c908:	b9e0      	cbnz	r0, 800c944 <rclc_support_init+0x6c>
 800c90a:	ad02      	add	r5, sp, #8
 800c90c:	4628      	mov	r0, r5
 800c90e:	f003 feb5 	bl	801067c <rcl_get_zero_initialized_context>
 800c912:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c916:	4633      	mov	r3, r6
 800c918:	e886 0003 	stmia.w	r6, {r0, r1}
 800c91c:	aa05      	add	r2, sp, #20
 800c91e:	4641      	mov	r1, r8
 800c920:	4638      	mov	r0, r7
 800c922:	f003 ff1b 	bl	801075c <rcl_init>
 800c926:	4605      	mov	r5, r0
 800c928:	b9b8      	cbnz	r0, 800c95a <rclc_support_init+0x82>
 800c92a:	60b4      	str	r4, [r6, #8]
 800c92c:	4622      	mov	r2, r4
 800c92e:	f106 010c 	add.w	r1, r6, #12
 800c932:	2003      	movs	r0, #3
 800c934:	f004 fd30 	bl	8011398 <rcl_clock_init>
 800c938:	4605      	mov	r5, r0
 800c93a:	b970      	cbnz	r0, 800c95a <rclc_support_init+0x82>
 800c93c:	a805      	add	r0, sp, #20
 800c93e:	f004 f863 	bl	8010a08 <rcl_init_options_fini>
 800c942:	b108      	cbz	r0, 800c948 <rclc_support_init+0x70>
 800c944:	f000 f91c 	bl	800cb80 <rcutils_reset_error>
 800c948:	4628      	mov	r0, r5
 800c94a:	b006      	add	sp, #24
 800c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c950:	250b      	movs	r5, #11
 800c952:	4628      	mov	r0, r5
 800c954:	b006      	add	sp, #24
 800c956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95a:	f000 f911 	bl	800cb80 <rcutils_reset_error>
 800c95e:	a805      	add	r0, sp, #20
 800c960:	f004 f852 	bl	8010a08 <rcl_init_options_fini>
 800c964:	2800      	cmp	r0, #0
 800c966:	d0ef      	beq.n	800c948 <rclc_support_init+0x70>
 800c968:	e7ec      	b.n	800c944 <rclc_support_init+0x6c>
 800c96a:	bf00      	nop

0800c96c <rclc_node_init_default>:
 800c96c:	b3b8      	cbz	r0, 800c9de <rclc_node_init_default+0x72>
 800c96e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c972:	460d      	mov	r5, r1
 800c974:	b0a1      	sub	sp, #132	@ 0x84
 800c976:	b329      	cbz	r1, 800c9c4 <rclc_node_init_default+0x58>
 800c978:	4616      	mov	r6, r2
 800c97a:	b31a      	cbz	r2, 800c9c4 <rclc_node_init_default+0x58>
 800c97c:	461f      	mov	r7, r3
 800c97e:	b30b      	cbz	r3, 800c9c4 <rclc_node_init_default+0x58>
 800c980:	f10d 0810 	add.w	r8, sp, #16
 800c984:	4604      	mov	r4, r0
 800c986:	4640      	mov	r0, r8
 800c988:	f004 f8f6 	bl	8010b78 <rcl_get_zero_initialized_node>
 800c98c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c990:	f10d 0918 	add.w	r9, sp, #24
 800c994:	e884 0003 	stmia.w	r4, {r0, r1}
 800c998:	4648      	mov	r0, r9
 800c99a:	f004 fa65 	bl	8010e68 <rcl_node_get_default_options>
 800c99e:	4640      	mov	r0, r8
 800c9a0:	f004 f8ea 	bl	8010b78 <rcl_get_zero_initialized_node>
 800c9a4:	f8cd 9000 	str.w	r9, [sp]
 800c9a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	e884 0003 	stmia.w	r4, {r0, r1}
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f004 f8e8 	bl	8010b8c <rcl_node_init>
 800c9bc:	b930      	cbnz	r0, 800c9cc <rclc_node_init_default+0x60>
 800c9be:	b021      	add	sp, #132	@ 0x84
 800c9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c4:	200b      	movs	r0, #11
 800c9c6:	b021      	add	sp, #132	@ 0x84
 800c9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9cc:	9003      	str	r0, [sp, #12]
 800c9ce:	f000 f8d7 	bl	800cb80 <rcutils_reset_error>
 800c9d2:	f000 f8d5 	bl	800cb80 <rcutils_reset_error>
 800c9d6:	9803      	ldr	r0, [sp, #12]
 800c9d8:	b021      	add	sp, #132	@ 0x84
 800c9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9de:	200b      	movs	r0, #11
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop

0800c9e4 <rclc_publisher_init_default>:
 800c9e4:	b368      	cbz	r0, 800ca42 <rclc_publisher_init_default+0x5e>
 800c9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	b0a0      	sub	sp, #128	@ 0x80
 800c9ee:	b321      	cbz	r1, 800ca3a <rclc_publisher_init_default+0x56>
 800c9f0:	4616      	mov	r6, r2
 800c9f2:	b312      	cbz	r2, 800ca3a <rclc_publisher_init_default+0x56>
 800c9f4:	461f      	mov	r7, r3
 800c9f6:	b303      	cbz	r3, 800ca3a <rclc_publisher_init_default+0x56>
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	f7ff f841 	bl	800ba80 <rcl_get_zero_initialized_publisher>
 800c9fe:	f10d 0810 	add.w	r8, sp, #16
 800ca02:	6020      	str	r0, [r4, #0]
 800ca04:	4640      	mov	r0, r8
 800ca06:	f7ff f8d7 	bl	800bbb8 <rcl_publisher_get_default_options>
 800ca0a:	490f      	ldr	r1, [pc, #60]	@ (800ca48 <rclc_publisher_init_default+0x64>)
 800ca0c:	2250      	movs	r2, #80	@ 0x50
 800ca0e:	4640      	mov	r0, r8
 800ca10:	f00a fefd 	bl	801780e <memcpy>
 800ca14:	f8cd 8000 	str.w	r8, [sp]
 800ca18:	463b      	mov	r3, r7
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff f834 	bl	800ba8c <rcl_publisher_init>
 800ca24:	b910      	cbnz	r0, 800ca2c <rclc_publisher_init_default+0x48>
 800ca26:	b020      	add	sp, #128	@ 0x80
 800ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2c:	9003      	str	r0, [sp, #12]
 800ca2e:	f000 f8a7 	bl	800cb80 <rcutils_reset_error>
 800ca32:	9803      	ldr	r0, [sp, #12]
 800ca34:	b020      	add	sp, #128	@ 0x80
 800ca36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3a:	200b      	movs	r0, #11
 800ca3c:	b020      	add	sp, #128	@ 0x80
 800ca3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca42:	200b      	movs	r0, #11
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	08018968 	.word	0x08018968

0800ca4c <rclc_subscription_init_default>:
 800ca4c:	b368      	cbz	r0, 800caaa <rclc_subscription_init_default+0x5e>
 800ca4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca52:	460d      	mov	r5, r1
 800ca54:	b0a0      	sub	sp, #128	@ 0x80
 800ca56:	b321      	cbz	r1, 800caa2 <rclc_subscription_init_default+0x56>
 800ca58:	4616      	mov	r6, r2
 800ca5a:	b312      	cbz	r2, 800caa2 <rclc_subscription_init_default+0x56>
 800ca5c:	461f      	mov	r7, r3
 800ca5e:	b303      	cbz	r3, 800caa2 <rclc_subscription_init_default+0x56>
 800ca60:	4604      	mov	r4, r0
 800ca62:	f004 fb3d 	bl	80110e0 <rcl_get_zero_initialized_subscription>
 800ca66:	f10d 0810 	add.w	r8, sp, #16
 800ca6a:	6020      	str	r0, [r4, #0]
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	f004 fbe5 	bl	801123c <rcl_subscription_get_default_options>
 800ca72:	490f      	ldr	r1, [pc, #60]	@ (800cab0 <rclc_subscription_init_default+0x64>)
 800ca74:	2250      	movs	r2, #80	@ 0x50
 800ca76:	4640      	mov	r0, r8
 800ca78:	f00a fec9 	bl	801780e <memcpy>
 800ca7c:	f8cd 8000 	str.w	r8, [sp]
 800ca80:	463b      	mov	r3, r7
 800ca82:	4632      	mov	r2, r6
 800ca84:	4629      	mov	r1, r5
 800ca86:	4620      	mov	r0, r4
 800ca88:	f004 fb30 	bl	80110ec <rcl_subscription_init>
 800ca8c:	b910      	cbnz	r0, 800ca94 <rclc_subscription_init_default+0x48>
 800ca8e:	b020      	add	sp, #128	@ 0x80
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	9003      	str	r0, [sp, #12]
 800ca96:	f000 f873 	bl	800cb80 <rcutils_reset_error>
 800ca9a:	9803      	ldr	r0, [sp, #12]
 800ca9c:	b020      	add	sp, #128	@ 0x80
 800ca9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa2:	200b      	movs	r0, #11
 800caa4:	b020      	add	sp, #128	@ 0x80
 800caa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caaa:	200b      	movs	r0, #11
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	080189b8 	.word	0x080189b8

0800cab4 <__default_zero_allocate>:
 800cab4:	f00a b9f8 	b.w	8016ea8 <calloc>

0800cab8 <__default_reallocate>:
 800cab8:	f00a bb84 	b.w	80171c4 <realloc>

0800cabc <__default_deallocate>:
 800cabc:	f00a ba60 	b.w	8016f80 <free>

0800cac0 <__default_allocate>:
 800cac0:	f00a ba56 	b.w	8016f70 <malloc>

0800cac4 <rcutils_get_zero_initialized_allocator>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	4c05      	ldr	r4, [pc, #20]	@ (800cadc <rcutils_get_zero_initialized_allocator+0x18>)
 800cac8:	4686      	mov	lr, r0
 800caca:	4684      	mov	ip, r0
 800cacc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	f8cc 3000 	str.w	r3, [ip]
 800cad8:	4670      	mov	r0, lr
 800cada:	bd10      	pop	{r4, pc}
 800cadc:	08018a08 	.word	0x08018a08

0800cae0 <rcutils_set_default_allocator>:
 800cae0:	b1a8      	cbz	r0, 800cb0e <rcutils_set_default_allocator+0x2e>
 800cae2:	6802      	ldr	r2, [r0, #0]
 800cae4:	b1a2      	cbz	r2, 800cb10 <rcutils_set_default_allocator+0x30>
 800cae6:	6841      	ldr	r1, [r0, #4]
 800cae8:	b1a1      	cbz	r1, 800cb14 <rcutils_set_default_allocator+0x34>
 800caea:	b410      	push	{r4}
 800caec:	68c4      	ldr	r4, [r0, #12]
 800caee:	b164      	cbz	r4, 800cb0a <rcutils_set_default_allocator+0x2a>
 800caf0:	6880      	ldr	r0, [r0, #8]
 800caf2:	b138      	cbz	r0, 800cb04 <rcutils_set_default_allocator+0x24>
 800caf4:	4b08      	ldr	r3, [pc, #32]	@ (800cb18 <rcutils_set_default_allocator+0x38>)
 800caf6:	601a      	str	r2, [r3, #0]
 800caf8:	2200      	movs	r2, #0
 800cafa:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800cafe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800cb02:	2001      	movs	r0, #1
 800cb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	e7fa      	b.n	800cb04 <rcutils_set_default_allocator+0x24>
 800cb0e:	4770      	bx	lr
 800cb10:	4610      	mov	r0, r2
 800cb12:	4770      	bx	lr
 800cb14:	4608      	mov	r0, r1
 800cb16:	4770      	bx	lr
 800cb18:	200001c4 	.word	0x200001c4

0800cb1c <rcutils_get_default_allocator>:
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	4c05      	ldr	r4, [pc, #20]	@ (800cb34 <rcutils_get_default_allocator+0x18>)
 800cb20:	4686      	mov	lr, r0
 800cb22:	4684      	mov	ip, r0
 800cb24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	f8cc 3000 	str.w	r3, [ip]
 800cb30:	4670      	mov	r0, lr
 800cb32:	bd10      	pop	{r4, pc}
 800cb34:	200001c4 	.word	0x200001c4

0800cb38 <rcutils_allocator_is_valid>:
 800cb38:	b158      	cbz	r0, 800cb52 <rcutils_allocator_is_valid+0x1a>
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	b143      	cbz	r3, 800cb50 <rcutils_allocator_is_valid+0x18>
 800cb3e:	6843      	ldr	r3, [r0, #4]
 800cb40:	b133      	cbz	r3, 800cb50 <rcutils_allocator_is_valid+0x18>
 800cb42:	68c3      	ldr	r3, [r0, #12]
 800cb44:	b123      	cbz	r3, 800cb50 <rcutils_allocator_is_valid+0x18>
 800cb46:	6880      	ldr	r0, [r0, #8]
 800cb48:	3800      	subs	r0, #0
 800cb4a:	bf18      	it	ne
 800cb4c:	2001      	movne	r0, #1
 800cb4e:	4770      	bx	lr
 800cb50:	4618      	mov	r0, r3
 800cb52:	4770      	bx	lr

0800cb54 <rcutils_get_error_string>:
 800cb54:	4b06      	ldr	r3, [pc, #24]	@ (800cb70 <rcutils_get_error_string+0x1c>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	b13b      	cbz	r3, 800cb6a <rcutils_get_error_string+0x16>
 800cb5a:	4b06      	ldr	r3, [pc, #24]	@ (800cb74 <rcutils_get_error_string+0x20>)
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	b90a      	cbnz	r2, 800cb64 <rcutils_get_error_string+0x10>
 800cb60:	2201      	movs	r2, #1
 800cb62:	701a      	strb	r2, [r3, #0]
 800cb64:	4b04      	ldr	r3, [pc, #16]	@ (800cb78 <rcutils_get_error_string+0x24>)
 800cb66:	7818      	ldrb	r0, [r3, #0]
 800cb68:	4770      	bx	lr
 800cb6a:	4b04      	ldr	r3, [pc, #16]	@ (800cb7c <rcutils_get_error_string+0x28>)
 800cb6c:	7818      	ldrb	r0, [r3, #0]
 800cb6e:	4770      	bx	lr
 800cb70:	200093b0 	.word	0x200093b0
 800cb74:	200093c9 	.word	0x200093c9
 800cb78:	200093c8 	.word	0x200093c8
 800cb7c:	08018a1c 	.word	0x08018a1c

0800cb80 <rcutils_reset_error>:
 800cb80:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cba0 <rcutils_reset_error+0x20>
 800cb84:	4a08      	ldr	r2, [pc, #32]	@ (800cba8 <rcutils_reset_error+0x28>)
 800cb86:	4809      	ldr	r0, [pc, #36]	@ (800cbac <rcutils_reset_error+0x2c>)
 800cb88:	4909      	ldr	r1, [pc, #36]	@ (800cbb0 <rcutils_reset_error+0x30>)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	8013      	strh	r3, [r2, #0]
 800cb8e:	ed82 7b02 	vstr	d7, [r2, #8]
 800cb92:	4a08      	ldr	r2, [pc, #32]	@ (800cbb4 <rcutils_reset_error+0x34>)
 800cb94:	7003      	strb	r3, [r0, #0]
 800cb96:	700b      	strb	r3, [r1, #0]
 800cb98:	7013      	strb	r3, [r2, #0]
 800cb9a:	4770      	bx	lr
 800cb9c:	f3af 8000 	nop.w
	...
 800cba8:	200093b8 	.word	0x200093b8
 800cbac:	200093c9 	.word	0x200093c9
 800cbb0:	200093c8 	.word	0x200093c8
 800cbb4:	200093b0 	.word	0x200093b0

0800cbb8 <rcutils_system_time_now>:
 800cbb8:	b308      	cbz	r0, 800cbfe <rcutils_system_time_now+0x46>
 800cbba:	b570      	push	{r4, r5, r6, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4669      	mov	r1, sp
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	f7f5 fb34 	bl	8002230 <clock_gettime>
 800cbc8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cbcc:	2d00      	cmp	r5, #0
 800cbce:	db13      	blt.n	800cbf8 <rcutils_system_time_now+0x40>
 800cbd0:	9902      	ldr	r1, [sp, #8]
 800cbd2:	2900      	cmp	r1, #0
 800cbd4:	db0d      	blt.n	800cbf2 <rcutils_system_time_now+0x3a>
 800cbd6:	4e0b      	ldr	r6, [pc, #44]	@ (800cc04 <rcutils_system_time_now+0x4c>)
 800cbd8:	fba3 3206 	umull	r3, r2, r3, r6
 800cbdc:	185b      	adds	r3, r3, r1
 800cbde:	fb06 2205 	mla	r2, r6, r5, r2
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cbea:	e9c4 3200 	strd	r3, r2, [r4]
 800cbee:	b004      	add	sp, #16
 800cbf0:	bd70      	pop	{r4, r5, r6, pc}
 800cbf2:	ea53 0205 	orrs.w	r2, r3, r5
 800cbf6:	d1ee      	bne.n	800cbd6 <rcutils_system_time_now+0x1e>
 800cbf8:	2002      	movs	r0, #2
 800cbfa:	b004      	add	sp, #16
 800cbfc:	bd70      	pop	{r4, r5, r6, pc}
 800cbfe:	200b      	movs	r0, #11
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	3b9aca00 	.word	0x3b9aca00

0800cc08 <rcutils_steady_time_now>:
 800cc08:	b308      	cbz	r0, 800cc4e <rcutils_steady_time_now+0x46>
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	4604      	mov	r4, r0
 800cc10:	4669      	mov	r1, sp
 800cc12:	2000      	movs	r0, #0
 800cc14:	f7f5 fb0c 	bl	8002230 <clock_gettime>
 800cc18:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cc1c:	2d00      	cmp	r5, #0
 800cc1e:	db13      	blt.n	800cc48 <rcutils_steady_time_now+0x40>
 800cc20:	9902      	ldr	r1, [sp, #8]
 800cc22:	2900      	cmp	r1, #0
 800cc24:	db0d      	blt.n	800cc42 <rcutils_steady_time_now+0x3a>
 800cc26:	4e0b      	ldr	r6, [pc, #44]	@ (800cc54 <rcutils_steady_time_now+0x4c>)
 800cc28:	fba3 3206 	umull	r3, r2, r3, r6
 800cc2c:	185b      	adds	r3, r3, r1
 800cc2e:	fb06 2205 	mla	r2, r6, r5, r2
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cc3a:	e9c4 3200 	strd	r3, r2, [r4]
 800cc3e:	b004      	add	sp, #16
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	ea53 0205 	orrs.w	r2, r3, r5
 800cc46:	d1ee      	bne.n	800cc26 <rcutils_steady_time_now+0x1e>
 800cc48:	2002      	movs	r0, #2
 800cc4a:	b004      	add	sp, #16
 800cc4c:	bd70      	pop	{r4, r5, r6, pc}
 800cc4e:	200b      	movs	r0, #11
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	3b9aca00 	.word	0x3b9aca00

0800cc58 <rmw_get_default_publisher_options>:
 800cc58:	2200      	movs	r2, #0
 800cc5a:	6002      	str	r2, [r0, #0]
 800cc5c:	7102      	strb	r2, [r0, #4]
 800cc5e:	4770      	bx	lr

0800cc60 <rmw_uros_set_custom_transport>:
 800cc60:	b470      	push	{r4, r5, r6}
 800cc62:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cc66:	b162      	cbz	r2, 800cc82 <rmw_uros_set_custom_transport+0x22>
 800cc68:	b15b      	cbz	r3, 800cc82 <rmw_uros_set_custom_transport+0x22>
 800cc6a:	b155      	cbz	r5, 800cc82 <rmw_uros_set_custom_transport+0x22>
 800cc6c:	b14e      	cbz	r6, 800cc82 <rmw_uros_set_custom_transport+0x22>
 800cc6e:	4c06      	ldr	r4, [pc, #24]	@ (800cc88 <rmw_uros_set_custom_transport+0x28>)
 800cc70:	7020      	strb	r0, [r4, #0]
 800cc72:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cc76:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cc7a:	6166      	str	r6, [r4, #20]
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	bc70      	pop	{r4, r5, r6}
 800cc80:	4770      	bx	lr
 800cc82:	200b      	movs	r0, #11
 800cc84:	bc70      	pop	{r4, r5, r6}
 800cc86:	4770      	bx	lr
 800cc88:	200093cc 	.word	0x200093cc

0800cc8c <flush_session>:
 800cc8c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cc8e:	f001 bcdf 	b.w	800e650 <uxr_run_session_until_confirm_delivery>
 800cc92:	bf00      	nop

0800cc94 <rmw_publish>:
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d053      	beq.n	800cd40 <rmw_publish+0xac>
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	b08e      	sub	sp, #56	@ 0x38
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	d04b      	beq.n	800cd3a <rmw_publish+0xa6>
 800cca2:	4604      	mov	r4, r0
 800cca4:	6800      	ldr	r0, [r0, #0]
 800cca6:	f000 fced 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d045      	beq.n	800cd3a <rmw_publish+0xa6>
 800ccae:	6866      	ldr	r6, [r4, #4]
 800ccb0:	2e00      	cmp	r6, #0
 800ccb2:	d042      	beq.n	800cd3a <rmw_publish+0xa6>
 800ccb4:	69b4      	ldr	r4, [r6, #24]
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	4798      	blx	r3
 800ccbc:	69f3      	ldr	r3, [r6, #28]
 800ccbe:	9005      	str	r0, [sp, #20]
 800ccc0:	b113      	cbz	r3, 800ccc8 <rmw_publish+0x34>
 800ccc2:	a805      	add	r0, sp, #20
 800ccc4:	4798      	blx	r3
 800ccc6:	9805      	ldr	r0, [sp, #20]
 800ccc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	9000      	str	r0, [sp, #0]
 800ccd0:	6972      	ldr	r2, [r6, #20]
 800ccd2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ccd4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ccd8:	ab06      	add	r3, sp, #24
 800ccda:	f002 faa5 	bl	800f228 <uxr_prepare_output_stream>
 800ccde:	b1d8      	cbz	r0, 800cd18 <rmw_publish+0x84>
 800cce0:	68a3      	ldr	r3, [r4, #8]
 800cce2:	a906      	add	r1, sp, #24
 800cce4:	4628      	mov	r0, r5
 800cce6:	4798      	blx	r3
 800cce8:	6a33      	ldr	r3, [r6, #32]
 800ccea:	4604      	mov	r4, r0
 800ccec:	b10b      	cbz	r3, 800ccf2 <rmw_publish+0x5e>
 800ccee:	a806      	add	r0, sp, #24
 800ccf0:	4798      	blx	r3
 800ccf2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ccfc:	d022      	beq.n	800cd44 <rmw_publish+0xb0>
 800ccfe:	6918      	ldr	r0, [r3, #16]
 800cd00:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cd02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd06:	f001 fca3 	bl	800e650 <uxr_run_session_until_confirm_delivery>
 800cd0a:	4020      	ands	r0, r4
 800cd0c:	b2c4      	uxtb	r4, r0
 800cd0e:	f084 0001 	eor.w	r0, r4, #1
 800cd12:	b2c0      	uxtb	r0, r0
 800cd14:	b00e      	add	sp, #56	@ 0x38
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cd1c:	6918      	ldr	r0, [r3, #16]
 800cd1e:	9b05      	ldr	r3, [sp, #20]
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	4b0b      	ldr	r3, [pc, #44]	@ (800cd50 <rmw_publish+0xbc>)
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	9602      	str	r6, [sp, #8]
 800cd28:	6972      	ldr	r2, [r6, #20]
 800cd2a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cd2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd30:	ab06      	add	r3, sp, #24
 800cd32:	f002 faa9 	bl	800f288 <uxr_prepare_output_stream_fragmented>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d1d2      	bne.n	800cce0 <rmw_publish+0x4c>
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	b00e      	add	sp, #56	@ 0x38
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	2001      	movs	r0, #1
 800cd42:	4770      	bx	lr
 800cd44:	6918      	ldr	r0, [r3, #16]
 800cd46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd4a:	f001 f8c1 	bl	800ded0 <uxr_flash_output_streams>
 800cd4e:	e7de      	b.n	800cd0e <rmw_publish+0x7a>
 800cd50:	0800cc8d 	.word	0x0800cc8d

0800cd54 <rmw_create_publisher>:
 800cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd58:	b087      	sub	sp, #28
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	f000 80cc 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd60:	460e      	mov	r6, r1
 800cd62:	2900      	cmp	r1, #0
 800cd64:	f000 80c8 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd68:	4604      	mov	r4, r0
 800cd6a:	6800      	ldr	r0, [r0, #0]
 800cd6c:	4615      	mov	r5, r2
 800cd6e:	4698      	mov	r8, r3
 800cd70:	f000 fc88 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f000 80bf 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd7a:	2d00      	cmp	r5, #0
 800cd7c:	f000 80bc 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd80:	782b      	ldrb	r3, [r5, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 80b8 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd88:	f1b8 0f00 	cmp.w	r8, #0
 800cd8c:	f000 80b4 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cd90:	485c      	ldr	r0, [pc, #368]	@ (800cf04 <rmw_create_publisher+0x1b0>)
 800cd92:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cd96:	f006 fd2f 	bl	80137f8 <get_memory>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f000 80ac 	beq.w	800cef8 <rmw_create_publisher+0x1a4>
 800cda0:	6884      	ldr	r4, [r0, #8]
 800cda2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cda6:	f006 fd8f 	bl	80138c8 <rmw_get_implementation_identifier>
 800cdaa:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cdae:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cdb2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f7f3 fa34 	bl	8000224 <strlen>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	283c      	cmp	r0, #60	@ 0x3c
 800cdc0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cdc4:	f200 8091 	bhi.w	800ceea <rmw_create_publisher+0x196>
 800cdc8:	4a4f      	ldr	r2, [pc, #316]	@ (800cf08 <rmw_create_publisher+0x1b4>)
 800cdca:	462b      	mov	r3, r5
 800cdcc:	213c      	movs	r1, #60	@ 0x3c
 800cdce:	4650      	mov	r0, sl
 800cdd0:	f00a fb7a 	bl	80174c8 <sniprintf>
 800cdd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cdd8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800cdda:	4641      	mov	r1, r8
 800cddc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800cde0:	2250      	movs	r2, #80	@ 0x50
 800cde2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800cde6:	f00a fd12 	bl	801780e <memcpy>
 800cdea:	f898 3008 	ldrb.w	r3, [r8, #8]
 800cdee:	4947      	ldr	r1, [pc, #284]	@ (800cf0c <rmw_create_publisher+0x1b8>)
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdf6:	bf0c      	ite	eq
 800cdf8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800cdfc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ce00:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ce02:	2300      	movs	r3, #0
 800ce04:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f000 fc49 	bl	800d6a0 <get_message_typesupport_handle>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d06b      	beq.n	800ceea <rmw_create_publisher+0x196>
 800ce12:	6842      	ldr	r2, [r0, #4]
 800ce14:	61a2      	str	r2, [r4, #24]
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d067      	beq.n	800ceea <rmw_create_publisher+0x196>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4643      	mov	r3, r8
 800ce1e:	4648      	mov	r0, r9
 800ce20:	f006 ffe2 	bl	8013de8 <create_topic>
 800ce24:	6260      	str	r0, [r4, #36]	@ 0x24
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d063      	beq.n	800cef2 <rmw_create_publisher+0x19e>
 800ce2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce32:	2103      	movs	r1, #3
 800ce34:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ce38:	1c42      	adds	r2, r0, #1
 800ce3a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ce3e:	f000 fef9 	bl	800dc34 <uxr_object_id>
 800ce42:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ce46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce4a:	6120      	str	r0, [r4, #16]
 800ce4c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ce50:	6910      	ldr	r0, [r2, #16]
 800ce52:	2506      	movs	r5, #6
 800ce54:	9500      	str	r5, [sp, #0]
 800ce56:	6819      	ldr	r1, [r3, #0]
 800ce58:	6922      	ldr	r2, [r4, #16]
 800ce5a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ce5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce62:	f000 fd99 	bl	800d998 <uxr_buffer_create_publisher_bin>
 800ce66:	4602      	mov	r2, r0
 800ce68:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ce6c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ce70:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ce74:	f000 fb86 	bl	800d584 <run_xrce_session>
 800ce78:	b3b8      	cbz	r0, 800ceea <rmw_create_publisher+0x196>
 800ce7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce82:	2105      	movs	r1, #5
 800ce84:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ce88:	1c42      	adds	r2, r0, #1
 800ce8a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ce8e:	f000 fed1 	bl	800dc34 <uxr_object_id>
 800ce92:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce96:	6160      	str	r0, [r4, #20]
 800ce98:	691e      	ldr	r6, [r3, #16]
 800ce9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce9e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800cea2:	f10d 0a10 	add.w	sl, sp, #16
 800cea6:	4641      	mov	r1, r8
 800cea8:	4650      	mov	r0, sl
 800ceaa:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ceae:	f000 fb85 	bl	800d5bc <convert_qos_profile>
 800ceb2:	9503      	str	r5, [sp, #12]
 800ceb4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ceb8:	9001      	str	r0, [sp, #4]
 800ceba:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cebe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800cec8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cecc:	f8d8 1000 	ldr.w	r1, [r8]
 800ced0:	4630      	mov	r0, r6
 800ced2:	f000 fdc1 	bl	800da58 <uxr_buffer_create_datawriter_bin>
 800ced6:	4602      	mov	r2, r0
 800ced8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cedc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cee0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cee4:	f000 fb4e 	bl	800d584 <run_xrce_session>
 800cee8:	b938      	cbnz	r0, 800cefa <rmw_create_publisher+0x1a6>
 800ceea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ceec:	b108      	cbz	r0, 800cef2 <rmw_create_publisher+0x19e>
 800ceee:	f000 fa47 	bl	800d380 <rmw_uxrce_fini_topic_memory>
 800cef2:	4638      	mov	r0, r7
 800cef4:	f000 f9ec 	bl	800d2d0 <rmw_uxrce_fini_publisher_memory>
 800cef8:	2700      	movs	r7, #0
 800cefa:	4638      	mov	r0, r7
 800cefc:	b007      	add	sp, #28
 800cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf02:	bf00      	nop
 800cf04:	2000dcc4 	.word	0x2000dcc4
 800cf08:	08018a30 	.word	0x08018a30
 800cf0c:	080187c0 	.word	0x080187c0

0800cf10 <rmw_publisher_get_actual_qos>:
 800cf10:	b150      	cbz	r0, 800cf28 <rmw_publisher_get_actual_qos+0x18>
 800cf12:	b508      	push	{r3, lr}
 800cf14:	460b      	mov	r3, r1
 800cf16:	b149      	cbz	r1, 800cf2c <rmw_publisher_get_actual_qos+0x1c>
 800cf18:	6841      	ldr	r1, [r0, #4]
 800cf1a:	2250      	movs	r2, #80	@ 0x50
 800cf1c:	3128      	adds	r1, #40	@ 0x28
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f00a fc75 	bl	801780e <memcpy>
 800cf24:	2000      	movs	r0, #0
 800cf26:	bd08      	pop	{r3, pc}
 800cf28:	200b      	movs	r0, #11
 800cf2a:	4770      	bx	lr
 800cf2c:	200b      	movs	r0, #11
 800cf2e:	bd08      	pop	{r3, pc}

0800cf30 <rmw_destroy_publisher>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	b128      	cbz	r0, 800cf40 <rmw_destroy_publisher+0x10>
 800cf34:	4604      	mov	r4, r0
 800cf36:	6800      	ldr	r0, [r0, #0]
 800cf38:	460d      	mov	r5, r1
 800cf3a:	f000 fba3 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 800cf3e:	b910      	cbnz	r0, 800cf46 <rmw_destroy_publisher+0x16>
 800cf40:	2401      	movs	r4, #1
 800cf42:	4620      	mov	r0, r4
 800cf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf46:	6863      	ldr	r3, [r4, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d0f9      	beq.n	800cf40 <rmw_destroy_publisher+0x10>
 800cf4c:	2d00      	cmp	r5, #0
 800cf4e:	d0f7      	beq.n	800cf40 <rmw_destroy_publisher+0x10>
 800cf50:	6828      	ldr	r0, [r5, #0]
 800cf52:	f000 fb97 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0f2      	beq.n	800cf40 <rmw_destroy_publisher+0x10>
 800cf5a:	686c      	ldr	r4, [r5, #4]
 800cf5c:	2c00      	cmp	r4, #0
 800cf5e:	d0ef      	beq.n	800cf40 <rmw_destroy_publisher+0x10>
 800cf60:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cf62:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800cf66:	f006 ff8f 	bl	8013e88 <destroy_topic>
 800cf6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cf6e:	6962      	ldr	r2, [r4, #20]
 800cf70:	6918      	ldr	r0, [r3, #16]
 800cf72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800cf76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf7a:	6819      	ldr	r1, [r3, #0]
 800cf7c:	f000 fc58 	bl	800d830 <uxr_buffer_delete_entity>
 800cf80:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cf84:	6922      	ldr	r2, [r4, #16]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	6809      	ldr	r1, [r1, #0]
 800cf90:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cf94:	f000 fc4c 	bl	800d830 <uxr_buffer_delete_entity>
 800cf98:	693e      	ldr	r6, [r7, #16]
 800cf9a:	4622      	mov	r2, r4
 800cf9c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cfa0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f000 faec 	bl	800d584 <run_xrce_session>
 800cfac:	693e      	ldr	r6, [r7, #16]
 800cfae:	4622      	mov	r2, r4
 800cfb0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800cfb4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800cfb8:	4604      	mov	r4, r0
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f000 fae2 	bl	800d584 <run_xrce_session>
 800cfc0:	b12c      	cbz	r4, 800cfce <rmw_destroy_publisher+0x9e>
 800cfc2:	b120      	cbz	r0, 800cfce <rmw_destroy_publisher+0x9e>
 800cfc4:	2400      	movs	r4, #0
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f000 f982 	bl	800d2d0 <rmw_uxrce_fini_publisher_memory>
 800cfcc:	e7b9      	b.n	800cf42 <rmw_destroy_publisher+0x12>
 800cfce:	2402      	movs	r4, #2
 800cfd0:	e7f9      	b.n	800cfc6 <rmw_destroy_publisher+0x96>
 800cfd2:	bf00      	nop

0800cfd4 <rmw_uxrce_init_service_memory>:
 800cfd4:	b1e2      	cbz	r2, 800d010 <rmw_uxrce_init_service_memory+0x3c>
 800cfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfda:	7b05      	ldrb	r5, [r0, #12]
 800cfdc:	4606      	mov	r6, r0
 800cfde:	b9ad      	cbnz	r5, 800d00c <rmw_uxrce_init_service_memory+0x38>
 800cfe0:	23c8      	movs	r3, #200	@ 0xc8
 800cfe2:	e9c0 5500 	strd	r5, r5, [r0]
 800cfe6:	6083      	str	r3, [r0, #8]
 800cfe8:	f240 1301 	movw	r3, #257	@ 0x101
 800cfec:	4617      	mov	r7, r2
 800cfee:	8183      	strh	r3, [r0, #12]
 800cff0:	460c      	mov	r4, r1
 800cff2:	46a8      	mov	r8, r5
 800cff4:	4621      	mov	r1, r4
 800cff6:	4630      	mov	r0, r6
 800cff8:	3501      	adds	r5, #1
 800cffa:	f006 fc0d 	bl	8013818 <put_memory>
 800cffe:	42af      	cmp	r7, r5
 800d000:	60a4      	str	r4, [r4, #8]
 800d002:	f884 800c 	strb.w	r8, [r4, #12]
 800d006:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d00a:	d1f3      	bne.n	800cff4 <rmw_uxrce_init_service_memory+0x20>
 800d00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop

0800d014 <rmw_uxrce_init_client_memory>:
 800d014:	b1e2      	cbz	r2, 800d050 <rmw_uxrce_init_client_memory+0x3c>
 800d016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01a:	7b05      	ldrb	r5, [r0, #12]
 800d01c:	4606      	mov	r6, r0
 800d01e:	b9ad      	cbnz	r5, 800d04c <rmw_uxrce_init_client_memory+0x38>
 800d020:	23c8      	movs	r3, #200	@ 0xc8
 800d022:	e9c0 5500 	strd	r5, r5, [r0]
 800d026:	6083      	str	r3, [r0, #8]
 800d028:	f240 1301 	movw	r3, #257	@ 0x101
 800d02c:	4617      	mov	r7, r2
 800d02e:	8183      	strh	r3, [r0, #12]
 800d030:	460c      	mov	r4, r1
 800d032:	46a8      	mov	r8, r5
 800d034:	4621      	mov	r1, r4
 800d036:	4630      	mov	r0, r6
 800d038:	3501      	adds	r5, #1
 800d03a:	f006 fbed 	bl	8013818 <put_memory>
 800d03e:	42af      	cmp	r7, r5
 800d040:	60a4      	str	r4, [r4, #8]
 800d042:	f884 800c 	strb.w	r8, [r4, #12]
 800d046:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d04a:	d1f3      	bne.n	800d034 <rmw_uxrce_init_client_memory+0x20>
 800d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop

0800d054 <rmw_uxrce_init_publisher_memory>:
 800d054:	b1e2      	cbz	r2, 800d090 <rmw_uxrce_init_publisher_memory+0x3c>
 800d056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	7b05      	ldrb	r5, [r0, #12]
 800d05c:	4606      	mov	r6, r0
 800d05e:	b9ad      	cbnz	r5, 800d08c <rmw_uxrce_init_publisher_memory+0x38>
 800d060:	23d8      	movs	r3, #216	@ 0xd8
 800d062:	e9c0 5500 	strd	r5, r5, [r0]
 800d066:	6083      	str	r3, [r0, #8]
 800d068:	f240 1301 	movw	r3, #257	@ 0x101
 800d06c:	4617      	mov	r7, r2
 800d06e:	8183      	strh	r3, [r0, #12]
 800d070:	460c      	mov	r4, r1
 800d072:	46a8      	mov	r8, r5
 800d074:	4621      	mov	r1, r4
 800d076:	4630      	mov	r0, r6
 800d078:	3501      	adds	r5, #1
 800d07a:	f006 fbcd 	bl	8013818 <put_memory>
 800d07e:	42af      	cmp	r7, r5
 800d080:	60a4      	str	r4, [r4, #8]
 800d082:	f884 800c 	strb.w	r8, [r4, #12]
 800d086:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d08a:	d1f3      	bne.n	800d074 <rmw_uxrce_init_publisher_memory+0x20>
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop

0800d094 <rmw_uxrce_init_subscription_memory>:
 800d094:	b1e2      	cbz	r2, 800d0d0 <rmw_uxrce_init_subscription_memory+0x3c>
 800d096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09a:	7b05      	ldrb	r5, [r0, #12]
 800d09c:	4606      	mov	r6, r0
 800d09e:	b9ad      	cbnz	r5, 800d0cc <rmw_uxrce_init_subscription_memory+0x38>
 800d0a0:	23d8      	movs	r3, #216	@ 0xd8
 800d0a2:	e9c0 5500 	strd	r5, r5, [r0]
 800d0a6:	6083      	str	r3, [r0, #8]
 800d0a8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0ac:	4617      	mov	r7, r2
 800d0ae:	8183      	strh	r3, [r0, #12]
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	46a8      	mov	r8, r5
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	f006 fbad 	bl	8013818 <put_memory>
 800d0be:	42af      	cmp	r7, r5
 800d0c0:	60a4      	str	r4, [r4, #8]
 800d0c2:	f884 800c 	strb.w	r8, [r4, #12]
 800d0c6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d0ca:	d1f3      	bne.n	800d0b4 <rmw_uxrce_init_subscription_memory+0x20>
 800d0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop

0800d0d4 <rmw_uxrce_init_node_memory>:
 800d0d4:	b1e2      	cbz	r2, 800d110 <rmw_uxrce_init_node_memory+0x3c>
 800d0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0da:	7b05      	ldrb	r5, [r0, #12]
 800d0dc:	4606      	mov	r6, r0
 800d0de:	b9ad      	cbnz	r5, 800d10c <rmw_uxrce_init_node_memory+0x38>
 800d0e0:	23a4      	movs	r3, #164	@ 0xa4
 800d0e2:	e9c0 5500 	strd	r5, r5, [r0]
 800d0e6:	6083      	str	r3, [r0, #8]
 800d0e8:	f240 1301 	movw	r3, #257	@ 0x101
 800d0ec:	4617      	mov	r7, r2
 800d0ee:	8183      	strh	r3, [r0, #12]
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	46a8      	mov	r8, r5
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	3501      	adds	r5, #1
 800d0fa:	f006 fb8d 	bl	8013818 <put_memory>
 800d0fe:	42af      	cmp	r7, r5
 800d100:	60a4      	str	r4, [r4, #8]
 800d102:	f884 800c 	strb.w	r8, [r4, #12]
 800d106:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d10a:	d1f3      	bne.n	800d0f4 <rmw_uxrce_init_node_memory+0x20>
 800d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop

0800d114 <rmw_uxrce_init_session_memory>:
 800d114:	b1ea      	cbz	r2, 800d152 <rmw_uxrce_init_session_memory+0x3e>
 800d116:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d11a:	7b05      	ldrb	r5, [r0, #12]
 800d11c:	4606      	mov	r6, r0
 800d11e:	b9b5      	cbnz	r5, 800d14e <rmw_uxrce_init_session_memory+0x3a>
 800d120:	e9c0 5500 	strd	r5, r5, [r0]
 800d124:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d128:	f240 1301 	movw	r3, #257	@ 0x101
 800d12c:	4617      	mov	r7, r2
 800d12e:	f8c0 8008 	str.w	r8, [r0, #8]
 800d132:	460c      	mov	r4, r1
 800d134:	8183      	strh	r3, [r0, #12]
 800d136:	46a9      	mov	r9, r5
 800d138:	4621      	mov	r1, r4
 800d13a:	4630      	mov	r0, r6
 800d13c:	3501      	adds	r5, #1
 800d13e:	f006 fb6b 	bl	8013818 <put_memory>
 800d142:	42af      	cmp	r7, r5
 800d144:	60a4      	str	r4, [r4, #8]
 800d146:	f884 900c 	strb.w	r9, [r4, #12]
 800d14a:	4444      	add	r4, r8
 800d14c:	d1f4      	bne.n	800d138 <rmw_uxrce_init_session_memory+0x24>
 800d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d152:	4770      	bx	lr

0800d154 <rmw_uxrce_init_topic_memory>:
 800d154:	b1e2      	cbz	r2, 800d190 <rmw_uxrce_init_topic_memory+0x3c>
 800d156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15a:	7b05      	ldrb	r5, [r0, #12]
 800d15c:	4606      	mov	r6, r0
 800d15e:	b9ad      	cbnz	r5, 800d18c <rmw_uxrce_init_topic_memory+0x38>
 800d160:	231c      	movs	r3, #28
 800d162:	e9c0 5500 	strd	r5, r5, [r0]
 800d166:	6083      	str	r3, [r0, #8]
 800d168:	f240 1301 	movw	r3, #257	@ 0x101
 800d16c:	4617      	mov	r7, r2
 800d16e:	8183      	strh	r3, [r0, #12]
 800d170:	460c      	mov	r4, r1
 800d172:	46a8      	mov	r8, r5
 800d174:	4621      	mov	r1, r4
 800d176:	4630      	mov	r0, r6
 800d178:	3501      	adds	r5, #1
 800d17a:	f006 fb4d 	bl	8013818 <put_memory>
 800d17e:	42af      	cmp	r7, r5
 800d180:	60a4      	str	r4, [r4, #8]
 800d182:	f884 800c 	strb.w	r8, [r4, #12]
 800d186:	f104 041c 	add.w	r4, r4, #28
 800d18a:	d1f3      	bne.n	800d174 <rmw_uxrce_init_topic_memory+0x20>
 800d18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <rmw_uxrce_init_static_input_buffer_memory>:
 800d194:	b1ea      	cbz	r2, 800d1d2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19a:	7b05      	ldrb	r5, [r0, #12]
 800d19c:	4606      	mov	r6, r0
 800d19e:	b9b5      	cbnz	r5, 800d1ce <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d1a0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d1a4:	e9c0 5500 	strd	r5, r5, [r0]
 800d1a8:	6083      	str	r3, [r0, #8]
 800d1aa:	f240 1301 	movw	r3, #257	@ 0x101
 800d1ae:	4617      	mov	r7, r2
 800d1b0:	8183      	strh	r3, [r0, #12]
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	46a8      	mov	r8, r5
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	3501      	adds	r5, #1
 800d1bc:	f006 fb2c 	bl	8013818 <put_memory>
 800d1c0:	42af      	cmp	r7, r5
 800d1c2:	60a4      	str	r4, [r4, #8]
 800d1c4:	f884 800c 	strb.w	r8, [r4, #12]
 800d1c8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d1cc:	d1f3      	bne.n	800d1b6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d2:	4770      	bx	lr

0800d1d4 <rmw_uxrce_init_init_options_impl_memory>:
 800d1d4:	b1e2      	cbz	r2, 800d210 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1da:	7b05      	ldrb	r5, [r0, #12]
 800d1dc:	4606      	mov	r6, r0
 800d1de:	b9ad      	cbnz	r5, 800d20c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d1e0:	232c      	movs	r3, #44	@ 0x2c
 800d1e2:	e9c0 5500 	strd	r5, r5, [r0]
 800d1e6:	6083      	str	r3, [r0, #8]
 800d1e8:	f240 1301 	movw	r3, #257	@ 0x101
 800d1ec:	4617      	mov	r7, r2
 800d1ee:	8183      	strh	r3, [r0, #12]
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	46a8      	mov	r8, r5
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	3501      	adds	r5, #1
 800d1fa:	f006 fb0d 	bl	8013818 <put_memory>
 800d1fe:	42af      	cmp	r7, r5
 800d200:	60a4      	str	r4, [r4, #8]
 800d202:	f884 800c 	strb.w	r8, [r4, #12]
 800d206:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d20a:	d1f3      	bne.n	800d1f4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop

0800d214 <rmw_uxrce_init_wait_set_memory>:
 800d214:	b1e2      	cbz	r2, 800d250 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21a:	7b05      	ldrb	r5, [r0, #12]
 800d21c:	4606      	mov	r6, r0
 800d21e:	b9ad      	cbnz	r5, 800d24c <rmw_uxrce_init_wait_set_memory+0x38>
 800d220:	231c      	movs	r3, #28
 800d222:	e9c0 5500 	strd	r5, r5, [r0]
 800d226:	6083      	str	r3, [r0, #8]
 800d228:	f240 1301 	movw	r3, #257	@ 0x101
 800d22c:	4617      	mov	r7, r2
 800d22e:	8183      	strh	r3, [r0, #12]
 800d230:	460c      	mov	r4, r1
 800d232:	46a8      	mov	r8, r5
 800d234:	4621      	mov	r1, r4
 800d236:	4630      	mov	r0, r6
 800d238:	3501      	adds	r5, #1
 800d23a:	f006 faed 	bl	8013818 <put_memory>
 800d23e:	42af      	cmp	r7, r5
 800d240:	60a4      	str	r4, [r4, #8]
 800d242:	f884 800c 	strb.w	r8, [r4, #12]
 800d246:	f104 041c 	add.w	r4, r4, #28
 800d24a:	d1f3      	bne.n	800d234 <rmw_uxrce_init_wait_set_memory+0x20>
 800d24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <rmw_uxrce_init_guard_condition_memory>:
 800d254:	b1e2      	cbz	r2, 800d290 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25a:	7b05      	ldrb	r5, [r0, #12]
 800d25c:	4606      	mov	r6, r0
 800d25e:	b9ad      	cbnz	r5, 800d28c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d260:	2320      	movs	r3, #32
 800d262:	e9c0 5500 	strd	r5, r5, [r0]
 800d266:	6083      	str	r3, [r0, #8]
 800d268:	f240 1301 	movw	r3, #257	@ 0x101
 800d26c:	4617      	mov	r7, r2
 800d26e:	8183      	strh	r3, [r0, #12]
 800d270:	460c      	mov	r4, r1
 800d272:	46a8      	mov	r8, r5
 800d274:	4621      	mov	r1, r4
 800d276:	4630      	mov	r0, r6
 800d278:	3501      	adds	r5, #1
 800d27a:	f006 facd 	bl	8013818 <put_memory>
 800d27e:	42af      	cmp	r7, r5
 800d280:	60a4      	str	r4, [r4, #8]
 800d282:	f884 800c 	strb.w	r8, [r4, #12]
 800d286:	f104 0420 	add.w	r4, r4, #32
 800d28a:	d1f3      	bne.n	800d274 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop

0800d294 <rmw_uxrce_fini_session_memory>:
 800d294:	4601      	mov	r1, r0
 800d296:	4801      	ldr	r0, [pc, #4]	@ (800d29c <rmw_uxrce_fini_session_memory+0x8>)
 800d298:	f006 babe 	b.w	8013818 <put_memory>
 800d29c:	2000dce4 	.word	0x2000dce4

0800d2a0 <rmw_uxrce_fini_node_memory>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	6800      	ldr	r0, [r0, #0]
 800d2a6:	b128      	cbz	r0, 800d2b4 <rmw_uxrce_fini_node_memory+0x14>
 800d2a8:	4b07      	ldr	r3, [pc, #28]	@ (800d2c8 <rmw_uxrce_fini_node_memory+0x28>)
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	f7f2 ffb0 	bl	8000210 <strcmp>
 800d2b0:	b940      	cbnz	r0, 800d2c4 <rmw_uxrce_fini_node_memory+0x24>
 800d2b2:	6020      	str	r0, [r4, #0]
 800d2b4:	6861      	ldr	r1, [r4, #4]
 800d2b6:	b129      	cbz	r1, 800d2c4 <rmw_uxrce_fini_node_memory+0x24>
 800d2b8:	2500      	movs	r5, #0
 800d2ba:	4804      	ldr	r0, [pc, #16]	@ (800d2cc <rmw_uxrce_fini_node_memory+0x2c>)
 800d2bc:	610d      	str	r5, [r1, #16]
 800d2be:	f006 faab 	bl	8013818 <put_memory>
 800d2c2:	6065      	str	r5, [r4, #4]
 800d2c4:	bd38      	pop	{r3, r4, r5, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08019064 	.word	0x08019064
 800d2cc:	2000dcb4 	.word	0x2000dcb4

0800d2d0 <rmw_uxrce_fini_publisher_memory>:
 800d2d0:	b510      	push	{r4, lr}
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	6800      	ldr	r0, [r0, #0]
 800d2d6:	b128      	cbz	r0, 800d2e4 <rmw_uxrce_fini_publisher_memory+0x14>
 800d2d8:	4b06      	ldr	r3, [pc, #24]	@ (800d2f4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d2da:	6819      	ldr	r1, [r3, #0]
 800d2dc:	f7f2 ff98 	bl	8000210 <strcmp>
 800d2e0:	b938      	cbnz	r0, 800d2f2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d2e2:	6020      	str	r0, [r4, #0]
 800d2e4:	6861      	ldr	r1, [r4, #4]
 800d2e6:	b121      	cbz	r1, 800d2f2 <rmw_uxrce_fini_publisher_memory+0x22>
 800d2e8:	4803      	ldr	r0, [pc, #12]	@ (800d2f8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d2ea:	f006 fa95 	bl	8013818 <put_memory>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6063      	str	r3, [r4, #4]
 800d2f2:	bd10      	pop	{r4, pc}
 800d2f4:	08019064 	.word	0x08019064
 800d2f8:	2000dcc4 	.word	0x2000dcc4

0800d2fc <rmw_uxrce_fini_subscription_memory>:
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	4604      	mov	r4, r0
 800d300:	6800      	ldr	r0, [r0, #0]
 800d302:	b128      	cbz	r0, 800d310 <rmw_uxrce_fini_subscription_memory+0x14>
 800d304:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d306:	6819      	ldr	r1, [r3, #0]
 800d308:	f7f2 ff82 	bl	8000210 <strcmp>
 800d30c:	b938      	cbnz	r0, 800d31e <rmw_uxrce_fini_subscription_memory+0x22>
 800d30e:	6020      	str	r0, [r4, #0]
 800d310:	6861      	ldr	r1, [r4, #4]
 800d312:	b121      	cbz	r1, 800d31e <rmw_uxrce_fini_subscription_memory+0x22>
 800d314:	4803      	ldr	r0, [pc, #12]	@ (800d324 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d316:	f006 fa7f 	bl	8013818 <put_memory>
 800d31a:	2300      	movs	r3, #0
 800d31c:	6063      	str	r3, [r4, #4]
 800d31e:	bd10      	pop	{r4, pc}
 800d320:	08019064 	.word	0x08019064
 800d324:	2000dd04 	.word	0x2000dd04

0800d328 <rmw_uxrce_fini_service_memory>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	4604      	mov	r4, r0
 800d32c:	6800      	ldr	r0, [r0, #0]
 800d32e:	b128      	cbz	r0, 800d33c <rmw_uxrce_fini_service_memory+0x14>
 800d330:	4b06      	ldr	r3, [pc, #24]	@ (800d34c <rmw_uxrce_fini_service_memory+0x24>)
 800d332:	6819      	ldr	r1, [r3, #0]
 800d334:	f7f2 ff6c 	bl	8000210 <strcmp>
 800d338:	b938      	cbnz	r0, 800d34a <rmw_uxrce_fini_service_memory+0x22>
 800d33a:	6020      	str	r0, [r4, #0]
 800d33c:	6861      	ldr	r1, [r4, #4]
 800d33e:	b121      	cbz	r1, 800d34a <rmw_uxrce_fini_service_memory+0x22>
 800d340:	4803      	ldr	r0, [pc, #12]	@ (800d350 <rmw_uxrce_fini_service_memory+0x28>)
 800d342:	f006 fa69 	bl	8013818 <put_memory>
 800d346:	2300      	movs	r3, #0
 800d348:	6063      	str	r3, [r4, #4]
 800d34a:	bd10      	pop	{r4, pc}
 800d34c:	08019064 	.word	0x08019064
 800d350:	2000dcd4 	.word	0x2000dcd4

0800d354 <rmw_uxrce_fini_client_memory>:
 800d354:	b510      	push	{r4, lr}
 800d356:	4604      	mov	r4, r0
 800d358:	6800      	ldr	r0, [r0, #0]
 800d35a:	b128      	cbz	r0, 800d368 <rmw_uxrce_fini_client_memory+0x14>
 800d35c:	4b06      	ldr	r3, [pc, #24]	@ (800d378 <rmw_uxrce_fini_client_memory+0x24>)
 800d35e:	6819      	ldr	r1, [r3, #0]
 800d360:	f7f2 ff56 	bl	8000210 <strcmp>
 800d364:	b938      	cbnz	r0, 800d376 <rmw_uxrce_fini_client_memory+0x22>
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	6861      	ldr	r1, [r4, #4]
 800d36a:	b121      	cbz	r1, 800d376 <rmw_uxrce_fini_client_memory+0x22>
 800d36c:	4803      	ldr	r0, [pc, #12]	@ (800d37c <rmw_uxrce_fini_client_memory+0x28>)
 800d36e:	f006 fa53 	bl	8013818 <put_memory>
 800d372:	2300      	movs	r3, #0
 800d374:	6063      	str	r3, [r4, #4]
 800d376:	bd10      	pop	{r4, pc}
 800d378:	08019064 	.word	0x08019064
 800d37c:	200093e8 	.word	0x200093e8

0800d380 <rmw_uxrce_fini_topic_memory>:
 800d380:	b510      	push	{r4, lr}
 800d382:	4604      	mov	r4, r0
 800d384:	4621      	mov	r1, r4
 800d386:	4803      	ldr	r0, [pc, #12]	@ (800d394 <rmw_uxrce_fini_topic_memory+0x14>)
 800d388:	f006 fa46 	bl	8013818 <put_memory>
 800d38c:	2300      	movs	r3, #0
 800d38e:	61a3      	str	r3, [r4, #24]
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop
 800d394:	2000dd14 	.word	0x2000dd14

0800d398 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d398:	b082      	sub	sp, #8
 800d39a:	b530      	push	{r4, r5, lr}
 800d39c:	4925      	ldr	r1, [pc, #148]	@ (800d434 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d39e:	680d      	ldr	r5, [r1, #0]
 800d3a0:	ac03      	add	r4, sp, #12
 800d3a2:	e884 000c 	stmia.w	r4, {r2, r3}
 800d3a6:	461c      	mov	r4, r3
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	d041      	beq.n	800d430 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	689a      	ldr	r2, [r3, #8]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d3b8:	4290      	cmp	r0, r2
 800d3ba:	bf08      	it	eq
 800d3bc:	3101      	addeq	r1, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1f6      	bne.n	800d3b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d3c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d029      	beq.n	800d41e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d3ca:	d907      	bls.n	800d3dc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d005      	beq.n	800d3dc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	b002      	add	sp, #8
 800d3da:	4770      	bx	lr
 800d3dc:	b314      	cbz	r4, 800d424 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d3de:	428c      	cmp	r4, r1
 800d3e0:	d820      	bhi.n	800d424 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	d0f4      	beq.n	800d3d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d3ec:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d3f0:	e002      	b.n	800d3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d3f2:	686d      	ldr	r5, [r5, #4]
 800d3f4:	2d00      	cmp	r5, #0
 800d3f6:	d0ec      	beq.n	800d3d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d3f8:	68ab      	ldr	r3, [r5, #8]
 800d3fa:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d3fe:	4290      	cmp	r0, r2
 800d400:	d1f7      	bne.n	800d3f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d402:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d406:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d40a:	4562      	cmp	r2, ip
 800d40c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d410:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d414:	daed      	bge.n	800d3f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d416:	4694      	mov	ip, r2
 800d418:	461c      	mov	r4, r3
 800d41a:	4629      	mov	r1, r5
 800d41c:	e7e9      	b.n	800d3f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d41e:	b10c      	cbz	r4, 800d424 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d420:	428c      	cmp	r4, r1
 800d422:	d9d5      	bls.n	800d3d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d428:	4802      	ldr	r0, [pc, #8]	@ (800d434 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d42a:	b002      	add	sp, #8
 800d42c:	f006 b9e4 	b.w	80137f8 <get_memory>
 800d430:	4629      	mov	r1, r5
 800d432:	e7c6      	b.n	800d3c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d434:	2000dcf4 	.word	0x2000dcf4

0800d438 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d438:	4b11      	ldr	r3, [pc, #68]	@ (800d480 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	b530      	push	{r4, r5, lr}
 800d43e:	b1e3      	cbz	r3, 800d47a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d440:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d444:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d448:	2400      	movs	r4, #0
 800d44a:	e001      	b.n	800d450 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	b193      	cbz	r3, 800d476 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d450:	689a      	ldr	r2, [r3, #8]
 800d452:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d456:	4288      	cmp	r0, r1
 800d458:	d1f8      	bne.n	800d44c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d45a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d45e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d462:	4571      	cmp	r1, lr
 800d464:	eb72 050c 	sbcs.w	r5, r2, ip
 800d468:	daf0      	bge.n	800d44c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d46a:	461c      	mov	r4, r3
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	468e      	mov	lr, r1
 800d470:	4694      	mov	ip, r2
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1ec      	bne.n	800d450 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d476:	4620      	mov	r0, r4
 800d478:	bd30      	pop	{r4, r5, pc}
 800d47a:	461c      	mov	r4, r3
 800d47c:	4620      	mov	r0, r4
 800d47e:	bd30      	pop	{r4, r5, pc}
 800d480:	2000dcf4 	.word	0x2000dcf4
 800d484:	00000000 	.word	0x00000000

0800d488 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	4b3c      	ldr	r3, [pc, #240]	@ (800d580 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d48e:	ed2d 8b06 	vpush	{d8-d10}
 800d492:	681f      	ldr	r7, [r3, #0]
 800d494:	b08d      	sub	sp, #52	@ 0x34
 800d496:	f007 fb17 	bl	8014ac8 <rmw_uros_epoch_nanos>
 800d49a:	2f00      	cmp	r7, #0
 800d49c:	d05d      	beq.n	800d55a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d49e:	46b8      	mov	r8, r7
 800d4a0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d568 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d4a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d4a8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d4ac:	2b04      	cmp	r3, #4
 800d4ae:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d570 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d4b2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d578 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d4b6:	4681      	mov	r9, r0
 800d4b8:	468a      	mov	sl, r1
 800d4ba:	ac04      	add	r4, sp, #16
 800d4bc:	d03f      	beq.n	800d53e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d4be:	2b05      	cmp	r3, #5
 800d4c0:	d044      	beq.n	800d54c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d03b      	beq.n	800d53e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d4c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d4ca:	ed8d ab06 	vstr	d10, [sp, #24]
 800d4ce:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d4d2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d4d6:	ab08      	add	r3, sp, #32
 800d4d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4e2:	f005 ffbd 	bl	8013460 <rmw_time_equal>
 800d4e6:	b118      	cbz	r0, 800d4f0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d4e8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d4ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d4f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4f4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d4f8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d4fc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d500:	f006 f802 	bl	8013508 <rmw_time_total_nsec>
 800d504:	1830      	adds	r0, r6, r0
 800d506:	eb47 0101 	adc.w	r1, r7, r1
 800d50a:	4548      	cmp	r0, r9
 800d50c:	eb71 030a 	sbcs.w	r3, r1, sl
 800d510:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d514:	db05      	blt.n	800d522 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d516:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d51a:	4591      	cmp	r9, r2
 800d51c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d520:	da03      	bge.n	800d52a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d522:	4817      	ldr	r0, [pc, #92]	@ (800d580 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d524:	4641      	mov	r1, r8
 800d526:	f006 f977 	bl	8013818 <put_memory>
 800d52a:	f1bb 0f00 	cmp.w	fp, #0
 800d52e:	d014      	beq.n	800d55a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d530:	46d8      	mov	r8, fp
 800d532:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d536:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	d1bf      	bne.n	800d4be <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d53e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d542:	3340      	adds	r3, #64	@ 0x40
 800d544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d54a:	e7c0      	b.n	800d4ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d54c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d550:	3348      	adds	r3, #72	@ 0x48
 800d552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d558:	e7b9      	b.n	800d4ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d55a:	b00d      	add	sp, #52	@ 0x34
 800d55c:	ecbd 8b06 	vpop	{d8-d10}
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	f3af 8000 	nop.w
	...
 800d570:	00000001 	.word	0x00000001
 800d574:	00000000 	.word	0x00000000
 800d578:	0000001e 	.word	0x0000001e
 800d57c:	00000000 	.word	0x00000000
 800d580:	2000dcf4 	.word	0x2000dcf4

0800d584 <run_xrce_session>:
 800d584:	b510      	push	{r4, lr}
 800d586:	788c      	ldrb	r4, [r1, #2]
 800d588:	b086      	sub	sp, #24
 800d58a:	2c01      	cmp	r4, #1
 800d58c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d590:	d00c      	beq.n	800d5ac <run_xrce_session+0x28>
 800d592:	4619      	mov	r1, r3
 800d594:	2301      	movs	r3, #1
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	f10d 020e 	add.w	r2, sp, #14
 800d59c:	f10d 0317 	add.w	r3, sp, #23
 800d5a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5a4:	f001 f87a 	bl	800e69c <uxr_run_session_until_all_status>
 800d5a8:	b006      	add	sp, #24
 800d5aa:	bd10      	pop	{r4, pc}
 800d5ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5b0:	f000 fc8e 	bl	800ded0 <uxr_flash_output_streams>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	b006      	add	sp, #24
 800d5b8:	bd10      	pop	{r4, pc}
 800d5ba:	bf00      	nop

0800d5bc <convert_qos_profile>:
 800d5bc:	7a4a      	ldrb	r2, [r1, #9]
 800d5be:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d5c2:	2a02      	cmp	r2, #2
 800d5c4:	bf18      	it	ne
 800d5c6:	2200      	movne	r2, #0
 800d5c8:	7002      	strb	r2, [r0, #0]
 800d5ca:	780a      	ldrb	r2, [r1, #0]
 800d5cc:	8889      	ldrh	r1, [r1, #4]
 800d5ce:	8081      	strh	r1, [r0, #4]
 800d5d0:	f1ac 0c02 	sub.w	ip, ip, #2
 800d5d4:	f1a2 0202 	sub.w	r2, r2, #2
 800d5d8:	fabc fc8c 	clz	ip, ip
 800d5dc:	fab2 f282 	clz	r2, r2
 800d5e0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d5e4:	0952      	lsrs	r2, r2, #5
 800d5e6:	f880 c001 	strb.w	ip, [r0, #1]
 800d5ea:	7082      	strb	r2, [r0, #2]
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop

0800d5f0 <generate_type_name>:
 800d5f0:	b530      	push	{r4, r5, lr}
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	700b      	strb	r3, [r1, #0]
 800d5f6:	6803      	ldr	r3, [r0, #0]
 800d5f8:	b087      	sub	sp, #28
 800d5fa:	4614      	mov	r4, r2
 800d5fc:	b1d3      	cbz	r3, 800d634 <generate_type_name+0x44>
 800d5fe:	4a0f      	ldr	r2, [pc, #60]	@ (800d63c <generate_type_name+0x4c>)
 800d600:	4615      	mov	r5, r2
 800d602:	9203      	str	r2, [sp, #12]
 800d604:	9500      	str	r5, [sp, #0]
 800d606:	6842      	ldr	r2, [r0, #4]
 800d608:	480d      	ldr	r0, [pc, #52]	@ (800d640 <generate_type_name+0x50>)
 800d60a:	9001      	str	r0, [sp, #4]
 800d60c:	4608      	mov	r0, r1
 800d60e:	490d      	ldr	r1, [pc, #52]	@ (800d644 <generate_type_name+0x54>)
 800d610:	9204      	str	r2, [sp, #16]
 800d612:	9105      	str	r1, [sp, #20]
 800d614:	9102      	str	r1, [sp, #8]
 800d616:	4a0c      	ldr	r2, [pc, #48]	@ (800d648 <generate_type_name+0x58>)
 800d618:	4621      	mov	r1, r4
 800d61a:	f009 ff55 	bl	80174c8 <sniprintf>
 800d61e:	2800      	cmp	r0, #0
 800d620:	db05      	blt.n	800d62e <generate_type_name+0x3e>
 800d622:	4284      	cmp	r4, r0
 800d624:	bfd4      	ite	le
 800d626:	2000      	movle	r0, #0
 800d628:	2001      	movgt	r0, #1
 800d62a:	b007      	add	sp, #28
 800d62c:	bd30      	pop	{r4, r5, pc}
 800d62e:	2000      	movs	r0, #0
 800d630:	b007      	add	sp, #28
 800d632:	bd30      	pop	{r4, r5, pc}
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <generate_type_name+0x5c>)
 800d636:	4a01      	ldr	r2, [pc, #4]	@ (800d63c <generate_type_name+0x4c>)
 800d638:	461d      	mov	r5, r3
 800d63a:	e7e2      	b.n	800d602 <generate_type_name+0x12>
 800d63c:	08018a20 	.word	0x08018a20
 800d640:	08018a38 	.word	0x08018a38
 800d644:	08018a34 	.word	0x08018a34
 800d648:	08018a24 	.word	0x08018a24
 800d64c:	08018e3c 	.word	0x08018e3c

0800d650 <generate_topic_name>:
 800d650:	b510      	push	{r4, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	4614      	mov	r4, r2
 800d656:	9000      	str	r0, [sp, #0]
 800d658:	4b08      	ldr	r3, [pc, #32]	@ (800d67c <generate_topic_name+0x2c>)
 800d65a:	4a09      	ldr	r2, [pc, #36]	@ (800d680 <generate_topic_name+0x30>)
 800d65c:	4608      	mov	r0, r1
 800d65e:	4621      	mov	r1, r4
 800d660:	f009 ff32 	bl	80174c8 <sniprintf>
 800d664:	2800      	cmp	r0, #0
 800d666:	db05      	blt.n	800d674 <generate_topic_name+0x24>
 800d668:	4284      	cmp	r4, r0
 800d66a:	bfd4      	ite	le
 800d66c:	2000      	movle	r0, #0
 800d66e:	2001      	movgt	r0, #1
 800d670:	b002      	add	sp, #8
 800d672:	bd10      	pop	{r4, pc}
 800d674:	2000      	movs	r0, #0
 800d676:	b002      	add	sp, #8
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	bf00      	nop
 800d67c:	08018a44 	.word	0x08018a44
 800d680:	08018a3c 	.word	0x08018a3c

0800d684 <is_uxrce_rmw_identifier_valid>:
 800d684:	b510      	push	{r4, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	b140      	cbz	r0, 800d69c <is_uxrce_rmw_identifier_valid+0x18>
 800d68a:	f006 f91d 	bl	80138c8 <rmw_get_implementation_identifier>
 800d68e:	4601      	mov	r1, r0
 800d690:	4620      	mov	r0, r4
 800d692:	f7f2 fdbd 	bl	8000210 <strcmp>
 800d696:	fab0 f080 	clz	r0, r0
 800d69a:	0940      	lsrs	r0, r0, #5
 800d69c:	bd10      	pop	{r4, pc}
 800d69e:	bf00      	nop

0800d6a0 <get_message_typesupport_handle>:
 800d6a0:	6883      	ldr	r3, [r0, #8]
 800d6a2:	4718      	bx	r3

0800d6a4 <get_message_typesupport_handle_function>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	6800      	ldr	r0, [r0, #0]
 800d6aa:	f7f2 fdb1 	bl	8000210 <strcmp>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	bf0c      	ite	eq
 800d6b2:	4620      	moveq	r0, r4
 800d6b4:	2000      	movne	r0, #0
 800d6b6:	bd10      	pop	{r4, pc}

0800d6b8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6bc:	6805      	ldr	r5, [r0, #0]
 800d6be:	4604      	mov	r4, r0
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	f7f2 fda4 	bl	8000210 <strcmp>
 800d6c8:	b1c8      	cbz	r0, 800d6fe <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d6ca:	4b11      	ldr	r3, [pc, #68]	@ (800d710 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429d      	cmp	r5, r3
 800d6d0:	d112      	bne.n	800d6f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d6d2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d6d6:	f8d8 4000 	ldr.w	r4, [r8]
 800d6da:	b16c      	cbz	r4, 800d6f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d6dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d6e0:	2700      	movs	r7, #0
 800d6e2:	3d04      	subs	r5, #4
 800d6e4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d6e8:	4631      	mov	r1, r6
 800d6ea:	f7f2 fd91 	bl	8000210 <strcmp>
 800d6ee:	00bb      	lsls	r3, r7, #2
 800d6f0:	b140      	cbz	r0, 800d704 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d6f2:	3701      	adds	r7, #1
 800d6f4:	42bc      	cmp	r4, r7
 800d6f6:	d1f5      	bne.n	800d6e4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fe:	4620      	mov	r0, r4
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d704:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d70c:	58d3      	ldr	r3, [r2, r3]
 800d70e:	4718      	bx	r3
 800d710:	200001d8 	.word	0x200001d8

0800d714 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d714:	4b04      	ldr	r3, [pc, #16]	@ (800d728 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	b10a      	cbz	r2, 800d71e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d71a:	4803      	ldr	r0, [pc, #12]	@ (800d728 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d71c:	4770      	bx	lr
 800d71e:	4a03      	ldr	r2, [pc, #12]	@ (800d72c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d720:	4801      	ldr	r0, [pc, #4]	@ (800d728 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d722:	6812      	ldr	r2, [r2, #0]
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	4770      	bx	lr
 800d728:	200001e8 	.word	0x200001e8
 800d72c:	200001d8 	.word	0x200001d8

0800d730 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d730:	4a02      	ldr	r2, [pc, #8]	@ (800d73c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800d732:	4b03      	ldr	r3, [pc, #12]	@ (800d740 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800d734:	6812      	ldr	r2, [r2, #0]
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	200001d8 	.word	0x200001d8
 800d740:	200001e8 	.word	0x200001e8

0800d744 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800d744:	f007 b9ce 	b.w	8014ae4 <std_msgs__msg__Int32__init>

0800d748 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800d748:	f007 b9d0 	b.w	8014aec <std_msgs__msg__Int32__fini>

0800d74c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d74c:	4b04      	ldr	r3, [pc, #16]	@ (800d760 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	b10a      	cbz	r2, 800d756 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d752:	4803      	ldr	r0, [pc, #12]	@ (800d760 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d754:	4770      	bx	lr
 800d756:	4a03      	ldr	r2, [pc, #12]	@ (800d764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d758:	4801      	ldr	r0, [pc, #4]	@ (800d760 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d75a:	6812      	ldr	r2, [r2, #0]
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	4770      	bx	lr
 800d760:	20000230 	.word	0x20000230
 800d764:	200001dc 	.word	0x200001dc

0800d768 <_Int32__max_serialized_size>:
 800d768:	b508      	push	{r3, lr}
 800d76a:	2104      	movs	r1, #4
 800d76c:	2000      	movs	r0, #0
 800d76e:	f7fe f91b 	bl	800b9a8 <ucdr_alignment>
 800d772:	3004      	adds	r0, #4
 800d774:	bd08      	pop	{r3, pc}
 800d776:	bf00      	nop

0800d778 <_Int32__cdr_deserialize>:
 800d778:	b109      	cbz	r1, 800d77e <_Int32__cdr_deserialize+0x6>
 800d77a:	f7fd be97 	b.w	800b4ac <ucdr_deserialize_int32_t>
 800d77e:	4608      	mov	r0, r1
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop

0800d784 <get_serialized_size_std_msgs__msg__Int32>:
 800d784:	b138      	cbz	r0, 800d796 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800d786:	b508      	push	{r3, lr}
 800d788:	460b      	mov	r3, r1
 800d78a:	4618      	mov	r0, r3
 800d78c:	2104      	movs	r1, #4
 800d78e:	f7fe f90b 	bl	800b9a8 <ucdr_alignment>
 800d792:	3004      	adds	r0, #4
 800d794:	bd08      	pop	{r3, pc}
 800d796:	4770      	bx	lr

0800d798 <_Int32__cdr_serialize>:
 800d798:	460a      	mov	r2, r1
 800d79a:	b118      	cbz	r0, 800d7a4 <_Int32__cdr_serialize+0xc>
 800d79c:	6801      	ldr	r1, [r0, #0]
 800d79e:	4610      	mov	r0, r2
 800d7a0:	f7fd bdec 	b.w	800b37c <ucdr_serialize_int32_t>
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop

0800d7a8 <_Int32__get_serialized_size>:
 800d7a8:	b130      	cbz	r0, 800d7b8 <_Int32__get_serialized_size+0x10>
 800d7aa:	b508      	push	{r3, lr}
 800d7ac:	2104      	movs	r1, #4
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	f7fe f8fa 	bl	800b9a8 <ucdr_alignment>
 800d7b4:	3004      	adds	r0, #4
 800d7b6:	bd08      	pop	{r3, pc}
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop

0800d7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d7bc:	4800      	ldr	r0, [pc, #0]	@ (800d7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800d7be:	4770      	bx	lr
 800d7c0:	2000023c 	.word	0x2000023c

0800d7c4 <geometry_msgs__msg__Twist__init>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	b1a8      	cbz	r0, 800d7f6 <geometry_msgs__msg__Twist__init+0x32>
 800d7ca:	f000 f82b 	bl	800d824 <geometry_msgs__msg__Vector3__init>
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	b140      	cbz	r0, 800d7e4 <geometry_msgs__msg__Twist__init+0x20>
 800d7d2:	f105 0618 	add.w	r6, r5, #24
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f000 f824 	bl	800d824 <geometry_msgs__msg__Vector3__init>
 800d7dc:	4604      	mov	r4, r0
 800d7de:	b168      	cbz	r0, 800d7fc <geometry_msgs__msg__Twist__init+0x38>
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f000 f821 	bl	800d82c <geometry_msgs__msg__Vector3__fini>
 800d7ea:	f105 0018 	add.w	r0, r5, #24
 800d7ee:	f000 f81d 	bl	800d82c <geometry_msgs__msg__Vector3__fini>
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	bd70      	pop	{r4, r5, r6, pc}
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f000 f815 	bl	800d82c <geometry_msgs__msg__Vector3__fini>
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f812 	bl	800d82c <geometry_msgs__msg__Vector3__fini>
 800d808:	e7ea      	b.n	800d7e0 <geometry_msgs__msg__Twist__init+0x1c>
 800d80a:	bf00      	nop

0800d80c <geometry_msgs__msg__Twist__fini>:
 800d80c:	b148      	cbz	r0, 800d822 <geometry_msgs__msg__Twist__fini+0x16>
 800d80e:	b510      	push	{r4, lr}
 800d810:	4604      	mov	r4, r0
 800d812:	f000 f80b 	bl	800d82c <geometry_msgs__msg__Vector3__fini>
 800d816:	f104 0018 	add.w	r0, r4, #24
 800d81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d81e:	f000 b805 	b.w	800d82c <geometry_msgs__msg__Vector3__fini>
 800d822:	4770      	bx	lr

0800d824 <geometry_msgs__msg__Vector3__init>:
 800d824:	3800      	subs	r0, #0
 800d826:	bf18      	it	ne
 800d828:	2001      	movne	r0, #1
 800d82a:	4770      	bx	lr

0800d82c <geometry_msgs__msg__Vector3__fini>:
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop

0800d830 <uxr_buffer_delete_entity>:
 800d830:	b510      	push	{r4, lr}
 800d832:	2300      	movs	r3, #0
 800d834:	b08e      	sub	sp, #56	@ 0x38
 800d836:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d83a:	2303      	movs	r3, #3
 800d83c:	9300      	str	r3, [sp, #0]
 800d83e:	2204      	movs	r2, #4
 800d840:	ab06      	add	r3, sp, #24
 800d842:	4604      	mov	r4, r0
 800d844:	9103      	str	r1, [sp, #12]
 800d846:	f001 f951 	bl	800eaec <uxr_prepare_stream_to_write_submessage>
 800d84a:	b918      	cbnz	r0, 800d854 <uxr_buffer_delete_entity+0x24>
 800d84c:	4604      	mov	r4, r0
 800d84e:	4620      	mov	r0, r4
 800d850:	b00e      	add	sp, #56	@ 0x38
 800d852:	bd10      	pop	{r4, pc}
 800d854:	9902      	ldr	r1, [sp, #8]
 800d856:	aa05      	add	r2, sp, #20
 800d858:	4620      	mov	r0, r4
 800d85a:	f001 fa7d 	bl	800ed58 <uxr_init_base_object_request>
 800d85e:	a905      	add	r1, sp, #20
 800d860:	4604      	mov	r4, r0
 800d862:	a806      	add	r0, sp, #24
 800d864:	f002 fcce 	bl	8010204 <uxr_serialize_DELETE_Payload>
 800d868:	4620      	mov	r0, r4
 800d86a:	b00e      	add	sp, #56	@ 0x38
 800d86c:	bd10      	pop	{r4, pc}
 800d86e:	bf00      	nop

0800d870 <uxr_common_create_entity>:
 800d870:	b510      	push	{r4, lr}
 800d872:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d876:	b08c      	sub	sp, #48	@ 0x30
 800d878:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d87c:	f1bc 0f01 	cmp.w	ip, #1
 800d880:	bf0c      	ite	eq
 800d882:	f003 0201 	andeq.w	r2, r3, #1
 800d886:	2200      	movne	r2, #0
 800d888:	330e      	adds	r3, #14
 800d88a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d88e:	9101      	str	r1, [sp, #4]
 800d890:	441a      	add	r2, r3
 800d892:	2301      	movs	r3, #1
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	9903      	ldr	r1, [sp, #12]
 800d898:	ab04      	add	r3, sp, #16
 800d89a:	b292      	uxth	r2, r2
 800d89c:	4604      	mov	r4, r0
 800d89e:	f001 f925 	bl	800eaec <uxr_prepare_stream_to_write_submessage>
 800d8a2:	b918      	cbnz	r0, 800d8ac <uxr_common_create_entity+0x3c>
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	b00c      	add	sp, #48	@ 0x30
 800d8aa:	bd10      	pop	{r4, pc}
 800d8ac:	9902      	ldr	r1, [sp, #8]
 800d8ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f001 fa51 	bl	800ed58 <uxr_init_base_object_request>
 800d8b6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	a804      	add	r0, sp, #16
 800d8bc:	f002 fbfe 	bl	80100bc <uxr_serialize_CREATE_Payload>
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	b00c      	add	sp, #48	@ 0x30
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	bf00      	nop

0800d8c8 <uxr_buffer_create_participant_bin>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d8ce:	ac11      	add	r4, sp, #68	@ 0x44
 800d8d0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d8da:	7223      	strb	r3, [r4, #8]
 800d8dc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d8de:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	7122      	strb	r2, [r4, #4]
 800d8ea:	f88d 1014 	strb.w	r1, [sp, #20]
 800d8ee:	b1cb      	cbz	r3, 800d924 <uxr_buffer_create_participant_bin+0x5c>
 800d8f0:	f88d 201c 	strb.w	r2, [sp, #28]
 800d8f4:	9308      	str	r3, [sp, #32]
 800d8f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8fa:	a915      	add	r1, sp, #84	@ 0x54
 800d8fc:	a809      	add	r0, sp, #36	@ 0x24
 800d8fe:	f7fe f84f 	bl	800b9a0 <ucdr_init_buffer>
 800d902:	a905      	add	r1, sp, #20
 800d904:	a809      	add	r0, sp, #36	@ 0x24
 800d906:	f001 ffbb 	bl	800f880 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d90a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d90c:	9600      	str	r6, [sp, #0]
 800d90e:	9401      	str	r4, [sp, #4]
 800d910:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d914:	60e3      	str	r3, [r4, #12]
 800d916:	4628      	mov	r0, r5
 800d918:	b29b      	uxth	r3, r3
 800d91a:	f7ff ffa9 	bl	800d870 <uxr_common_create_entity>
 800d91e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d922:	bd70      	pop	{r4, r5, r6, pc}
 800d924:	f88d 301c 	strb.w	r3, [sp, #28]
 800d928:	e7e5      	b.n	800d8f6 <uxr_buffer_create_participant_bin+0x2e>
 800d92a:	bf00      	nop

0800d92c <uxr_buffer_create_topic_bin>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d932:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d936:	9105      	str	r1, [sp, #20]
 800d938:	4605      	mov	r5, r0
 800d93a:	a997      	add	r1, sp, #604	@ 0x25c
 800d93c:	4618      	mov	r0, r3
 800d93e:	2302      	movs	r3, #2
 800d940:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d944:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d948:	f000 f996 	bl	800dc78 <uxr_object_id_to_raw>
 800d94c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d94e:	9306      	str	r3, [sp, #24]
 800d950:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d952:	930a      	str	r3, [sp, #40]	@ 0x28
 800d954:	2303      	movs	r3, #3
 800d956:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d95a:	2301      	movs	r3, #1
 800d95c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d960:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d964:	a917      	add	r1, sp, #92	@ 0x5c
 800d966:	2300      	movs	r3, #0
 800d968:	a80b      	add	r0, sp, #44	@ 0x2c
 800d96a:	f88d 301c 	strb.w	r3, [sp, #28]
 800d96e:	f7fe f817 	bl	800b9a0 <ucdr_init_buffer>
 800d972:	a906      	add	r1, sp, #24
 800d974:	a80b      	add	r0, sp, #44	@ 0x2c
 800d976:	f001 ffa5 	bl	800f8c4 <uxr_serialize_OBJK_Topic_Binary>
 800d97a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d97c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d97e:	ac13      	add	r4, sp, #76	@ 0x4c
 800d980:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d984:	9600      	str	r6, [sp, #0]
 800d986:	9401      	str	r4, [sp, #4]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	4628      	mov	r0, r5
 800d98c:	f7ff ff70 	bl	800d870 <uxr_common_create_entity>
 800d990:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	bf00      	nop

0800d998 <uxr_buffer_create_publisher_bin>:
 800d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d99a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d99e:	4605      	mov	r5, r0
 800d9a0:	9105      	str	r1, [sp, #20]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	2603      	movs	r6, #3
 800d9a6:	a992      	add	r1, sp, #584	@ 0x248
 800d9a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d9ac:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d9b0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d9b4:	f000 f960 	bl	800dc78 <uxr_object_id_to_raw>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9be:	a912      	add	r1, sp, #72	@ 0x48
 800d9c0:	a806      	add	r0, sp, #24
 800d9c2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d9c6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d9ca:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d9ce:	f7fd ffe7 	bl	800b9a0 <ucdr_init_buffer>
 800d9d2:	a993      	add	r1, sp, #588	@ 0x24c
 800d9d4:	a806      	add	r0, sp, #24
 800d9d6:	f002 f829 	bl	800fa2c <uxr_serialize_OBJK_Publisher_Binary>
 800d9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9dc:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9de:	ac0e      	add	r4, sp, #56	@ 0x38
 800d9e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d9e4:	9700      	str	r7, [sp, #0]
 800d9e6:	9401      	str	r4, [sp, #4]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f7ff ff40 	bl	800d870 <uxr_common_create_entity>
 800d9f0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f6:	bf00      	nop

0800d9f8 <uxr_buffer_create_subscriber_bin>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800d9fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da02:	9105      	str	r1, [sp, #20]
 800da04:	4605      	mov	r5, r0
 800da06:	a992      	add	r1, sp, #584	@ 0x248
 800da08:	4618      	mov	r0, r3
 800da0a:	2304      	movs	r3, #4
 800da0c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800da10:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800da14:	f000 f930 	bl	800dc78 <uxr_object_id_to_raw>
 800da18:	2300      	movs	r3, #0
 800da1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da1e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800da22:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800da26:	a912      	add	r1, sp, #72	@ 0x48
 800da28:	2303      	movs	r3, #3
 800da2a:	a806      	add	r0, sp, #24
 800da2c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800da30:	f7fd ffb6 	bl	800b9a0 <ucdr_init_buffer>
 800da34:	a993      	add	r1, sp, #588	@ 0x24c
 800da36:	a806      	add	r0, sp, #24
 800da38:	f002 f8a8 	bl	800fb8c <uxr_serialize_OBJK_Subscriber_Binary>
 800da3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da3e:	9311      	str	r3, [sp, #68]	@ 0x44
 800da40:	ac0e      	add	r4, sp, #56	@ 0x38
 800da42:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800da46:	9600      	str	r6, [sp, #0]
 800da48:	9401      	str	r4, [sp, #4]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	4628      	mov	r0, r5
 800da4e:	f7ff ff0f 	bl	800d870 <uxr_common_create_entity>
 800da52:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800da56:	bd70      	pop	{r4, r5, r6, pc}

0800da58 <uxr_buffer_create_datawriter_bin>:
 800da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800da60:	ac1d      	add	r4, sp, #116	@ 0x74
 800da62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800da66:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800da6a:	9105      	str	r1, [sp, #20]
 800da6c:	4606      	mov	r6, r0
 800da6e:	a9a1      	add	r1, sp, #644	@ 0x284
 800da70:	4618      	mov	r0, r3
 800da72:	2305      	movs	r3, #5
 800da74:	7123      	strb	r3, [r4, #4]
 800da76:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800da7a:	2703      	movs	r7, #3
 800da7c:	f000 f8fc 	bl	800dc78 <uxr_object_id_to_raw>
 800da80:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800da82:	7227      	strb	r7, [r4, #8]
 800da84:	a90e      	add	r1, sp, #56	@ 0x38
 800da86:	f000 f8f7 	bl	800dc78 <uxr_object_id_to_raw>
 800da8a:	2300      	movs	r3, #0
 800da8c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800da90:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800da94:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800da98:	3d00      	subs	r5, #0
 800da9a:	bf18      	it	ne
 800da9c:	2501      	movne	r5, #1
 800da9e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800daa2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800daa6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800daaa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800daae:	2301      	movs	r3, #1
 800dab0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800dab4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dab8:	bb8a      	cbnz	r2, 800db1e <uxr_buffer_create_datawriter_bin+0xc6>
 800daba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dabe:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800dac2:	f04f 0c13 	mov.w	ip, #19
 800dac6:	250b      	movs	r5, #11
 800dac8:	2221      	movs	r2, #33	@ 0x21
 800daca:	2111      	movs	r1, #17
 800dacc:	2009      	movs	r0, #9
 800dace:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800dad2:	b923      	cbnz	r3, 800dade <uxr_buffer_create_datawriter_bin+0x86>
 800dad4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800dad8:	4672      	mov	r2, lr
 800dada:	4661      	mov	r1, ip
 800dadc:	4628      	mov	r0, r5
 800dade:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d025      	beq.n	800db32 <uxr_buffer_create_datawriter_bin+0xda>
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d029      	beq.n	800db3e <uxr_buffer_create_datawriter_bin+0xe6>
 800daea:	b32b      	cbz	r3, 800db38 <uxr_buffer_create_datawriter_bin+0xe0>
 800daec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daf0:	a921      	add	r1, sp, #132	@ 0x84
 800daf2:	a806      	add	r0, sp, #24
 800daf4:	f7fd ff54 	bl	800b9a0 <ucdr_init_buffer>
 800daf8:	a90e      	add	r1, sp, #56	@ 0x38
 800dafa:	a806      	add	r0, sp, #24
 800dafc:	f002 f8f8 	bl	800fcf0 <uxr_serialize_OBJK_DataWriter_Binary>
 800db00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db02:	f8cd 8000 	str.w	r8, [sp]
 800db06:	9401      	str	r4, [sp, #4]
 800db08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db0c:	60e3      	str	r3, [r4, #12]
 800db0e:	4630      	mov	r0, r6
 800db10:	b29b      	uxth	r3, r3
 800db12:	f7ff fead 	bl	800d870 <uxr_common_create_entity>
 800db16:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800db22:	f04f 0c12 	mov.w	ip, #18
 800db26:	250a      	movs	r5, #10
 800db28:	2220      	movs	r2, #32
 800db2a:	2110      	movs	r1, #16
 800db2c:	2008      	movs	r0, #8
 800db2e:	2702      	movs	r7, #2
 800db30:	e7cd      	b.n	800dace <uxr_buffer_create_datawriter_bin+0x76>
 800db32:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800db36:	e7d9      	b.n	800daec <uxr_buffer_create_datawriter_bin+0x94>
 800db38:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800db3c:	e7d6      	b.n	800daec <uxr_buffer_create_datawriter_bin+0x94>
 800db3e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800db42:	e7d3      	b.n	800daec <uxr_buffer_create_datawriter_bin+0x94>

0800db44 <uxr_buffer_create_datareader_bin>:
 800db44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db48:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800db4c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800db4e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db52:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800db56:	9105      	str	r1, [sp, #20]
 800db58:	4606      	mov	r6, r0
 800db5a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800db5c:	4618      	mov	r0, r3
 800db5e:	2306      	movs	r3, #6
 800db60:	7123      	strb	r3, [r4, #4]
 800db62:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800db66:	2703      	movs	r7, #3
 800db68:	f000 f886 	bl	800dc78 <uxr_object_id_to_raw>
 800db6c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800db6e:	7227      	strb	r7, [r4, #8]
 800db70:	a90e      	add	r1, sp, #56	@ 0x38
 800db72:	f000 f881 	bl	800dc78 <uxr_object_id_to_raw>
 800db76:	2300      	movs	r3, #0
 800db78:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800db7c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800db80:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800db84:	3d00      	subs	r5, #0
 800db86:	bf18      	it	ne
 800db88:	2501      	movne	r5, #1
 800db8a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800db8e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800db92:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800db96:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800db9a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800db9e:	2301      	movs	r3, #1
 800dba0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800dba4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dba8:	bb8a      	cbnz	r2, 800dc0e <uxr_buffer_create_datareader_bin+0xca>
 800dbaa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dbae:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800dbb2:	f04f 0c13 	mov.w	ip, #19
 800dbb6:	250b      	movs	r5, #11
 800dbb8:	2221      	movs	r2, #33	@ 0x21
 800dbba:	2111      	movs	r1, #17
 800dbbc:	2009      	movs	r0, #9
 800dbbe:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800dbc2:	b923      	cbnz	r3, 800dbce <uxr_buffer_create_datareader_bin+0x8a>
 800dbc4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800dbc8:	4672      	mov	r2, lr
 800dbca:	4661      	mov	r1, ip
 800dbcc:	4628      	mov	r0, r5
 800dbce:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d025      	beq.n	800dc22 <uxr_buffer_create_datareader_bin+0xde>
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	d029      	beq.n	800dc2e <uxr_buffer_create_datareader_bin+0xea>
 800dbda:	b32b      	cbz	r3, 800dc28 <uxr_buffer_create_datareader_bin+0xe4>
 800dbdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dbe0:	a923      	add	r1, sp, #140	@ 0x8c
 800dbe2:	a806      	add	r0, sp, #24
 800dbe4:	f7fd fedc 	bl	800b9a0 <ucdr_init_buffer>
 800dbe8:	a90e      	add	r1, sp, #56	@ 0x38
 800dbea:	a806      	add	r0, sp, #24
 800dbec:	f002 f844 	bl	800fc78 <uxr_serialize_OBJK_DataReader_Binary>
 800dbf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf2:	f8cd 8000 	str.w	r8, [sp]
 800dbf6:	9401      	str	r4, [sp, #4]
 800dbf8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dbfc:	60e3      	str	r3, [r4, #12]
 800dbfe:	4630      	mov	r0, r6
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	f7ff fe35 	bl	800d870 <uxr_common_create_entity>
 800dc06:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800dc12:	f04f 0c12 	mov.w	ip, #18
 800dc16:	250a      	movs	r5, #10
 800dc18:	2220      	movs	r2, #32
 800dc1a:	2110      	movs	r1, #16
 800dc1c:	2008      	movs	r0, #8
 800dc1e:	2702      	movs	r7, #2
 800dc20:	e7cd      	b.n	800dbbe <uxr_buffer_create_datareader_bin+0x7a>
 800dc22:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800dc26:	e7d9      	b.n	800dbdc <uxr_buffer_create_datareader_bin+0x98>
 800dc28:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800dc2c:	e7d6      	b.n	800dbdc <uxr_buffer_create_datareader_bin+0x98>
 800dc2e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800dc32:	e7d3      	b.n	800dbdc <uxr_buffer_create_datareader_bin+0x98>

0800dc34 <uxr_object_id>:
 800dc34:	b082      	sub	sp, #8
 800dc36:	2300      	movs	r3, #0
 800dc38:	f88d 1006 	strb.w	r1, [sp, #6]
 800dc3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dc40:	f360 030f 	bfi	r3, r0, #0, #16
 800dc44:	f362 431f 	bfi	r3, r2, #16, #16
 800dc48:	4618      	mov	r0, r3
 800dc4a:	b002      	add	sp, #8
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop

0800dc50 <uxr_object_id_from_raw>:
 800dc50:	7843      	ldrb	r3, [r0, #1]
 800dc52:	7801      	ldrb	r1, [r0, #0]
 800dc54:	b082      	sub	sp, #8
 800dc56:	f003 020f 	and.w	r2, r3, #15
 800dc5a:	f88d 2006 	strb.w	r2, [sp, #6]
 800dc5e:	091b      	lsrs	r3, r3, #4
 800dc60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dc64:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dc68:	2000      	movs	r0, #0
 800dc6a:	f363 000f 	bfi	r0, r3, #0, #16
 800dc6e:	f362 401f 	bfi	r0, r2, #16, #16
 800dc72:	b002      	add	sp, #8
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop

0800dc78 <uxr_object_id_to_raw>:
 800dc78:	4602      	mov	r2, r0
 800dc7a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800dc7e:	b082      	sub	sp, #8
 800dc80:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800dc84:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800dc88:	f881 c000 	strb.w	ip, [r1]
 800dc8c:	7048      	strb	r0, [r1, #1]
 800dc8e:	b002      	add	sp, #8
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop

0800dc94 <on_get_fragmentation_info>:
 800dc94:	b500      	push	{lr}
 800dc96:	b08b      	sub	sp, #44	@ 0x2c
 800dc98:	4601      	mov	r1, r0
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	a802      	add	r0, sp, #8
 800dc9e:	f7fd fe7f 	bl	800b9a0 <ucdr_init_buffer>
 800dca2:	f10d 0305 	add.w	r3, sp, #5
 800dca6:	f10d 0206 	add.w	r2, sp, #6
 800dcaa:	a901      	add	r1, sp, #4
 800dcac:	a802      	add	r0, sp, #8
 800dcae:	f001 f9d5 	bl	800f05c <uxr_read_submessage_header>
 800dcb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcb6:	2b0d      	cmp	r3, #13
 800dcb8:	d003      	beq.n	800dcc2 <on_get_fragmentation_info+0x2e>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	b00b      	add	sp, #44	@ 0x2c
 800dcbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcc6:	f013 0f02 	tst.w	r3, #2
 800dcca:	bf14      	ite	ne
 800dccc:	2002      	movne	r0, #2
 800dcce:	2001      	moveq	r0, #1
 800dcd0:	b00b      	add	sp, #44	@ 0x2c
 800dcd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd6:	bf00      	nop

0800dcd8 <read_submessage_get_info>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	2500      	movs	r5, #0
 800dcdc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800dce0:	4604      	mov	r4, r0
 800dce2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800dce6:	460e      	mov	r6, r1
 800dce8:	a810      	add	r0, sp, #64	@ 0x40
 800dcea:	4629      	mov	r1, r5
 800dcec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800dcf0:	f009 fcc4 	bl	801767c <memset>
 800dcf4:	a903      	add	r1, sp, #12
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f002 fa70 	bl	80101dc <uxr_deserialize_GET_INFO_Payload>
 800dcfc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dd00:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dd04:	4620      	mov	r0, r4
 800dd06:	f001 f81f 	bl	800ed48 <uxr_session_header_offset>
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	9000      	str	r0, [sp, #0]
 800dd0e:	220c      	movs	r2, #12
 800dd10:	a905      	add	r1, sp, #20
 800dd12:	a808      	add	r0, sp, #32
 800dd14:	f7fd fe32 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800dd18:	a910      	add	r1, sp, #64	@ 0x40
 800dd1a:	a808      	add	r0, sp, #32
 800dd1c:	f002 fad0 	bl	80102c0 <uxr_serialize_INFO_Payload>
 800dd20:	9b08      	ldr	r3, [sp, #32]
 800dd22:	462a      	mov	r2, r5
 800dd24:	4629      	mov	r1, r5
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 ffb8 	bl	800ec9c <uxr_stamp_session_header>
 800dd2c:	a808      	add	r0, sp, #32
 800dd2e:	f7fd fe63 	bl	800b9f8 <ucdr_buffer_length>
 800dd32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd34:	4602      	mov	r2, r0
 800dd36:	a905      	add	r1, sp, #20
 800dd38:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dd3c:	47a0      	blx	r4
 800dd3e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800dd42:	bd70      	pop	{r4, r5, r6, pc}

0800dd44 <write_submessage_acknack.isra.0>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	b092      	sub	sp, #72	@ 0x48
 800dd48:	4605      	mov	r5, r0
 800dd4a:	460e      	mov	r6, r1
 800dd4c:	4614      	mov	r4, r2
 800dd4e:	f000 fffb 	bl	800ed48 <uxr_session_header_offset>
 800dd52:	a905      	add	r1, sp, #20
 800dd54:	9000      	str	r0, [sp, #0]
 800dd56:	2300      	movs	r3, #0
 800dd58:	a80a      	add	r0, sp, #40	@ 0x28
 800dd5a:	2211      	movs	r2, #17
 800dd5c:	f7fd fe0e 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800dd60:	2218      	movs	r2, #24
 800dd62:	fb02 5404 	mla	r4, r2, r4, r5
 800dd66:	2300      	movs	r3, #0
 800dd68:	2205      	movs	r2, #5
 800dd6a:	3450      	adds	r4, #80	@ 0x50
 800dd6c:	210a      	movs	r1, #10
 800dd6e:	a80a      	add	r0, sp, #40	@ 0x28
 800dd70:	f001 f95a 	bl	800f028 <uxr_buffer_submessage_header>
 800dd74:	a903      	add	r1, sp, #12
 800dd76:	4620      	mov	r0, r4
 800dd78:	f007 faba 	bl	80152f0 <uxr_compute_acknack>
 800dd7c:	ba40      	rev16	r0, r0
 800dd7e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800dd82:	a903      	add	r1, sp, #12
 800dd84:	a80a      	add	r0, sp, #40	@ 0x28
 800dd86:	f88d 6010 	strb.w	r6, [sp, #16]
 800dd8a:	f002 fb09 	bl	80103a0 <uxr_serialize_ACKNACK_Payload>
 800dd8e:	2200      	movs	r2, #0
 800dd90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd92:	4611      	mov	r1, r2
 800dd94:	4628      	mov	r0, r5
 800dd96:	f000 ff81 	bl	800ec9c <uxr_stamp_session_header>
 800dd9a:	a80a      	add	r0, sp, #40	@ 0x28
 800dd9c:	f7fd fe2c 	bl	800b9f8 <ucdr_buffer_length>
 800dda0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dda2:	4602      	mov	r2, r0
 800dda4:	a905      	add	r1, sp, #20
 800dda6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ddaa:	47a0      	blx	r4
 800ddac:	b012      	add	sp, #72	@ 0x48
 800ddae:	bd70      	pop	{r4, r5, r6, pc}

0800ddb0 <uxr_init_session>:
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dde8 <uxr_init_session+0x38>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ddc2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ddc6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ddca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ddce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ddd2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ddd6:	2181      	movs	r1, #129	@ 0x81
 800ddd8:	f000 fecc 	bl	800eb74 <uxr_init_session_info>
 800dddc:	f104 0008 	add.w	r0, r4, #8
 800dde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde4:	f001 b83c 	b.w	800ee60 <uxr_init_stream_storage>
	...

0800ddf0 <uxr_set_status_callback>:
 800ddf0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop

0800ddf8 <uxr_set_topic_callback>:
 800ddf8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop

0800de00 <uxr_set_request_callback>:
 800de00:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop

0800de08 <uxr_set_reply_callback>:
 800de08:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <uxr_create_output_best_effort_stream>:
 800de10:	b510      	push	{r4, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	e9cd 2100 	strd	r2, r1, [sp]
 800de18:	4604      	mov	r4, r0
 800de1a:	f000 ff95 	bl	800ed48 <uxr_session_header_offset>
 800de1e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800de22:	4603      	mov	r3, r0
 800de24:	f104 0008 	add.w	r0, r4, #8
 800de28:	b004      	add	sp, #16
 800de2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de2e:	f001 b861 	b.w	800eef4 <uxr_add_output_best_effort_buffer>
 800de32:	bf00      	nop

0800de34 <uxr_create_output_reliable_stream>:
 800de34:	b510      	push	{r4, lr}
 800de36:	b088      	sub	sp, #32
 800de38:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800de3c:	4604      	mov	r4, r0
 800de3e:	9303      	str	r3, [sp, #12]
 800de40:	f000 ff82 	bl	800ed48 <uxr_session_header_offset>
 800de44:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800de48:	9000      	str	r0, [sp, #0]
 800de4a:	9905      	ldr	r1, [sp, #20]
 800de4c:	f104 0008 	add.w	r0, r4, #8
 800de50:	f001 f864 	bl	800ef1c <uxr_add_output_reliable_buffer>
 800de54:	2200      	movs	r2, #0
 800de56:	b2c3      	uxtb	r3, r0
 800de58:	f363 0207 	bfi	r2, r3, #0, #8
 800de5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800de60:	f363 220f 	bfi	r2, r3, #8, #8
 800de64:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800de68:	f363 4217 	bfi	r2, r3, #16, #8
 800de6c:	0e03      	lsrs	r3, r0, #24
 800de6e:	f363 621f 	bfi	r2, r3, #24, #8
 800de72:	4610      	mov	r0, r2
 800de74:	b008      	add	sp, #32
 800de76:	bd10      	pop	{r4, pc}

0800de78 <uxr_create_input_best_effort_stream>:
 800de78:	b082      	sub	sp, #8
 800de7a:	3008      	adds	r0, #8
 800de7c:	b002      	add	sp, #8
 800de7e:	f001 b867 	b.w	800ef50 <uxr_add_input_best_effort_buffer>
 800de82:	bf00      	nop

0800de84 <uxr_create_input_reliable_stream>:
 800de84:	b510      	push	{r4, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	4c0b      	ldr	r4, [pc, #44]	@ (800deb8 <uxr_create_input_reliable_stream+0x34>)
 800de8a:	9400      	str	r4, [sp, #0]
 800de8c:	3008      	adds	r0, #8
 800de8e:	f001 f875 	bl	800ef7c <uxr_add_input_reliable_buffer>
 800de92:	2200      	movs	r2, #0
 800de94:	b2c3      	uxtb	r3, r0
 800de96:	f363 0207 	bfi	r2, r3, #0, #8
 800de9a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800de9e:	f363 220f 	bfi	r2, r3, #8, #8
 800dea2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dea6:	f363 4217 	bfi	r2, r3, #16, #8
 800deaa:	0e03      	lsrs	r3, r0, #24
 800deac:	f363 621f 	bfi	r2, r3, #24, #8
 800deb0:	4610      	mov	r0, r2
 800deb2:	b004      	add	sp, #16
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	bf00      	nop
 800deb8:	0800dc95 	.word	0x0800dc95

0800debc <uxr_epoch_nanos>:
 800debc:	b510      	push	{r4, lr}
 800debe:	4604      	mov	r4, r0
 800dec0:	f001 f912 	bl	800f0e8 <uxr_nanos>
 800dec4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dec8:	1ac0      	subs	r0, r0, r3
 800deca:	eb61 0102 	sbc.w	r1, r1, r2
 800dece:	bd10      	pop	{r4, pc}

0800ded0 <uxr_flash_output_streams>:
 800ded0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	7e03      	ldrb	r3, [r0, #24]
 800ded6:	b084      	sub	sp, #16
 800ded8:	4604      	mov	r4, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d035      	beq.n	800df4a <uxr_flash_output_streams+0x7a>
 800dede:	f04f 0900 	mov.w	r9, #0
 800dee2:	4648      	mov	r0, r9
 800dee4:	f10d 0802 	add.w	r8, sp, #2
 800dee8:	af03      	add	r7, sp, #12
 800deea:	ae02      	add	r6, sp, #8
 800deec:	e006      	b.n	800defc <uxr_flash_output_streams+0x2c>
 800deee:	7e23      	ldrb	r3, [r4, #24]
 800def0:	f109 0901 	add.w	r9, r9, #1
 800def4:	fa5f f089 	uxtb.w	r0, r9
 800def8:	4283      	cmp	r3, r0
 800defa:	d926      	bls.n	800df4a <uxr_flash_output_streams+0x7a>
 800defc:	2201      	movs	r2, #1
 800defe:	4611      	mov	r1, r2
 800df00:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800df04:	f000 ff58 	bl	800edb8 <uxr_stream_id>
 800df08:	3508      	adds	r5, #8
 800df0a:	4684      	mov	ip, r0
 800df0c:	4643      	mov	r3, r8
 800df0e:	463a      	mov	r2, r7
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	f8cd c004 	str.w	ip, [sp, #4]
 800df18:	f007 fa70 	bl	80153fc <uxr_prepare_best_effort_buffer_to_send>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d0e6      	beq.n	800deee <uxr_flash_output_streams+0x1e>
 800df20:	9b02      	ldr	r3, [sp, #8]
 800df22:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800df26:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 feb6 	bl	800ec9c <uxr_stamp_session_header>
 800df30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df32:	9a03      	ldr	r2, [sp, #12]
 800df34:	685d      	ldr	r5, [r3, #4]
 800df36:	6818      	ldr	r0, [r3, #0]
 800df38:	9902      	ldr	r1, [sp, #8]
 800df3a:	47a8      	blx	r5
 800df3c:	f109 0901 	add.w	r9, r9, #1
 800df40:	7e23      	ldrb	r3, [r4, #24]
 800df42:	fa5f f089 	uxtb.w	r0, r9
 800df46:	4283      	cmp	r3, r0
 800df48:	d8d8      	bhi.n	800defc <uxr_flash_output_streams+0x2c>
 800df4a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800df4e:	b38b      	cbz	r3, 800dfb4 <uxr_flash_output_streams+0xe4>
 800df50:	f04f 0900 	mov.w	r9, #0
 800df54:	f10d 0802 	add.w	r8, sp, #2
 800df58:	af03      	add	r7, sp, #12
 800df5a:	ae02      	add	r6, sp, #8
 800df5c:	4648      	mov	r0, r9
 800df5e:	2201      	movs	r2, #1
 800df60:	2102      	movs	r1, #2
 800df62:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800df66:	f000 ff27 	bl	800edb8 <uxr_stream_id>
 800df6a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800df6e:	3520      	adds	r5, #32
 800df70:	9001      	str	r0, [sp, #4]
 800df72:	e00d      	b.n	800df90 <uxr_flash_output_streams+0xc0>
 800df74:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800df78:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800df7c:	9b02      	ldr	r3, [sp, #8]
 800df7e:	f000 fe8d 	bl	800ec9c <uxr_stamp_session_header>
 800df82:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df84:	9a03      	ldr	r2, [sp, #12]
 800df86:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800df8a:	9902      	ldr	r1, [sp, #8]
 800df8c:	6818      	ldr	r0, [r3, #0]
 800df8e:	47d0      	blx	sl
 800df90:	4643      	mov	r3, r8
 800df92:	463a      	mov	r2, r7
 800df94:	4631      	mov	r1, r6
 800df96:	4628      	mov	r0, r5
 800df98:	f007 fc4e 	bl	8015838 <uxr_prepare_next_reliable_buffer_to_send>
 800df9c:	4603      	mov	r3, r0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e7      	bne.n	800df74 <uxr_flash_output_streams+0xa4>
 800dfa4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dfa8:	f109 0901 	add.w	r9, r9, #1
 800dfac:	fa5f f089 	uxtb.w	r0, r9
 800dfb0:	4283      	cmp	r3, r0
 800dfb2:	d8d4      	bhi.n	800df5e <uxr_flash_output_streams+0x8e>
 800dfb4:	b004      	add	sp, #16
 800dfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfba:	bf00      	nop

0800dfbc <read_submessage_info>:
 800dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dfc6:	4669      	mov	r1, sp
 800dfc8:	4607      	mov	r7, r0
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f002 f814 	bl	800fff8 <uxr_deserialize_BaseObjectReply>
 800dfd0:	a902      	add	r1, sp, #8
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dfda:	f7fc fb87 	bl	800a6ec <ucdr_deserialize_bool>
 800dfde:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dfe2:	4004      	ands	r4, r0
 800dfe4:	b2e4      	uxtb	r4, r4
 800dfe6:	b95b      	cbnz	r3, 800e000 <read_submessage_info+0x44>
 800dfe8:	a987      	add	r1, sp, #540	@ 0x21c
 800dfea:	4628      	mov	r0, r5
 800dfec:	f7fc fb7e 	bl	800a6ec <ucdr_deserialize_bool>
 800dff0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dff4:	4606      	mov	r6, r0
 800dff6:	b94b      	cbnz	r3, 800e00c <read_submessage_info+0x50>
 800dff8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e000:	a903      	add	r1, sp, #12
 800e002:	4628      	mov	r0, r5
 800e004:	f001 fea0 	bl	800fd48 <uxr_deserialize_ObjectVariant>
 800e008:	4004      	ands	r4, r0
 800e00a:	e7ed      	b.n	800dfe8 <read_submessage_info+0x2c>
 800e00c:	a988      	add	r1, sp, #544	@ 0x220
 800e00e:	4628      	mov	r0, r5
 800e010:	f7fc fb9a 	bl	800a748 <ucdr_deserialize_uint8_t>
 800e014:	4234      	tst	r4, r6
 800e016:	d0ef      	beq.n	800dff8 <read_submessage_info+0x3c>
 800e018:	2800      	cmp	r0, #0
 800e01a:	d0ed      	beq.n	800dff8 <read_submessage_info+0x3c>
 800e01c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e020:	2b0d      	cmp	r3, #13
 800e022:	d1e9      	bne.n	800dff8 <read_submessage_info+0x3c>
 800e024:	a98a      	add	r1, sp, #552	@ 0x228
 800e026:	4628      	mov	r0, r5
 800e028:	f7fd f934 	bl	800b294 <ucdr_deserialize_int16_t>
 800e02c:	b140      	cbz	r0, 800e040 <read_submessage_info+0x84>
 800e02e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e032:	2b00      	cmp	r3, #0
 800e034:	dd07      	ble.n	800e046 <read_submessage_info+0x8a>
 800e036:	f1b8 0f00 	cmp.w	r8, #0
 800e03a:	bf14      	ite	ne
 800e03c:	2001      	movne	r0, #1
 800e03e:	2002      	moveq	r0, #2
 800e040:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e044:	e7d8      	b.n	800dff8 <read_submessage_info+0x3c>
 800e046:	2000      	movs	r0, #0
 800e048:	e7fa      	b.n	800e040 <read_submessage_info+0x84>
 800e04a:	bf00      	nop

0800e04c <read_submessage_list>:
 800e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	b097      	sub	sp, #92	@ 0x5c
 800e052:	4ec1      	ldr	r6, [pc, #772]	@ (800e358 <read_submessage_list+0x30c>)
 800e054:	9209      	str	r2, [sp, #36]	@ 0x24
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
 800e05a:	f04f 0801 	mov.w	r8, #1
 800e05e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e062:	aa0c      	add	r2, sp, #48	@ 0x30
 800e064:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 fff7 	bl	800f05c <uxr_read_submessage_header>
 800e06e:	2800      	cmp	r0, #0
 800e070:	f000 813e 	beq.w	800e2f0 <read_submessage_list+0x2a4>
 800e074:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e078:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e07c:	3b02      	subs	r3, #2
 800e07e:	2b0d      	cmp	r3, #13
 800e080:	d8ed      	bhi.n	800e05e <read_submessage_list+0x12>
 800e082:	a101      	add	r1, pc, #4	@ (adr r1, 800e088 <read_submessage_list+0x3c>)
 800e084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e088:	0800e2e7 	.word	0x0800e2e7
 800e08c:	0800e05f 	.word	0x0800e05f
 800e090:	0800e2d7 	.word	0x0800e2d7
 800e094:	0800e275 	.word	0x0800e275
 800e098:	0800e26b 	.word	0x0800e26b
 800e09c:	0800e05f 	.word	0x0800e05f
 800e0a0:	0800e05f 	.word	0x0800e05f
 800e0a4:	0800e1cb 	.word	0x0800e1cb
 800e0a8:	0800e15b 	.word	0x0800e15b
 800e0ac:	0800e11b 	.word	0x0800e11b
 800e0b0:	0800e05f 	.word	0x0800e05f
 800e0b4:	0800e05f 	.word	0x0800e05f
 800e0b8:	0800e05f 	.word	0x0800e05f
 800e0bc:	0800e0c1 	.word	0x0800e0c1
 800e0c0:	a910      	add	r1, sp, #64	@ 0x40
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f002 f9bc 	bl	8010440 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e0c8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e0cc:	f1b9 0f00 	cmp.w	r9, #0
 800e0d0:	f000 8116 	beq.w	800e300 <read_submessage_list+0x2b4>
 800e0d4:	f001 f808 	bl	800f0e8 <uxr_nanos>
 800e0d8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	468c      	mov	ip, r1
 800e0e4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e0e8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e0ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e0ee:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e0f0:	468c      	mov	ip, r1
 800e0f2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e0f6:	46e2      	mov	sl, ip
 800e0f8:	46bc      	mov	ip, r7
 800e0fa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e0fe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e102:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e106:	e9cd 7100 	strd	r7, r1, [sp]
 800e10a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e10e:	9106      	str	r1, [sp, #24]
 800e110:	4620      	mov	r0, r4
 800e112:	47c8      	blx	r9
 800e114:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e118:	e7a1      	b.n	800e05e <read_submessage_list+0x12>
 800e11a:	a910      	add	r1, sp, #64	@ 0x40
 800e11c:	4628      	mov	r0, r5
 800e11e:	f002 f97d 	bl	801041c <uxr_deserialize_HEARTBEAT_Payload>
 800e122:	2100      	movs	r1, #0
 800e124:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e128:	f000 fe70 	bl	800ee0c <uxr_stream_id_from_raw>
 800e12c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e130:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e132:	4639      	mov	r1, r7
 800e134:	f104 0008 	add.w	r0, r4, #8
 800e138:	f000 ff56 	bl	800efe8 <uxr_get_input_reliable_stream>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d08e      	beq.n	800e05e <read_submessage_list+0x12>
 800e140:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e144:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e148:	f007 f8c6 	bl	80152d8 <uxr_process_heartbeat>
 800e14c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e150:	463a      	mov	r2, r7
 800e152:	4620      	mov	r0, r4
 800e154:	f7ff fdf6 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e158:	e781      	b.n	800e05e <read_submessage_list+0x12>
 800e15a:	a910      	add	r1, sp, #64	@ 0x40
 800e15c:	4628      	mov	r0, r5
 800e15e:	f002 f935 	bl	80103cc <uxr_deserialize_ACKNACK_Payload>
 800e162:	2100      	movs	r1, #0
 800e164:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e168:	f000 fe50 	bl	800ee0c <uxr_stream_id_from_raw>
 800e16c:	900d      	str	r0, [sp, #52]	@ 0x34
 800e16e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e172:	f104 0008 	add.w	r0, r4, #8
 800e176:	f000 ff23 	bl	800efc0 <uxr_get_output_reliable_stream>
 800e17a:	4607      	mov	r7, r0
 800e17c:	2800      	cmp	r0, #0
 800e17e:	f43f af6e 	beq.w	800e05e <read_submessage_list+0x12>
 800e182:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e186:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e18a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e18e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e192:	b289      	uxth	r1, r1
 800e194:	f007 fbfa 	bl	801598c <uxr_process_acknack>
 800e198:	4638      	mov	r0, r7
 800e19a:	f007 fbb7 	bl	801590c <uxr_begin_output_nack_buffer_it>
 800e19e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e1a2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e1a6:	e006      	b.n	800e1b6 <read_submessage_list+0x16a>
 800e1a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e1aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e1ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e1b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e1b2:	6818      	ldr	r0, [r3, #0]
 800e1b4:	47c8      	blx	r9
 800e1b6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e1ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e1bc:	4651      	mov	r1, sl
 800e1be:	4638      	mov	r0, r7
 800e1c0:	f007 fba6 	bl	8015910 <uxr_next_reliable_nack_buffer_to_send>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d1ef      	bne.n	800e1a8 <read_submessage_list+0x15c>
 800e1c8:	e749      	b.n	800e05e <read_submessage_list+0x12>
 800e1ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e1ce:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e1d2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e1d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e1da:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e1de:	4651      	mov	r1, sl
 800e1e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e1e4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e1e8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e1ec:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e1f6:	f001 fe49 	bl	800fe8c <uxr_deserialize_BaseObjectRequest>
 800e1fa:	4650      	mov	r0, sl
 800e1fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800e1fe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e202:	f000 fdc7 	bl	800ed94 <uxr_parse_base_object_request>
 800e206:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e20a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e20c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e210:	9110      	str	r1, [sp, #64]	@ 0x40
 800e212:	3f04      	subs	r7, #4
 800e214:	f009 090e 	and.w	r9, r9, #14
 800e218:	b2bf      	uxth	r7, r7
 800e21a:	f1bb 0f00 	cmp.w	fp, #0
 800e21e:	d006      	beq.n	800e22e <read_submessage_list+0x1e2>
 800e220:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	4652      	mov	r2, sl
 800e228:	2300      	movs	r3, #0
 800e22a:	4620      	mov	r0, r4
 800e22c:	47d8      	blx	fp
 800e22e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e230:	b16a      	cbz	r2, 800e24e <read_submessage_list+0x202>
 800e232:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e234:	2100      	movs	r1, #0
 800e236:	3802      	subs	r0, #2
 800e238:	e002      	b.n	800e240 <read_submessage_list+0x1f4>
 800e23a:	3101      	adds	r1, #1
 800e23c:	4291      	cmp	r1, r2
 800e23e:	d006      	beq.n	800e24e <read_submessage_list+0x202>
 800e240:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e244:	4553      	cmp	r3, sl
 800e246:	d1f8      	bne.n	800e23a <read_submessage_list+0x1ee>
 800e248:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e24a:	2200      	movs	r2, #0
 800e24c:	545a      	strb	r2, [r3, r1]
 800e24e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e252:	9102      	str	r1, [sp, #8]
 800e254:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e256:	9101      	str	r1, [sp, #4]
 800e258:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e25a:	9100      	str	r1, [sp, #0]
 800e25c:	464b      	mov	r3, r9
 800e25e:	463a      	mov	r2, r7
 800e260:	4629      	mov	r1, r5
 800e262:	4620      	mov	r0, r4
 800e264:	f007 fc50 	bl	8015b08 <read_submessage_format>
 800e268:	e6f9      	b.n	800e05e <read_submessage_list+0x12>
 800e26a:	4629      	mov	r1, r5
 800e26c:	4620      	mov	r0, r4
 800e26e:	f7ff fea5 	bl	800dfbc <read_submessage_info>
 800e272:	e6f4      	b.n	800e05e <read_submessage_list+0x12>
 800e274:	2a00      	cmp	r2, #0
 800e276:	d03e      	beq.n	800e2f6 <read_submessage_list+0x2aa>
 800e278:	a910      	add	r1, sp, #64	@ 0x40
 800e27a:	4628      	mov	r0, r5
 800e27c:	f002 f802 	bl	8010284 <uxr_deserialize_STATUS_Payload>
 800e280:	a90e      	add	r1, sp, #56	@ 0x38
 800e282:	aa0d      	add	r2, sp, #52	@ 0x34
 800e284:	a810      	add	r0, sp, #64	@ 0x40
 800e286:	f000 fd85 	bl	800ed94 <uxr_parse_base_object_request>
 800e28a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e28e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e290:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e294:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e298:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e29a:	f1ba 0f00 	cmp.w	sl, #0
 800e29e:	d006      	beq.n	800e2ae <read_submessage_list+0x262>
 800e2a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	464b      	mov	r3, r9
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	47d0      	blx	sl
 800e2ae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e2b0:	2a00      	cmp	r2, #0
 800e2b2:	f43f aed4 	beq.w	800e05e <read_submessage_list+0x12>
 800e2b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	3802      	subs	r0, #2
 800e2bc:	e003      	b.n	800e2c6 <read_submessage_list+0x27a>
 800e2be:	3101      	adds	r1, #1
 800e2c0:	4291      	cmp	r1, r2
 800e2c2:	f43f aecc 	beq.w	800e05e <read_submessage_list+0x12>
 800e2c6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e2ca:	42bb      	cmp	r3, r7
 800e2cc:	d1f7      	bne.n	800e2be <read_submessage_list+0x272>
 800e2ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e2d0:	f803 9001 	strb.w	r9, [r3, r1]
 800e2d4:	e6c3      	b.n	800e05e <read_submessage_list+0x12>
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	f47f aec1 	bne.w	800e05e <read_submessage_list+0x12>
 800e2dc:	4629      	mov	r1, r5
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 fc9e 	bl	800ec20 <uxr_read_create_session_status>
 800e2e4:	e6bb      	b.n	800e05e <read_submessage_list+0x12>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f7ff fcf5 	bl	800dcd8 <read_submessage_get_info>
 800e2ee:	e6b6      	b.n	800e05e <read_submessage_list+0x12>
 800e2f0:	b017      	add	sp, #92	@ 0x5c
 800e2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fc9d 	bl	800ec38 <uxr_read_delete_session_status>
 800e2fe:	e6ae      	b.n	800e05e <read_submessage_list+0x12>
 800e300:	f000 fef2 	bl	800f0e8 <uxr_nanos>
 800e304:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e306:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e308:	464f      	mov	r7, r9
 800e30a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e30e:	1812      	adds	r2, r2, r0
 800e310:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e312:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e314:	eb47 0101 	adc.w	r1, r7, r1
 800e318:	464f      	mov	r7, r9
 800e31a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e31e:	463b      	mov	r3, r7
 800e320:	4684      	mov	ip, r0
 800e322:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e326:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e32a:	eb1c 0c00 	adds.w	ip, ip, r0
 800e32e:	464f      	mov	r7, r9
 800e330:	eb43 0307 	adc.w	r3, r3, r7
 800e334:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e338:	eb61 0303 	sbc.w	r3, r1, r3
 800e33c:	0fda      	lsrs	r2, r3, #31
 800e33e:	eb12 020c 	adds.w	r2, r2, ip
 800e342:	f143 0300 	adc.w	r3, r3, #0
 800e346:	0852      	lsrs	r2, r2, #1
 800e348:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e34c:	105b      	asrs	r3, r3, #1
 800e34e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e352:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e356:	e6dd      	b.n	800e114 <read_submessage_list+0xc8>
 800e358:	3b9aca00 	.word	0x3b9aca00

0800e35c <listen_message_reliably>:
 800e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	1e0b      	subs	r3, r1, #0
 800e362:	b09d      	sub	sp, #116	@ 0x74
 800e364:	bfb8      	it	lt
 800e366:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e36a:	4680      	mov	r8, r0
 800e36c:	9305      	str	r3, [sp, #20]
 800e36e:	f000 fea1 	bl	800f0b4 <uxr_millis>
 800e372:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e376:	4681      	mov	r9, r0
 800e378:	2a00      	cmp	r2, #0
 800e37a:	f000 80a1 	beq.w	800e4c0 <listen_message_reliably+0x164>
 800e37e:	2600      	movs	r6, #0
 800e380:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e384:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e388:	9303      	str	r3, [sp, #12]
 800e38a:	4630      	mov	r0, r6
 800e38c:	460f      	mov	r7, r1
 800e38e:	e00f      	b.n	800e3b0 <listen_message_reliably+0x54>
 800e390:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e394:	9903      	ldr	r1, [sp, #12]
 800e396:	455a      	cmp	r2, fp
 800e398:	f106 0601 	add.w	r6, r6, #1
 800e39c:	eb73 0101 	sbcs.w	r1, r3, r1
 800e3a0:	b2f0      	uxtb	r0, r6
 800e3a2:	da01      	bge.n	800e3a8 <listen_message_reliably+0x4c>
 800e3a4:	4693      	mov	fp, r2
 800e3a6:	9303      	str	r3, [sp, #12]
 800e3a8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e3ac:	4283      	cmp	r3, r0
 800e3ae:	d960      	bls.n	800e472 <listen_message_reliably+0x116>
 800e3b0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e3b4:	2102      	movs	r1, #2
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f000 fcfe 	bl	800edb8 <uxr_stream_id>
 800e3bc:	00e4      	lsls	r4, r4, #3
 800e3be:	f104 0520 	add.w	r5, r4, #32
 800e3c2:	4445      	add	r5, r8
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	463b      	mov	r3, r7
 800e3c8:	464a      	mov	r2, r9
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3ce:	f007 fa73 	bl	80158b8 <uxr_update_output_stream_heartbeat_timestamp>
 800e3d2:	eb08 0304 	add.w	r3, r8, r4
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d0da      	beq.n	800e390 <listen_message_reliably+0x34>
 800e3da:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e3de:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e3e2:	9304      	str	r3, [sp, #16]
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	f000 fcaf 	bl	800ed48 <uxr_session_header_offset>
 800e3ea:	3501      	adds	r5, #1
 800e3ec:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800e3f0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e3f4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2211      	movs	r2, #17
 800e3fc:	9000      	str	r0, [sp, #0]
 800e3fe:	a90c      	add	r1, sp, #48	@ 0x30
 800e400:	4650      	mov	r0, sl
 800e402:	f7fd fabb 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800e406:	2300      	movs	r3, #0
 800e408:	2205      	movs	r2, #5
 800e40a:	210b      	movs	r1, #11
 800e40c:	4650      	mov	r0, sl
 800e40e:	f000 fe0b 	bl	800f028 <uxr_buffer_submessage_header>
 800e412:	8968      	ldrh	r0, [r5, #10]
 800e414:	2101      	movs	r1, #1
 800e416:	f007 fc41 	bl	8015c9c <uxr_seq_num_add>
 800e41a:	892b      	ldrh	r3, [r5, #8]
 800e41c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e420:	4602      	mov	r2, r0
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e428:	a90a      	add	r1, sp, #40	@ 0x28
 800e42a:	4650      	mov	r0, sl
 800e42c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800e430:	f001 ffe0 	bl	80103f4 <uxr_serialize_HEARTBEAT_Payload>
 800e434:	2200      	movs	r2, #0
 800e436:	4611      	mov	r1, r2
 800e438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e43a:	4640      	mov	r0, r8
 800e43c:	f000 fc2e 	bl	800ec9c <uxr_stamp_session_header>
 800e440:	4650      	mov	r0, sl
 800e442:	f7fd fad9 	bl	800b9f8 <ucdr_buffer_length>
 800e446:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e44a:	4602      	mov	r2, r0
 800e44c:	a90c      	add	r1, sp, #48	@ 0x30
 800e44e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e452:	4444      	add	r4, r8
 800e454:	47a8      	blx	r5
 800e456:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e45a:	9903      	ldr	r1, [sp, #12]
 800e45c:	455a      	cmp	r2, fp
 800e45e:	f106 0601 	add.w	r6, r6, #1
 800e462:	eb73 0101 	sbcs.w	r1, r3, r1
 800e466:	b2f0      	uxtb	r0, r6
 800e468:	db9c      	blt.n	800e3a4 <listen_message_reliably+0x48>
 800e46a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e46e:	4283      	cmp	r3, r0
 800e470:	d89e      	bhi.n	800e3b0 <listen_message_reliably+0x54>
 800e472:	9a03      	ldr	r2, [sp, #12]
 800e474:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e478:	429a      	cmp	r2, r3
 800e47a:	bf08      	it	eq
 800e47c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800e480:	d01e      	beq.n	800e4c0 <listen_message_reliably+0x164>
 800e482:	ebab 0309 	sub.w	r3, fp, r9
 800e486:	9905      	ldr	r1, [sp, #20]
 800e488:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bf08      	it	eq
 800e490:	2301      	moveq	r3, #1
 800e492:	4299      	cmp	r1, r3
 800e494:	bfa8      	it	ge
 800e496:	4619      	movge	r1, r3
 800e498:	6894      	ldr	r4, [r2, #8]
 800e49a:	6810      	ldr	r0, [r2, #0]
 800e49c:	4689      	mov	r9, r1
 800e49e:	460b      	mov	r3, r1
 800e4a0:	aa08      	add	r2, sp, #32
 800e4a2:	a907      	add	r1, sp, #28
 800e4a4:	47a0      	blx	r4
 800e4a6:	b968      	cbnz	r0, 800e4c4 <listen_message_reliably+0x168>
 800e4a8:	9b05      	ldr	r3, [sp, #20]
 800e4aa:	eba3 0309 	sub.w	r3, r3, r9
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	9305      	str	r3, [sp, #20]
 800e4b2:	f73f af5c 	bgt.w	800e36e <listen_message_reliably+0x12>
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	b01d      	add	sp, #116	@ 0x74
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	9b05      	ldr	r3, [sp, #20]
 800e4c2:	e7e0      	b.n	800e486 <listen_message_reliably+0x12a>
 800e4c4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	a80c      	add	r0, sp, #48	@ 0x30
 800e4cc:	f7fd fa68 	bl	800b9a0 <ucdr_init_buffer>
 800e4d0:	2500      	movs	r5, #0
 800e4d2:	f10d 031a 	add.w	r3, sp, #26
 800e4d6:	aa06      	add	r2, sp, #24
 800e4d8:	a90c      	add	r1, sp, #48	@ 0x30
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f88d 5018 	strb.w	r5, [sp, #24]
 800e4e0:	f000 fbf0 	bl	800ecc4 <uxr_read_session_header>
 800e4e4:	b918      	cbnz	r0, 800e4ee <listen_message_reliably+0x192>
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	b01d      	add	sp, #116	@ 0x74
 800e4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e4f4:	f000 fc8a 	bl	800ee0c <uxr_stream_id_from_raw>
 800e4f8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e4fc:	2d01      	cmp	r5, #1
 800e4fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e502:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e506:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e50a:	d04b      	beq.n	800e5a4 <listen_message_reliably+0x248>
 800e50c:	2d02      	cmp	r5, #2
 800e50e:	d00f      	beq.n	800e530 <listen_message_reliably+0x1d4>
 800e510:	2d00      	cmp	r5, #0
 800e512:	d1e8      	bne.n	800e4e6 <listen_message_reliably+0x18a>
 800e514:	4629      	mov	r1, r5
 800e516:	4628      	mov	r0, r5
 800e518:	f000 fc78 	bl	800ee0c <uxr_stream_id_from_raw>
 800e51c:	a90c      	add	r1, sp, #48	@ 0x30
 800e51e:	4602      	mov	r2, r0
 800e520:	4640      	mov	r0, r8
 800e522:	920a      	str	r2, [sp, #40]	@ 0x28
 800e524:	f7ff fd92 	bl	800e04c <read_submessage_list>
 800e528:	4620      	mov	r0, r4
 800e52a:	b01d      	add	sp, #116	@ 0x74
 800e52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e530:	4631      	mov	r1, r6
 800e532:	f108 0008 	add.w	r0, r8, #8
 800e536:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e53a:	f000 fd55 	bl	800efe8 <uxr_get_input_reliable_stream>
 800e53e:	4607      	mov	r7, r0
 800e540:	b338      	cbz	r0, 800e592 <listen_message_reliably+0x236>
 800e542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e544:	9203      	str	r2, [sp, #12]
 800e546:	a80c      	add	r0, sp, #48	@ 0x30
 800e548:	f7fd fa5a 	bl	800ba00 <ucdr_buffer_remaining>
 800e54c:	4603      	mov	r3, r0
 800e54e:	f10d 0019 	add.w	r0, sp, #25
 800e552:	9000      	str	r0, [sp, #0]
 800e554:	9a03      	ldr	r2, [sp, #12]
 800e556:	4651      	mov	r1, sl
 800e558:	4638      	mov	r0, r7
 800e55a:	f006 fdc3 	bl	80150e4 <uxr_receive_reliable_message>
 800e55e:	b1c0      	cbz	r0, 800e592 <listen_message_reliably+0x236>
 800e560:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e564:	b393      	cbz	r3, 800e5cc <listen_message_reliably+0x270>
 800e566:	ad14      	add	r5, sp, #80	@ 0x50
 800e568:	f04f 0a02 	mov.w	sl, #2
 800e56c:	e00a      	b.n	800e584 <listen_message_reliably+0x228>
 800e56e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800e572:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e576:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800e57a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e57c:	4629      	mov	r1, r5
 800e57e:	4640      	mov	r0, r8
 800e580:	f7ff fd64 	bl	800e04c <read_submessage_list>
 800e584:	2204      	movs	r2, #4
 800e586:	4629      	mov	r1, r5
 800e588:	4638      	mov	r0, r7
 800e58a:	f006 fe2b 	bl	80151e4 <uxr_next_input_reliable_buffer_available>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d1ed      	bne.n	800e56e <listen_message_reliably+0x212>
 800e592:	4640      	mov	r0, r8
 800e594:	4632      	mov	r2, r6
 800e596:	4649      	mov	r1, r9
 800e598:	f7ff fbd4 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e59c:	4620      	mov	r0, r4
 800e59e:	b01d      	add	sp, #116	@ 0x74
 800e5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a4:	4631      	mov	r1, r6
 800e5a6:	f108 0008 	add.w	r0, r8, #8
 800e5aa:	f000 fd13 	bl	800efd4 <uxr_get_input_best_effort_stream>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d099      	beq.n	800e4e6 <listen_message_reliably+0x18a>
 800e5b2:	4651      	mov	r1, sl
 800e5b4:	f006 fd02 	bl	8014fbc <uxr_receive_best_effort_message>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d094      	beq.n	800e4e6 <listen_message_reliably+0x18a>
 800e5bc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e5c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5c2:	a90c      	add	r1, sp, #48	@ 0x30
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	f7ff fd41 	bl	800e04c <read_submessage_list>
 800e5ca:	e78c      	b.n	800e4e6 <listen_message_reliably+0x18a>
 800e5cc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800e5d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5d2:	a90c      	add	r1, sp, #48	@ 0x30
 800e5d4:	4640      	mov	r0, r8
 800e5d6:	f7ff fd39 	bl	800e04c <read_submessage_list>
 800e5da:	e7c4      	b.n	800e566 <listen_message_reliably+0x20a>

0800e5dc <uxr_run_session_timeout>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	460d      	mov	r5, r1
 800e5e2:	f000 fd67 	bl	800f0b4 <uxr_millis>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f7ff fc71 	bl	800ded0 <uxr_flash_output_streams>
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	f7ff feb3 	bl	800e35c <listen_message_reliably>
 800e5f6:	f000 fd5d 	bl	800f0b4 <uxr_millis>
 800e5fa:	1b83      	subs	r3, r0, r6
 800e5fc:	1ae9      	subs	r1, r5, r3
 800e5fe:	2900      	cmp	r1, #0
 800e600:	dcf6      	bgt.n	800e5f0 <uxr_run_session_timeout+0x14>
 800e602:	f104 0008 	add.w	r0, r4, #8
 800e606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e60a:	f000 bcf7 	b.w	800effc <uxr_output_streams_confirmed>
 800e60e:	bf00      	nop

0800e610 <uxr_run_session_until_data>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	4604      	mov	r4, r0
 800e614:	460d      	mov	r5, r1
 800e616:	f000 fd4d 	bl	800f0b4 <uxr_millis>
 800e61a:	4606      	mov	r6, r0
 800e61c:	4620      	mov	r0, r4
 800e61e:	f7ff fc57 	bl	800ded0 <uxr_flash_output_streams>
 800e622:	2300      	movs	r3, #0
 800e624:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e628:	4629      	mov	r1, r5
 800e62a:	e005      	b.n	800e638 <uxr_run_session_until_data+0x28>
 800e62c:	f000 fd42 	bl	800f0b4 <uxr_millis>
 800e630:	1b83      	subs	r3, r0, r6
 800e632:	1ae9      	subs	r1, r5, r3
 800e634:	2900      	cmp	r1, #0
 800e636:	dd07      	ble.n	800e648 <uxr_run_session_until_data+0x38>
 800e638:	4620      	mov	r0, r4
 800e63a:	f7ff fe8f 	bl	800e35c <listen_message_reliably>
 800e63e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e642:	2800      	cmp	r0, #0
 800e644:	d0f2      	beq.n	800e62c <uxr_run_session_until_data+0x1c>
 800e646:	bd70      	pop	{r4, r5, r6, pc}
 800e648:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e64c:	bd70      	pop	{r4, r5, r6, pc}
 800e64e:	bf00      	nop

0800e650 <uxr_run_session_until_confirm_delivery>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	4606      	mov	r6, r0
 800e656:	460d      	mov	r5, r1
 800e658:	f000 fd2c 	bl	800f0b4 <uxr_millis>
 800e65c:	4607      	mov	r7, r0
 800e65e:	4630      	mov	r0, r6
 800e660:	f7ff fc36 	bl	800ded0 <uxr_flash_output_streams>
 800e664:	2d00      	cmp	r5, #0
 800e666:	f106 0808 	add.w	r8, r6, #8
 800e66a:	bfa8      	it	ge
 800e66c:	462c      	movge	r4, r5
 800e66e:	da07      	bge.n	800e680 <uxr_run_session_until_confirm_delivery+0x30>
 800e670:	e00e      	b.n	800e690 <uxr_run_session_until_confirm_delivery+0x40>
 800e672:	f7ff fe73 	bl	800e35c <listen_message_reliably>
 800e676:	f000 fd1d 	bl	800f0b4 <uxr_millis>
 800e67a:	1bc3      	subs	r3, r0, r7
 800e67c:	1aec      	subs	r4, r5, r3
 800e67e:	d407      	bmi.n	800e690 <uxr_run_session_until_confirm_delivery+0x40>
 800e680:	4640      	mov	r0, r8
 800e682:	f000 fcbb 	bl	800effc <uxr_output_streams_confirmed>
 800e686:	4603      	mov	r3, r0
 800e688:	4621      	mov	r1, r4
 800e68a:	4630      	mov	r0, r6
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d0f0      	beq.n	800e672 <uxr_run_session_until_confirm_delivery+0x22>
 800e690:	4640      	mov	r0, r8
 800e692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e696:	f000 bcb1 	b.w	800effc <uxr_output_streams_confirmed>
 800e69a:	bf00      	nop

0800e69c <uxr_run_session_until_all_status>:
 800e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	9c08      	ldr	r4, [sp, #32]
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	4691      	mov	r9, r2
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	f7ff fc11 	bl	800ded0 <uxr_flash_output_streams>
 800e6ae:	b124      	cbz	r4, 800e6ba <uxr_run_session_until_all_status+0x1e>
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	21ff      	movs	r1, #255	@ 0xff
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f008 ffe1 	bl	801767c <memset>
 800e6ba:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800e6be:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e6c0:	f000 fcf8 	bl	800f0b4 <uxr_millis>
 800e6c4:	3d01      	subs	r5, #1
 800e6c6:	f1a9 0902 	sub.w	r9, r9, #2
 800e6ca:	4680      	mov	r8, r0
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff fe44 	bl	800e35c <listen_message_reliably>
 800e6d4:	f000 fcee 	bl	800f0b4 <uxr_millis>
 800e6d8:	eba0 0008 	sub.w	r0, r0, r8
 800e6dc:	1a39      	subs	r1, r7, r0
 800e6de:	b344      	cbz	r4, 800e732 <uxr_run_session_until_all_status+0x96>
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	46ac      	mov	ip, r5
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e002      	b.n	800e6ee <uxr_run_session_until_all_status+0x52>
 800e6e8:	42a3      	cmp	r3, r4
 800e6ea:	d20d      	bcs.n	800e708 <uxr_run_session_until_all_status+0x6c>
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e6f2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800e6f6:	d1f7      	bne.n	800e6e8 <uxr_run_session_until_all_status+0x4c>
 800e6f8:	42a3      	cmp	r3, r4
 800e6fa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e6fe:	d213      	bcs.n	800e728 <uxr_run_session_until_all_status+0x8c>
 800e700:	2a00      	cmp	r2, #0
 800e702:	d0f3      	beq.n	800e6ec <uxr_run_session_until_all_status+0x50>
 800e704:	2900      	cmp	r1, #0
 800e706:	dce2      	bgt.n	800e6ce <uxr_run_session_until_all_status+0x32>
 800e708:	2300      	movs	r3, #0
 800e70a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e70c:	442c      	add	r4, r5
 800e70e:	e001      	b.n	800e714 <uxr_run_session_until_all_status+0x78>
 800e710:	2b01      	cmp	r3, #1
 800e712:	d812      	bhi.n	800e73a <uxr_run_session_until_all_status+0x9e>
 800e714:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e718:	4284      	cmp	r4, r0
 800e71a:	d1f9      	bne.n	800e710 <uxr_run_session_until_all_status+0x74>
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	bf8c      	ite	hi
 800e720:	2000      	movhi	r0, #0
 800e722:	2001      	movls	r0, #1
 800e724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e728:	2900      	cmp	r1, #0
 800e72a:	dded      	ble.n	800e708 <uxr_run_session_until_all_status+0x6c>
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	d1ce      	bne.n	800e6ce <uxr_run_session_until_all_status+0x32>
 800e730:	e7ea      	b.n	800e708 <uxr_run_session_until_all_status+0x6c>
 800e732:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800e734:	2001      	movs	r0, #1
 800e736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e73a:	2000      	movs	r0, #0
 800e73c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e740 <wait_session_status>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	4604      	mov	r4, r0
 800e746:	b09d      	sub	sp, #116	@ 0x74
 800e748:	20ff      	movs	r0, #255	@ 0xff
 800e74a:	7160      	strb	r0, [r4, #5]
 800e74c:	9303      	str	r3, [sp, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f000 80b6 	beq.w	800e8c0 <wait_session_status+0x180>
 800e754:	468a      	mov	sl, r1
 800e756:	4691      	mov	r9, r2
 800e758:	f04f 0b00 	mov.w	fp, #0
 800e75c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e75e:	464a      	mov	r2, r9
 800e760:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e764:	4651      	mov	r1, sl
 800e766:	47a8      	blx	r5
 800e768:	f000 fca4 	bl	800f0b4 <uxr_millis>
 800e76c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e770:	4605      	mov	r5, r0
 800e772:	e009      	b.n	800e788 <wait_session_status+0x48>
 800e774:	f000 fc9e 	bl	800f0b4 <uxr_millis>
 800e778:	1b40      	subs	r0, r0, r5
 800e77a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dd40      	ble.n	800e804 <wait_session_status+0xc4>
 800e782:	7960      	ldrb	r0, [r4, #5]
 800e784:	28ff      	cmp	r0, #255	@ 0xff
 800e786:	d145      	bne.n	800e814 <wait_session_status+0xd4>
 800e788:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e78a:	a908      	add	r1, sp, #32
 800e78c:	6896      	ldr	r6, [r2, #8]
 800e78e:	6810      	ldr	r0, [r2, #0]
 800e790:	aa09      	add	r2, sp, #36	@ 0x24
 800e792:	47b0      	blx	r6
 800e794:	2800      	cmp	r0, #0
 800e796:	d0ed      	beq.n	800e774 <wait_session_status+0x34>
 800e798:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e79c:	a80c      	add	r0, sp, #48	@ 0x30
 800e79e:	f7fd f8ff 	bl	800b9a0 <ucdr_init_buffer>
 800e7a2:	2600      	movs	r6, #0
 800e7a4:	f10d 031e 	add.w	r3, sp, #30
 800e7a8:	aa07      	add	r2, sp, #28
 800e7aa:	a90c      	add	r1, sp, #48	@ 0x30
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f88d 601c 	strb.w	r6, [sp, #28]
 800e7b2:	f000 fa87 	bl	800ecc4 <uxr_read_session_header>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d0dc      	beq.n	800e774 <wait_session_status+0x34>
 800e7ba:	4631      	mov	r1, r6
 800e7bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e7c0:	f000 fb24 	bl	800ee0c <uxr_stream_id_from_raw>
 800e7c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e7c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e7cc:	9302      	str	r3, [sp, #8]
 800e7ce:	2f01      	cmp	r7, #1
 800e7d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e7d4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e7d8:	d05c      	beq.n	800e894 <wait_session_status+0x154>
 800e7da:	2f02      	cmp	r7, #2
 800e7dc:	d020      	beq.n	800e820 <wait_session_status+0xe0>
 800e7de:	2f00      	cmp	r7, #0
 800e7e0:	d1c8      	bne.n	800e774 <wait_session_status+0x34>
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f000 fb11 	bl	800ee0c <uxr_stream_id_from_raw>
 800e7ea:	a90c      	add	r1, sp, #48	@ 0x30
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f7ff fc2b 	bl	800e04c <read_submessage_list>
 800e7f6:	f000 fc5d 	bl	800f0b4 <uxr_millis>
 800e7fa:	1b40      	subs	r0, r0, r5
 800e7fc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e800:	2b00      	cmp	r3, #0
 800e802:	dcbe      	bgt.n	800e782 <wait_session_status+0x42>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	7960      	ldrb	r0, [r4, #5]
 800e808:	f10b 0b01 	add.w	fp, fp, #1
 800e80c:	455b      	cmp	r3, fp
 800e80e:	d001      	beq.n	800e814 <wait_session_status+0xd4>
 800e810:	28ff      	cmp	r0, #255	@ 0xff
 800e812:	d0a3      	beq.n	800e75c <wait_session_status+0x1c>
 800e814:	38ff      	subs	r0, #255	@ 0xff
 800e816:	bf18      	it	ne
 800e818:	2001      	movne	r0, #1
 800e81a:	b01d      	add	sp, #116	@ 0x74
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	4631      	mov	r1, r6
 800e828:	f104 0008 	add.w	r0, r4, #8
 800e82c:	f000 fbdc 	bl	800efe8 <uxr_get_input_reliable_stream>
 800e830:	4680      	mov	r8, r0
 800e832:	b348      	cbz	r0, 800e888 <wait_session_status+0x148>
 800e834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e836:	9205      	str	r2, [sp, #20]
 800e838:	a80c      	add	r0, sp, #48	@ 0x30
 800e83a:	f7fd f8e1 	bl	800ba00 <ucdr_buffer_remaining>
 800e83e:	4603      	mov	r3, r0
 800e840:	f10d 001d 	add.w	r0, sp, #29
 800e844:	9000      	str	r0, [sp, #0]
 800e846:	9a05      	ldr	r2, [sp, #20]
 800e848:	9902      	ldr	r1, [sp, #8]
 800e84a:	4640      	mov	r0, r8
 800e84c:	f006 fc4a 	bl	80150e4 <uxr_receive_reliable_message>
 800e850:	b1d0      	cbz	r0, 800e888 <wait_session_status+0x148>
 800e852:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d03a      	beq.n	800e8d0 <wait_session_status+0x190>
 800e85a:	9f04      	ldr	r7, [sp, #16]
 800e85c:	e00a      	b.n	800e874 <wait_session_status+0x134>
 800e85e:	f04f 0302 	mov.w	r3, #2
 800e862:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800e866:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e86a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e86e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e870:	f7ff fbec 	bl	800e04c <read_submessage_list>
 800e874:	a914      	add	r1, sp, #80	@ 0x50
 800e876:	2204      	movs	r2, #4
 800e878:	4640      	mov	r0, r8
 800e87a:	f006 fcb3 	bl	80151e4 <uxr_next_input_reliable_buffer_available>
 800e87e:	4603      	mov	r3, r0
 800e880:	a914      	add	r1, sp, #80	@ 0x50
 800e882:	4620      	mov	r0, r4
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1ea      	bne.n	800e85e <wait_session_status+0x11e>
 800e888:	9904      	ldr	r1, [sp, #16]
 800e88a:	4632      	mov	r2, r6
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7ff fa59 	bl	800dd44 <write_submessage_acknack.isra.0>
 800e892:	e76f      	b.n	800e774 <wait_session_status+0x34>
 800e894:	4631      	mov	r1, r6
 800e896:	f104 0008 	add.w	r0, r4, #8
 800e89a:	f000 fb9b 	bl	800efd4 <uxr_get_input_best_effort_stream>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f af68 	beq.w	800e774 <wait_session_status+0x34>
 800e8a4:	9902      	ldr	r1, [sp, #8]
 800e8a6:	f006 fb89 	bl	8014fbc <uxr_receive_best_effort_message>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	f43f af62 	beq.w	800e774 <wait_session_status+0x34>
 800e8b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e8b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8b6:	a90c      	add	r1, sp, #48	@ 0x30
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f7ff fbc7 	bl	800e04c <read_submessage_list>
 800e8be:	e759      	b.n	800e774 <wait_session_status+0x34>
 800e8c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e8c2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e8c6:	47a0      	blx	r4
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	b01d      	add	sp, #116	@ 0x74
 800e8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e8d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8d6:	a90c      	add	r1, sp, #48	@ 0x30
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f7ff fbb7 	bl	800e04c <read_submessage_list>
 800e8de:	e7bc      	b.n	800e85a <wait_session_status+0x11a>

0800e8e0 <uxr_delete_session_retries>:
 800e8e0:	b530      	push	{r4, r5, lr}
 800e8e2:	b08f      	sub	sp, #60	@ 0x3c
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460d      	mov	r5, r1
 800e8e8:	f000 fa2e 	bl	800ed48 <uxr_session_header_offset>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	2210      	movs	r2, #16
 800e8f0:	9000      	str	r0, [sp, #0]
 800e8f2:	a902      	add	r1, sp, #8
 800e8f4:	a806      	add	r0, sp, #24
 800e8f6:	f7fd f841 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800e8fa:	a906      	add	r1, sp, #24
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 f973 	bl	800ebe8 <uxr_buffer_delete_session>
 800e902:	2200      	movs	r2, #0
 800e904:	4611      	mov	r1, r2
 800e906:	9b06      	ldr	r3, [sp, #24]
 800e908:	4620      	mov	r0, r4
 800e90a:	f000 f9c7 	bl	800ec9c <uxr_stamp_session_header>
 800e90e:	a806      	add	r0, sp, #24
 800e910:	f7fd f872 	bl	800b9f8 <ucdr_buffer_length>
 800e914:	462b      	mov	r3, r5
 800e916:	4602      	mov	r2, r0
 800e918:	a902      	add	r1, sp, #8
 800e91a:	4620      	mov	r0, r4
 800e91c:	f7ff ff10 	bl	800e740 <wait_session_status>
 800e920:	b118      	cbz	r0, 800e92a <uxr_delete_session_retries+0x4a>
 800e922:	7960      	ldrb	r0, [r4, #5]
 800e924:	fab0 f080 	clz	r0, r0
 800e928:	0940      	lsrs	r0, r0, #5
 800e92a:	b00f      	add	sp, #60	@ 0x3c
 800e92c:	bd30      	pop	{r4, r5, pc}
 800e92e:	bf00      	nop

0800e930 <uxr_create_session>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	f100 0b08 	add.w	fp, r0, #8
 800e938:	b0ab      	sub	sp, #172	@ 0xac
 800e93a:	4604      	mov	r4, r0
 800e93c:	4658      	mov	r0, fp
 800e93e:	f000 fa99 	bl	800ee74 <uxr_reset_stream_storage>
 800e942:	4620      	mov	r0, r4
 800e944:	f000 fa00 	bl	800ed48 <uxr_session_header_offset>
 800e948:	2300      	movs	r3, #0
 800e94a:	9000      	str	r0, [sp, #0]
 800e94c:	221c      	movs	r2, #28
 800e94e:	a90b      	add	r1, sp, #44	@ 0x2c
 800e950:	a812      	add	r0, sp, #72	@ 0x48
 800e952:	f7fd f813 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800e956:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e958:	8a1a      	ldrh	r2, [r3, #16]
 800e95a:	3a04      	subs	r2, #4
 800e95c:	b292      	uxth	r2, r2
 800e95e:	a912      	add	r1, sp, #72	@ 0x48
 800e960:	4620      	mov	r0, r4
 800e962:	f000 f917 	bl	800eb94 <uxr_buffer_create_session>
 800e966:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e968:	4620      	mov	r0, r4
 800e96a:	f000 f983 	bl	800ec74 <uxr_stamp_create_session_header>
 800e96e:	a812      	add	r0, sp, #72	@ 0x48
 800e970:	f7fd f842 	bl	800b9f8 <ucdr_buffer_length>
 800e974:	23ff      	movs	r3, #255	@ 0xff
 800e976:	7163      	strb	r3, [r4, #5]
 800e978:	230a      	movs	r3, #10
 800e97a:	46da      	mov	sl, fp
 800e97c:	9303      	str	r3, [sp, #12]
 800e97e:	4683      	mov	fp, r0
 800e980:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e982:	465a      	mov	r2, fp
 800e984:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e988:	a90b      	add	r1, sp, #44	@ 0x2c
 800e98a:	47a8      	blx	r5
 800e98c:	f000 fb92 	bl	800f0b4 <uxr_millis>
 800e990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e994:	4605      	mov	r5, r0
 800e996:	e009      	b.n	800e9ac <uxr_create_session+0x7c>
 800e998:	f000 fb8c 	bl	800f0b4 <uxr_millis>
 800e99c:	1b40      	subs	r0, r0, r5
 800e99e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	7962      	ldrb	r2, [r4, #5]
 800e9a6:	dd38      	ble.n	800ea1a <uxr_create_session+0xea>
 800e9a8:	2aff      	cmp	r2, #255	@ 0xff
 800e9aa:	d13c      	bne.n	800ea26 <uxr_create_session+0xf6>
 800e9ac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e9ae:	a907      	add	r1, sp, #28
 800e9b0:	6896      	ldr	r6, [r2, #8]
 800e9b2:	6810      	ldr	r0, [r2, #0]
 800e9b4:	aa08      	add	r2, sp, #32
 800e9b6:	47b0      	blx	r6
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d0ed      	beq.n	800e998 <uxr_create_session+0x68>
 800e9bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e9c0:	a81a      	add	r0, sp, #104	@ 0x68
 800e9c2:	f7fc ffed 	bl	800b9a0 <ucdr_init_buffer>
 800e9c6:	2600      	movs	r6, #0
 800e9c8:	f10d 031a 	add.w	r3, sp, #26
 800e9cc:	aa06      	add	r2, sp, #24
 800e9ce:	a91a      	add	r1, sp, #104	@ 0x68
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f88d 6018 	strb.w	r6, [sp, #24]
 800e9d6:	f000 f975 	bl	800ecc4 <uxr_read_session_header>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d0dc      	beq.n	800e998 <uxr_create_session+0x68>
 800e9de:	4631      	mov	r1, r6
 800e9e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e9e4:	f000 fa12 	bl	800ee0c <uxr_stream_id_from_raw>
 800e9e8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e9ec:	2e01      	cmp	r6, #1
 800e9ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e9f2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e9f6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e9fa:	d053      	beq.n	800eaa4 <uxr_create_session+0x174>
 800e9fc:	2e02      	cmp	r6, #2
 800e9fe:	d018      	beq.n	800ea32 <uxr_create_session+0x102>
 800ea00:	2e00      	cmp	r6, #0
 800ea02:	d1c9      	bne.n	800e998 <uxr_create_session+0x68>
 800ea04:	4631      	mov	r1, r6
 800ea06:	4630      	mov	r0, r6
 800ea08:	f000 fa00 	bl	800ee0c <uxr_stream_id_from_raw>
 800ea0c:	a91a      	add	r1, sp, #104	@ 0x68
 800ea0e:	4602      	mov	r2, r0
 800ea10:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea12:	4620      	mov	r0, r4
 800ea14:	f7ff fb1a 	bl	800e04c <read_submessage_list>
 800ea18:	e7be      	b.n	800e998 <uxr_create_session+0x68>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	9303      	str	r3, [sp, #12]
 800ea20:	d001      	beq.n	800ea26 <uxr_create_session+0xf6>
 800ea22:	2aff      	cmp	r2, #255	@ 0xff
 800ea24:	d0ac      	beq.n	800e980 <uxr_create_session+0x50>
 800ea26:	2a00      	cmp	r2, #0
 800ea28:	d051      	beq.n	800eace <uxr_create_session+0x19e>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	b02b      	add	sp, #172	@ 0xac
 800ea2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea32:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ea36:	9304      	str	r3, [sp, #16]
 800ea38:	4639      	mov	r1, r7
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	f000 fad4 	bl	800efe8 <uxr_get_input_reliable_stream>
 800ea40:	4680      	mov	r8, r0
 800ea42:	b348      	cbz	r0, 800ea98 <uxr_create_session+0x168>
 800ea44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ea46:	9205      	str	r2, [sp, #20]
 800ea48:	a81a      	add	r0, sp, #104	@ 0x68
 800ea4a:	f7fc ffd9 	bl	800ba00 <ucdr_buffer_remaining>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	f10d 0019 	add.w	r0, sp, #25
 800ea54:	9000      	str	r0, [sp, #0]
 800ea56:	9a05      	ldr	r2, [sp, #20]
 800ea58:	4649      	mov	r1, r9
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	f006 fb42 	bl	80150e4 <uxr_receive_reliable_message>
 800ea60:	b1d0      	cbz	r0, 800ea98 <uxr_create_session+0x168>
 800ea62:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d038      	beq.n	800eadc <uxr_create_session+0x1ac>
 800ea6a:	9e04      	ldr	r6, [sp, #16]
 800ea6c:	e00a      	b.n	800ea84 <uxr_create_session+0x154>
 800ea6e:	f04f 0302 	mov.w	r3, #2
 800ea72:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800ea76:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800ea7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea80:	f7ff fae4 	bl	800e04c <read_submessage_list>
 800ea84:	a922      	add	r1, sp, #136	@ 0x88
 800ea86:	2204      	movs	r2, #4
 800ea88:	4640      	mov	r0, r8
 800ea8a:	f006 fbab 	bl	80151e4 <uxr_next_input_reliable_buffer_available>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	a922      	add	r1, sp, #136	@ 0x88
 800ea92:	4620      	mov	r0, r4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1ea      	bne.n	800ea6e <uxr_create_session+0x13e>
 800ea98:	9904      	ldr	r1, [sp, #16]
 800ea9a:	463a      	mov	r2, r7
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f7ff f951 	bl	800dd44 <write_submessage_acknack.isra.0>
 800eaa2:	e779      	b.n	800e998 <uxr_create_session+0x68>
 800eaa4:	4639      	mov	r1, r7
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	f000 fa94 	bl	800efd4 <uxr_get_input_best_effort_stream>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f af73 	beq.w	800e998 <uxr_create_session+0x68>
 800eab2:	4649      	mov	r1, r9
 800eab4:	f006 fa82 	bl	8014fbc <uxr_receive_best_effort_message>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	f43f af6d 	beq.w	800e998 <uxr_create_session+0x68>
 800eabe:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800eac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eac4:	a91a      	add	r1, sp, #104	@ 0x68
 800eac6:	4620      	mov	r0, r4
 800eac8:	f7ff fac0 	bl	800e04c <read_submessage_list>
 800eacc:	e764      	b.n	800e998 <uxr_create_session+0x68>
 800eace:	4650      	mov	r0, sl
 800ead0:	f000 f9d0 	bl	800ee74 <uxr_reset_stream_storage>
 800ead4:	2001      	movs	r0, #1
 800ead6:	b02b      	add	sp, #172	@ 0xac
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800eae0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eae2:	a91a      	add	r1, sp, #104	@ 0x68
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7ff fab1 	bl	800e04c <read_submessage_list>
 800eaea:	e7be      	b.n	800ea6a <uxr_create_session+0x13a>

0800eaec <uxr_prepare_stream_to_write_submessage>:
 800eaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf0:	b082      	sub	sp, #8
 800eaf2:	4682      	mov	sl, r0
 800eaf4:	4610      	mov	r0, r2
 800eaf6:	4615      	mov	r5, r2
 800eaf8:	461e      	mov	r6, r3
 800eafa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800eafe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800eb02:	9101      	str	r1, [sp, #4]
 800eb04:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800eb08:	f000 face 	bl	800f0a8 <uxr_submessage_padding>
 800eb0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb10:	f105 0904 	add.w	r9, r5, #4
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	4481      	add	r9, r0
 800eb18:	d01d      	beq.n	800eb56 <uxr_prepare_stream_to_write_submessage+0x6a>
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d116      	bne.n	800eb4c <uxr_prepare_stream_to_write_submessage+0x60>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	f10a 0008 	add.w	r0, sl, #8
 800eb24:	f000 fa4c 	bl	800efc0 <uxr_get_output_reliable_stream>
 800eb28:	4604      	mov	r4, r0
 800eb2a:	b158      	cbz	r0, 800eb44 <uxr_prepare_stream_to_write_submessage+0x58>
 800eb2c:	4649      	mov	r1, r9
 800eb2e:	4632      	mov	r2, r6
 800eb30:	f006 fd14 	bl	801555c <uxr_prepare_reliable_buffer_to_write>
 800eb34:	4604      	mov	r4, r0
 800eb36:	b12c      	cbz	r4, 800eb44 <uxr_prepare_stream_to_write_submessage+0x58>
 800eb38:	4643      	mov	r3, r8
 800eb3a:	b2aa      	uxth	r2, r5
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f000 fa72 	bl	800f028 <uxr_buffer_submessage_header>
 800eb44:	4620      	mov	r0, r4
 800eb46:	b002      	add	sp, #8
 800eb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4c:	2400      	movs	r4, #0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	b002      	add	sp, #8
 800eb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb56:	4621      	mov	r1, r4
 800eb58:	f10a 0008 	add.w	r0, sl, #8
 800eb5c:	f000 fa28 	bl	800efb0 <uxr_get_output_best_effort_stream>
 800eb60:	4604      	mov	r4, r0
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d0ee      	beq.n	800eb44 <uxr_prepare_stream_to_write_submessage+0x58>
 800eb66:	4649      	mov	r1, r9
 800eb68:	4632      	mov	r2, r6
 800eb6a:	f006 fc27 	bl	80153bc <uxr_prepare_best_effort_buffer_to_write>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	e7e1      	b.n	800eb36 <uxr_prepare_stream_to_write_submessage+0x4a>
 800eb72:	bf00      	nop

0800eb74 <uxr_init_session_info>:
 800eb74:	0e13      	lsrs	r3, r2, #24
 800eb76:	7043      	strb	r3, [r0, #1]
 800eb78:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800eb7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800eb80:	7001      	strb	r1, [r0, #0]
 800eb82:	70c3      	strb	r3, [r0, #3]
 800eb84:	2109      	movs	r1, #9
 800eb86:	23ff      	movs	r3, #255	@ 0xff
 800eb88:	f880 c002 	strb.w	ip, [r0, #2]
 800eb8c:	7102      	strb	r2, [r0, #4]
 800eb8e:	80c1      	strh	r1, [r0, #6]
 800eb90:	7143      	strb	r3, [r0, #5]
 800eb92:	4770      	bx	lr

0800eb94 <uxr_buffer_create_session>:
 800eb94:	b530      	push	{r4, r5, lr}
 800eb96:	b089      	sub	sp, #36	@ 0x24
 800eb98:	2300      	movs	r3, #0
 800eb9a:	4d12      	ldr	r5, [pc, #72]	@ (800ebe4 <uxr_buffer_create_session+0x50>)
 800eb9c:	9307      	str	r3, [sp, #28]
 800eb9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800eba2:	2201      	movs	r2, #1
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	80c2      	strh	r2, [r0, #6]
 800eba8:	f88d 2004 	strb.w	r2, [sp, #4]
 800ebac:	682a      	ldr	r2, [r5, #0]
 800ebae:	9200      	str	r2, [sp, #0]
 800ebb0:	88aa      	ldrh	r2, [r5, #4]
 800ebb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ebb6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800ebba:	9202      	str	r2, [sp, #8]
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	7802      	ldrb	r2, [r0, #0]
 800ebc0:	9303      	str	r3, [sp, #12]
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	f88d 200c 	strb.w	r2, [sp, #12]
 800ebc8:	4620      	mov	r0, r4
 800ebca:	2210      	movs	r2, #16
 800ebcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ebd0:	9306      	str	r3, [sp, #24]
 800ebd2:	f000 fa29 	bl	800f028 <uxr_buffer_submessage_header>
 800ebd6:	4669      	mov	r1, sp
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f001 fa6d 	bl	80100b8 <uxr_serialize_CREATE_CLIENT_Payload>
 800ebde:	b009      	add	sp, #36	@ 0x24
 800ebe0:	bd30      	pop	{r4, r5, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0801866c 	.word	0x0801866c

0800ebe8 <uxr_buffer_delete_session>:
 800ebe8:	b510      	push	{r4, lr}
 800ebea:	4b0c      	ldr	r3, [pc, #48]	@ (800ec1c <uxr_buffer_delete_session+0x34>)
 800ebec:	b082      	sub	sp, #8
 800ebee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ebf2:	f8ad c006 	strh.w	ip, [sp, #6]
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebfe:	80c2      	strh	r2, [r0, #6]
 800ec00:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ec04:	2204      	movs	r2, #4
 800ec06:	2300      	movs	r3, #0
 800ec08:	2103      	movs	r1, #3
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 fa0c 	bl	800f028 <uxr_buffer_submessage_header>
 800ec10:	a901      	add	r1, sp, #4
 800ec12:	4620      	mov	r0, r4
 800ec14:	f001 faf6 	bl	8010204 <uxr_serialize_DELETE_Payload>
 800ec18:	b002      	add	sp, #8
 800ec1a:	bd10      	pop	{r4, pc}
 800ec1c:	0801866c 	.word	0x0801866c

0800ec20 <uxr_read_create_session_status>:
 800ec20:	b510      	push	{r4, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	4604      	mov	r4, r0
 800ec26:	4608      	mov	r0, r1
 800ec28:	a901      	add	r1, sp, #4
 800ec2a:	f001 fafb 	bl	8010224 <uxr_deserialize_STATUS_AGENT_Payload>
 800ec2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ec32:	7163      	strb	r3, [r4, #5]
 800ec34:	b008      	add	sp, #32
 800ec36:	bd10      	pop	{r4, pc}

0800ec38 <uxr_read_delete_session_status>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	b084      	sub	sp, #16
 800ec3e:	4608      	mov	r0, r1
 800ec40:	a902      	add	r1, sp, #8
 800ec42:	f001 fb1f 	bl	8010284 <uxr_deserialize_STATUS_Payload>
 800ec46:	88e3      	ldrh	r3, [r4, #6]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d001      	beq.n	800ec50 <uxr_read_delete_session_status+0x18>
 800ec4c:	b004      	add	sp, #16
 800ec4e:	bd10      	pop	{r4, pc}
 800ec50:	f10d 000a 	add.w	r0, sp, #10
 800ec54:	f7fe fffc 	bl	800dc50 <uxr_object_id_from_raw>
 800ec58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ec5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ec60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	bf04      	itt	eq
 800ec6a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ec6e:	7163      	strbeq	r3, [r4, #5]
 800ec70:	b004      	add	sp, #16
 800ec72:	bd10      	pop	{r4, pc}

0800ec74 <uxr_stamp_create_session_header>:
 800ec74:	b510      	push	{r4, lr}
 800ec76:	2208      	movs	r2, #8
 800ec78:	b08a      	sub	sp, #40	@ 0x28
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	eb0d 0002 	add.w	r0, sp, r2
 800ec80:	f7fc fe8e 	bl	800b9a0 <ucdr_init_buffer>
 800ec84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec88:	9400      	str	r4, [sp, #0]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800ec92:	a802      	add	r0, sp, #8
 800ec94:	f000 fbc2 	bl	800f41c <uxr_serialize_message_header>
 800ec98:	b00a      	add	sp, #40	@ 0x28
 800ec9a:	bd10      	pop	{r4, pc}

0800ec9c <uxr_stamp_session_header>:
 800ec9c:	b530      	push	{r4, r5, lr}
 800ec9e:	b08d      	sub	sp, #52	@ 0x34
 800eca0:	4604      	mov	r4, r0
 800eca2:	460d      	mov	r5, r1
 800eca4:	9203      	str	r2, [sp, #12]
 800eca6:	4619      	mov	r1, r3
 800eca8:	a804      	add	r0, sp, #16
 800ecaa:	2208      	movs	r2, #8
 800ecac:	f7fc fe78 	bl	800b9a0 <ucdr_init_buffer>
 800ecb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb4:	9b03      	ldr	r3, [sp, #12]
 800ecb6:	9400      	str	r4, [sp, #0]
 800ecb8:	462a      	mov	r2, r5
 800ecba:	a804      	add	r0, sp, #16
 800ecbc:	f000 fbae 	bl	800f41c <uxr_serialize_message_header>
 800ecc0:	b00d      	add	sp, #52	@ 0x34
 800ecc2:	bd30      	pop	{r4, r5, pc}

0800ecc4 <uxr_read_session_header>:
 800ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc8:	4607      	mov	r7, r0
 800ecca:	b084      	sub	sp, #16
 800eccc:	4608      	mov	r0, r1
 800ecce:	460c      	mov	r4, r1
 800ecd0:	4615      	mov	r5, r2
 800ecd2:	461e      	mov	r6, r3
 800ecd4:	f7fc fe94 	bl	800ba00 <ucdr_buffer_remaining>
 800ecd8:	2808      	cmp	r0, #8
 800ecda:	d803      	bhi.n	800ece4 <uxr_read_session_header+0x20>
 800ecdc:	2000      	movs	r0, #0
 800ecde:	b004      	add	sp, #16
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece4:	f10d 080c 	add.w	r8, sp, #12
 800ece8:	4633      	mov	r3, r6
 800ecea:	462a      	mov	r2, r5
 800ecec:	f8cd 8000 	str.w	r8, [sp]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f10d 010b 	add.w	r1, sp, #11
 800ecf6:	f000 fbaf 	bl	800f458 <uxr_deserialize_message_header>
 800ecfa:	783a      	ldrb	r2, [r7, #0]
 800ecfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d1eb      	bne.n	800ecdc <uxr_read_session_header+0x18>
 800ed04:	061b      	lsls	r3, r3, #24
 800ed06:	d41c      	bmi.n	800ed42 <uxr_read_session_header+0x7e>
 800ed08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ed0c:	787b      	ldrb	r3, [r7, #1]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d003      	beq.n	800ed1a <uxr_read_session_header+0x56>
 800ed12:	2001      	movs	r0, #1
 800ed14:	f080 0001 	eor.w	r0, r0, #1
 800ed18:	e7e1      	b.n	800ecde <uxr_read_session_header+0x1a>
 800ed1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ed1e:	78bb      	ldrb	r3, [r7, #2]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	f107 0102 	add.w	r1, r7, #2
 800ed26:	d1f4      	bne.n	800ed12 <uxr_read_session_header+0x4e>
 800ed28:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ed2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d1ee      	bne.n	800ed12 <uxr_read_session_header+0x4e>
 800ed34:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ed38:	784b      	ldrb	r3, [r1, #1]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d1e9      	bne.n	800ed12 <uxr_read_session_header+0x4e>
 800ed3e:	2000      	movs	r0, #0
 800ed40:	e7e8      	b.n	800ed14 <uxr_read_session_header+0x50>
 800ed42:	2001      	movs	r0, #1
 800ed44:	e7cb      	b.n	800ecde <uxr_read_session_header+0x1a>
 800ed46:	bf00      	nop

0800ed48 <uxr_session_header_offset>:
 800ed48:	f990 3000 	ldrsb.w	r3, [r0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	bfac      	ite	ge
 800ed50:	2008      	movge	r0, #8
 800ed52:	2004      	movlt	r0, #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <uxr_init_base_object_request>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	88c3      	ldrh	r3, [r0, #6]
 800ed5c:	b082      	sub	sp, #8
 800ed5e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ed62:	9101      	str	r1, [sp, #4]
 800ed64:	f1a3 010a 	sub.w	r1, r3, #10
 800ed68:	b289      	uxth	r1, r1
 800ed6a:	42a1      	cmp	r1, r4
 800ed6c:	d80e      	bhi.n	800ed8c <uxr_init_base_object_request+0x34>
 800ed6e:	3301      	adds	r3, #1
 800ed70:	b29c      	uxth	r4, r3
 800ed72:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	80c4      	strh	r4, [r0, #6]
 800ed7a:	9801      	ldr	r0, [sp, #4]
 800ed7c:	7011      	strb	r1, [r2, #0]
 800ed7e:	7053      	strb	r3, [r2, #1]
 800ed80:	1c91      	adds	r1, r2, #2
 800ed82:	f7fe ff79 	bl	800dc78 <uxr_object_id_to_raw>
 800ed86:	4620      	mov	r0, r4
 800ed88:	b002      	add	sp, #8
 800ed8a:	bd10      	pop	{r4, pc}
 800ed8c:	230a      	movs	r3, #10
 800ed8e:	2100      	movs	r1, #0
 800ed90:	461c      	mov	r4, r3
 800ed92:	e7f1      	b.n	800ed78 <uxr_init_base_object_request+0x20>

0800ed94 <uxr_parse_base_object_request>:
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	4604      	mov	r4, r0
 800ed98:	3002      	adds	r0, #2
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	4616      	mov	r6, r2
 800ed9e:	f7fe ff57 	bl	800dc50 <uxr_object_id_from_raw>
 800eda2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800eda6:	8028      	strh	r0, [r5, #0]
 800eda8:	806b      	strh	r3, [r5, #2]
 800edaa:	7822      	ldrb	r2, [r4, #0]
 800edac:	7863      	ldrb	r3, [r4, #1]
 800edae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800edb2:	8033      	strh	r3, [r6, #0]
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
 800edb6:	bf00      	nop

0800edb8 <uxr_stream_id>:
 800edb8:	2901      	cmp	r1, #1
 800edba:	b082      	sub	sp, #8
 800edbc:	d01d      	beq.n	800edfa <uxr_stream_id+0x42>
 800edbe:	2902      	cmp	r1, #2
 800edc0:	f04f 0c00 	mov.w	ip, #0
 800edc4:	d01e      	beq.n	800ee04 <uxr_stream_id+0x4c>
 800edc6:	2300      	movs	r3, #0
 800edc8:	f36c 0307 	bfi	r3, ip, #0, #8
 800edcc:	f360 230f 	bfi	r3, r0, #8, #8
 800edd0:	f361 4317 	bfi	r3, r1, #16, #8
 800edd4:	f362 631f 	bfi	r3, r2, #24, #8
 800edd8:	b2da      	uxtb	r2, r3
 800edda:	2000      	movs	r0, #0
 800eddc:	f362 0007 	bfi	r0, r2, #0, #8
 800ede0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ede4:	f362 200f 	bfi	r0, r2, #8, #8
 800ede8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800edec:	f362 4017 	bfi	r0, r2, #16, #8
 800edf0:	0e1b      	lsrs	r3, r3, #24
 800edf2:	f363 601f 	bfi	r0, r3, #24, #8
 800edf6:	b002      	add	sp, #8
 800edf8:	4770      	bx	lr
 800edfa:	f100 0c01 	add.w	ip, r0, #1
 800edfe:	fa5f fc8c 	uxtb.w	ip, ip
 800ee02:	e7e0      	b.n	800edc6 <uxr_stream_id+0xe>
 800ee04:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ee08:	e7dd      	b.n	800edc6 <uxr_stream_id+0xe>
 800ee0a:	bf00      	nop

0800ee0c <uxr_stream_id_from_raw>:
 800ee0c:	b082      	sub	sp, #8
 800ee0e:	b130      	cbz	r0, 800ee1e <uxr_stream_id_from_raw+0x12>
 800ee10:	0603      	lsls	r3, r0, #24
 800ee12:	d420      	bmi.n	800ee56 <uxr_stream_id_from_raw+0x4a>
 800ee14:	1e42      	subs	r2, r0, #1
 800ee16:	b2d2      	uxtb	r2, r2
 800ee18:	f04f 0c01 	mov.w	ip, #1
 800ee1c:	e001      	b.n	800ee22 <uxr_stream_id_from_raw+0x16>
 800ee1e:	4684      	mov	ip, r0
 800ee20:	4602      	mov	r2, r0
 800ee22:	2300      	movs	r3, #0
 800ee24:	f360 0307 	bfi	r3, r0, #0, #8
 800ee28:	f362 230f 	bfi	r3, r2, #8, #8
 800ee2c:	f36c 4317 	bfi	r3, ip, #16, #8
 800ee30:	f361 631f 	bfi	r3, r1, #24, #8
 800ee34:	b2da      	uxtb	r2, r3
 800ee36:	2000      	movs	r0, #0
 800ee38:	f362 0007 	bfi	r0, r2, #0, #8
 800ee3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ee40:	f362 200f 	bfi	r0, r2, #8, #8
 800ee44:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ee48:	f362 4017 	bfi	r0, r2, #16, #8
 800ee4c:	0e1b      	lsrs	r3, r3, #24
 800ee4e:	f363 601f 	bfi	r0, r3, #24, #8
 800ee52:	b002      	add	sp, #8
 800ee54:	4770      	bx	lr
 800ee56:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ee5a:	f04f 0c02 	mov.w	ip, #2
 800ee5e:	e7e0      	b.n	800ee22 <uxr_stream_id_from_raw+0x16>

0800ee60 <uxr_init_stream_storage>:
 800ee60:	2300      	movs	r3, #0
 800ee62:	7403      	strb	r3, [r0, #16]
 800ee64:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ee68:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ee6c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop

0800ee74 <uxr_reset_stream_storage>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	7c03      	ldrb	r3, [r0, #16]
 800ee78:	4604      	mov	r4, r0
 800ee7a:	b153      	cbz	r3, 800ee92 <uxr_reset_stream_storage+0x1e>
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	2500      	movs	r5, #0
 800ee80:	4630      	mov	r0, r6
 800ee82:	f006 fa95 	bl	80153b0 <uxr_reset_output_best_effort_stream>
 800ee86:	7c23      	ldrb	r3, [r4, #16]
 800ee88:	3501      	adds	r5, #1
 800ee8a:	42ab      	cmp	r3, r5
 800ee8c:	f106 0610 	add.w	r6, r6, #16
 800ee90:	d8f6      	bhi.n	800ee80 <uxr_reset_stream_storage+0xc>
 800ee92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ee96:	b163      	cbz	r3, 800eeb2 <uxr_reset_stream_storage+0x3e>
 800ee98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee9c:	2500      	movs	r5, #0
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f006 f888 	bl	8014fb4 <uxr_reset_input_best_effort_stream>
 800eea4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eea8:	3501      	adds	r5, #1
 800eeaa:	42ab      	cmp	r3, r5
 800eeac:	f106 0602 	add.w	r6, r6, #2
 800eeb0:	d8f5      	bhi.n	800ee9e <uxr_reset_stream_storage+0x2a>
 800eeb2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800eeb6:	b163      	cbz	r3, 800eed2 <uxr_reset_stream_storage+0x5e>
 800eeb8:	f104 0618 	add.w	r6, r4, #24
 800eebc:	2500      	movs	r5, #0
 800eebe:	4630      	mov	r0, r6
 800eec0:	f006 fb22 	bl	8015508 <uxr_reset_output_reliable_stream>
 800eec4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800eec8:	3501      	adds	r5, #1
 800eeca:	42ab      	cmp	r3, r5
 800eecc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800eed0:	d8f5      	bhi.n	800eebe <uxr_reset_stream_storage+0x4a>
 800eed2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800eed6:	b163      	cbz	r3, 800eef2 <uxr_reset_stream_storage+0x7e>
 800eed8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800eedc:	2500      	movs	r5, #0
 800eede:	4630      	mov	r0, r6
 800eee0:	f006 f8dc 	bl	801509c <uxr_reset_input_reliable_stream>
 800eee4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800eee8:	3501      	adds	r5, #1
 800eeea:	42ab      	cmp	r3, r5
 800eeec:	f106 0618 	add.w	r6, r6, #24
 800eef0:	d8f5      	bhi.n	800eede <uxr_reset_stream_storage+0x6a>
 800eef2:	bd70      	pop	{r4, r5, r6, pc}

0800eef4 <uxr_add_output_best_effort_buffer>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	7c04      	ldrb	r4, [r0, #16]
 800eef8:	f104 0c01 	add.w	ip, r4, #1
 800eefc:	b082      	sub	sp, #8
 800eefe:	f880 c010 	strb.w	ip, [r0, #16]
 800ef02:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ef06:	f006 fa49 	bl	801539c <uxr_init_output_best_effort_stream>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	4620      	mov	r0, r4
 800ef10:	b002      	add	sp, #8
 800ef12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef16:	f7ff bf4f 	b.w	800edb8 <uxr_stream_id>
 800ef1a:	bf00      	nop

0800ef1c <uxr_add_output_reliable_buffer>:
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	4684      	mov	ip, r0
 800ef22:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ef26:	9000      	str	r0, [sp, #0]
 800ef28:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ef2c:	2028      	movs	r0, #40	@ 0x28
 800ef2e:	fb00 c004 	mla	r0, r0, r4, ip
 800ef32:	f104 0e01 	add.w	lr, r4, #1
 800ef36:	3018      	adds	r0, #24
 800ef38:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ef3c:	f006 faac 	bl	8015498 <uxr_init_output_reliable_stream>
 800ef40:	2201      	movs	r2, #1
 800ef42:	2102      	movs	r1, #2
 800ef44:	4620      	mov	r0, r4
 800ef46:	b004      	add	sp, #16
 800ef48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef4c:	f7ff bf34 	b.w	800edb8 <uxr_stream_id>

0800ef50 <uxr_add_input_best_effort_buffer>:
 800ef50:	b510      	push	{r4, lr}
 800ef52:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ef56:	4603      	mov	r3, r0
 800ef58:	1c62      	adds	r2, r4, #1
 800ef5a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ef5e:	b082      	sub	sp, #8
 800ef60:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ef64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef68:	f006 f820 	bl	8014fac <uxr_init_input_best_effort_stream>
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2101      	movs	r1, #1
 800ef70:	4620      	mov	r0, r4
 800ef72:	b002      	add	sp, #8
 800ef74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef78:	f7ff bf1e 	b.w	800edb8 <uxr_stream_id>

0800ef7c <uxr_add_input_reliable_buffer>:
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	4684      	mov	ip, r0
 800ef82:	9806      	ldr	r0, [sp, #24]
 800ef84:	9000      	str	r0, [sp, #0]
 800ef86:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ef8a:	2018      	movs	r0, #24
 800ef8c:	fb00 c004 	mla	r0, r0, r4, ip
 800ef90:	f104 0e01 	add.w	lr, r4, #1
 800ef94:	3048      	adds	r0, #72	@ 0x48
 800ef96:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ef9a:	f006 f853 	bl	8015044 <uxr_init_input_reliable_stream>
 800ef9e:	2200      	movs	r2, #0
 800efa0:	2102      	movs	r1, #2
 800efa2:	4620      	mov	r0, r4
 800efa4:	b004      	add	sp, #16
 800efa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efaa:	f7ff bf05 	b.w	800edb8 <uxr_stream_id>
 800efae:	bf00      	nop

0800efb0 <uxr_get_output_best_effort_stream>:
 800efb0:	7c03      	ldrb	r3, [r0, #16]
 800efb2:	428b      	cmp	r3, r1
 800efb4:	bf8c      	ite	hi
 800efb6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800efba:	2000      	movls	r0, #0
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop

0800efc0 <uxr_get_output_reliable_stream>:
 800efc0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800efc4:	428b      	cmp	r3, r1
 800efc6:	bf83      	ittte	hi
 800efc8:	2328      	movhi	r3, #40	@ 0x28
 800efca:	fb03 0001 	mlahi	r0, r3, r1, r0
 800efce:	3018      	addhi	r0, #24
 800efd0:	2000      	movls	r0, #0
 800efd2:	4770      	bx	lr

0800efd4 <uxr_get_input_best_effort_stream>:
 800efd4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800efd8:	428b      	cmp	r3, r1
 800efda:	bf86      	itte	hi
 800efdc:	3121      	addhi	r1, #33	@ 0x21
 800efde:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800efe2:	2000      	movls	r0, #0
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop

0800efe8 <uxr_get_input_reliable_stream>:
 800efe8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800efec:	428b      	cmp	r3, r1
 800efee:	bf83      	ittte	hi
 800eff0:	2318      	movhi	r3, #24
 800eff2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eff6:	3048      	addhi	r0, #72	@ 0x48
 800eff8:	2000      	movls	r0, #0
 800effa:	4770      	bx	lr

0800effc <uxr_output_streams_confirmed>:
 800effc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f000:	b183      	cbz	r3, 800f024 <uxr_output_streams_confirmed+0x28>
 800f002:	b570      	push	{r4, r5, r6, lr}
 800f004:	4606      	mov	r6, r0
 800f006:	f100 0518 	add.w	r5, r0, #24
 800f00a:	2400      	movs	r4, #0
 800f00c:	e001      	b.n	800f012 <uxr_output_streams_confirmed+0x16>
 800f00e:	3528      	adds	r5, #40	@ 0x28
 800f010:	b138      	cbz	r0, 800f022 <uxr_output_streams_confirmed+0x26>
 800f012:	4628      	mov	r0, r5
 800f014:	f006 fce8 	bl	80159e8 <uxr_is_output_up_to_date>
 800f018:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f01c:	3401      	adds	r4, #1
 800f01e:	42a3      	cmp	r3, r4
 800f020:	d8f5      	bhi.n	800f00e <uxr_output_streams_confirmed+0x12>
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	2001      	movs	r0, #1
 800f026:	4770      	bx	lr

0800f028 <uxr_buffer_submessage_header>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	4604      	mov	r4, r0
 800f02c:	460e      	mov	r6, r1
 800f02e:	2104      	movs	r1, #4
 800f030:	4615      	mov	r5, r2
 800f032:	461f      	mov	r7, r3
 800f034:	f7fc fcce 	bl	800b9d4 <ucdr_align_to>
 800f038:	2301      	movs	r3, #1
 800f03a:	ea47 0203 	orr.w	r2, r7, r3
 800f03e:	4631      	mov	r1, r6
 800f040:	7523      	strb	r3, [r4, #20]
 800f042:	4620      	mov	r0, r4
 800f044:	462b      	mov	r3, r5
 800f046:	f000 fa27 	bl	800f498 <uxr_serialize_submessage_header>
 800f04a:	4620      	mov	r0, r4
 800f04c:	f7fc fcd8 	bl	800ba00 <ucdr_buffer_remaining>
 800f050:	42a8      	cmp	r0, r5
 800f052:	bf34      	ite	cc
 800f054:	2000      	movcc	r0, #0
 800f056:	2001      	movcs	r0, #1
 800f058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f05a:	bf00      	nop

0800f05c <uxr_read_submessage_header>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	4604      	mov	r4, r0
 800f062:	460d      	mov	r5, r1
 800f064:	2104      	movs	r1, #4
 800f066:	4616      	mov	r6, r2
 800f068:	4698      	mov	r8, r3
 800f06a:	f7fc fcb3 	bl	800b9d4 <ucdr_align_to>
 800f06e:	4620      	mov	r0, r4
 800f070:	f7fc fcc6 	bl	800ba00 <ucdr_buffer_remaining>
 800f074:	2803      	cmp	r0, #3
 800f076:	bf8c      	ite	hi
 800f078:	2701      	movhi	r7, #1
 800f07a:	2700      	movls	r7, #0
 800f07c:	d802      	bhi.n	800f084 <uxr_read_submessage_header+0x28>
 800f07e:	4638      	mov	r0, r7
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	4633      	mov	r3, r6
 800f086:	4642      	mov	r2, r8
 800f088:	4620      	mov	r0, r4
 800f08a:	4629      	mov	r1, r5
 800f08c:	f000 fa18 	bl	800f4c0 <uxr_deserialize_submessage_header>
 800f090:	f898 3000 	ldrb.w	r3, [r8]
 800f094:	f003 0201 	and.w	r2, r3, #1
 800f098:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f09c:	f888 3000 	strb.w	r3, [r8]
 800f0a0:	7522      	strb	r2, [r4, #20]
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0a8 <uxr_submessage_padding>:
 800f0a8:	f010 0003 	ands.w	r0, r0, #3
 800f0ac:	bf18      	it	ne
 800f0ae:	f1c0 0004 	rsbne	r0, r0, #4
 800f0b2:	4770      	bx	lr

0800f0b4 <uxr_millis>:
 800f0b4:	b510      	push	{r4, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	4669      	mov	r1, sp
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	f7f3 f8b8 	bl	8002230 <clock_gettime>
 800f0c0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f0c4:	4906      	ldr	r1, [pc, #24]	@ (800f0e0 <uxr_millis+0x2c>)
 800f0c6:	fba0 0301 	umull	r0, r3, r0, r1
 800f0ca:	1900      	adds	r0, r0, r4
 800f0cc:	fb01 3102 	mla	r1, r1, r2, r3
 800f0d0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f0d4:	4a03      	ldr	r2, [pc, #12]	@ (800f0e4 <uxr_millis+0x30>)
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f7f1 fcb8 	bl	8000a4c <__aeabi_ldivmod>
 800f0dc:	b004      	add	sp, #16
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	3b9aca00 	.word	0x3b9aca00
 800f0e4:	000f4240 	.word	0x000f4240

0800f0e8 <uxr_nanos>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	4669      	mov	r1, sp
 800f0ee:	2001      	movs	r0, #1
 800f0f0:	f7f3 f89e 	bl	8002230 <clock_gettime>
 800f0f4:	4a06      	ldr	r2, [pc, #24]	@ (800f110 <uxr_nanos+0x28>)
 800f0f6:	9800      	ldr	r0, [sp, #0]
 800f0f8:	9902      	ldr	r1, [sp, #8]
 800f0fa:	9c01      	ldr	r4, [sp, #4]
 800f0fc:	fba0 0302 	umull	r0, r3, r0, r2
 800f100:	1840      	adds	r0, r0, r1
 800f102:	fb02 3304 	mla	r3, r2, r4, r3
 800f106:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f10a:	b004      	add	sp, #16
 800f10c:	bd10      	pop	{r4, pc}
 800f10e:	bf00      	nop
 800f110:	3b9aca00 	.word	0x3b9aca00

0800f114 <on_full_output_buffer_fragmented>:
 800f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f118:	460c      	mov	r4, r1
 800f11a:	b08a      	sub	sp, #40	@ 0x28
 800f11c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f120:	4606      	mov	r6, r0
 800f122:	f104 0008 	add.w	r0, r4, #8
 800f126:	f7ff ff4b 	bl	800efc0 <uxr_get_output_reliable_stream>
 800f12a:	4605      	mov	r5, r0
 800f12c:	f006 fc66 	bl	80159fc <get_available_free_slots>
 800f130:	b968      	cbnz	r0, 800f14e <on_full_output_buffer_fragmented+0x3a>
 800f132:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f136:	4620      	mov	r0, r4
 800f138:	4798      	blx	r3
 800f13a:	b918      	cbnz	r0, 800f144 <on_full_output_buffer_fragmented+0x30>
 800f13c:	2001      	movs	r0, #1
 800f13e:	b00a      	add	sp, #40	@ 0x28
 800f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f144:	4628      	mov	r0, r5
 800f146:	f006 fc59 	bl	80159fc <get_available_free_slots>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0f6      	beq.n	800f13c <on_full_output_buffer_fragmented+0x28>
 800f14e:	8929      	ldrh	r1, [r5, #8]
 800f150:	89eb      	ldrh	r3, [r5, #14]
 800f152:	7b28      	ldrb	r0, [r5, #12]
 800f154:	686a      	ldr	r2, [r5, #4]
 800f156:	fbb2 f8f1 	udiv	r8, r2, r1
 800f15a:	fbb3 f2f1 	udiv	r2, r3, r1
 800f15e:	fb01 3112 	mls	r1, r1, r2, r3
 800f162:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800f166:	b289      	uxth	r1, r1
 800f168:	fb08 f101 	mul.w	r1, r8, r1
 800f16c:	30fc      	adds	r0, #252	@ 0xfc
 800f16e:	f1a8 0804 	sub.w	r8, r8, #4
 800f172:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800f176:	4440      	add	r0, r8
 800f178:	b287      	uxth	r7, r0
 800f17a:	1bdb      	subs	r3, r3, r7
 800f17c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	3104      	adds	r1, #4
 800f184:	4419      	add	r1, r3
 800f186:	4642      	mov	r2, r8
 800f188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	a802      	add	r0, sp, #8
 800f190:	2300      	movs	r3, #0
 800f192:	f7fc fbf3 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800f196:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f19a:	f102 0308 	add.w	r3, r2, #8
 800f19e:	4543      	cmp	r3, r8
 800f1a0:	d928      	bls.n	800f1f4 <on_full_output_buffer_fragmented+0xe0>
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	210d      	movs	r1, #13
 800f1a8:	a802      	add	r0, sp, #8
 800f1aa:	f7ff ff3d 	bl	800f028 <uxr_buffer_submessage_header>
 800f1ae:	8929      	ldrh	r1, [r5, #8]
 800f1b0:	89eb      	ldrh	r3, [r5, #14]
 800f1b2:	fbb3 f2f1 	udiv	r2, r3, r1
 800f1b6:	fb01 3312 	mls	r3, r1, r2, r3
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	686a      	ldr	r2, [r5, #4]
 800f1be:	fbb2 f2f1 	udiv	r2, r2, r1
 800f1c2:	fb02 f303 	mul.w	r3, r2, r3
 800f1c6:	682a      	ldr	r2, [r5, #0]
 800f1c8:	f842 8003 	str.w	r8, [r2, r3]
 800f1cc:	89e8      	ldrh	r0, [r5, #14]
 800f1ce:	2101      	movs	r1, #1
 800f1d0:	f006 fd64 	bl	8015c9c <uxr_seq_num_add>
 800f1d4:	9904      	ldr	r1, [sp, #16]
 800f1d6:	9a03      	ldr	r2, [sp, #12]
 800f1d8:	81e8      	strh	r0, [r5, #14]
 800f1da:	1a52      	subs	r2, r2, r1
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fc fbdf 	bl	800b9a0 <ucdr_init_buffer>
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	490f      	ldr	r1, [pc, #60]	@ (800f224 <on_full_output_buffer_fragmented+0x110>)
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	f7fc fbae 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	b00a      	add	sp, #40	@ 0x28
 800f1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f4:	b292      	uxth	r2, r2
 800f1f6:	2302      	movs	r3, #2
 800f1f8:	210d      	movs	r1, #13
 800f1fa:	a802      	add	r0, sp, #8
 800f1fc:	f7ff ff14 	bl	800f028 <uxr_buffer_submessage_header>
 800f200:	8928      	ldrh	r0, [r5, #8]
 800f202:	89eb      	ldrh	r3, [r5, #14]
 800f204:	fbb3 f1f0 	udiv	r1, r3, r0
 800f208:	fb00 3311 	mls	r3, r0, r1, r3
 800f20c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f210:	6869      	ldr	r1, [r5, #4]
 800f212:	fbb1 f1f0 	udiv	r1, r1, r0
 800f216:	b29b      	uxth	r3, r3
 800f218:	fb01 f303 	mul.w	r3, r1, r3
 800f21c:	6829      	ldr	r1, [r5, #0]
 800f21e:	3208      	adds	r2, #8
 800f220:	50ca      	str	r2, [r1, r3]
 800f222:	e7d3      	b.n	800f1cc <on_full_output_buffer_fragmented+0xb8>
 800f224:	0800f115 	.word	0x0800f115

0800f228 <uxr_prepare_output_stream>:
 800f228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f22a:	b087      	sub	sp, #28
 800f22c:	2707      	movs	r7, #7
 800f22e:	9202      	str	r2, [sp, #8]
 800f230:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f232:	9103      	str	r1, [sp, #12]
 800f234:	2500      	movs	r5, #0
 800f236:	3204      	adds	r2, #4
 800f238:	e9cd 7500 	strd	r7, r5, [sp]
 800f23c:	461c      	mov	r4, r3
 800f23e:	4606      	mov	r6, r0
 800f240:	f7ff fc54 	bl	800eaec <uxr_prepare_stream_to_write_submessage>
 800f244:	f080 0201 	eor.w	r2, r0, #1
 800f248:	b2d2      	uxtb	r2, r2
 800f24a:	75a2      	strb	r2, [r4, #22]
 800f24c:	b112      	cbz	r2, 800f254 <uxr_prepare_output_stream+0x2c>
 800f24e:	4628      	mov	r0, r5
 800f250:	b007      	add	sp, #28
 800f252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f254:	aa05      	add	r2, sp, #20
 800f256:	9902      	ldr	r1, [sp, #8]
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff fd7d 	bl	800ed58 <uxr_init_base_object_request>
 800f25e:	a905      	add	r1, sp, #20
 800f260:	4605      	mov	r5, r0
 800f262:	4620      	mov	r0, r4
 800f264:	f001 f88c 	bl	8010380 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f268:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f26c:	69a6      	ldr	r6, [r4, #24]
 800f26e:	69e7      	ldr	r7, [r4, #28]
 800f270:	1a52      	subs	r2, r2, r1
 800f272:	4620      	mov	r0, r4
 800f274:	f7fc fb94 	bl	800b9a0 <ucdr_init_buffer>
 800f278:	4620      	mov	r0, r4
 800f27a:	463a      	mov	r2, r7
 800f27c:	4631      	mov	r1, r6
 800f27e:	f7fc fb63 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 800f282:	4628      	mov	r0, r5
 800f284:	b007      	add	sp, #28
 800f286:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f288 <uxr_prepare_output_stream_fragmented>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	b091      	sub	sp, #68	@ 0x44
 800f28e:	4605      	mov	r5, r0
 800f290:	9105      	str	r1, [sp, #20]
 800f292:	3008      	adds	r0, #8
 800f294:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f298:	461e      	mov	r6, r3
 800f29a:	9204      	str	r2, [sp, #16]
 800f29c:	f7ff fe90 	bl	800efc0 <uxr_get_output_reliable_stream>
 800f2a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	f000 8091 	beq.w	800f3cc <uxr_prepare_output_stream_fragmented+0x144>
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f000 808d 	beq.w	800f3cc <uxr_prepare_output_stream_fragmented+0x144>
 800f2b2:	f006 fba3 	bl	80159fc <get_available_free_slots>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	f000 8083 	beq.w	800f3c2 <uxr_prepare_output_stream_fragmented+0x13a>
 800f2bc:	8922      	ldrh	r2, [r4, #8]
 800f2be:	89e7      	ldrh	r7, [r4, #14]
 800f2c0:	fbb7 f9f2 	udiv	r9, r7, r2
 800f2c4:	fb02 7919 	mls	r9, r2, r9, r7
 800f2c8:	fa1f f989 	uxth.w	r9, r9
 800f2cc:	6863      	ldr	r3, [r4, #4]
 800f2ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	9203      	str	r2, [sp, #12]
 800f2d6:	fb02 f909 	mul.w	r9, r2, r9
 800f2da:	f109 0904 	add.w	r9, r9, #4
 800f2de:	4499      	add	r9, r3
 800f2e0:	7b23      	ldrb	r3, [r4, #12]
 800f2e2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f2e6:	4543      	cmp	r3, r8
 800f2e8:	f1a2 0b04 	sub.w	fp, r2, #4
 800f2ec:	d37a      	bcc.n	800f3e4 <uxr_prepare_output_stream_fragmented+0x15c>
 800f2ee:	f1ab 0a04 	sub.w	sl, fp, #4
 800f2f2:	ebaa 0a03 	sub.w	sl, sl, r3
 800f2f6:	465a      	mov	r2, fp
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	4649      	mov	r1, r9
 800f2fc:	a808      	add	r0, sp, #32
 800f2fe:	f8cd 8000 	str.w	r8, [sp]
 800f302:	f7fc fb3b 	bl	800b97c <ucdr_init_buffer_origin_offset>
 800f306:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f308:	fa1f fa8a 	uxth.w	sl, sl
 800f30c:	4652      	mov	r2, sl
 800f30e:	f103 0a08 	add.w	sl, r3, #8
 800f312:	45da      	cmp	sl, fp
 800f314:	bf34      	ite	cc
 800f316:	2302      	movcc	r3, #2
 800f318:	2300      	movcs	r3, #0
 800f31a:	210d      	movs	r1, #13
 800f31c:	a808      	add	r0, sp, #32
 800f31e:	f7ff fe83 	bl	800f028 <uxr_buffer_submessage_header>
 800f322:	8921      	ldrh	r1, [r4, #8]
 800f324:	fbb7 f2f1 	udiv	r2, r7, r1
 800f328:	fb01 7212 	mls	r2, r1, r2, r7
 800f32c:	b292      	uxth	r2, r2
 800f32e:	6863      	ldr	r3, [r4, #4]
 800f330:	fbb3 f3f1 	udiv	r3, r3, r1
 800f334:	fb02 f303 	mul.w	r3, r2, r3
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	4638      	mov	r0, r7
 800f33c:	f842 b003 	str.w	fp, [r2, r3]
 800f340:	2101      	movs	r1, #1
 800f342:	f006 fcab 	bl	8015c9c <uxr_seq_num_add>
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	f108 0104 	add.w	r1, r8, #4
 800f34c:	f1a3 0208 	sub.w	r2, r3, #8
 800f350:	eba2 0208 	sub.w	r2, r2, r8
 800f354:	4449      	add	r1, r9
 800f356:	4607      	mov	r7, r0
 800f358:	4630      	mov	r0, r6
 800f35a:	f7fc fb21 	bl	800b9a0 <ucdr_init_buffer>
 800f35e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f360:	81e7      	strh	r7, [r4, #14]
 800f362:	1d1a      	adds	r2, r3, #4
 800f364:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f368:	bf28      	it	cs
 800f36a:	2200      	movcs	r2, #0
 800f36c:	2300      	movs	r3, #0
 800f36e:	b292      	uxth	r2, r2
 800f370:	2107      	movs	r1, #7
 800f372:	4630      	mov	r0, r6
 800f374:	f7ff fe58 	bl	800f028 <uxr_buffer_submessage_header>
 800f378:	9904      	ldr	r1, [sp, #16]
 800f37a:	aa07      	add	r2, sp, #28
 800f37c:	4628      	mov	r0, r5
 800f37e:	f7ff fceb 	bl	800ed58 <uxr_init_base_object_request>
 800f382:	4604      	mov	r4, r0
 800f384:	b318      	cbz	r0, 800f3ce <uxr_prepare_output_stream_fragmented+0x146>
 800f386:	a907      	add	r1, sp, #28
 800f388:	4630      	mov	r0, r6
 800f38a:	f000 fff9 	bl	8010380 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f38e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f392:	4630      	mov	r0, r6
 800f394:	1a52      	subs	r2, r2, r1
 800f396:	f7fc fb03 	bl	800b9a0 <ucdr_init_buffer>
 800f39a:	9b05      	ldr	r3, [sp, #20]
 800f39c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f3a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f3a2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f3a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f3a8:	491b      	ldr	r1, [pc, #108]	@ (800f418 <uxr_prepare_output_stream_fragmented+0x190>)
 800f3aa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f3b4:	462a      	mov	r2, r5
 800f3b6:	f7fc fac7 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	b011      	add	sp, #68	@ 0x44
 800f3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f3c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	4798      	blx	r3
 800f3ca:	b920      	cbnz	r0, 800f3d6 <uxr_prepare_output_stream_fragmented+0x14e>
 800f3cc:	2400      	movs	r4, #0
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	b011      	add	sp, #68	@ 0x44
 800f3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f006 fb10 	bl	80159fc <get_available_free_slots>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	f47f af6d 	bne.w	800f2bc <uxr_prepare_output_stream_fragmented+0x34>
 800f3e2:	e7f3      	b.n	800f3cc <uxr_prepare_output_stream_fragmented+0x144>
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	f006 fc58 	bl	8015c9c <uxr_seq_num_add>
 800f3ec:	8921      	ldrh	r1, [r4, #8]
 800f3ee:	fbb0 f2f1 	udiv	r2, r0, r1
 800f3f2:	fb01 0912 	mls	r9, r1, r2, r0
 800f3f6:	fa1f f289 	uxth.w	r2, r9
 800f3fa:	6863      	ldr	r3, [r4, #4]
 800f3fc:	fbb3 f9f1 	udiv	r9, r3, r1
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	fb02 f909 	mul.w	r9, r2, r9
 800f406:	f109 0904 	add.w	r9, r9, #4
 800f40a:	4499      	add	r9, r3
 800f40c:	4607      	mov	r7, r0
 800f40e:	7b23      	ldrb	r3, [r4, #12]
 800f410:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f414:	e76b      	b.n	800f2ee <uxr_prepare_output_stream_fragmented+0x66>
 800f416:	bf00      	nop
 800f418:	0800f115 	.word	0x0800f115

0800f41c <uxr_serialize_message_header>:
 800f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41e:	b083      	sub	sp, #12
 800f420:	4616      	mov	r6, r2
 800f422:	4604      	mov	r4, r0
 800f424:	9301      	str	r3, [sp, #4]
 800f426:	460d      	mov	r5, r1
 800f428:	9f08      	ldr	r7, [sp, #32]
 800f42a:	f7fb f977 	bl	800a71c <ucdr_serialize_uint8_t>
 800f42e:	4631      	mov	r1, r6
 800f430:	4620      	mov	r0, r4
 800f432:	f7fb f973 	bl	800a71c <ucdr_serialize_uint8_t>
 800f436:	9a01      	ldr	r2, [sp, #4]
 800f438:	2101      	movs	r1, #1
 800f43a:	4620      	mov	r0, r4
 800f43c:	f7fb fa1a 	bl	800a874 <ucdr_serialize_endian_uint16_t>
 800f440:	062b      	lsls	r3, r5, #24
 800f442:	d501      	bpl.n	800f448 <uxr_serialize_message_header+0x2c>
 800f444:	b003      	add	sp, #12
 800f446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f448:	2204      	movs	r2, #4
 800f44a:	4639      	mov	r1, r7
 800f44c:	4620      	mov	r0, r4
 800f44e:	b003      	add	sp, #12
 800f450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f454:	f005 bbb0 	b.w	8014bb8 <ucdr_serialize_array_uint8_t>

0800f458 <uxr_deserialize_message_header>:
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	b083      	sub	sp, #12
 800f45c:	4616      	mov	r6, r2
 800f45e:	4604      	mov	r4, r0
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	460d      	mov	r5, r1
 800f464:	9f08      	ldr	r7, [sp, #32]
 800f466:	f7fb f96f 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f46a:	4631      	mov	r1, r6
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7fb f96b 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f472:	9a01      	ldr	r2, [sp, #4]
 800f474:	2101      	movs	r1, #1
 800f476:	4620      	mov	r0, r4
 800f478:	f7fb faf0 	bl	800aa5c <ucdr_deserialize_endian_uint16_t>
 800f47c:	f995 3000 	ldrsb.w	r3, [r5]
 800f480:	2b00      	cmp	r3, #0
 800f482:	da01      	bge.n	800f488 <uxr_deserialize_message_header+0x30>
 800f484:	b003      	add	sp, #12
 800f486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f488:	2204      	movs	r2, #4
 800f48a:	4639      	mov	r1, r7
 800f48c:	4620      	mov	r0, r4
 800f48e:	b003      	add	sp, #12
 800f490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f494:	f005 bbf4 	b.w	8014c80 <ucdr_deserialize_array_uint8_t>

0800f498 <uxr_serialize_submessage_header>:
 800f498:	b530      	push	{r4, r5, lr}
 800f49a:	b083      	sub	sp, #12
 800f49c:	4615      	mov	r5, r2
 800f49e:	4604      	mov	r4, r0
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	f7fb f93b 	bl	800a71c <ucdr_serialize_uint8_t>
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f7fb f937 	bl	800a71c <ucdr_serialize_uint8_t>
 800f4ae:	9a01      	ldr	r2, [sp, #4]
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	b003      	add	sp, #12
 800f4b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ba:	f7fb b9db 	b.w	800a874 <ucdr_serialize_endian_uint16_t>
 800f4be:	bf00      	nop

0800f4c0 <uxr_deserialize_submessage_header>:
 800f4c0:	b530      	push	{r4, r5, lr}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	4615      	mov	r5, r2
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	9301      	str	r3, [sp, #4]
 800f4ca:	f7fb f93d 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f4ce:	4629      	mov	r1, r5
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f7fb f939 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f4d6:	9a01      	ldr	r2, [sp, #4]
 800f4d8:	2101      	movs	r1, #1
 800f4da:	4620      	mov	r0, r4
 800f4dc:	b003      	add	sp, #12
 800f4de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e2:	f7fb babb 	b.w	800aa5c <ucdr_deserialize_endian_uint16_t>
 800f4e6:	bf00      	nop

0800f4e8 <uxr_serialize_CLIENT_Representation>:
 800f4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4ec:	2204      	movs	r2, #4
 800f4ee:	460e      	mov	r6, r1
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	f005 fb61 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f4f6:	2202      	movs	r2, #2
 800f4f8:	4607      	mov	r7, r0
 800f4fa:	1d31      	adds	r1, r6, #4
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f005 fb5b 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f502:	4038      	ands	r0, r7
 800f504:	2202      	movs	r2, #2
 800f506:	1db1      	adds	r1, r6, #6
 800f508:	b2c7      	uxtb	r7, r0
 800f50a:	4628      	mov	r0, r5
 800f50c:	f005 fb54 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f510:	2204      	movs	r2, #4
 800f512:	4007      	ands	r7, r0
 800f514:	f106 0108 	add.w	r1, r6, #8
 800f518:	4628      	mov	r0, r5
 800f51a:	f005 fb4d 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f51e:	7b31      	ldrb	r1, [r6, #12]
 800f520:	4007      	ands	r7, r0
 800f522:	4628      	mov	r0, r5
 800f524:	f7fb f8fa 	bl	800a71c <ucdr_serialize_uint8_t>
 800f528:	7b71      	ldrb	r1, [r6, #13]
 800f52a:	4007      	ands	r7, r0
 800f52c:	4628      	mov	r0, r5
 800f52e:	f7fb f8c7 	bl	800a6c0 <ucdr_serialize_bool>
 800f532:	7b73      	ldrb	r3, [r6, #13]
 800f534:	ea07 0800 	and.w	r8, r7, r0
 800f538:	b93b      	cbnz	r3, 800f54a <uxr_serialize_CLIENT_Representation+0x62>
 800f53a:	8bb1      	ldrh	r1, [r6, #28]
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7fb f919 	bl	800a774 <ucdr_serialize_uint16_t>
 800f542:	ea08 0000 	and.w	r0, r8, r0
 800f546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f54a:	6931      	ldr	r1, [r6, #16]
 800f54c:	4628      	mov	r0, r5
 800f54e:	f7fb fafb 	bl	800ab48 <ucdr_serialize_uint32_t>
 800f552:	6933      	ldr	r3, [r6, #16]
 800f554:	b1e3      	cbz	r3, 800f590 <uxr_serialize_CLIENT_Representation+0xa8>
 800f556:	b1c0      	cbz	r0, 800f58a <uxr_serialize_CLIENT_Representation+0xa2>
 800f558:	4637      	mov	r7, r6
 800f55a:	f04f 0900 	mov.w	r9, #0
 800f55e:	e001      	b.n	800f564 <uxr_serialize_CLIENT_Representation+0x7c>
 800f560:	3708      	adds	r7, #8
 800f562:	b194      	cbz	r4, 800f58a <uxr_serialize_CLIENT_Representation+0xa2>
 800f564:	6979      	ldr	r1, [r7, #20]
 800f566:	4628      	mov	r0, r5
 800f568:	f005 fc46 	bl	8014df8 <ucdr_serialize_string>
 800f56c:	69b9      	ldr	r1, [r7, #24]
 800f56e:	4604      	mov	r4, r0
 800f570:	4628      	mov	r0, r5
 800f572:	f005 fc41 	bl	8014df8 <ucdr_serialize_string>
 800f576:	6933      	ldr	r3, [r6, #16]
 800f578:	f109 0901 	add.w	r9, r9, #1
 800f57c:	4004      	ands	r4, r0
 800f57e:	4599      	cmp	r9, r3
 800f580:	b2e4      	uxtb	r4, r4
 800f582:	d3ed      	bcc.n	800f560 <uxr_serialize_CLIENT_Representation+0x78>
 800f584:	ea08 0804 	and.w	r8, r8, r4
 800f588:	e7d7      	b.n	800f53a <uxr_serialize_CLIENT_Representation+0x52>
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	e7d4      	b.n	800f53a <uxr_serialize_CLIENT_Representation+0x52>
 800f590:	ea08 0800 	and.w	r8, r8, r0
 800f594:	e7d1      	b.n	800f53a <uxr_serialize_CLIENT_Representation+0x52>
 800f596:	bf00      	nop

0800f598 <uxr_deserialize_CLIENT_Representation>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	2204      	movs	r2, #4
 800f59e:	460c      	mov	r4, r1
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	f005 fb6d 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	1d21      	adds	r1, r4, #4
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f005 fb67 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800f5b2:	4038      	ands	r0, r7
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	1da1      	adds	r1, r4, #6
 800f5b8:	b2c6      	uxtb	r6, r0
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f005 fb60 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800f5c0:	2204      	movs	r2, #4
 800f5c2:	4006      	ands	r6, r0
 800f5c4:	f104 0108 	add.w	r1, r4, #8
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f005 fb59 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800f5ce:	f104 010c 	add.w	r1, r4, #12
 800f5d2:	4006      	ands	r6, r0
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f7fb f8b7 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f5da:	f104 010d 	add.w	r1, r4, #13
 800f5de:	ea06 0700 	and.w	r7, r6, r0
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	f7fb f882 	bl	800a6ec <ucdr_deserialize_bool>
 800f5e8:	7b63      	ldrb	r3, [r4, #13]
 800f5ea:	4007      	ands	r7, r0
 800f5ec:	b93b      	cbnz	r3, 800f5fe <uxr_deserialize_CLIENT_Representation+0x66>
 800f5ee:	f104 011c 	add.w	r1, r4, #28
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f7fb f9be 	bl	800a974 <ucdr_deserialize_uint16_t>
 800f5f8:	4038      	ands	r0, r7
 800f5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fe:	f104 0110 	add.w	r1, r4, #16
 800f602:	4628      	mov	r0, r5
 800f604:	f7fb fbd0 	bl	800ada8 <ucdr_deserialize_uint32_t>
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d903      	bls.n	800f616 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f60e:	2301      	movs	r3, #1
 800f610:	75ab      	strb	r3, [r5, #22]
 800f612:	2700      	movs	r7, #0
 800f614:	e7eb      	b.n	800f5ee <uxr_deserialize_CLIENT_Representation+0x56>
 800f616:	b30b      	cbz	r3, 800f65c <uxr_deserialize_CLIENT_Representation+0xc4>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d0fa      	beq.n	800f612 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f61c:	46a0      	mov	r8, r4
 800f61e:	f04f 0900 	mov.w	r9, #0
 800f622:	e001      	b.n	800f628 <uxr_deserialize_CLIENT_Representation+0x90>
 800f624:	2e00      	cmp	r6, #0
 800f626:	d0f4      	beq.n	800f612 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f628:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f62c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f630:	4628      	mov	r0, r5
 800f632:	f005 fbf1 	bl	8014e18 <ucdr_deserialize_string>
 800f636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f63a:	4606      	mov	r6, r0
 800f63c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f640:	4628      	mov	r0, r5
 800f642:	f005 fbe9 	bl	8014e18 <ucdr_deserialize_string>
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	f109 0901 	add.w	r9, r9, #1
 800f64c:	4006      	ands	r6, r0
 800f64e:	4599      	cmp	r9, r3
 800f650:	f108 0808 	add.w	r8, r8, #8
 800f654:	b2f6      	uxtb	r6, r6
 800f656:	d3e5      	bcc.n	800f624 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f658:	4037      	ands	r7, r6
 800f65a:	e7c8      	b.n	800f5ee <uxr_deserialize_CLIENT_Representation+0x56>
 800f65c:	4007      	ands	r7, r0
 800f65e:	e7c6      	b.n	800f5ee <uxr_deserialize_CLIENT_Representation+0x56>

0800f660 <uxr_serialize_AGENT_Representation>:
 800f660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f664:	2204      	movs	r2, #4
 800f666:	460f      	mov	r7, r1
 800f668:	4605      	mov	r5, r0
 800f66a:	f005 faa5 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f66e:	2202      	movs	r2, #2
 800f670:	4604      	mov	r4, r0
 800f672:	1d39      	adds	r1, r7, #4
 800f674:	4628      	mov	r0, r5
 800f676:	f005 fa9f 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f67a:	4020      	ands	r0, r4
 800f67c:	2202      	movs	r2, #2
 800f67e:	1db9      	adds	r1, r7, #6
 800f680:	b2c4      	uxtb	r4, r0
 800f682:	4628      	mov	r0, r5
 800f684:	f005 fa98 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f688:	7a39      	ldrb	r1, [r7, #8]
 800f68a:	4004      	ands	r4, r0
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7fb f817 	bl	800a6c0 <ucdr_serialize_bool>
 800f692:	7a3b      	ldrb	r3, [r7, #8]
 800f694:	ea00 0804 	and.w	r8, r0, r4
 800f698:	b913      	cbnz	r3, 800f6a0 <uxr_serialize_AGENT_Representation+0x40>
 800f69a:	4640      	mov	r0, r8
 800f69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a0:	68f9      	ldr	r1, [r7, #12]
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	f7fb fa50 	bl	800ab48 <ucdr_serialize_uint32_t>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	b303      	cbz	r3, 800f6ee <uxr_serialize_AGENT_Representation+0x8e>
 800f6ac:	b1d0      	cbz	r0, 800f6e4 <uxr_serialize_AGENT_Representation+0x84>
 800f6ae:	463e      	mov	r6, r7
 800f6b0:	f04f 0900 	mov.w	r9, #0
 800f6b4:	e001      	b.n	800f6ba <uxr_serialize_AGENT_Representation+0x5a>
 800f6b6:	3608      	adds	r6, #8
 800f6b8:	b1a4      	cbz	r4, 800f6e4 <uxr_serialize_AGENT_Representation+0x84>
 800f6ba:	6931      	ldr	r1, [r6, #16]
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f005 fb9b 	bl	8014df8 <ucdr_serialize_string>
 800f6c2:	6971      	ldr	r1, [r6, #20]
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f005 fb96 	bl	8014df8 <ucdr_serialize_string>
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f109 0901 	add.w	r9, r9, #1
 800f6d2:	4004      	ands	r4, r0
 800f6d4:	4599      	cmp	r9, r3
 800f6d6:	b2e4      	uxtb	r4, r4
 800f6d8:	d3ed      	bcc.n	800f6b6 <uxr_serialize_AGENT_Representation+0x56>
 800f6da:	ea08 0804 	and.w	r8, r8, r4
 800f6de:	4640      	mov	r0, r8
 800f6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e4:	f04f 0800 	mov.w	r8, #0
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	ea08 0800 	and.w	r8, r8, r0
 800f6f2:	e7d2      	b.n	800f69a <uxr_serialize_AGENT_Representation+0x3a>

0800f6f4 <uxr_serialize_DATAWRITER_Representation>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	460d      	mov	r5, r1
 800f6f8:	7809      	ldrb	r1, [r1, #0]
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	f7fb f80e 	bl	800a71c <ucdr_serialize_uint8_t>
 800f700:	4604      	mov	r4, r0
 800f702:	b130      	cbz	r0, 800f712 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f704:	782b      	ldrb	r3, [r5, #0]
 800f706:	2b02      	cmp	r3, #2
 800f708:	d00c      	beq.n	800f724 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f70a:	2b03      	cmp	r3, #3
 800f70c:	d010      	beq.n	800f730 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d008      	beq.n	800f724 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f712:	2202      	movs	r2, #2
 800f714:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f718:	4630      	mov	r0, r6
 800f71a:	f005 fa4d 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f71e:	4020      	ands	r0, r4
 800f720:	b2c0      	uxtb	r0, r0
 800f722:	bd70      	pop	{r4, r5, r6, pc}
 800f724:	6869      	ldr	r1, [r5, #4]
 800f726:	4630      	mov	r0, r6
 800f728:	f005 fb66 	bl	8014df8 <ucdr_serialize_string>
 800f72c:	4604      	mov	r4, r0
 800f72e:	e7f0      	b.n	800f712 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f730:	4629      	mov	r1, r5
 800f732:	4630      	mov	r0, r6
 800f734:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f738:	3104      	adds	r1, #4
 800f73a:	f005 fb31 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800f73e:	4604      	mov	r4, r0
 800f740:	e7e7      	b.n	800f712 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f742:	bf00      	nop

0800f744 <uxr_serialize_ObjectVariant.part.0>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	780b      	ldrb	r3, [r1, #0]
 800f748:	3b01      	subs	r3, #1
 800f74a:	460c      	mov	r4, r1
 800f74c:	4605      	mov	r5, r0
 800f74e:	2b0d      	cmp	r3, #13
 800f750:	d854      	bhi.n	800f7fc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f752:	e8df f003 	tbb	[pc, r3]
 800f756:	0730      	.short	0x0730
 800f758:	07071b1b 	.word	0x07071b1b
 800f75c:	0c530707 	.word	0x0c530707
 800f760:	494e0c0c 	.word	0x494e0c0c
 800f764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f768:	3104      	adds	r1, #4
 800f76a:	f7ff bfc3 	b.w	800f6f4 <uxr_serialize_DATAWRITER_Representation>
 800f76e:	7909      	ldrb	r1, [r1, #4]
 800f770:	f7fa ffd4 	bl	800a71c <ucdr_serialize_uint8_t>
 800f774:	b1e8      	cbz	r0, 800f7b2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f776:	7923      	ldrb	r3, [r4, #4]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d001      	beq.n	800f780 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d13d      	bne.n	800f7fc <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f780:	68a1      	ldr	r1, [r4, #8]
 800f782:	4628      	mov	r0, r5
 800f784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f788:	f005 bb36 	b.w	8014df8 <ucdr_serialize_string>
 800f78c:	7909      	ldrb	r1, [r1, #4]
 800f78e:	f7fa ffc5 	bl	800a71c <ucdr_serialize_uint8_t>
 800f792:	4606      	mov	r6, r0
 800f794:	b120      	cbz	r0, 800f7a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f796:	7923      	ldrb	r3, [r4, #4]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d039      	beq.n	800f810 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d02f      	beq.n	800f800 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f7a0:	2202      	movs	r2, #2
 800f7a2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f005 fa06 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800f7ac:	4030      	ands	r0, r6
 800f7ae:	b2c0      	uxtb	r0, r0
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	7909      	ldrb	r1, [r1, #4]
 800f7b8:	f7fa ffb0 	bl	800a71c <ucdr_serialize_uint8_t>
 800f7bc:	4606      	mov	r6, r0
 800f7be:	b158      	cbz	r0, 800f7d8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f7c0:	7923      	ldrb	r3, [r4, #4]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d003      	beq.n	800f7ce <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f7c6:	2b03      	cmp	r3, #3
 800f7c8:	d028      	beq.n	800f81c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d104      	bne.n	800f7d8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f7ce:	68a1      	ldr	r1, [r4, #8]
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f005 fb11 	bl	8014df8 <ucdr_serialize_string>
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f7dc:	4628      	mov	r0, r5
 800f7de:	f7fb fcd9 	bl	800b194 <ucdr_serialize_int16_t>
 800f7e2:	4030      	ands	r0, r6
 800f7e4:	b2c0      	uxtb	r0, r0
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}
 800f7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ec:	3104      	adds	r1, #4
 800f7ee:	f7ff be7b 	b.w	800f4e8 <uxr_serialize_CLIENT_Representation>
 800f7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7f6:	3104      	adds	r1, #4
 800f7f8:	f7ff bf32 	b.w	800f660 <uxr_serialize_AGENT_Representation>
 800f7fc:	2001      	movs	r0, #1
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	68a2      	ldr	r2, [r4, #8]
 800f802:	f104 010c 	add.w	r1, r4, #12
 800f806:	4628      	mov	r0, r5
 800f808:	f005 faca 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800f80c:	4606      	mov	r6, r0
 800f80e:	e7c7      	b.n	800f7a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f810:	68a1      	ldr	r1, [r4, #8]
 800f812:	4628      	mov	r0, r5
 800f814:	f005 faf0 	bl	8014df8 <ucdr_serialize_string>
 800f818:	4606      	mov	r6, r0
 800f81a:	e7c1      	b.n	800f7a0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f81c:	68a2      	ldr	r2, [r4, #8]
 800f81e:	f104 010c 	add.w	r1, r4, #12
 800f822:	4628      	mov	r0, r5
 800f824:	f005 fabc 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800f828:	4606      	mov	r6, r0
 800f82a:	e7d5      	b.n	800f7d8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f82c <uxr_deserialize_DATAWRITER_Representation>:
 800f82c:	b570      	push	{r4, r5, r6, lr}
 800f82e:	4606      	mov	r6, r0
 800f830:	460d      	mov	r5, r1
 800f832:	f7fa ff89 	bl	800a748 <ucdr_deserialize_uint8_t>
 800f836:	4604      	mov	r4, r0
 800f838:	b130      	cbz	r0, 800f848 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f83a:	782b      	ldrb	r3, [r5, #0]
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d00c      	beq.n	800f85a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f840:	2b03      	cmp	r3, #3
 800f842:	d012      	beq.n	800f86a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f844:	2b01      	cmp	r3, #1
 800f846:	d008      	beq.n	800f85a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f848:	2202      	movs	r2, #2
 800f84a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f84e:	4630      	mov	r0, r6
 800f850:	f005 fa16 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800f854:	4020      	ands	r0, r4
 800f856:	b2c0      	uxtb	r0, r0
 800f858:	bd70      	pop	{r4, r5, r6, pc}
 800f85a:	6869      	ldr	r1, [r5, #4]
 800f85c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f860:	4630      	mov	r0, r6
 800f862:	f005 fad9 	bl	8014e18 <ucdr_deserialize_string>
 800f866:	4604      	mov	r4, r0
 800f868:	e7ee      	b.n	800f848 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f86a:	1d2b      	adds	r3, r5, #4
 800f86c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f870:	f105 0108 	add.w	r1, r5, #8
 800f874:	4630      	mov	r0, r6
 800f876:	f005 faa5 	bl	8014dc4 <ucdr_deserialize_sequence_uint8_t>
 800f87a:	4604      	mov	r4, r0
 800f87c:	e7e4      	b.n	800f848 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f87e:	bf00      	nop

0800f880 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	460d      	mov	r5, r1
 800f884:	7809      	ldrb	r1, [r1, #0]
 800f886:	4606      	mov	r6, r0
 800f888:	f7fa ff1a 	bl	800a6c0 <ucdr_serialize_bool>
 800f88c:	782b      	ldrb	r3, [r5, #0]
 800f88e:	4604      	mov	r4, r0
 800f890:	b94b      	cbnz	r3, 800f8a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f892:	7a29      	ldrb	r1, [r5, #8]
 800f894:	4630      	mov	r0, r6
 800f896:	f7fa ff13 	bl	800a6c0 <ucdr_serialize_bool>
 800f89a:	7a2b      	ldrb	r3, [r5, #8]
 800f89c:	4004      	ands	r4, r0
 800f89e:	b2e4      	uxtb	r4, r4
 800f8a0:	b943      	cbnz	r3, 800f8b4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}
 800f8a6:	6869      	ldr	r1, [r5, #4]
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f005 faa5 	bl	8014df8 <ucdr_serialize_string>
 800f8ae:	4004      	ands	r4, r0
 800f8b0:	b2e4      	uxtb	r4, r4
 800f8b2:	e7ee      	b.n	800f892 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f8b4:	68e9      	ldr	r1, [r5, #12]
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f005 fa9e 	bl	8014df8 <ucdr_serialize_string>
 800f8bc:	4004      	ands	r4, r0
 800f8be:	4620      	mov	r0, r4
 800f8c0:	bd70      	pop	{r4, r5, r6, pc}
 800f8c2:	bf00      	nop

0800f8c4 <uxr_serialize_OBJK_Topic_Binary>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	460d      	mov	r5, r1
 800f8c8:	6809      	ldr	r1, [r1, #0]
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	f005 fa94 	bl	8014df8 <ucdr_serialize_string>
 800f8d0:	7929      	ldrb	r1, [r5, #4]
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	f7fa fef3 	bl	800a6c0 <ucdr_serialize_bool>
 800f8da:	792b      	ldrb	r3, [r5, #4]
 800f8dc:	4004      	ands	r4, r0
 800f8de:	b2e4      	uxtb	r4, r4
 800f8e0:	b943      	cbnz	r3, 800f8f4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f8e2:	7b29      	ldrb	r1, [r5, #12]
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7fa feeb 	bl	800a6c0 <ucdr_serialize_bool>
 800f8ea:	7b2b      	ldrb	r3, [r5, #12]
 800f8ec:	4004      	ands	r4, r0
 800f8ee:	b93b      	cbnz	r3, 800f900 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}
 800f8f4:	68a9      	ldr	r1, [r5, #8]
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f005 fa7e 	bl	8014df8 <ucdr_serialize_string>
 800f8fc:	4004      	ands	r4, r0
 800f8fe:	e7f0      	b.n	800f8e2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f900:	6929      	ldr	r1, [r5, #16]
 800f902:	4630      	mov	r0, r6
 800f904:	f005 fa78 	bl	8014df8 <ucdr_serialize_string>
 800f908:	4004      	ands	r4, r0
 800f90a:	b2e4      	uxtb	r4, r4
 800f90c:	4620      	mov	r0, r4
 800f90e:	bd70      	pop	{r4, r5, r6, pc}

0800f910 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	460c      	mov	r4, r1
 800f916:	7809      	ldrb	r1, [r1, #0]
 800f918:	4606      	mov	r6, r0
 800f91a:	f7fa fed1 	bl	800a6c0 <ucdr_serialize_bool>
 800f91e:	7823      	ldrb	r3, [r4, #0]
 800f920:	4605      	mov	r5, r0
 800f922:	b96b      	cbnz	r3, 800f940 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f924:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f928:	4630      	mov	r0, r6
 800f92a:	f7fa fec9 	bl	800a6c0 <ucdr_serialize_bool>
 800f92e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f932:	4005      	ands	r5, r0
 800f934:	b2ed      	uxtb	r5, r5
 800f936:	2b00      	cmp	r3, #0
 800f938:	d169      	bne.n	800fa0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f93a:	4628      	mov	r0, r5
 800f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f940:	6861      	ldr	r1, [r4, #4]
 800f942:	4630      	mov	r0, r6
 800f944:	f7fb f900 	bl	800ab48 <ucdr_serialize_uint32_t>
 800f948:	6863      	ldr	r3, [r4, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d06b      	beq.n	800fa26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d067      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f952:	68a1      	ldr	r1, [r4, #8]
 800f954:	4630      	mov	r0, r6
 800f956:	f005 fa4f 	bl	8014df8 <ucdr_serialize_string>
 800f95a:	6863      	ldr	r3, [r4, #4]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d953      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f960:	2800      	cmp	r0, #0
 800f962:	d05e      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f964:	68e1      	ldr	r1, [r4, #12]
 800f966:	4630      	mov	r0, r6
 800f968:	f005 fa46 	bl	8014df8 <ucdr_serialize_string>
 800f96c:	6863      	ldr	r3, [r4, #4]
 800f96e:	2b02      	cmp	r3, #2
 800f970:	d94a      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f972:	2800      	cmp	r0, #0
 800f974:	d055      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f976:	6921      	ldr	r1, [r4, #16]
 800f978:	4630      	mov	r0, r6
 800f97a:	f005 fa3d 	bl	8014df8 <ucdr_serialize_string>
 800f97e:	6863      	ldr	r3, [r4, #4]
 800f980:	2b03      	cmp	r3, #3
 800f982:	d941      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f984:	2800      	cmp	r0, #0
 800f986:	d04c      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f988:	6961      	ldr	r1, [r4, #20]
 800f98a:	4630      	mov	r0, r6
 800f98c:	f005 fa34 	bl	8014df8 <ucdr_serialize_string>
 800f990:	6863      	ldr	r3, [r4, #4]
 800f992:	2b04      	cmp	r3, #4
 800f994:	d938      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f996:	2800      	cmp	r0, #0
 800f998:	d043      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f99a:	69a1      	ldr	r1, [r4, #24]
 800f99c:	4630      	mov	r0, r6
 800f99e:	f005 fa2b 	bl	8014df8 <ucdr_serialize_string>
 800f9a2:	6863      	ldr	r3, [r4, #4]
 800f9a4:	2b05      	cmp	r3, #5
 800f9a6:	d92f      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d03a      	beq.n	800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9ac:	69e1      	ldr	r1, [r4, #28]
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f005 fa22 	bl	8014df8 <ucdr_serialize_string>
 800f9b4:	6863      	ldr	r3, [r4, #4]
 800f9b6:	2b06      	cmp	r3, #6
 800f9b8:	d926      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9ba:	b390      	cbz	r0, 800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9bc:	6a21      	ldr	r1, [r4, #32]
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f005 fa1a 	bl	8014df8 <ucdr_serialize_string>
 800f9c4:	6863      	ldr	r3, [r4, #4]
 800f9c6:	2b07      	cmp	r3, #7
 800f9c8:	d91e      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9ca:	b350      	cbz	r0, 800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f005 fa12 	bl	8014df8 <ucdr_serialize_string>
 800f9d4:	6863      	ldr	r3, [r4, #4]
 800f9d6:	2b08      	cmp	r3, #8
 800f9d8:	d916      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9da:	b310      	cbz	r0, 800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f005 fa0a 	bl	8014df8 <ucdr_serialize_string>
 800f9e4:	6863      	ldr	r3, [r4, #4]
 800f9e6:	2b09      	cmp	r3, #9
 800f9e8:	d90e      	bls.n	800fa08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9ea:	b1d0      	cbz	r0, 800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f9f0:	2709      	movs	r7, #9
 800f9f2:	e000      	b.n	800f9f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f9f4:	b1a8      	cbz	r0, 800fa22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9f6:	f858 1b04 	ldr.w	r1, [r8], #4
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f005 f9fc 	bl	8014df8 <ucdr_serialize_string>
 800fa00:	6862      	ldr	r2, [r4, #4]
 800fa02:	3701      	adds	r7, #1
 800fa04:	4297      	cmp	r7, r2
 800fa06:	d3f5      	bcc.n	800f9f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800fa08:	4005      	ands	r5, r0
 800fa0a:	b2ed      	uxtb	r5, r5
 800fa0c:	e78a      	b.n	800f924 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fa0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa10:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fa14:	4630      	mov	r0, r6
 800fa16:	f005 f9c3 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800fa1a:	4005      	ands	r5, r0
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa22:	2500      	movs	r5, #0
 800fa24:	e77e      	b.n	800f924 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fa26:	4028      	ands	r0, r5
 800fa28:	b2c5      	uxtb	r5, r0
 800fa2a:	e77b      	b.n	800f924 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800fa2c <uxr_serialize_OBJK_Publisher_Binary>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	460d      	mov	r5, r1
 800fa30:	7809      	ldrb	r1, [r1, #0]
 800fa32:	4606      	mov	r6, r0
 800fa34:	f7fa fe44 	bl	800a6c0 <ucdr_serialize_bool>
 800fa38:	782b      	ldrb	r3, [r5, #0]
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	b94b      	cbnz	r3, 800fa52 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800fa3e:	7a29      	ldrb	r1, [r5, #8]
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7fa fe3d 	bl	800a6c0 <ucdr_serialize_bool>
 800fa46:	7a2b      	ldrb	r3, [r5, #8]
 800fa48:	4004      	ands	r4, r0
 800fa4a:	b2e4      	uxtb	r4, r4
 800fa4c:	b943      	cbnz	r3, 800fa60 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800fa4e:	4620      	mov	r0, r4
 800fa50:	bd70      	pop	{r4, r5, r6, pc}
 800fa52:	6869      	ldr	r1, [r5, #4]
 800fa54:	4630      	mov	r0, r6
 800fa56:	f005 f9cf 	bl	8014df8 <ucdr_serialize_string>
 800fa5a:	4004      	ands	r4, r0
 800fa5c:	b2e4      	uxtb	r4, r4
 800fa5e:	e7ee      	b.n	800fa3e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800fa60:	f105 010c 	add.w	r1, r5, #12
 800fa64:	4630      	mov	r0, r6
 800fa66:	f7ff ff53 	bl	800f910 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800fa6a:	4004      	ands	r4, r0
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	bd70      	pop	{r4, r5, r6, pc}

0800fa70 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800fa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa74:	460c      	mov	r4, r1
 800fa76:	7809      	ldrb	r1, [r1, #0]
 800fa78:	4606      	mov	r6, r0
 800fa7a:	f7fa fe21 	bl	800a6c0 <ucdr_serialize_bool>
 800fa7e:	7823      	ldrb	r3, [r4, #0]
 800fa80:	4605      	mov	r5, r0
 800fa82:	b96b      	cbnz	r3, 800faa0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800fa84:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7fa fe19 	bl	800a6c0 <ucdr_serialize_bool>
 800fa8e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fa92:	4005      	ands	r5, r0
 800fa94:	b2ed      	uxtb	r5, r5
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d169      	bne.n	800fb6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa0:	6861      	ldr	r1, [r4, #4]
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7fb f850 	bl	800ab48 <ucdr_serialize_uint32_t>
 800faa8:	6863      	ldr	r3, [r4, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d06b      	beq.n	800fb86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d067      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fab2:	68a1      	ldr	r1, [r4, #8]
 800fab4:	4630      	mov	r0, r6
 800fab6:	f005 f99f 	bl	8014df8 <ucdr_serialize_string>
 800faba:	6863      	ldr	r3, [r4, #4]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d953      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d05e      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fac4:	68e1      	ldr	r1, [r4, #12]
 800fac6:	4630      	mov	r0, r6
 800fac8:	f005 f996 	bl	8014df8 <ucdr_serialize_string>
 800facc:	6863      	ldr	r3, [r4, #4]
 800face:	2b02      	cmp	r3, #2
 800fad0:	d94a      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d055      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fad6:	6921      	ldr	r1, [r4, #16]
 800fad8:	4630      	mov	r0, r6
 800fada:	f005 f98d 	bl	8014df8 <ucdr_serialize_string>
 800fade:	6863      	ldr	r3, [r4, #4]
 800fae0:	2b03      	cmp	r3, #3
 800fae2:	d941      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d04c      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fae8:	6961      	ldr	r1, [r4, #20]
 800faea:	4630      	mov	r0, r6
 800faec:	f005 f984 	bl	8014df8 <ucdr_serialize_string>
 800faf0:	6863      	ldr	r3, [r4, #4]
 800faf2:	2b04      	cmp	r3, #4
 800faf4:	d938      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d043      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fafa:	69a1      	ldr	r1, [r4, #24]
 800fafc:	4630      	mov	r0, r6
 800fafe:	f005 f97b 	bl	8014df8 <ucdr_serialize_string>
 800fb02:	6863      	ldr	r3, [r4, #4]
 800fb04:	2b05      	cmp	r3, #5
 800fb06:	d92f      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d03a      	beq.n	800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb0c:	69e1      	ldr	r1, [r4, #28]
 800fb0e:	4630      	mov	r0, r6
 800fb10:	f005 f972 	bl	8014df8 <ucdr_serialize_string>
 800fb14:	6863      	ldr	r3, [r4, #4]
 800fb16:	2b06      	cmp	r3, #6
 800fb18:	d926      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb1a:	b390      	cbz	r0, 800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb1c:	6a21      	ldr	r1, [r4, #32]
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f005 f96a 	bl	8014df8 <ucdr_serialize_string>
 800fb24:	6863      	ldr	r3, [r4, #4]
 800fb26:	2b07      	cmp	r3, #7
 800fb28:	d91e      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb2a:	b350      	cbz	r0, 800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb2c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f005 f962 	bl	8014df8 <ucdr_serialize_string>
 800fb34:	6863      	ldr	r3, [r4, #4]
 800fb36:	2b08      	cmp	r3, #8
 800fb38:	d916      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb3a:	b310      	cbz	r0, 800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb3c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f005 f95a 	bl	8014df8 <ucdr_serialize_string>
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	2b09      	cmp	r3, #9
 800fb48:	d90e      	bls.n	800fb68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb4a:	b1d0      	cbz	r0, 800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb4c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800fb50:	2709      	movs	r7, #9
 800fb52:	e000      	b.n	800fb56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800fb54:	b1a8      	cbz	r0, 800fb82 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb56:	f858 1b04 	ldr.w	r1, [r8], #4
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f005 f94c 	bl	8014df8 <ucdr_serialize_string>
 800fb60:	6862      	ldr	r2, [r4, #4]
 800fb62:	3701      	adds	r7, #1
 800fb64:	4297      	cmp	r7, r2
 800fb66:	d3f5      	bcc.n	800fb54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800fb68:	4005      	ands	r5, r0
 800fb6a:	b2ed      	uxtb	r5, r5
 800fb6c:	e78a      	b.n	800fa84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fb6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fb70:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fb74:	4630      	mov	r0, r6
 800fb76:	f005 f913 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800fb7a:	4005      	ands	r5, r0
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb82:	2500      	movs	r5, #0
 800fb84:	e77e      	b.n	800fa84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fb86:	4028      	ands	r0, r5
 800fb88:	b2c5      	uxtb	r5, r0
 800fb8a:	e77b      	b.n	800fa84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800fb8c <uxr_serialize_OBJK_Subscriber_Binary>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	460d      	mov	r5, r1
 800fb90:	7809      	ldrb	r1, [r1, #0]
 800fb92:	4606      	mov	r6, r0
 800fb94:	f7fa fd94 	bl	800a6c0 <ucdr_serialize_bool>
 800fb98:	782b      	ldrb	r3, [r5, #0]
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	b94b      	cbnz	r3, 800fbb2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800fb9e:	7a29      	ldrb	r1, [r5, #8]
 800fba0:	4630      	mov	r0, r6
 800fba2:	f7fa fd8d 	bl	800a6c0 <ucdr_serialize_bool>
 800fba6:	7a2b      	ldrb	r3, [r5, #8]
 800fba8:	4004      	ands	r4, r0
 800fbaa:	b2e4      	uxtb	r4, r4
 800fbac:	b943      	cbnz	r3, 800fbc0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800fbae:	4620      	mov	r0, r4
 800fbb0:	bd70      	pop	{r4, r5, r6, pc}
 800fbb2:	6869      	ldr	r1, [r5, #4]
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f005 f91f 	bl	8014df8 <ucdr_serialize_string>
 800fbba:	4004      	ands	r4, r0
 800fbbc:	b2e4      	uxtb	r4, r4
 800fbbe:	e7ee      	b.n	800fb9e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800fbc0:	f105 010c 	add.w	r1, r5, #12
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f7ff ff53 	bl	800fa70 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800fbca:	4004      	ands	r4, r0
 800fbcc:	4620      	mov	r0, r4
 800fbce:	bd70      	pop	{r4, r5, r6, pc}

0800fbd0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fbd0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800fbd4:	4688      	mov	r8, r1
 800fbd6:	8809      	ldrh	r1, [r1, #0]
 800fbd8:	4681      	mov	r9, r0
 800fbda:	f7fa fdcb 	bl	800a774 <ucdr_serialize_uint16_t>
 800fbde:	f898 1002 	ldrb.w	r1, [r8, #2]
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	4648      	mov	r0, r9
 800fbe6:	f7fa fd6b 	bl	800a6c0 <ucdr_serialize_bool>
 800fbea:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fbee:	4006      	ands	r6, r0
 800fbf0:	b2f5      	uxtb	r5, r6
 800fbf2:	b9eb      	cbnz	r3, 800fc30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800fbf4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fbf8:	4648      	mov	r0, r9
 800fbfa:	f7fa fd61 	bl	800a6c0 <ucdr_serialize_bool>
 800fbfe:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fc02:	4005      	ands	r5, r0
 800fc04:	bb7b      	cbnz	r3, 800fc66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800fc06:	f898 100c 	ldrb.w	r1, [r8, #12]
 800fc0a:	4648      	mov	r0, r9
 800fc0c:	f7fa fd58 	bl	800a6c0 <ucdr_serialize_bool>
 800fc10:	f898 300c 	ldrb.w	r3, [r8, #12]
 800fc14:	4005      	ands	r5, r0
 800fc16:	b9f3      	cbnz	r3, 800fc56 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800fc18:	f898 1014 	ldrb.w	r1, [r8, #20]
 800fc1c:	4648      	mov	r0, r9
 800fc1e:	f7fa fd4f 	bl	800a6c0 <ucdr_serialize_bool>
 800fc22:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fc26:	4005      	ands	r5, r0
 800fc28:	b94b      	cbnz	r3, 800fc3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fc30:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fc34:	4648      	mov	r0, r9
 800fc36:	f7fa fd9d 	bl	800a774 <ucdr_serialize_uint16_t>
 800fc3a:	4005      	ands	r5, r0
 800fc3c:	e7da      	b.n	800fbf4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800fc3e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800fc42:	f108 011c 	add.w	r1, r8, #28
 800fc46:	4648      	mov	r0, r9
 800fc48:	f005 f8aa 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 800fc4c:	4028      	ands	r0, r5
 800fc4e:	b2c5      	uxtb	r5, r0
 800fc50:	4628      	mov	r0, r5
 800fc52:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fc56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc5a:	4648      	mov	r0, r9
 800fc5c:	f7fa ff74 	bl	800ab48 <ucdr_serialize_uint32_t>
 800fc60:	4028      	ands	r0, r5
 800fc62:	b2c5      	uxtb	r5, r0
 800fc64:	e7d8      	b.n	800fc18 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fc66:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fc6a:	4648      	mov	r0, r9
 800fc6c:	f7fa ff6c 	bl	800ab48 <ucdr_serialize_uint32_t>
 800fc70:	4028      	ands	r0, r5
 800fc72:	b2c5      	uxtb	r5, r0
 800fc74:	e7c7      	b.n	800fc06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fc76:	bf00      	nop

0800fc78 <uxr_serialize_OBJK_DataReader_Binary>:
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	460c      	mov	r4, r1
 800fc7e:	4606      	mov	r6, r0
 800fc80:	f004 ff9a 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800fc84:	78a1      	ldrb	r1, [r4, #2]
 800fc86:	4605      	mov	r5, r0
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7fa fd19 	bl	800a6c0 <ucdr_serialize_bool>
 800fc8e:	78a3      	ldrb	r3, [r4, #2]
 800fc90:	4005      	ands	r5, r0
 800fc92:	b2ed      	uxtb	r5, r5
 800fc94:	b90b      	cbnz	r3, 800fc9a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800fc96:	4628      	mov	r0, r5
 800fc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc9a:	f104 0108 	add.w	r1, r4, #8
 800fc9e:	4630      	mov	r0, r6
 800fca0:	f7ff ff96 	bl	800fbd0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fca4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fca8:	4607      	mov	r7, r0
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f7fa fd08 	bl	800a6c0 <ucdr_serialize_bool>
 800fcb0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fcb4:	4038      	ands	r0, r7
 800fcb6:	b2c7      	uxtb	r7, r0
 800fcb8:	b95b      	cbnz	r3, 800fcd2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800fcba:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f7fa fcfe 	bl	800a6c0 <ucdr_serialize_bool>
 800fcc4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fcc8:	4007      	ands	r7, r0
 800fcca:	b94b      	cbnz	r3, 800fce0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800fccc:	403d      	ands	r5, r7
 800fcce:	4628      	mov	r0, r5
 800fcd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcd2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f7fb f98c 	bl	800aff4 <ucdr_serialize_uint64_t>
 800fcdc:	4007      	ands	r7, r0
 800fcde:	e7ec      	b.n	800fcba <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800fce0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800fce2:	4630      	mov	r0, r6
 800fce4:	f005 f888 	bl	8014df8 <ucdr_serialize_string>
 800fce8:	4007      	ands	r7, r0
 800fcea:	b2ff      	uxtb	r7, r7
 800fcec:	e7ee      	b.n	800fccc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800fcee:	bf00      	nop

0800fcf0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf2:	2202      	movs	r2, #2
 800fcf4:	460d      	mov	r5, r1
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	f004 ff5e 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800fcfc:	78a9      	ldrb	r1, [r5, #2]
 800fcfe:	4604      	mov	r4, r0
 800fd00:	4630      	mov	r0, r6
 800fd02:	f7fa fcdd 	bl	800a6c0 <ucdr_serialize_bool>
 800fd06:	78ab      	ldrb	r3, [r5, #2]
 800fd08:	4004      	ands	r4, r0
 800fd0a:	b2e4      	uxtb	r4, r4
 800fd0c:	b90b      	cbnz	r3, 800fd12 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fd0e:	4620      	mov	r0, r4
 800fd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd12:	f105 0108 	add.w	r1, r5, #8
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7ff ff5a 	bl	800fbd0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fd1c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fd20:	4607      	mov	r7, r0
 800fd22:	4630      	mov	r0, r6
 800fd24:	f7fa fccc 	bl	800a6c0 <ucdr_serialize_bool>
 800fd28:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fd2c:	4038      	ands	r0, r7
 800fd2e:	b2c7      	uxtb	r7, r0
 800fd30:	b913      	cbnz	r3, 800fd38 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fd32:	403c      	ands	r4, r7
 800fd34:	4620      	mov	r0, r4
 800fd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd38:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7fb f959 	bl	800aff4 <ucdr_serialize_uint64_t>
 800fd42:	4007      	ands	r7, r0
 800fd44:	e7f5      	b.n	800fd32 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fd46:	bf00      	nop

0800fd48 <uxr_deserialize_ObjectVariant>:
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	f7fa fcfb 	bl	800a748 <ucdr_deserialize_uint8_t>
 800fd52:	b168      	cbz	r0, 800fd70 <uxr_deserialize_ObjectVariant+0x28>
 800fd54:	7833      	ldrb	r3, [r6, #0]
 800fd56:	3b01      	subs	r3, #1
 800fd58:	4604      	mov	r4, r0
 800fd5a:	2b0d      	cmp	r3, #13
 800fd5c:	d809      	bhi.n	800fd72 <uxr_deserialize_ObjectVariant+0x2a>
 800fd5e:	e8df f003 	tbb	[pc, r3]
 800fd62:	0a41      	.short	0x0a41
 800fd64:	0a0a2323 	.word	0x0a0a2323
 800fd68:	10080a0a 	.word	0x10080a0a
 800fd6c:	565c1010 	.word	0x565c1010
 800fd70:	2400      	movs	r4, #0
 800fd72:	4620      	mov	r0, r4
 800fd74:	bd70      	pop	{r4, r5, r6, pc}
 800fd76:	1d31      	adds	r1, r6, #4
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd7e:	f7ff bd55 	b.w	800f82c <uxr_deserialize_DATAWRITER_Representation>
 800fd82:	1d31      	adds	r1, r6, #4
 800fd84:	4628      	mov	r0, r5
 800fd86:	f7fa fcdf 	bl	800a748 <ucdr_deserialize_uint8_t>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d0f0      	beq.n	800fd70 <uxr_deserialize_ObjectVariant+0x28>
 800fd8e:	7933      	ldrb	r3, [r6, #4]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d001      	beq.n	800fd98 <uxr_deserialize_ObjectVariant+0x50>
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d1ec      	bne.n	800fd72 <uxr_deserialize_ObjectVariant+0x2a>
 800fd98:	68b1      	ldr	r1, [r6, #8]
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fda4:	f005 b838 	b.w	8014e18 <ucdr_deserialize_string>
 800fda8:	1d31      	adds	r1, r6, #4
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f7fa fccc 	bl	800a748 <ucdr_deserialize_uint8_t>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	b170      	cbz	r0, 800fdd2 <uxr_deserialize_ObjectVariant+0x8a>
 800fdb4:	7933      	ldrb	r3, [r6, #4]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d04c      	beq.n	800fe54 <uxr_deserialize_ObjectVariant+0x10c>
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d109      	bne.n	800fdd2 <uxr_deserialize_ObjectVariant+0x8a>
 800fdbe:	f106 0308 	add.w	r3, r6, #8
 800fdc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdc6:	f106 010c 	add.w	r1, r6, #12
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f004 fffa 	bl	8014dc4 <ucdr_deserialize_sequence_uint8_t>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	2202      	movs	r2, #2
 800fdd4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f004 ff51 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fdde:	4020      	ands	r0, r4
 800fde0:	b2c4      	uxtb	r4, r0
 800fde2:	e7c6      	b.n	800fd72 <uxr_deserialize_ObjectVariant+0x2a>
 800fde4:	1d31      	adds	r1, r6, #4
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7fa fcae 	bl	800a748 <ucdr_deserialize_uint8_t>
 800fdec:	4604      	mov	r4, r0
 800fdee:	b130      	cbz	r0, 800fdfe <uxr_deserialize_ObjectVariant+0xb6>
 800fdf0:	7933      	ldrb	r3, [r6, #4]
 800fdf2:	2b02      	cmp	r3, #2
 800fdf4:	d036      	beq.n	800fe64 <uxr_deserialize_ObjectVariant+0x11c>
 800fdf6:	2b03      	cmp	r3, #3
 800fdf8:	d03c      	beq.n	800fe74 <uxr_deserialize_ObjectVariant+0x12c>
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d032      	beq.n	800fe64 <uxr_deserialize_ObjectVariant+0x11c>
 800fdfe:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fe02:	4628      	mov	r0, r5
 800fe04:	f7fb fa46 	bl	800b294 <ucdr_deserialize_int16_t>
 800fe08:	4020      	ands	r0, r4
 800fe0a:	b2c4      	uxtb	r4, r0
 800fe0c:	e7b1      	b.n	800fd72 <uxr_deserialize_ObjectVariant+0x2a>
 800fe0e:	1d31      	adds	r1, r6, #4
 800fe10:	4628      	mov	r0, r5
 800fe12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe16:	f7ff bbbf 	b.w	800f598 <uxr_deserialize_CLIENT_Representation>
 800fe1a:	2204      	movs	r2, #4
 800fe1c:	18b1      	adds	r1, r6, r2
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f004 ff2e 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fe24:	2202      	movs	r2, #2
 800fe26:	f106 0108 	add.w	r1, r6, #8
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f004 ff27 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fe32:	2202      	movs	r2, #2
 800fe34:	4004      	ands	r4, r0
 800fe36:	f106 010a 	add.w	r1, r6, #10
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f004 ff20 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fe40:	b2e4      	uxtb	r4, r4
 800fe42:	4603      	mov	r3, r0
 800fe44:	f106 010c 	add.w	r1, r6, #12
 800fe48:	4628      	mov	r0, r5
 800fe4a:	401c      	ands	r4, r3
 800fe4c:	f7fa fc4e 	bl	800a6ec <ucdr_deserialize_bool>
 800fe50:	4004      	ands	r4, r0
 800fe52:	e78e      	b.n	800fd72 <uxr_deserialize_ObjectVariant+0x2a>
 800fe54:	68b1      	ldr	r1, [r6, #8]
 800fe56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f004 ffdc 	bl	8014e18 <ucdr_deserialize_string>
 800fe60:	4604      	mov	r4, r0
 800fe62:	e7b6      	b.n	800fdd2 <uxr_deserialize_ObjectVariant+0x8a>
 800fe64:	68b1      	ldr	r1, [r6, #8]
 800fe66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f004 ffd4 	bl	8014e18 <ucdr_deserialize_string>
 800fe70:	4604      	mov	r4, r0
 800fe72:	e7c4      	b.n	800fdfe <uxr_deserialize_ObjectVariant+0xb6>
 800fe74:	f106 0308 	add.w	r3, r6, #8
 800fe78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe7c:	f106 010c 	add.w	r1, r6, #12
 800fe80:	4628      	mov	r0, r5
 800fe82:	f004 ff9f 	bl	8014dc4 <ucdr_deserialize_sequence_uint8_t>
 800fe86:	4604      	mov	r4, r0
 800fe88:	e7b9      	b.n	800fdfe <uxr_deserialize_ObjectVariant+0xb6>
 800fe8a:	bf00      	nop

0800fe8c <uxr_deserialize_BaseObjectRequest>:
 800fe8c:	b570      	push	{r4, r5, r6, lr}
 800fe8e:	2202      	movs	r2, #2
 800fe90:	4605      	mov	r5, r0
 800fe92:	460e      	mov	r6, r1
 800fe94:	f004 fef4 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fe98:	2202      	movs	r2, #2
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	18b1      	adds	r1, r6, r2
 800fe9e:	4628      	mov	r0, r5
 800fea0:	f004 feee 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 800fea4:	4020      	ands	r0, r4
 800fea6:	b2c0      	uxtb	r0, r0
 800fea8:	bd70      	pop	{r4, r5, r6, pc}
 800feaa:	bf00      	nop

0800feac <uxr_serialize_ActivityInfoVariant>:
 800feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feb0:	460d      	mov	r5, r1
 800feb2:	7809      	ldrb	r1, [r1, #0]
 800feb4:	4607      	mov	r7, r0
 800feb6:	f7fa fc31 	bl	800a71c <ucdr_serialize_uint8_t>
 800feba:	4681      	mov	r9, r0
 800febc:	b138      	cbz	r0, 800fece <uxr_serialize_ActivityInfoVariant+0x22>
 800febe:	782b      	ldrb	r3, [r5, #0]
 800fec0:	2b06      	cmp	r3, #6
 800fec2:	f000 8082 	beq.w	800ffca <uxr_serialize_ActivityInfoVariant+0x11e>
 800fec6:	2b0d      	cmp	r3, #13
 800fec8:	d016      	beq.n	800fef8 <uxr_serialize_ActivityInfoVariant+0x4c>
 800feca:	2b05      	cmp	r3, #5
 800fecc:	d002      	beq.n	800fed4 <uxr_serialize_ActivityInfoVariant+0x28>
 800fece:	4648      	mov	r0, r9
 800fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fed8:	4638      	mov	r0, r7
 800feda:	f7fb f95b 	bl	800b194 <ucdr_serialize_int16_t>
 800fede:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800fee2:	4681      	mov	r9, r0
 800fee4:	4638      	mov	r0, r7
 800fee6:	f7fb f885 	bl	800aff4 <ucdr_serialize_uint64_t>
 800feea:	ea09 0000 	and.w	r0, r9, r0
 800feee:	fa5f f980 	uxtb.w	r9, r0
 800fef2:	4648      	mov	r0, r9
 800fef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fefc:	4638      	mov	r0, r7
 800fefe:	f7fb f949 	bl	800b194 <ucdr_serialize_int16_t>
 800ff02:	68e9      	ldr	r1, [r5, #12]
 800ff04:	4681      	mov	r9, r0
 800ff06:	4638      	mov	r0, r7
 800ff08:	f7fa fe1e 	bl	800ab48 <ucdr_serialize_uint32_t>
 800ff0c:	68eb      	ldr	r3, [r5, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d0eb      	beq.n	800feea <uxr_serialize_ActivityInfoVariant+0x3e>
 800ff12:	b320      	cbz	r0, 800ff5e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ff14:	f105 080c 	add.w	r8, r5, #12
 800ff18:	2600      	movs	r6, #0
 800ff1a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ff1e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ff22:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ff26:	4638      	mov	r0, r7
 800ff28:	f7fa fbf8 	bl	800a71c <ucdr_serialize_uint8_t>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d053      	beq.n	800ffd8 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ff30:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ff34:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ff38:	0074      	lsls	r4, r6, #1
 800ff3a:	00c9      	lsls	r1, r1, #3
 800ff3c:	2b03      	cmp	r3, #3
 800ff3e:	d854      	bhi.n	800ffea <uxr_serialize_ActivityInfoVariant+0x13e>
 800ff40:	e8df f003 	tbb	[pc, r3]
 800ff44:	02102132 	.word	0x02102132
 800ff48:	4441      	add	r1, r8
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	6889      	ldr	r1, [r1, #8]
 800ff4e:	f004 ff53 	bl	8014df8 <ucdr_serialize_string>
 800ff52:	68ea      	ldr	r2, [r5, #12]
 800ff54:	3601      	adds	r6, #1
 800ff56:	4296      	cmp	r6, r2
 800ff58:	d242      	bcs.n	800ffe0 <uxr_serialize_ActivityInfoVariant+0x134>
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	d1dd      	bne.n	800ff1a <uxr_serialize_ActivityInfoVariant+0x6e>
 800ff5e:	f04f 0900 	mov.w	r9, #0
 800ff62:	e7b4      	b.n	800fece <uxr_serialize_ActivityInfoVariant+0x22>
 800ff64:	3108      	adds	r1, #8
 800ff66:	4441      	add	r1, r8
 800ff68:	2210      	movs	r2, #16
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	f004 fe24 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800ff70:	4434      	add	r4, r6
 800ff72:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ff76:	4604      	mov	r4, r0
 800ff78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f7fa fde4 	bl	800ab48 <ucdr_serialize_uint32_t>
 800ff80:	4020      	ands	r0, r4
 800ff82:	b2c0      	uxtb	r0, r0
 800ff84:	e7e5      	b.n	800ff52 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ff86:	3108      	adds	r1, #8
 800ff88:	4441      	add	r1, r8
 800ff8a:	2204      	movs	r2, #4
 800ff8c:	4638      	mov	r0, r7
 800ff8e:	f004 fe13 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800ff92:	4434      	add	r4, r6
 800ff94:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ff98:	4604      	mov	r4, r0
 800ff9a:	8b19      	ldrh	r1, [r3, #24]
 800ff9c:	4638      	mov	r0, r7
 800ff9e:	f7fa fbe9 	bl	800a774 <ucdr_serialize_uint16_t>
 800ffa2:	4020      	ands	r0, r4
 800ffa4:	b2c0      	uxtb	r0, r0
 800ffa6:	e7d4      	b.n	800ff52 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ffa8:	3108      	adds	r1, #8
 800ffaa:	4441      	add	r1, r8
 800ffac:	2202      	movs	r2, #2
 800ffae:	4638      	mov	r0, r7
 800ffb0:	f004 fe02 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 800ffb4:	4434      	add	r4, r6
 800ffb6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ffba:	4604      	mov	r4, r0
 800ffbc:	7d99      	ldrb	r1, [r3, #22]
 800ffbe:	4638      	mov	r0, r7
 800ffc0:	f7fa fbac 	bl	800a71c <ucdr_serialize_uint8_t>
 800ffc4:	4020      	ands	r0, r4
 800ffc6:	b2c0      	uxtb	r0, r0
 800ffc8:	e7c3      	b.n	800ff52 <uxr_serialize_ActivityInfoVariant+0xa6>
 800ffca:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ffce:	4638      	mov	r0, r7
 800ffd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffd4:	f7fb b8de 	b.w	800b194 <ucdr_serialize_int16_t>
 800ffd8:	68ea      	ldr	r2, [r5, #12]
 800ffda:	3601      	adds	r6, #1
 800ffdc:	42b2      	cmp	r2, r6
 800ffde:	d8be      	bhi.n	800ff5e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ffe0:	ea09 0900 	and.w	r9, r9, r0
 800ffe4:	fa5f f989 	uxtb.w	r9, r9
 800ffe8:	e771      	b.n	800fece <uxr_serialize_ActivityInfoVariant+0x22>
 800ffea:	68eb      	ldr	r3, [r5, #12]
 800ffec:	3601      	adds	r6, #1
 800ffee:	429e      	cmp	r6, r3
 800fff0:	f10a 0a18 	add.w	sl, sl, #24
 800fff4:	d395      	bcc.n	800ff22 <uxr_serialize_ActivityInfoVariant+0x76>
 800fff6:	e76a      	b.n	800fece <uxr_serialize_ActivityInfoVariant+0x22>

0800fff8 <uxr_deserialize_BaseObjectReply>:
 800fff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fffc:	2202      	movs	r2, #2
 800fffe:	4606      	mov	r6, r0
 8010000:	460f      	mov	r7, r1
 8010002:	f004 fe3d 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010006:	2202      	movs	r2, #2
 8010008:	18b9      	adds	r1, r7, r2
 801000a:	4605      	mov	r5, r0
 801000c:	4630      	mov	r0, r6
 801000e:	f004 fe37 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010012:	1d39      	adds	r1, r7, #4
 8010014:	4680      	mov	r8, r0
 8010016:	4630      	mov	r0, r6
 8010018:	f7fa fb96 	bl	800a748 <ucdr_deserialize_uint8_t>
 801001c:	1d79      	adds	r1, r7, #5
 801001e:	4604      	mov	r4, r0
 8010020:	4630      	mov	r0, r6
 8010022:	f7fa fb91 	bl	800a748 <ucdr_deserialize_uint8_t>
 8010026:	ea05 0508 	and.w	r5, r5, r8
 801002a:	402c      	ands	r4, r5
 801002c:	4020      	ands	r0, r4
 801002e:	b2c0      	uxtb	r0, r0
 8010030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010034 <uxr_serialize_ReadSpecification>:
 8010034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010038:	460e      	mov	r6, r1
 801003a:	7809      	ldrb	r1, [r1, #0]
 801003c:	4607      	mov	r7, r0
 801003e:	f7fa fb6d 	bl	800a71c <ucdr_serialize_uint8_t>
 8010042:	7871      	ldrb	r1, [r6, #1]
 8010044:	4604      	mov	r4, r0
 8010046:	4638      	mov	r0, r7
 8010048:	f7fa fb68 	bl	800a71c <ucdr_serialize_uint8_t>
 801004c:	78b1      	ldrb	r1, [r6, #2]
 801004e:	4004      	ands	r4, r0
 8010050:	4638      	mov	r0, r7
 8010052:	f7fa fb35 	bl	800a6c0 <ucdr_serialize_bool>
 8010056:	78b3      	ldrb	r3, [r6, #2]
 8010058:	b2e4      	uxtb	r4, r4
 801005a:	4004      	ands	r4, r0
 801005c:	b94b      	cbnz	r3, 8010072 <uxr_serialize_ReadSpecification+0x3e>
 801005e:	7a31      	ldrb	r1, [r6, #8]
 8010060:	4638      	mov	r0, r7
 8010062:	f7fa fb2d 	bl	800a6c0 <ucdr_serialize_bool>
 8010066:	7a33      	ldrb	r3, [r6, #8]
 8010068:	4004      	ands	r4, r0
 801006a:	b943      	cbnz	r3, 801007e <uxr_serialize_ReadSpecification+0x4a>
 801006c:	4620      	mov	r0, r4
 801006e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010072:	6871      	ldr	r1, [r6, #4]
 8010074:	4638      	mov	r0, r7
 8010076:	f004 febf 	bl	8014df8 <ucdr_serialize_string>
 801007a:	4004      	ands	r4, r0
 801007c:	e7ef      	b.n	801005e <uxr_serialize_ReadSpecification+0x2a>
 801007e:	8971      	ldrh	r1, [r6, #10]
 8010080:	4638      	mov	r0, r7
 8010082:	f7fa fb77 	bl	800a774 <ucdr_serialize_uint16_t>
 8010086:	89b1      	ldrh	r1, [r6, #12]
 8010088:	4605      	mov	r5, r0
 801008a:	4638      	mov	r0, r7
 801008c:	f7fa fb72 	bl	800a774 <ucdr_serialize_uint16_t>
 8010090:	89f1      	ldrh	r1, [r6, #14]
 8010092:	4005      	ands	r5, r0
 8010094:	4638      	mov	r0, r7
 8010096:	f7fa fb6d 	bl	800a774 <ucdr_serialize_uint16_t>
 801009a:	8a31      	ldrh	r1, [r6, #16]
 801009c:	4680      	mov	r8, r0
 801009e:	4638      	mov	r0, r7
 80100a0:	f7fa fb68 	bl	800a774 <ucdr_serialize_uint16_t>
 80100a4:	b2ed      	uxtb	r5, r5
 80100a6:	4025      	ands	r5, r4
 80100a8:	ea08 0505 	and.w	r5, r8, r5
 80100ac:	ea00 0405 	and.w	r4, r0, r5
 80100b0:	4620      	mov	r0, r4
 80100b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b6:	bf00      	nop

080100b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80100b8:	f7ff ba16 	b.w	800f4e8 <uxr_serialize_CLIENT_Representation>

080100bc <uxr_serialize_CREATE_Payload>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	2202      	movs	r2, #2
 80100c0:	4607      	mov	r7, r0
 80100c2:	460e      	mov	r6, r1
 80100c4:	f004 fd78 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80100c8:	2202      	movs	r2, #2
 80100ca:	18b1      	adds	r1, r6, r2
 80100cc:	4605      	mov	r5, r0
 80100ce:	4638      	mov	r0, r7
 80100d0:	f004 fd72 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80100d4:	7931      	ldrb	r1, [r6, #4]
 80100d6:	4604      	mov	r4, r0
 80100d8:	4638      	mov	r0, r7
 80100da:	f7fa fb1f 	bl	800a71c <ucdr_serialize_uint8_t>
 80100de:	b170      	cbz	r0, 80100fe <uxr_serialize_CREATE_Payload+0x42>
 80100e0:	7933      	ldrb	r3, [r6, #4]
 80100e2:	402c      	ands	r4, r5
 80100e4:	3b01      	subs	r3, #1
 80100e6:	b2e4      	uxtb	r4, r4
 80100e8:	2b0d      	cmp	r3, #13
 80100ea:	d809      	bhi.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 80100ec:	e8df f003 	tbb	[pc, r3]
 80100f0:	23230a4c 	.word	0x23230a4c
 80100f4:	0a0a0a0a 	.word	0x0a0a0a0a
 80100f8:	12121208 	.word	0x12121208
 80100fc:	3e45      	.short	0x3e45
 80100fe:	2400      	movs	r4, #0
 8010100:	4620      	mov	r0, r4
 8010102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010104:	f106 0108 	add.w	r1, r6, #8
 8010108:	4638      	mov	r0, r7
 801010a:	f7ff faf3 	bl	800f6f4 <uxr_serialize_DATAWRITER_Representation>
 801010e:	4004      	ands	r4, r0
 8010110:	4620      	mov	r0, r4
 8010112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010114:	7a31      	ldrb	r1, [r6, #8]
 8010116:	4638      	mov	r0, r7
 8010118:	f7fa fb00 	bl	800a71c <ucdr_serialize_uint8_t>
 801011c:	2800      	cmp	r0, #0
 801011e:	d0ee      	beq.n	80100fe <uxr_serialize_CREATE_Payload+0x42>
 8010120:	7a33      	ldrb	r3, [r6, #8]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d001      	beq.n	801012a <uxr_serialize_CREATE_Payload+0x6e>
 8010126:	2b02      	cmp	r3, #2
 8010128:	d1ea      	bne.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 801012a:	68f1      	ldr	r1, [r6, #12]
 801012c:	4638      	mov	r0, r7
 801012e:	f004 fe63 	bl	8014df8 <ucdr_serialize_string>
 8010132:	4004      	ands	r4, r0
 8010134:	e7e4      	b.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 8010136:	7a31      	ldrb	r1, [r6, #8]
 8010138:	4638      	mov	r0, r7
 801013a:	f7fa faef 	bl	800a71c <ucdr_serialize_uint8_t>
 801013e:	4605      	mov	r5, r0
 8010140:	b158      	cbz	r0, 801015a <uxr_serialize_CREATE_Payload+0x9e>
 8010142:	7a33      	ldrb	r3, [r6, #8]
 8010144:	2b02      	cmp	r3, #2
 8010146:	d034      	beq.n	80101b2 <uxr_serialize_CREATE_Payload+0xf6>
 8010148:	2b03      	cmp	r3, #3
 801014a:	d106      	bne.n	801015a <uxr_serialize_CREATE_Payload+0x9e>
 801014c:	68f2      	ldr	r2, [r6, #12]
 801014e:	f106 0110 	add.w	r1, r6, #16
 8010152:	4638      	mov	r0, r7
 8010154:	f004 fe24 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 8010158:	4605      	mov	r5, r0
 801015a:	2202      	movs	r2, #2
 801015c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010160:	4638      	mov	r0, r7
 8010162:	f004 fd29 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 8010166:	4028      	ands	r0, r5
 8010168:	4004      	ands	r4, r0
 801016a:	e7c9      	b.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 801016c:	f106 0108 	add.w	r1, r6, #8
 8010170:	4638      	mov	r0, r7
 8010172:	f7ff f9b9 	bl	800f4e8 <uxr_serialize_CLIENT_Representation>
 8010176:	4004      	ands	r4, r0
 8010178:	e7c2      	b.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 801017a:	f106 0108 	add.w	r1, r6, #8
 801017e:	4638      	mov	r0, r7
 8010180:	f7ff fa6e 	bl	800f660 <uxr_serialize_AGENT_Representation>
 8010184:	4004      	ands	r4, r0
 8010186:	e7bb      	b.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 8010188:	7a31      	ldrb	r1, [r6, #8]
 801018a:	4638      	mov	r0, r7
 801018c:	f7fa fac6 	bl	800a71c <ucdr_serialize_uint8_t>
 8010190:	4605      	mov	r5, r0
 8010192:	b130      	cbz	r0, 80101a2 <uxr_serialize_CREATE_Payload+0xe6>
 8010194:	7a33      	ldrb	r3, [r6, #8]
 8010196:	2b02      	cmp	r3, #2
 8010198:	d011      	beq.n	80101be <uxr_serialize_CREATE_Payload+0x102>
 801019a:	2b03      	cmp	r3, #3
 801019c:	d015      	beq.n	80101ca <uxr_serialize_CREATE_Payload+0x10e>
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d00d      	beq.n	80101be <uxr_serialize_CREATE_Payload+0x102>
 80101a2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80101a6:	4638      	mov	r0, r7
 80101a8:	f7fa fff4 	bl	800b194 <ucdr_serialize_int16_t>
 80101ac:	4028      	ands	r0, r5
 80101ae:	4004      	ands	r4, r0
 80101b0:	e7a6      	b.n	8010100 <uxr_serialize_CREATE_Payload+0x44>
 80101b2:	68f1      	ldr	r1, [r6, #12]
 80101b4:	4638      	mov	r0, r7
 80101b6:	f004 fe1f 	bl	8014df8 <ucdr_serialize_string>
 80101ba:	4605      	mov	r5, r0
 80101bc:	e7cd      	b.n	801015a <uxr_serialize_CREATE_Payload+0x9e>
 80101be:	68f1      	ldr	r1, [r6, #12]
 80101c0:	4638      	mov	r0, r7
 80101c2:	f004 fe19 	bl	8014df8 <ucdr_serialize_string>
 80101c6:	4605      	mov	r5, r0
 80101c8:	e7eb      	b.n	80101a2 <uxr_serialize_CREATE_Payload+0xe6>
 80101ca:	68f2      	ldr	r2, [r6, #12]
 80101cc:	f106 0110 	add.w	r1, r6, #16
 80101d0:	4638      	mov	r0, r7
 80101d2:	f004 fde5 	bl	8014da0 <ucdr_serialize_sequence_uint8_t>
 80101d6:	4605      	mov	r5, r0
 80101d8:	e7e3      	b.n	80101a2 <uxr_serialize_CREATE_Payload+0xe6>
 80101da:	bf00      	nop

080101dc <uxr_deserialize_GET_INFO_Payload>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	2202      	movs	r2, #2
 80101e0:	4605      	mov	r5, r0
 80101e2:	460e      	mov	r6, r1
 80101e4:	f004 fd4c 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 80101e8:	2202      	movs	r2, #2
 80101ea:	18b1      	adds	r1, r6, r2
 80101ec:	4604      	mov	r4, r0
 80101ee:	4628      	mov	r0, r5
 80101f0:	f004 fd46 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 80101f4:	1d31      	adds	r1, r6, #4
 80101f6:	4004      	ands	r4, r0
 80101f8:	4628      	mov	r0, r5
 80101fa:	f7fa fdd5 	bl	800ada8 <ucdr_deserialize_uint32_t>
 80101fe:	b2e4      	uxtb	r4, r4
 8010200:	4020      	ands	r0, r4
 8010202:	bd70      	pop	{r4, r5, r6, pc}

08010204 <uxr_serialize_DELETE_Payload>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	2202      	movs	r2, #2
 8010208:	4605      	mov	r5, r0
 801020a:	460e      	mov	r6, r1
 801020c:	f004 fcd4 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 8010210:	2202      	movs	r2, #2
 8010212:	4604      	mov	r4, r0
 8010214:	18b1      	adds	r1, r6, r2
 8010216:	4628      	mov	r0, r5
 8010218:	f004 fcce 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 801021c:	4020      	ands	r0, r4
 801021e:	b2c0      	uxtb	r0, r0
 8010220:	bd70      	pop	{r4, r5, r6, pc}
 8010222:	bf00      	nop

08010224 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010228:	4605      	mov	r5, r0
 801022a:	460e      	mov	r6, r1
 801022c:	f7fa fa8c 	bl	800a748 <ucdr_deserialize_uint8_t>
 8010230:	1c71      	adds	r1, r6, #1
 8010232:	4604      	mov	r4, r0
 8010234:	4628      	mov	r0, r5
 8010236:	f7fa fa87 	bl	800a748 <ucdr_deserialize_uint8_t>
 801023a:	2204      	movs	r2, #4
 801023c:	18b1      	adds	r1, r6, r2
 801023e:	4680      	mov	r8, r0
 8010240:	4628      	mov	r0, r5
 8010242:	f004 fd1d 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010246:	f106 0108 	add.w	r1, r6, #8
 801024a:	4607      	mov	r7, r0
 801024c:	2202      	movs	r2, #2
 801024e:	4628      	mov	r0, r5
 8010250:	f004 fd16 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010254:	ea04 0308 	and.w	r3, r4, r8
 8010258:	b2db      	uxtb	r3, r3
 801025a:	ea03 0407 	and.w	r4, r3, r7
 801025e:	2202      	movs	r2, #2
 8010260:	4607      	mov	r7, r0
 8010262:	f106 010a 	add.w	r1, r6, #10
 8010266:	4628      	mov	r0, r5
 8010268:	f004 fd0a 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 801026c:	f106 010c 	add.w	r1, r6, #12
 8010270:	4603      	mov	r3, r0
 8010272:	4628      	mov	r0, r5
 8010274:	461d      	mov	r5, r3
 8010276:	f7fa fa39 	bl	800a6ec <ucdr_deserialize_bool>
 801027a:	403c      	ands	r4, r7
 801027c:	4025      	ands	r5, r4
 801027e:	4028      	ands	r0, r5
 8010280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010284 <uxr_deserialize_STATUS_Payload>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	2202      	movs	r2, #2
 801028a:	4606      	mov	r6, r0
 801028c:	460f      	mov	r7, r1
 801028e:	f004 fcf7 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010292:	2202      	movs	r2, #2
 8010294:	18b9      	adds	r1, r7, r2
 8010296:	4605      	mov	r5, r0
 8010298:	4630      	mov	r0, r6
 801029a:	f004 fcf1 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 801029e:	1d39      	adds	r1, r7, #4
 80102a0:	4680      	mov	r8, r0
 80102a2:	4630      	mov	r0, r6
 80102a4:	f7fa fa50 	bl	800a748 <ucdr_deserialize_uint8_t>
 80102a8:	1d79      	adds	r1, r7, #5
 80102aa:	4604      	mov	r4, r0
 80102ac:	4630      	mov	r0, r6
 80102ae:	f7fa fa4b 	bl	800a748 <ucdr_deserialize_uint8_t>
 80102b2:	ea05 0508 	and.w	r5, r5, r8
 80102b6:	402c      	ands	r4, r5
 80102b8:	4020      	ands	r0, r4
 80102ba:	b2c0      	uxtb	r0, r0
 80102bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080102c0 <uxr_serialize_INFO_Payload>:
 80102c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c4:	2202      	movs	r2, #2
 80102c6:	460c      	mov	r4, r1
 80102c8:	4605      	mov	r5, r0
 80102ca:	f004 fc75 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80102ce:	2202      	movs	r2, #2
 80102d0:	18a1      	adds	r1, r4, r2
 80102d2:	4680      	mov	r8, r0
 80102d4:	4628      	mov	r0, r5
 80102d6:	f004 fc6f 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80102da:	7921      	ldrb	r1, [r4, #4]
 80102dc:	4607      	mov	r7, r0
 80102de:	4628      	mov	r0, r5
 80102e0:	f7fa fa1c 	bl	800a71c <ucdr_serialize_uint8_t>
 80102e4:	7961      	ldrb	r1, [r4, #5]
 80102e6:	4606      	mov	r6, r0
 80102e8:	4628      	mov	r0, r5
 80102ea:	f7fa fa17 	bl	800a71c <ucdr_serialize_uint8_t>
 80102ee:	ea08 0807 	and.w	r8, r8, r7
 80102f2:	ea06 0608 	and.w	r6, r6, r8
 80102f6:	4006      	ands	r6, r0
 80102f8:	7a21      	ldrb	r1, [r4, #8]
 80102fa:	4628      	mov	r0, r5
 80102fc:	f7fa f9e0 	bl	800a6c0 <ucdr_serialize_bool>
 8010300:	7a23      	ldrb	r3, [r4, #8]
 8010302:	b2f7      	uxtb	r7, r6
 8010304:	4606      	mov	r6, r0
 8010306:	b96b      	cbnz	r3, 8010324 <uxr_serialize_INFO_Payload+0x64>
 8010308:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801030c:	4628      	mov	r0, r5
 801030e:	f7fa f9d7 	bl	800a6c0 <ucdr_serialize_bool>
 8010312:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010316:	4030      	ands	r0, r6
 8010318:	b2c6      	uxtb	r6, r0
 801031a:	b983      	cbnz	r3, 801033e <uxr_serialize_INFO_Payload+0x7e>
 801031c:	ea06 0007 	and.w	r0, r6, r7
 8010320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010324:	7b21      	ldrb	r1, [r4, #12]
 8010326:	4628      	mov	r0, r5
 8010328:	f7fa f9f8 	bl	800a71c <ucdr_serialize_uint8_t>
 801032c:	b188      	cbz	r0, 8010352 <uxr_serialize_INFO_Payload+0x92>
 801032e:	f104 010c 	add.w	r1, r4, #12
 8010332:	4628      	mov	r0, r5
 8010334:	f7ff fa06 	bl	800f744 <uxr_serialize_ObjectVariant.part.0>
 8010338:	4030      	ands	r0, r6
 801033a:	b2c6      	uxtb	r6, r0
 801033c:	e7e4      	b.n	8010308 <uxr_serialize_INFO_Payload+0x48>
 801033e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010342:	4628      	mov	r0, r5
 8010344:	f7ff fdb2 	bl	800feac <uxr_serialize_ActivityInfoVariant>
 8010348:	4006      	ands	r6, r0
 801034a:	ea06 0007 	and.w	r0, r6, r7
 801034e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010352:	4606      	mov	r6, r0
 8010354:	e7d8      	b.n	8010308 <uxr_serialize_INFO_Payload+0x48>
 8010356:	bf00      	nop

08010358 <uxr_serialize_READ_DATA_Payload>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	2202      	movs	r2, #2
 801035c:	4605      	mov	r5, r0
 801035e:	460e      	mov	r6, r1
 8010360:	f004 fc2a 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 8010364:	2202      	movs	r2, #2
 8010366:	18b1      	adds	r1, r6, r2
 8010368:	4604      	mov	r4, r0
 801036a:	4628      	mov	r0, r5
 801036c:	f004 fc24 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 8010370:	1d31      	adds	r1, r6, #4
 8010372:	4004      	ands	r4, r0
 8010374:	4628      	mov	r0, r5
 8010376:	f7ff fe5d 	bl	8010034 <uxr_serialize_ReadSpecification>
 801037a:	b2e4      	uxtb	r4, r4
 801037c:	4020      	ands	r0, r4
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	2202      	movs	r2, #2
 8010384:	4605      	mov	r5, r0
 8010386:	460e      	mov	r6, r1
 8010388:	f004 fc16 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 801038c:	2202      	movs	r2, #2
 801038e:	4604      	mov	r4, r0
 8010390:	18b1      	adds	r1, r6, r2
 8010392:	4628      	mov	r0, r5
 8010394:	f004 fc10 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 8010398:	4020      	ands	r0, r4
 801039a:	b2c0      	uxtb	r0, r0
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	bf00      	nop

080103a0 <uxr_serialize_ACKNACK_Payload>:
 80103a0:	b570      	push	{r4, r5, r6, lr}
 80103a2:	460c      	mov	r4, r1
 80103a4:	460e      	mov	r6, r1
 80103a6:	f834 1b02 	ldrh.w	r1, [r4], #2
 80103aa:	4605      	mov	r5, r0
 80103ac:	f7fa f9e2 	bl	800a774 <ucdr_serialize_uint16_t>
 80103b0:	2202      	movs	r2, #2
 80103b2:	4621      	mov	r1, r4
 80103b4:	4604      	mov	r4, r0
 80103b6:	4628      	mov	r0, r5
 80103b8:	f004 fbfe 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80103bc:	7931      	ldrb	r1, [r6, #4]
 80103be:	4004      	ands	r4, r0
 80103c0:	4628      	mov	r0, r5
 80103c2:	f7fa f9ab 	bl	800a71c <ucdr_serialize_uint8_t>
 80103c6:	b2e4      	uxtb	r4, r4
 80103c8:	4020      	ands	r0, r4
 80103ca:	bd70      	pop	{r4, r5, r6, pc}

080103cc <uxr_deserialize_ACKNACK_Payload>:
 80103cc:	b570      	push	{r4, r5, r6, lr}
 80103ce:	4605      	mov	r5, r0
 80103d0:	460e      	mov	r6, r1
 80103d2:	f7fa facf 	bl	800a974 <ucdr_deserialize_uint16_t>
 80103d6:	2202      	movs	r2, #2
 80103d8:	18b1      	adds	r1, r6, r2
 80103da:	4604      	mov	r4, r0
 80103dc:	4628      	mov	r0, r5
 80103de:	f004 fc4f 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 80103e2:	1d31      	adds	r1, r6, #4
 80103e4:	4004      	ands	r4, r0
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7fa f9ae 	bl	800a748 <ucdr_deserialize_uint8_t>
 80103ec:	b2e4      	uxtb	r4, r4
 80103ee:	4020      	ands	r0, r4
 80103f0:	bd70      	pop	{r4, r5, r6, pc}
 80103f2:	bf00      	nop

080103f4 <uxr_serialize_HEARTBEAT_Payload>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	460d      	mov	r5, r1
 80103f8:	8809      	ldrh	r1, [r1, #0]
 80103fa:	4606      	mov	r6, r0
 80103fc:	f7fa f9ba 	bl	800a774 <ucdr_serialize_uint16_t>
 8010400:	8869      	ldrh	r1, [r5, #2]
 8010402:	4604      	mov	r4, r0
 8010404:	4630      	mov	r0, r6
 8010406:	f7fa f9b5 	bl	800a774 <ucdr_serialize_uint16_t>
 801040a:	7929      	ldrb	r1, [r5, #4]
 801040c:	4004      	ands	r4, r0
 801040e:	4630      	mov	r0, r6
 8010410:	f7fa f984 	bl	800a71c <ucdr_serialize_uint8_t>
 8010414:	b2e4      	uxtb	r4, r4
 8010416:	4020      	ands	r0, r4
 8010418:	bd70      	pop	{r4, r5, r6, pc}
 801041a:	bf00      	nop

0801041c <uxr_deserialize_HEARTBEAT_Payload>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	4605      	mov	r5, r0
 8010420:	460e      	mov	r6, r1
 8010422:	f7fa faa7 	bl	800a974 <ucdr_deserialize_uint16_t>
 8010426:	1cb1      	adds	r1, r6, #2
 8010428:	4604      	mov	r4, r0
 801042a:	4628      	mov	r0, r5
 801042c:	f7fa faa2 	bl	800a974 <ucdr_deserialize_uint16_t>
 8010430:	1d31      	adds	r1, r6, #4
 8010432:	4004      	ands	r4, r0
 8010434:	4628      	mov	r0, r5
 8010436:	f7fa f987 	bl	800a748 <ucdr_deserialize_uint8_t>
 801043a:	b2e4      	uxtb	r4, r4
 801043c:	4020      	ands	r0, r4
 801043e:	bd70      	pop	{r4, r5, r6, pc}

08010440 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	4605      	mov	r5, r0
 8010446:	460e      	mov	r6, r1
 8010448:	f7fb f830 	bl	800b4ac <ucdr_deserialize_int32_t>
 801044c:	1d31      	adds	r1, r6, #4
 801044e:	4607      	mov	r7, r0
 8010450:	4628      	mov	r0, r5
 8010452:	f7fa fca9 	bl	800ada8 <ucdr_deserialize_uint32_t>
 8010456:	f106 0108 	add.w	r1, r6, #8
 801045a:	4680      	mov	r8, r0
 801045c:	4628      	mov	r0, r5
 801045e:	f7fb f825 	bl	800b4ac <ucdr_deserialize_int32_t>
 8010462:	f106 010c 	add.w	r1, r6, #12
 8010466:	4604      	mov	r4, r0
 8010468:	4628      	mov	r0, r5
 801046a:	f7fa fc9d 	bl	800ada8 <ucdr_deserialize_uint32_t>
 801046e:	ea07 0708 	and.w	r7, r7, r8
 8010472:	403c      	ands	r4, r7
 8010474:	f106 0110 	add.w	r1, r6, #16
 8010478:	4004      	ands	r4, r0
 801047a:	4628      	mov	r0, r5
 801047c:	f7fb f816 	bl	800b4ac <ucdr_deserialize_int32_t>
 8010480:	f106 0114 	add.w	r1, r6, #20
 8010484:	4607      	mov	r7, r0
 8010486:	4628      	mov	r0, r5
 8010488:	f7fa fc8e 	bl	800ada8 <ucdr_deserialize_uint32_t>
 801048c:	b2e4      	uxtb	r4, r4
 801048e:	403c      	ands	r4, r7
 8010490:	4020      	ands	r0, r4
 8010492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010496:	bf00      	nop

08010498 <uxr_serialize_SampleIdentity>:
 8010498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801049c:	220c      	movs	r2, #12
 801049e:	4604      	mov	r4, r0
 80104a0:	460d      	mov	r5, r1
 80104a2:	f004 fb89 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80104a6:	2203      	movs	r2, #3
 80104a8:	f105 010c 	add.w	r1, r5, #12
 80104ac:	4607      	mov	r7, r0
 80104ae:	4620      	mov	r0, r4
 80104b0:	f004 fb82 	bl	8014bb8 <ucdr_serialize_array_uint8_t>
 80104b4:	7be9      	ldrb	r1, [r5, #15]
 80104b6:	4680      	mov	r8, r0
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7fa f92f 	bl	800a71c <ucdr_serialize_uint8_t>
 80104be:	6929      	ldr	r1, [r5, #16]
 80104c0:	4606      	mov	r6, r0
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7fa ff5a 	bl	800b37c <ucdr_serialize_int32_t>
 80104c8:	6969      	ldr	r1, [r5, #20]
 80104ca:	4603      	mov	r3, r0
 80104cc:	4620      	mov	r0, r4
 80104ce:	ea07 0708 	and.w	r7, r7, r8
 80104d2:	461c      	mov	r4, r3
 80104d4:	f7fa fb38 	bl	800ab48 <ucdr_serialize_uint32_t>
 80104d8:	403e      	ands	r6, r7
 80104da:	4034      	ands	r4, r6
 80104dc:	4020      	ands	r0, r4
 80104de:	b2c0      	uxtb	r0, r0
 80104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080104e4 <uxr_deserialize_SampleIdentity>:
 80104e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e8:	220c      	movs	r2, #12
 80104ea:	4604      	mov	r4, r0
 80104ec:	460d      	mov	r5, r1
 80104ee:	f004 fbc7 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 80104f2:	2203      	movs	r2, #3
 80104f4:	f105 010c 	add.w	r1, r5, #12
 80104f8:	4607      	mov	r7, r0
 80104fa:	4620      	mov	r0, r4
 80104fc:	f004 fbc0 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8010500:	f105 010f 	add.w	r1, r5, #15
 8010504:	4680      	mov	r8, r0
 8010506:	4620      	mov	r0, r4
 8010508:	f7fa f91e 	bl	800a748 <ucdr_deserialize_uint8_t>
 801050c:	f105 0110 	add.w	r1, r5, #16
 8010510:	4606      	mov	r6, r0
 8010512:	4620      	mov	r0, r4
 8010514:	f7fa ffca 	bl	800b4ac <ucdr_deserialize_int32_t>
 8010518:	f105 0114 	add.w	r1, r5, #20
 801051c:	4603      	mov	r3, r0
 801051e:	4620      	mov	r0, r4
 8010520:	ea07 0708 	and.w	r7, r7, r8
 8010524:	461c      	mov	r4, r3
 8010526:	f7fa fc3f 	bl	800ada8 <ucdr_deserialize_uint32_t>
 801052a:	403e      	ands	r6, r7
 801052c:	4034      	ands	r4, r6
 801052e:	4020      	ands	r0, r4
 8010530:	b2c0      	uxtb	r0, r0
 8010532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010536:	bf00      	nop

08010538 <rcl_client_get_rmw_handle>:
 8010538:	b118      	cbz	r0, 8010542 <rcl_client_get_rmw_handle+0xa>
 801053a:	6800      	ldr	r0, [r0, #0]
 801053c:	b108      	cbz	r0, 8010542 <rcl_client_get_rmw_handle+0xa>
 801053e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010542:	4770      	bx	lr

08010544 <rcl_send_request>:
 8010544:	b570      	push	{r4, r5, r6, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	b1e8      	cbz	r0, 8010586 <rcl_send_request+0x42>
 801054a:	4604      	mov	r4, r0
 801054c:	6800      	ldr	r0, [r0, #0]
 801054e:	b1d0      	cbz	r0, 8010586 <rcl_send_request+0x42>
 8010550:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010554:	b1bb      	cbz	r3, 8010586 <rcl_send_request+0x42>
 8010556:	460e      	mov	r6, r1
 8010558:	b1d1      	cbz	r1, 8010590 <rcl_send_request+0x4c>
 801055a:	4615      	mov	r5, r2
 801055c:	b1c2      	cbz	r2, 8010590 <rcl_send_request+0x4c>
 801055e:	2105      	movs	r1, #5
 8010560:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010564:	f002 fbf8 	bl	8012d58 <__atomic_load_8>
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	e9c5 0100 	strd	r0, r1, [r5]
 801056e:	462a      	mov	r2, r5
 8010570:	4631      	mov	r1, r6
 8010572:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010576:	f003 fdbd 	bl	80140f4 <rmw_send_request>
 801057a:	4606      	mov	r6, r0
 801057c:	b160      	cbz	r0, 8010598 <rcl_send_request+0x54>
 801057e:	2601      	movs	r6, #1
 8010580:	4630      	mov	r0, r6
 8010582:	b002      	add	sp, #8
 8010584:	bd70      	pop	{r4, r5, r6, pc}
 8010586:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801058a:	4630      	mov	r0, r6
 801058c:	b002      	add	sp, #8
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	260b      	movs	r6, #11
 8010592:	4630      	mov	r0, r6
 8010594:	b002      	add	sp, #8
 8010596:	bd70      	pop	{r4, r5, r6, pc}
 8010598:	6820      	ldr	r0, [r4, #0]
 801059a:	2105      	movs	r1, #5
 801059c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105a0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80105a4:	9100      	str	r1, [sp, #0]
 80105a6:	f002 fc43 	bl	8012e30 <__atomic_exchange_8>
 80105aa:	4630      	mov	r0, r6
 80105ac:	b002      	add	sp, #8
 80105ae:	bd70      	pop	{r4, r5, r6, pc}

080105b0 <rcl_take_response>:
 80105b0:	b570      	push	{r4, r5, r6, lr}
 80105b2:	468e      	mov	lr, r1
 80105b4:	460c      	mov	r4, r1
 80105b6:	4616      	mov	r6, r2
 80105b8:	4605      	mov	r5, r0
 80105ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80105be:	b08c      	sub	sp, #48	@ 0x30
 80105c0:	f10d 0c18 	add.w	ip, sp, #24
 80105c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80105cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80105d0:	b35d      	cbz	r5, 801062a <rcl_take_response+0x7a>
 80105d2:	682b      	ldr	r3, [r5, #0]
 80105d4:	b34b      	cbz	r3, 801062a <rcl_take_response+0x7a>
 80105d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80105da:	b330      	cbz	r0, 801062a <rcl_take_response+0x7a>
 80105dc:	b346      	cbz	r6, 8010630 <rcl_take_response+0x80>
 80105de:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8010638 <rcl_take_response+0x88>
 80105e2:	2300      	movs	r3, #0
 80105e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80105e8:	4632      	mov	r2, r6
 80105ea:	f10d 0307 	add.w	r3, sp, #7
 80105ee:	a902      	add	r1, sp, #8
 80105f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80105f8:	f003 fe84 	bl	8014304 <rmw_take_response>
 80105fc:	4605      	mov	r5, r0
 80105fe:	b9c8      	cbnz	r0, 8010634 <rcl_take_response+0x84>
 8010600:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010604:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010608:	2a00      	cmp	r2, #0
 801060a:	bf08      	it	eq
 801060c:	461d      	moveq	r5, r3
 801060e:	f10d 0e18 	add.w	lr, sp, #24
 8010612:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010616:	46a4      	mov	ip, r4
 8010618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801061c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010620:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010624:	4628      	mov	r0, r5
 8010626:	b00c      	add	sp, #48	@ 0x30
 8010628:	bd70      	pop	{r4, r5, r6, pc}
 801062a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801062e:	e7ee      	b.n	801060e <rcl_take_response+0x5e>
 8010630:	250b      	movs	r5, #11
 8010632:	e7ec      	b.n	801060e <rcl_take_response+0x5e>
 8010634:	2501      	movs	r5, #1
 8010636:	e7ea      	b.n	801060e <rcl_take_response+0x5e>
	...

08010640 <rcl_client_is_valid>:
 8010640:	b130      	cbz	r0, 8010650 <rcl_client_is_valid+0x10>
 8010642:	6800      	ldr	r0, [r0, #0]
 8010644:	b120      	cbz	r0, 8010650 <rcl_client_is_valid+0x10>
 8010646:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801064a:	3800      	subs	r0, #0
 801064c:	bf18      	it	ne
 801064e:	2001      	movne	r0, #1
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop

08010654 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010654:	280b      	cmp	r0, #11
 8010656:	dc0d      	bgt.n	8010674 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010658:	2800      	cmp	r0, #0
 801065a:	db09      	blt.n	8010670 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801065c:	280b      	cmp	r0, #11
 801065e:	d807      	bhi.n	8010670 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010660:	e8df f000 	tbb	[pc, r0]
 8010664:	07060607 	.word	0x07060607
 8010668:	06060606 	.word	0x06060606
 801066c:	07070606 	.word	0x07070606
 8010670:	2001      	movs	r0, #1
 8010672:	4770      	bx	lr
 8010674:	28cb      	cmp	r0, #203	@ 0xcb
 8010676:	bf18      	it	ne
 8010678:	2001      	movne	r0, #1
 801067a:	4770      	bx	lr

0801067c <rcl_get_zero_initialized_context>:
 801067c:	4a03      	ldr	r2, [pc, #12]	@ (801068c <rcl_get_zero_initialized_context+0x10>)
 801067e:	4603      	mov	r3, r0
 8010680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010684:	e883 0003 	stmia.w	r3, {r0, r1}
 8010688:	4618      	mov	r0, r3
 801068a:	4770      	bx	lr
 801068c:	08018b8c 	.word	0x08018b8c

08010690 <rcl_context_is_valid>:
 8010690:	b118      	cbz	r0, 801069a <rcl_context_is_valid+0xa>
 8010692:	6840      	ldr	r0, [r0, #4]
 8010694:	3800      	subs	r0, #0
 8010696:	bf18      	it	ne
 8010698:	2001      	movne	r0, #1
 801069a:	4770      	bx	lr

0801069c <__cleanup_context>:
 801069c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a0:	4606      	mov	r6, r0
 80106a2:	6800      	ldr	r0, [r0, #0]
 80106a4:	2300      	movs	r3, #0
 80106a6:	6073      	str	r3, [r6, #4]
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d049      	beq.n	8010740 <__cleanup_context+0xa4>
 80106ac:	6947      	ldr	r7, [r0, #20]
 80106ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80106b2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80106b6:	b137      	cbz	r7, 80106c6 <__cleanup_context+0x2a>
 80106b8:	3014      	adds	r0, #20
 80106ba:	f000 f9a5 	bl	8010a08 <rcl_init_options_fini>
 80106be:	4607      	mov	r7, r0
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d144      	bne.n	801074e <__cleanup_context+0xb2>
 80106c4:	6830      	ldr	r0, [r6, #0]
 80106c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80106c8:	b143      	cbz	r3, 80106dc <__cleanup_context+0x40>
 80106ca:	3028      	adds	r0, #40	@ 0x28
 80106cc:	f003 fb5a 	bl	8013d84 <rmw_context_fini>
 80106d0:	b118      	cbz	r0, 80106da <__cleanup_context+0x3e>
 80106d2:	2f00      	cmp	r7, #0
 80106d4:	d03e      	beq.n	8010754 <__cleanup_context+0xb8>
 80106d6:	f7fc fa53 	bl	800cb80 <rcutils_reset_error>
 80106da:	6830      	ldr	r0, [r6, #0]
 80106dc:	6a03      	ldr	r3, [r0, #32]
 80106de:	b1db      	cbz	r3, 8010718 <__cleanup_context+0x7c>
 80106e0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80106e4:	2a01      	cmp	r2, #1
 80106e6:	f17c 0100 	sbcs.w	r1, ip, #0
 80106ea:	db11      	blt.n	8010710 <__cleanup_context+0x74>
 80106ec:	2400      	movs	r4, #0
 80106ee:	4625      	mov	r5, r4
 80106f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106f4:	4649      	mov	r1, r9
 80106f6:	b1b8      	cbz	r0, 8010728 <__cleanup_context+0x8c>
 80106f8:	47c0      	blx	r8
 80106fa:	6833      	ldr	r3, [r6, #0]
 80106fc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010700:	3401      	adds	r4, #1
 8010702:	f145 0500 	adc.w	r5, r5, #0
 8010706:	4294      	cmp	r4, r2
 8010708:	eb75 010c 	sbcs.w	r1, r5, ip
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	dbef      	blt.n	80106f0 <__cleanup_context+0x54>
 8010710:	4618      	mov	r0, r3
 8010712:	4649      	mov	r1, r9
 8010714:	47c0      	blx	r8
 8010716:	6830      	ldr	r0, [r6, #0]
 8010718:	4649      	mov	r1, r9
 801071a:	47c0      	blx	r8
 801071c:	2300      	movs	r3, #0
 801071e:	e9c6 3300 	strd	r3, r3, [r6]
 8010722:	4638      	mov	r0, r7
 8010724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010728:	3401      	adds	r4, #1
 801072a:	f145 0500 	adc.w	r5, r5, #0
 801072e:	4294      	cmp	r4, r2
 8010730:	eb75 010c 	sbcs.w	r1, r5, ip
 8010734:	dbdc      	blt.n	80106f0 <__cleanup_context+0x54>
 8010736:	4618      	mov	r0, r3
 8010738:	4649      	mov	r1, r9
 801073a:	47c0      	blx	r8
 801073c:	6830      	ldr	r0, [r6, #0]
 801073e:	e7eb      	b.n	8010718 <__cleanup_context+0x7c>
 8010740:	4607      	mov	r7, r0
 8010742:	2300      	movs	r3, #0
 8010744:	e9c6 3300 	strd	r3, r3, [r6]
 8010748:	4638      	mov	r0, r7
 801074a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801074e:	f7fc fa17 	bl	800cb80 <rcutils_reset_error>
 8010752:	e7b7      	b.n	80106c4 <__cleanup_context+0x28>
 8010754:	f7ff ff7e 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010758:	4607      	mov	r7, r0
 801075a:	e7bc      	b.n	80106d6 <__cleanup_context+0x3a>

0801075c <rcl_init>:
 801075c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010760:	1e05      	subs	r5, r0, #0
 8010762:	b09c      	sub	sp, #112	@ 0x70
 8010764:	460e      	mov	r6, r1
 8010766:	4690      	mov	r8, r2
 8010768:	461f      	mov	r7, r3
 801076a:	f340 8099 	ble.w	80108a0 <rcl_init+0x144>
 801076e:	2900      	cmp	r1, #0
 8010770:	f000 8099 	beq.w	80108a6 <rcl_init+0x14a>
 8010774:	f1a1 0e04 	sub.w	lr, r1, #4
 8010778:	f04f 0c00 	mov.w	ip, #0
 801077c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010780:	f10c 0c01 	add.w	ip, ip, #1
 8010784:	2c00      	cmp	r4, #0
 8010786:	f000 808e 	beq.w	80108a6 <rcl_init+0x14a>
 801078a:	4565      	cmp	r5, ip
 801078c:	d1f6      	bne.n	801077c <rcl_init+0x20>
 801078e:	f1b8 0f00 	cmp.w	r8, #0
 8010792:	f000 8088 	beq.w	80108a6 <rcl_init+0x14a>
 8010796:	f8d8 4000 	ldr.w	r4, [r8]
 801079a:	2c00      	cmp	r4, #0
 801079c:	f000 8083 	beq.w	80108a6 <rcl_init+0x14a>
 80107a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107a2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80107a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	f8cc 3000 	str.w	r3, [ip]
 80107b0:	a817      	add	r0, sp, #92	@ 0x5c
 80107b2:	f7fc f9c1 	bl	800cb38 <rcutils_allocator_is_valid>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d075      	beq.n	80108a6 <rcl_init+0x14a>
 80107ba:	2f00      	cmp	r7, #0
 80107bc:	d073      	beq.n	80108a6 <rcl_init+0x14a>
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d175      	bne.n	80108b0 <rcl_init+0x154>
 80107c4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80107c8:	2178      	movs	r1, #120	@ 0x78
 80107ca:	2001      	movs	r0, #1
 80107cc:	4798      	blx	r3
 80107ce:	4604      	mov	r4, r0
 80107d0:	6038      	str	r0, [r7, #0]
 80107d2:	2800      	cmp	r0, #0
 80107d4:	f000 80a0 	beq.w	8010918 <rcl_init+0x1bc>
 80107d8:	a802      	add	r0, sp, #8
 80107da:	f002 fdfd 	bl	80133d8 <rmw_get_zero_initialized_context>
 80107de:	a902      	add	r1, sp, #8
 80107e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80107e4:	2250      	movs	r2, #80	@ 0x50
 80107e6:	ac17      	add	r4, sp, #92	@ 0x5c
 80107e8:	f007 f811 	bl	801780e <memcpy>
 80107ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107ee:	f8d7 e000 	ldr.w	lr, [r7]
 80107f2:	46f4      	mov	ip, lr
 80107f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107f8:	6823      	ldr	r3, [r4, #0]
 80107fa:	f8cc 3000 	str.w	r3, [ip]
 80107fe:	f10e 0114 	add.w	r1, lr, #20
 8010802:	4640      	mov	r0, r8
 8010804:	f000 f92a 	bl	8010a5c <rcl_init_options_copy>
 8010808:	4604      	mov	r4, r0
 801080a:	2800      	cmp	r0, #0
 801080c:	d144      	bne.n	8010898 <rcl_init+0x13c>
 801080e:	f8d7 9000 	ldr.w	r9, [r7]
 8010812:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010816:	f8c9 0020 	str.w	r0, [r9, #32]
 801081a:	f8c9 5018 	str.w	r5, [r9, #24]
 801081e:	f8c9 801c 	str.w	r8, [r9, #28]
 8010822:	2d00      	cmp	r5, #0
 8010824:	d04b      	beq.n	80108be <rcl_init+0x162>
 8010826:	2e00      	cmp	r6, #0
 8010828:	d049      	beq.n	80108be <rcl_init+0x162>
 801082a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801082e:	2104      	movs	r1, #4
 8010830:	4628      	mov	r0, r5
 8010832:	4798      	blx	r3
 8010834:	f8c9 0020 	str.w	r0, [r9, #32]
 8010838:	f8d7 9000 	ldr.w	r9, [r7]
 801083c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010840:	46ca      	mov	sl, r9
 8010842:	b343      	cbz	r3, 8010896 <rcl_init+0x13a>
 8010844:	2d01      	cmp	r5, #1
 8010846:	f178 0300 	sbcs.w	r3, r8, #0
 801084a:	db38      	blt.n	80108be <rcl_init+0x162>
 801084c:	2400      	movs	r4, #0
 801084e:	3e04      	subs	r6, #4
 8010850:	46a1      	mov	r9, r4
 8010852:	e00b      	b.n	801086c <rcl_init+0x110>
 8010854:	6831      	ldr	r1, [r6, #0]
 8010856:	f006 ffda 	bl	801780e <memcpy>
 801085a:	3401      	adds	r4, #1
 801085c:	f149 0900 	adc.w	r9, r9, #0
 8010860:	45c8      	cmp	r8, r9
 8010862:	bf08      	it	eq
 8010864:	42a5      	cmpeq	r5, r4
 8010866:	d028      	beq.n	80108ba <rcl_init+0x15e>
 8010868:	f8d7 a000 	ldr.w	sl, [r7]
 801086c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010870:	f7ef fcd8 	bl	8000224 <strlen>
 8010874:	1c42      	adds	r2, r0, #1
 8010876:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010878:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801087a:	f8da a020 	ldr.w	sl, [sl, #32]
 801087e:	9201      	str	r2, [sp, #4]
 8010880:	4610      	mov	r0, r2
 8010882:	4798      	blx	r3
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801088a:	6a1b      	ldr	r3, [r3, #32]
 801088c:	9a01      	ldr	r2, [sp, #4]
 801088e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010892:	2800      	cmp	r0, #0
 8010894:	d1de      	bne.n	8010854 <rcl_init+0xf8>
 8010896:	240a      	movs	r4, #10
 8010898:	4638      	mov	r0, r7
 801089a:	f7ff feff 	bl	801069c <__cleanup_context>
 801089e:	e003      	b.n	80108a8 <rcl_init+0x14c>
 80108a0:	2900      	cmp	r1, #0
 80108a2:	f43f af74 	beq.w	801078e <rcl_init+0x32>
 80108a6:	240b      	movs	r4, #11
 80108a8:	4620      	mov	r0, r4
 80108aa:	b01c      	add	sp, #112	@ 0x70
 80108ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108b0:	2464      	movs	r4, #100	@ 0x64
 80108b2:	4620      	mov	r0, r4
 80108b4:	b01c      	add	sp, #112	@ 0x70
 80108b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ba:	f8d7 9000 	ldr.w	r9, [r7]
 80108be:	491d      	ldr	r1, [pc, #116]	@ (8010934 <rcl_init+0x1d8>)
 80108c0:	680b      	ldr	r3, [r1, #0]
 80108c2:	3301      	adds	r3, #1
 80108c4:	d023      	beq.n	801090e <rcl_init+0x1b2>
 80108c6:	600b      	str	r3, [r1, #0]
 80108c8:	461a      	mov	r2, r3
 80108ca:	2400      	movs	r4, #0
 80108cc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80108d0:	607b      	str	r3, [r7, #4]
 80108d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80108d4:	6182      	str	r2, [r0, #24]
 80108d6:	3301      	adds	r3, #1
 80108d8:	61c4      	str	r4, [r0, #28]
 80108da:	d01f      	beq.n	801091c <rcl_init+0x1c0>
 80108dc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80108e0:	b94b      	cbnz	r3, 80108f6 <rcl_init+0x19a>
 80108e2:	3030      	adds	r0, #48	@ 0x30
 80108e4:	f000 f926 	bl	8010b34 <rcl_get_localhost_only>
 80108e8:	4604      	mov	r4, r0
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d1d4      	bne.n	8010898 <rcl_init+0x13c>
 80108ee:	f8d7 9000 	ldr.w	r9, [r7]
 80108f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80108f6:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 80108fa:	3018      	adds	r0, #24
 80108fc:	f003 f90c 	bl	8013b18 <rmw_init>
 8010900:	4604      	mov	r4, r0
 8010902:	2800      	cmp	r0, #0
 8010904:	d0d0      	beq.n	80108a8 <rcl_init+0x14c>
 8010906:	f7ff fea5 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 801090a:	4604      	mov	r4, r0
 801090c:	e7c4      	b.n	8010898 <rcl_init+0x13c>
 801090e:	2201      	movs	r2, #1
 8010910:	461c      	mov	r4, r3
 8010912:	600a      	str	r2, [r1, #0]
 8010914:	4613      	mov	r3, r2
 8010916:	e7d9      	b.n	80108cc <rcl_init+0x170>
 8010918:	240a      	movs	r4, #10
 801091a:	e7c5      	b.n	80108a8 <rcl_init+0x14c>
 801091c:	3024      	adds	r0, #36	@ 0x24
 801091e:	f005 fe6f 	bl	8016600 <rcl_get_default_domain_id>
 8010922:	4604      	mov	r4, r0
 8010924:	2800      	cmp	r0, #0
 8010926:	d1b7      	bne.n	8010898 <rcl_init+0x13c>
 8010928:	f8d7 9000 	ldr.w	r9, [r7]
 801092c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010930:	e7d4      	b.n	80108dc <rcl_init+0x180>
 8010932:	bf00      	nop
 8010934:	2000dd34 	.word	0x2000dd34

08010938 <rcl_get_zero_initialized_init_options>:
 8010938:	2000      	movs	r0, #0
 801093a:	4770      	bx	lr

0801093c <rcl_init_options_init>:
 801093c:	b084      	sub	sp, #16
 801093e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010940:	b097      	sub	sp, #92	@ 0x5c
 8010942:	ae1d      	add	r6, sp, #116	@ 0x74
 8010944:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010948:	2800      	cmp	r0, #0
 801094a:	d058      	beq.n	80109fe <rcl_init_options_init+0xc2>
 801094c:	6803      	ldr	r3, [r0, #0]
 801094e:	4605      	mov	r5, r0
 8010950:	b133      	cbz	r3, 8010960 <rcl_init_options_init+0x24>
 8010952:	2464      	movs	r4, #100	@ 0x64
 8010954:	4620      	mov	r0, r4
 8010956:	b017      	add	sp, #92	@ 0x5c
 8010958:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801095c:	b004      	add	sp, #16
 801095e:	4770      	bx	lr
 8010960:	4630      	mov	r0, r6
 8010962:	f7fc f8e9 	bl	800cb38 <rcutils_allocator_is_valid>
 8010966:	2800      	cmp	r0, #0
 8010968:	d049      	beq.n	80109fe <rcl_init_options_init+0xc2>
 801096a:	46b4      	mov	ip, r6
 801096c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010970:	ac11      	add	r4, sp, #68	@ 0x44
 8010972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010974:	f8dc 3000 	ldr.w	r3, [ip]
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801097c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801097e:	2050      	movs	r0, #80	@ 0x50
 8010980:	4798      	blx	r3
 8010982:	4604      	mov	r4, r0
 8010984:	6028      	str	r0, [r5, #0]
 8010986:	2800      	cmp	r0, #0
 8010988:	d03b      	beq.n	8010a02 <rcl_init_options_init+0xc6>
 801098a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801098e:	4686      	mov	lr, r0
 8010990:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010994:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010998:	f8dc 3000 	ldr.w	r3, [ip]
 801099c:	f8ce 3000 	str.w	r3, [lr]
 80109a0:	a802      	add	r0, sp, #8
 80109a2:	f002 fd29 	bl	80133f8 <rmw_get_zero_initialized_init_options>
 80109a6:	f10d 0e08 	add.w	lr, sp, #8
 80109aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109ae:	f104 0c18 	add.w	ip, r4, #24
 80109b2:	682f      	ldr	r7, [r5, #0]
 80109b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80109c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80109cc:	ac20      	add	r4, sp, #128	@ 0x80
 80109ce:	e88c 0003 	stmia.w	ip, {r0, r1}
 80109d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80109d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80109da:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80109de:	f107 0018 	add.w	r0, r7, #24
 80109e2:	f002 ff77 	bl	80138d4 <rmw_init_options_init>
 80109e6:	4604      	mov	r4, r0
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d0b3      	beq.n	8010954 <rcl_init_options_init+0x18>
 80109ec:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80109ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80109f0:	6828      	ldr	r0, [r5, #0]
 80109f2:	4798      	blx	r3
 80109f4:	4620      	mov	r0, r4
 80109f6:	f7ff fe2d 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 80109fa:	4604      	mov	r4, r0
 80109fc:	e7aa      	b.n	8010954 <rcl_init_options_init+0x18>
 80109fe:	240b      	movs	r4, #11
 8010a00:	e7a8      	b.n	8010954 <rcl_init_options_init+0x18>
 8010a02:	240a      	movs	r4, #10
 8010a04:	e7a6      	b.n	8010954 <rcl_init_options_init+0x18>
 8010a06:	bf00      	nop

08010a08 <rcl_init_options_fini>:
 8010a08:	b530      	push	{r4, r5, lr}
 8010a0a:	b087      	sub	sp, #28
 8010a0c:	b1f0      	cbz	r0, 8010a4c <rcl_init_options_fini+0x44>
 8010a0e:	6803      	ldr	r3, [r0, #0]
 8010a10:	4604      	mov	r4, r0
 8010a12:	b1db      	cbz	r3, 8010a4c <rcl_init_options_fini+0x44>
 8010a14:	469c      	mov	ip, r3
 8010a16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a1a:	f10d 0e04 	add.w	lr, sp, #4
 8010a1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010a22:	f8dc 3000 	ldr.w	r3, [ip]
 8010a26:	f8ce 3000 	str.w	r3, [lr]
 8010a2a:	a801      	add	r0, sp, #4
 8010a2c:	f7fc f884 	bl	800cb38 <rcutils_allocator_is_valid>
 8010a30:	b160      	cbz	r0, 8010a4c <rcl_init_options_fini+0x44>
 8010a32:	6820      	ldr	r0, [r4, #0]
 8010a34:	3018      	adds	r0, #24
 8010a36:	f003 f823 	bl	8013a80 <rmw_init_options_fini>
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	b950      	cbnz	r0, 8010a54 <rcl_init_options_fini+0x4c>
 8010a3e:	6820      	ldr	r0, [r4, #0]
 8010a40:	9b02      	ldr	r3, [sp, #8]
 8010a42:	9905      	ldr	r1, [sp, #20]
 8010a44:	4798      	blx	r3
 8010a46:	4628      	mov	r0, r5
 8010a48:	b007      	add	sp, #28
 8010a4a:	bd30      	pop	{r4, r5, pc}
 8010a4c:	250b      	movs	r5, #11
 8010a4e:	4628      	mov	r0, r5
 8010a50:	b007      	add	sp, #28
 8010a52:	bd30      	pop	{r4, r5, pc}
 8010a54:	f7ff fdfe 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010a58:	4605      	mov	r5, r0
 8010a5a:	e7f8      	b.n	8010a4e <rcl_init_options_fini+0x46>

08010a5c <rcl_init_options_copy>:
 8010a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a60:	b094      	sub	sp, #80	@ 0x50
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d058      	beq.n	8010b18 <rcl_init_options_copy+0xbc>
 8010a66:	4604      	mov	r4, r0
 8010a68:	6800      	ldr	r0, [r0, #0]
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	d054      	beq.n	8010b18 <rcl_init_options_copy+0xbc>
 8010a6e:	460e      	mov	r6, r1
 8010a70:	f7fc f862 	bl	800cb38 <rcutils_allocator_is_valid>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d04f      	beq.n	8010b18 <rcl_init_options_copy+0xbc>
 8010a78:	2e00      	cmp	r6, #0
 8010a7a:	d04d      	beq.n	8010b18 <rcl_init_options_copy+0xbc>
 8010a7c:	6833      	ldr	r3, [r6, #0]
 8010a7e:	b123      	cbz	r3, 8010a8a <rcl_init_options_copy+0x2e>
 8010a80:	2464      	movs	r4, #100	@ 0x64
 8010a82:	4620      	mov	r0, r4
 8010a84:	b014      	add	sp, #80	@ 0x50
 8010a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a8a:	6827      	ldr	r7, [r4, #0]
 8010a8c:	46bc      	mov	ip, r7
 8010a8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a92:	ad0f      	add	r5, sp, #60	@ 0x3c
 8010a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a96:	f8dc 3000 	ldr.w	r3, [ip]
 8010a9a:	f8d7 8000 	ldr.w	r8, [r7]
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	2050      	movs	r0, #80	@ 0x50
 8010aa4:	47c0      	blx	r8
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	6030      	str	r0, [r6, #0]
 8010aaa:	b3d0      	cbz	r0, 8010b22 <rcl_init_options_copy+0xc6>
 8010aac:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8010ab0:	4686      	mov	lr, r0
 8010ab2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ab6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010aba:	f8dc 3000 	ldr.w	r3, [ip]
 8010abe:	f8ce 3000 	str.w	r3, [lr]
 8010ac2:	4668      	mov	r0, sp
 8010ac4:	f002 fc98 	bl	80133f8 <rmw_get_zero_initialized_init_options>
 8010ac8:	46ee      	mov	lr, sp
 8010aca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ace:	f105 0c18 	add.w	ip, r5, #24
 8010ad2:	6824      	ldr	r4, [r4, #0]
 8010ad4:	6835      	ldr	r5, [r6, #0]
 8010ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aea:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010aee:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010af2:	f104 0018 	add.w	r0, r4, #24
 8010af6:	f105 0118 	add.w	r1, r5, #24
 8010afa:	f002 ff4d 	bl	8013998 <rmw_init_options_copy>
 8010afe:	4604      	mov	r4, r0
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d0be      	beq.n	8010a82 <rcl_init_options_copy+0x26>
 8010b04:	f7fc f826 	bl	800cb54 <rcutils_get_error_string>
 8010b08:	f7fc f83a 	bl	800cb80 <rcutils_reset_error>
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7ff ff7b 	bl	8010a08 <rcl_init_options_fini>
 8010b12:	b140      	cbz	r0, 8010b26 <rcl_init_options_copy+0xca>
 8010b14:	4604      	mov	r4, r0
 8010b16:	e7b4      	b.n	8010a82 <rcl_init_options_copy+0x26>
 8010b18:	240b      	movs	r4, #11
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	b014      	add	sp, #80	@ 0x50
 8010b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b22:	240a      	movs	r4, #10
 8010b24:	e7ad      	b.n	8010a82 <rcl_init_options_copy+0x26>
 8010b26:	4620      	mov	r0, r4
 8010b28:	b014      	add	sp, #80	@ 0x50
 8010b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2e:	f7ff bd91 	b.w	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8010b32:	bf00      	nop

08010b34 <rcl_get_localhost_only>:
 8010b34:	b510      	push	{r4, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9301      	str	r3, [sp, #4]
 8010b3c:	b1b8      	cbz	r0, 8010b6e <rcl_get_localhost_only+0x3a>
 8010b3e:	4604      	mov	r4, r0
 8010b40:	a901      	add	r1, sp, #4
 8010b42:	480c      	ldr	r0, [pc, #48]	@ (8010b74 <rcl_get_localhost_only+0x40>)
 8010b44:	f002 f9ac 	bl	8012ea0 <rcutils_get_env>
 8010b48:	b110      	cbz	r0, 8010b50 <rcl_get_localhost_only+0x1c>
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	b002      	add	sp, #8
 8010b4e:	bd10      	pop	{r4, pc}
 8010b50:	9b01      	ldr	r3, [sp, #4]
 8010b52:	b113      	cbz	r3, 8010b5a <rcl_get_localhost_only+0x26>
 8010b54:	781a      	ldrb	r2, [r3, #0]
 8010b56:	2a31      	cmp	r2, #49	@ 0x31
 8010b58:	d004      	beq.n	8010b64 <rcl_get_localhost_only+0x30>
 8010b5a:	2302      	movs	r3, #2
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	7023      	strb	r3, [r4, #0]
 8010b60:	b002      	add	sp, #8
 8010b62:	bd10      	pop	{r4, pc}
 8010b64:	785b      	ldrb	r3, [r3, #1]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1f7      	bne.n	8010b5a <rcl_get_localhost_only+0x26>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e7f6      	b.n	8010b5c <rcl_get_localhost_only+0x28>
 8010b6e:	200b      	movs	r0, #11
 8010b70:	b002      	add	sp, #8
 8010b72:	bd10      	pop	{r4, pc}
 8010b74:	08018b94 	.word	0x08018b94

08010b78 <rcl_get_zero_initialized_node>:
 8010b78:	4a03      	ldr	r2, [pc, #12]	@ (8010b88 <rcl_get_zero_initialized_node+0x10>)
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b80:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b84:	4618      	mov	r0, r3
 8010b86:	4770      	bx	lr
 8010b88:	08018bbc 	.word	0x08018bbc

08010b8c <rcl_node_init>:
 8010b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	b0a9      	sub	sp, #164	@ 0xa4
 8010b92:	4604      	mov	r4, r0
 8010b94:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010b98:	a823      	add	r0, sp, #140	@ 0x8c
 8010b9a:	460e      	mov	r6, r1
 8010b9c:	4615      	mov	r5, r2
 8010b9e:	461f      	mov	r7, r3
 8010ba0:	f005 ff56 	bl	8016a50 <rcl_guard_condition_get_default_options>
 8010ba4:	f1b8 0f00 	cmp.w	r8, #0
 8010ba8:	f000 80e6 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bac:	4640      	mov	r0, r8
 8010bae:	f7fb ffc3 	bl	800cb38 <rcutils_allocator_is_valid>
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	f000 80e0 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bb8:	2e00      	cmp	r6, #0
 8010bba:	f000 80dd 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bbe:	2d00      	cmp	r5, #0
 8010bc0:	f000 80da 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bc4:	2c00      	cmp	r4, #0
 8010bc6:	f000 80d7 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010bce:	f1b9 0f00 	cmp.w	r9, #0
 8010bd2:	f040 80fd 	bne.w	8010dd0 <rcl_node_init+0x244>
 8010bd6:	2f00      	cmp	r7, #0
 8010bd8:	f000 80ce 	beq.w	8010d78 <rcl_node_init+0x1ec>
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f7ff fd57 	bl	8010690 <rcl_context_is_valid>
 8010be2:	4682      	mov	sl, r0
 8010be4:	2800      	cmp	r0, #0
 8010be6:	f000 80cd 	beq.w	8010d84 <rcl_node_init+0x1f8>
 8010bea:	464a      	mov	r2, r9
 8010bec:	a922      	add	r1, sp, #136	@ 0x88
 8010bee:	4630      	mov	r0, r6
 8010bf0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8010bf4:	f002 fda2 	bl	801373c <rmw_validate_node_name>
 8010bf8:	4681      	mov	r9, r0
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	f040 80be 	bne.w	8010d7c <rcl_node_init+0x1f0>
 8010c00:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010c02:	2800      	cmp	r0, #0
 8010c04:	f040 80f0 	bne.w	8010de8 <rcl_node_init+0x25c>
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f7ef fb0b 	bl	8000224 <strlen>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	f040 80bb 	bne.w	8010d8a <rcl_node_init+0x1fe>
 8010c14:	4d7c      	ldr	r5, [pc, #496]	@ (8010e08 <rcl_node_init+0x27c>)
 8010c16:	a922      	add	r1, sp, #136	@ 0x88
 8010c18:	2200      	movs	r2, #0
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	f002 fd70 	bl	8013700 <rmw_validate_namespace>
 8010c20:	4681      	mov	r9, r0
 8010c22:	2800      	cmp	r0, #0
 8010c24:	f040 80aa 	bne.w	8010d7c <rcl_node_init+0x1f0>
 8010c28:	4682      	mov	sl, r0
 8010c2a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	f040 80e0 	bne.w	8010df2 <rcl_node_init+0x266>
 8010c32:	f8d8 3000 	ldr.w	r3, [r8]
 8010c36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c3a:	2078      	movs	r0, #120	@ 0x78
 8010c3c:	4798      	blx	r3
 8010c3e:	4681      	mov	r9, r0
 8010c40:	6060      	str	r0, [r4, #4]
 8010c42:	2800      	cmp	r0, #0
 8010c44:	f000 80ca 	beq.w	8010ddc <rcl_node_init+0x250>
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010c50:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010c54:	a808      	add	r0, sp, #32
 8010c56:	f000 f907 	bl	8010e68 <rcl_node_get_default_options>
 8010c5a:	a908      	add	r1, sp, #32
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	2268      	movs	r2, #104	@ 0x68
 8010c60:	f006 fdd5 	bl	801780e <memcpy>
 8010c64:	6861      	ldr	r1, [r4, #4]
 8010c66:	6027      	str	r7, [r4, #0]
 8010c68:	4640      	mov	r0, r8
 8010c6a:	f000 f90b 	bl	8010e84 <rcl_node_options_copy>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d158      	bne.n	8010d24 <rcl_node_init+0x198>
 8010c72:	4628      	mov	r0, r5
 8010c74:	f7ef fad6 	bl	8000224 <strlen>
 8010c78:	4428      	add	r0, r5
 8010c7a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010c7e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010c82:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	bf0c      	ite	eq
 8010c8c:	4b5f      	ldreq	r3, [pc, #380]	@ (8010e0c <rcl_node_init+0x280>)
 8010c8e:	4b60      	ldrne	r3, [pc, #384]	@ (8010e10 <rcl_node_init+0x284>)
 8010c90:	9302      	str	r3, [sp, #8]
 8010c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010c9c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010ca0:	f002 f916 	bl	8012ed0 <rcutils_format_string_limit>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	4631      	mov	r1, r6
 8010cae:	3028      	adds	r0, #40	@ 0x28
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	6866      	ldr	r6, [r4, #4]
 8010cb4:	f003 f984 	bl	8013fc0 <rmw_create_node>
 8010cb8:	6863      	ldr	r3, [r4, #4]
 8010cba:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010cbc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	d032      	beq.n	8010d28 <rcl_node_init+0x19c>
 8010cc2:	f003 fa11 	bl	80140e8 <rmw_node_get_graph_guard_condition>
 8010cc6:	4681      	mov	r9, r0
 8010cc8:	b360      	cbz	r0, 8010d24 <rcl_node_init+0x198>
 8010cca:	f8d8 3000 	ldr.w	r3, [r8]
 8010cce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010cd2:	6866      	ldr	r6, [r4, #4]
 8010cd4:	2008      	movs	r0, #8
 8010cd6:	4798      	blx	r3
 8010cd8:	6863      	ldr	r3, [r4, #4]
 8010cda:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010cdc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010ce0:	f1bb 0f00 	cmp.w	fp, #0
 8010ce4:	d020      	beq.n	8010d28 <rcl_node_init+0x19c>
 8010ce6:	a806      	add	r0, sp, #24
 8010ce8:	f005 fe22 	bl	8016930 <rcl_get_zero_initialized_guard_condition>
 8010cec:	a806      	add	r0, sp, #24
 8010cee:	c803      	ldmia	r0, {r0, r1}
 8010cf0:	6863      	ldr	r3, [r4, #4]
 8010cf2:	46c4      	mov	ip, r8
 8010cf4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010cf8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010cfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d00:	ae23      	add	r6, sp, #140	@ 0x8c
 8010d02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010d04:	f8dc 3000 	ldr.w	r3, [ip]
 8010d08:	6033      	str	r3, [r6, #0]
 8010d0a:	ab28      	add	r3, sp, #160	@ 0xa0
 8010d0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010d10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010d14:	4649      	mov	r1, r9
 8010d16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d18:	463a      	mov	r2, r7
 8010d1a:	4670      	mov	r0, lr
 8010d1c:	f005 fe12 	bl	8016944 <rcl_guard_condition_init_from_rmw>
 8010d20:	4681      	mov	r9, r0
 8010d22:	b328      	cbz	r0, 8010d70 <rcl_node_init+0x1e4>
 8010d24:	6863      	ldr	r3, [r4, #4]
 8010d26:	b1f3      	cbz	r3, 8010d66 <rcl_node_init+0x1da>
 8010d28:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010d2a:	b128      	cbz	r0, 8010d38 <rcl_node_init+0x1ac>
 8010d2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d30:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010d34:	4798      	blx	r3
 8010d36:	6863      	ldr	r3, [r4, #4]
 8010d38:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010d3a:	b110      	cbz	r0, 8010d42 <rcl_node_init+0x1b6>
 8010d3c:	f003 f958 	bl	8013ff0 <rmw_destroy_node>
 8010d40:	6863      	ldr	r3, [r4, #4]
 8010d42:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010d44:	b148      	cbz	r0, 8010d5a <rcl_node_init+0x1ce>
 8010d46:	f005 fe5d 	bl	8016a04 <rcl_guard_condition_fini>
 8010d4a:	6863      	ldr	r3, [r4, #4]
 8010d4c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010d50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010d52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d56:	4798      	blx	r3
 8010d58:	6863      	ldr	r3, [r4, #4]
 8010d5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d64:	4798      	blx	r3
 8010d66:	2300      	movs	r3, #0
 8010d68:	e9c4 3300 	strd	r3, r3, [r4]
 8010d6c:	f04f 0901 	mov.w	r9, #1
 8010d70:	f1ba 0f00 	cmp.w	sl, #0
 8010d74:	d125      	bne.n	8010dc2 <rcl_node_init+0x236>
 8010d76:	e001      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010d78:	f04f 090b 	mov.w	r9, #11
 8010d7c:	4648      	mov	r0, r9
 8010d7e:	b029      	add	sp, #164	@ 0xa4
 8010d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d84:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010d88:	e7f8      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010d8a:	782b      	ldrb	r3, [r5, #0]
 8010d8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d8e:	f43f af42 	beq.w	8010c16 <rcl_node_init+0x8a>
 8010d92:	9503      	str	r5, [sp, #12]
 8010d94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8010e14 <rcl_node_init+0x288>)
 8010d9c:	9302      	str	r3, [sp, #8]
 8010d9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010da8:	f002 f892 	bl	8012ed0 <rcutils_format_string_limit>
 8010dac:	4605      	mov	r5, r0
 8010dae:	b340      	cbz	r0, 8010e02 <rcl_node_init+0x276>
 8010db0:	2200      	movs	r2, #0
 8010db2:	a922      	add	r1, sp, #136	@ 0x88
 8010db4:	9222      	str	r2, [sp, #136]	@ 0x88
 8010db6:	f002 fca3 	bl	8013700 <rmw_validate_namespace>
 8010dba:	4681      	mov	r9, r0
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f43f af34 	beq.w	8010c2a <rcl_node_init+0x9e>
 8010dc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010dc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010dca:	4628      	mov	r0, r5
 8010dcc:	4798      	blx	r3
 8010dce:	e7d5      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010dd0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010dd4:	4648      	mov	r0, r9
 8010dd6:	b029      	add	sp, #164	@ 0xa4
 8010dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ddc:	f04f 090a 	mov.w	r9, #10
 8010de0:	f1ba 0f00 	cmp.w	sl, #0
 8010de4:	d1ed      	bne.n	8010dc2 <rcl_node_init+0x236>
 8010de6:	e7c9      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010de8:	f002 fcfa 	bl	80137e0 <rmw_node_name_validation_result_string>
 8010dec:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010df0:	e7c4      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010df2:	f002 fc97 	bl	8013724 <rmw_namespace_validation_result_string>
 8010df6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010dfa:	f1ba 0f00 	cmp.w	sl, #0
 8010dfe:	d1e0      	bne.n	8010dc2 <rcl_node_init+0x236>
 8010e00:	e7bc      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010e02:	f04f 090a 	mov.w	r9, #10
 8010e06:	e7b9      	b.n	8010d7c <rcl_node_init+0x1f0>
 8010e08:	08018bac 	.word	0x08018bac
 8010e0c:	08018a3c 	.word	0x08018a3c
 8010e10:	08018bb4 	.word	0x08018bb4
 8010e14:	08018bb0 	.word	0x08018bb0

08010e18 <rcl_node_is_valid>:
 8010e18:	b130      	cbz	r0, 8010e28 <rcl_node_is_valid+0x10>
 8010e1a:	6843      	ldr	r3, [r0, #4]
 8010e1c:	b123      	cbz	r3, 8010e28 <rcl_node_is_valid+0x10>
 8010e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010e20:	b113      	cbz	r3, 8010e28 <rcl_node_is_valid+0x10>
 8010e22:	6800      	ldr	r0, [r0, #0]
 8010e24:	f7ff bc34 	b.w	8010690 <rcl_context_is_valid>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	4770      	bx	lr

08010e2c <rcl_node_get_name>:
 8010e2c:	b120      	cbz	r0, 8010e38 <rcl_node_get_name+0xc>
 8010e2e:	6840      	ldr	r0, [r0, #4]
 8010e30:	b110      	cbz	r0, 8010e38 <rcl_node_get_name+0xc>
 8010e32:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010e34:	b100      	cbz	r0, 8010e38 <rcl_node_get_name+0xc>
 8010e36:	6880      	ldr	r0, [r0, #8]
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop

08010e3c <rcl_node_get_namespace>:
 8010e3c:	b120      	cbz	r0, 8010e48 <rcl_node_get_namespace+0xc>
 8010e3e:	6840      	ldr	r0, [r0, #4]
 8010e40:	b110      	cbz	r0, 8010e48 <rcl_node_get_namespace+0xc>
 8010e42:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010e44:	b100      	cbz	r0, 8010e48 <rcl_node_get_namespace+0xc>
 8010e46:	68c0      	ldr	r0, [r0, #12]
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop

08010e4c <rcl_node_get_options>:
 8010e4c:	b128      	cbz	r0, 8010e5a <rcl_node_get_options+0xe>
 8010e4e:	6840      	ldr	r0, [r0, #4]
 8010e50:	b118      	cbz	r0, 8010e5a <rcl_node_get_options+0xe>
 8010e52:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	bf08      	it	eq
 8010e58:	2000      	moveq	r0, #0
 8010e5a:	4770      	bx	lr

08010e5c <rcl_node_get_rmw_handle>:
 8010e5c:	b110      	cbz	r0, 8010e64 <rcl_node_get_rmw_handle+0x8>
 8010e5e:	6840      	ldr	r0, [r0, #4]
 8010e60:	b100      	cbz	r0, 8010e64 <rcl_node_get_rmw_handle+0x8>
 8010e62:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop

08010e68 <rcl_node_get_default_options>:
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	2268      	movs	r2, #104	@ 0x68
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	2100      	movs	r1, #0
 8010e70:	f006 fc04 	bl	801767c <memset>
 8010e74:	4620      	mov	r0, r4
 8010e76:	f7fb fe51 	bl	800cb1c <rcutils_get_default_allocator>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	7523      	strb	r3, [r4, #20]
 8010e7e:	4620      	mov	r0, r4
 8010e80:	bd10      	pop	{r4, pc}
 8010e82:	bf00      	nop

08010e84 <rcl_node_options_copy>:
 8010e84:	b1d0      	cbz	r0, 8010ebc <rcl_node_options_copy+0x38>
 8010e86:	b570      	push	{r4, r5, r6, lr}
 8010e88:	460c      	mov	r4, r1
 8010e8a:	b1a9      	cbz	r1, 8010eb8 <rcl_node_options_copy+0x34>
 8010e8c:	4288      	cmp	r0, r1
 8010e8e:	4684      	mov	ip, r0
 8010e90:	d012      	beq.n	8010eb8 <rcl_node_options_copy+0x34>
 8010e92:	4605      	mov	r5, r0
 8010e94:	8a86      	ldrh	r6, [r0, #20]
 8010e96:	468e      	mov	lr, r1
 8010e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010e9e:	682b      	ldr	r3, [r5, #0]
 8010ea0:	f8ce 3000 	str.w	r3, [lr]
 8010ea4:	f10c 0118 	add.w	r1, ip, #24
 8010ea8:	2250      	movs	r2, #80	@ 0x50
 8010eaa:	82a6      	strh	r6, [r4, #20]
 8010eac:	f104 0018 	add.w	r0, r4, #24
 8010eb0:	f006 fcad 	bl	801780e <memcpy>
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	200b      	movs	r0, #11
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
 8010ebc:	200b      	movs	r0, #11
 8010ebe:	4770      	bx	lr

08010ec0 <rcl_node_resolve_name>:
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec6:	b091      	sub	sp, #68	@ 0x44
 8010ec8:	ac1a      	add	r4, sp, #104	@ 0x68
 8010eca:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ece:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d03b      	beq.n	8010f4e <rcl_node_resolve_name+0x8e>
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	4605      	mov	r5, r0
 8010eda:	f7ff ffb7 	bl	8010e4c <rcl_node_get_options>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d037      	beq.n	8010f52 <rcl_node_resolve_name+0x92>
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	f7ff ffa2 	bl	8010e2c <rcl_node_get_name>
 8010ee8:	4606      	mov	r6, r0
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7ff ffa6 	bl	8010e3c <rcl_node_get_namespace>
 8010ef0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010ef4:	4681      	mov	r9, r0
 8010ef6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010efa:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010efc:	46ac      	mov	ip, r5
 8010efe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f02:	f8de 3000 	ldr.w	r3, [lr]
 8010f06:	f8cc 3000 	str.w	r3, [ip]
 8010f0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010f0c:	b1fb      	cbz	r3, 8010f4e <rcl_node_resolve_name+0x8e>
 8010f0e:	468a      	mov	sl, r1
 8010f10:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010f14:	f002 f934 	bl	8013180 <rcutils_get_zero_initialized_string_map>
 8010f18:	ab10      	add	r3, sp, #64	@ 0x40
 8010f1a:	9008      	str	r0, [sp, #32]
 8010f1c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010f20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f24:	2100      	movs	r1, #0
 8010f26:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010f2a:	a808      	add	r0, sp, #32
 8010f2c:	f002 f9a0 	bl	8013270 <rcutils_string_map_init>
 8010f30:	4607      	mov	r7, r0
 8010f32:	b180      	cbz	r0, 8010f56 <rcl_node_resolve_name+0x96>
 8010f34:	f7fb fe0e 	bl	800cb54 <rcutils_get_error_string>
 8010f38:	f7fb fe22 	bl	800cb80 <rcutils_reset_error>
 8010f3c:	2f0a      	cmp	r7, #10
 8010f3e:	bf18      	it	ne
 8010f40:	2701      	movne	r7, #1
 8010f42:	4638      	mov	r0, r7
 8010f44:	b011      	add	sp, #68	@ 0x44
 8010f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4a:	b002      	add	sp, #8
 8010f4c:	4770      	bx	lr
 8010f4e:	270b      	movs	r7, #11
 8010f50:	e7f7      	b.n	8010f42 <rcl_node_resolve_name+0x82>
 8010f52:	2701      	movs	r7, #1
 8010f54:	e7f5      	b.n	8010f42 <rcl_node_resolve_name+0x82>
 8010f56:	9009      	str	r0, [sp, #36]	@ 0x24
 8010f58:	9007      	str	r0, [sp, #28]
 8010f5a:	a808      	add	r0, sp, #32
 8010f5c:	f005 fce2 	bl	8016924 <rcl_get_default_topic_name_substitutions>
 8010f60:	4607      	mov	r7, r0
 8010f62:	b1a8      	cbz	r0, 8010f90 <rcl_node_resolve_name+0xd0>
 8010f64:	280a      	cmp	r0, #10
 8010f66:	9c07      	ldr	r4, [sp, #28]
 8010f68:	d000      	beq.n	8010f6c <rcl_node_resolve_name+0xac>
 8010f6a:	2701      	movs	r7, #1
 8010f6c:	a808      	add	r0, sp, #32
 8010f6e:	f002 f9bf 	bl	80132f0 <rcutils_string_map_fini>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d13d      	bne.n	8010ff2 <rcl_node_resolve_name+0x132>
 8010f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f78:	4659      	mov	r1, fp
 8010f7a:	47d0      	blx	sl
 8010f7c:	4659      	mov	r1, fp
 8010f7e:	4620      	mov	r0, r4
 8010f80:	47d0      	blx	sl
 8010f82:	f1b8 0f00 	cmp.w	r8, #0
 8010f86:	d0dc      	beq.n	8010f42 <rcl_node_resolve_name+0x82>
 8010f88:	2f67      	cmp	r7, #103	@ 0x67
 8010f8a:	bf08      	it	eq
 8010f8c:	2768      	moveq	r7, #104	@ 0x68
 8010f8e:	e7d8      	b.n	8010f42 <rcl_node_resolve_name+0x82>
 8010f90:	ab09      	add	r3, sp, #36	@ 0x24
 8010f92:	9305      	str	r3, [sp, #20]
 8010f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f96:	46ec      	mov	ip, sp
 8010f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	f8cc 3000 	str.w	r3, [ip]
 8010fa2:	464a      	mov	r2, r9
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	ab08      	add	r3, sp, #32
 8010faa:	f005 fb5d 	bl	8016668 <rcl_expand_topic_name>
 8010fae:	4607      	mov	r7, r0
 8010fb0:	b9b8      	cbnz	r0, 8010fe2 <rcl_node_resolve_name+0x122>
 8010fb2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010fb4:	9009      	str	r0, [sp, #36]	@ 0x24
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	a90a      	add	r1, sp, #40	@ 0x28
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f002 fadc 	bl	8013578 <rmw_validate_full_topic_name>
 8010fc0:	b988      	cbnz	r0, 8010fe6 <rcl_node_resolve_name+0x126>
 8010fc2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010fc4:	b9d5      	cbnz	r5, 8010ffc <rcl_node_resolve_name+0x13c>
 8010fc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fc8:	a808      	add	r0, sp, #32
 8010fca:	601c      	str	r4, [r3, #0]
 8010fcc:	f002 f990 	bl	80132f0 <rcutils_string_map_fini>
 8010fd0:	4607      	mov	r7, r0
 8010fd2:	b1a8      	cbz	r0, 8011000 <rcl_node_resolve_name+0x140>
 8010fd4:	f7fb fdbe 	bl	800cb54 <rcutils_get_error_string>
 8010fd8:	462c      	mov	r4, r5
 8010fda:	f7fb fdd1 	bl	800cb80 <rcutils_reset_error>
 8010fde:	2701      	movs	r7, #1
 8010fe0:	e7c9      	b.n	8010f76 <rcl_node_resolve_name+0xb6>
 8010fe2:	9c07      	ldr	r4, [sp, #28]
 8010fe4:	e7c2      	b.n	8010f6c <rcl_node_resolve_name+0xac>
 8010fe6:	f7fb fdb5 	bl	800cb54 <rcutils_get_error_string>
 8010fea:	2701      	movs	r7, #1
 8010fec:	f7fb fdc8 	bl	800cb80 <rcutils_reset_error>
 8010ff0:	e7bc      	b.n	8010f6c <rcl_node_resolve_name+0xac>
 8010ff2:	f7fb fdaf 	bl	800cb54 <rcutils_get_error_string>
 8010ff6:	f7fb fdc3 	bl	800cb80 <rcutils_reset_error>
 8010ffa:	e7bc      	b.n	8010f76 <rcl_node_resolve_name+0xb6>
 8010ffc:	2767      	movs	r7, #103	@ 0x67
 8010ffe:	e7b5      	b.n	8010f6c <rcl_node_resolve_name+0xac>
 8011000:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011002:	4659      	mov	r1, fp
 8011004:	47d0      	blx	sl
 8011006:	4659      	mov	r1, fp
 8011008:	4638      	mov	r0, r7
 801100a:	47d0      	blx	sl
 801100c:	e799      	b.n	8010f42 <rcl_node_resolve_name+0x82>
 801100e:	bf00      	nop

08011010 <rcl_service_get_rmw_handle>:
 8011010:	b118      	cbz	r0, 801101a <rcl_service_get_rmw_handle+0xa>
 8011012:	6800      	ldr	r0, [r0, #0]
 8011014:	b108      	cbz	r0, 801101a <rcl_service_get_rmw_handle+0xa>
 8011016:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801101a:	4770      	bx	lr

0801101c <rcl_take_request>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	468e      	mov	lr, r1
 8011020:	460c      	mov	r4, r1
 8011022:	4616      	mov	r6, r2
 8011024:	4605      	mov	r5, r0
 8011026:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801102a:	b08c      	sub	sp, #48	@ 0x30
 801102c:	f10d 0c18 	add.w	ip, sp, #24
 8011030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011034:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011038:	e88c 0003 	stmia.w	ip, {r0, r1}
 801103c:	b30d      	cbz	r5, 8011082 <rcl_take_request+0x66>
 801103e:	682b      	ldr	r3, [r5, #0]
 8011040:	b1fb      	cbz	r3, 8011082 <rcl_take_request+0x66>
 8011042:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011046:	b1e0      	cbz	r0, 8011082 <rcl_take_request+0x66>
 8011048:	b336      	cbz	r6, 8011098 <rcl_take_request+0x7c>
 801104a:	2300      	movs	r3, #0
 801104c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011050:	4632      	mov	r2, r6
 8011052:	f10d 0307 	add.w	r3, sp, #7
 8011056:	a902      	add	r1, sp, #8
 8011058:	f003 f89a 	bl	8014190 <rmw_take_request>
 801105c:	4605      	mov	r5, r0
 801105e:	b198      	cbz	r0, 8011088 <rcl_take_request+0x6c>
 8011060:	280a      	cmp	r0, #10
 8011062:	bf18      	it	ne
 8011064:	2501      	movne	r5, #1
 8011066:	f10d 0e18 	add.w	lr, sp, #24
 801106a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801106e:	46a4      	mov	ip, r4
 8011070:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011074:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011078:	e88c 0003 	stmia.w	ip, {r0, r1}
 801107c:	4628      	mov	r0, r5
 801107e:	b00c      	add	sp, #48	@ 0x30
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011086:	e7ee      	b.n	8011066 <rcl_take_request+0x4a>
 8011088:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801108c:	f240 2359 	movw	r3, #601	@ 0x259
 8011090:	2a00      	cmp	r2, #0
 8011092:	bf08      	it	eq
 8011094:	461d      	moveq	r5, r3
 8011096:	e7e6      	b.n	8011066 <rcl_take_request+0x4a>
 8011098:	250b      	movs	r5, #11
 801109a:	e7e4      	b.n	8011066 <rcl_take_request+0x4a>

0801109c <rcl_send_response>:
 801109c:	b170      	cbz	r0, 80110bc <rcl_send_response+0x20>
 801109e:	6800      	ldr	r0, [r0, #0]
 80110a0:	b160      	cbz	r0, 80110bc <rcl_send_response+0x20>
 80110a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80110a6:	b148      	cbz	r0, 80110bc <rcl_send_response+0x20>
 80110a8:	b159      	cbz	r1, 80110c2 <rcl_send_response+0x26>
 80110aa:	b510      	push	{r4, lr}
 80110ac:	b15a      	cbz	r2, 80110c6 <rcl_send_response+0x2a>
 80110ae:	f003 f8cd 	bl	801424c <rmw_send_response>
 80110b2:	b110      	cbz	r0, 80110ba <rcl_send_response+0x1e>
 80110b4:	2802      	cmp	r0, #2
 80110b6:	bf18      	it	ne
 80110b8:	2001      	movne	r0, #1
 80110ba:	bd10      	pop	{r4, pc}
 80110bc:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80110c0:	4770      	bx	lr
 80110c2:	200b      	movs	r0, #11
 80110c4:	4770      	bx	lr
 80110c6:	200b      	movs	r0, #11
 80110c8:	bd10      	pop	{r4, pc}
 80110ca:	bf00      	nop

080110cc <rcl_service_is_valid>:
 80110cc:	b130      	cbz	r0, 80110dc <rcl_service_is_valid+0x10>
 80110ce:	6800      	ldr	r0, [r0, #0]
 80110d0:	b120      	cbz	r0, 80110dc <rcl_service_is_valid+0x10>
 80110d2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80110d6:	3800      	subs	r0, #0
 80110d8:	bf18      	it	ne
 80110da:	2001      	movne	r0, #1
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop

080110e0 <rcl_get_zero_initialized_subscription>:
 80110e0:	4b01      	ldr	r3, [pc, #4]	@ (80110e8 <rcl_get_zero_initialized_subscription+0x8>)
 80110e2:	6818      	ldr	r0, [r3, #0]
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	08018bc4 	.word	0x08018bc4

080110ec <rcl_subscription_init>:
 80110ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110f0:	b089      	sub	sp, #36	@ 0x24
 80110f2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80110f4:	b1d6      	cbz	r6, 801112c <rcl_subscription_init+0x40>
 80110f6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80110fa:	4604      	mov	r4, r0
 80110fc:	4648      	mov	r0, r9
 80110fe:	460d      	mov	r5, r1
 8011100:	4690      	mov	r8, r2
 8011102:	461f      	mov	r7, r3
 8011104:	f7fb fd18 	bl	800cb38 <rcutils_allocator_is_valid>
 8011108:	b180      	cbz	r0, 801112c <rcl_subscription_init+0x40>
 801110a:	b17c      	cbz	r4, 801112c <rcl_subscription_init+0x40>
 801110c:	4628      	mov	r0, r5
 801110e:	f7ff fe83 	bl	8010e18 <rcl_node_is_valid>
 8011112:	2800      	cmp	r0, #0
 8011114:	d054      	beq.n	80111c0 <rcl_subscription_init+0xd4>
 8011116:	f1b8 0f00 	cmp.w	r8, #0
 801111a:	d007      	beq.n	801112c <rcl_subscription_init+0x40>
 801111c:	b137      	cbz	r7, 801112c <rcl_subscription_init+0x40>
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	b14b      	cbz	r3, 8011136 <rcl_subscription_init+0x4a>
 8011122:	2764      	movs	r7, #100	@ 0x64
 8011124:	4638      	mov	r0, r7
 8011126:	b009      	add	sp, #36	@ 0x24
 8011128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801112c:	270b      	movs	r7, #11
 801112e:	4638      	mov	r0, r7
 8011130:	b009      	add	sp, #36	@ 0x24
 8011132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011136:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801113a:	aa07      	add	r2, sp, #28
 801113c:	9205      	str	r2, [sp, #20]
 801113e:	9307      	str	r3, [sp, #28]
 8011140:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011144:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011148:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801114c:	4639      	mov	r1, r7
 801114e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011152:	4628      	mov	r0, r5
 8011154:	f7ff feb4 	bl	8010ec0 <rcl_node_resolve_name>
 8011158:	4607      	mov	r7, r0
 801115a:	2800      	cmp	r0, #0
 801115c:	d15f      	bne.n	801121e <rcl_subscription_init+0x132>
 801115e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011162:	21c8      	movs	r1, #200	@ 0xc8
 8011164:	2001      	movs	r0, #1
 8011166:	4798      	blx	r3
 8011168:	6020      	str	r0, [r4, #0]
 801116a:	2800      	cmp	r0, #0
 801116c:	d05d      	beq.n	801122a <rcl_subscription_init+0x13e>
 801116e:	4628      	mov	r0, r5
 8011170:	f7ff fe74 	bl	8010e5c <rcl_node_get_rmw_handle>
 8011174:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	9a07      	ldr	r2, [sp, #28]
 801117c:	6827      	ldr	r7, [r4, #0]
 801117e:	4641      	mov	r1, r8
 8011180:	4633      	mov	r3, r6
 8011182:	f003 f94d 	bl	8014420 <rmw_create_subscription>
 8011186:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 801118a:	6827      	ldr	r7, [r4, #0]
 801118c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011190:	b348      	cbz	r0, 80111e6 <rcl_subscription_init+0xfa>
 8011192:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8011196:	f003 fa25 	bl	80145e4 <rmw_subscription_get_actual_qos>
 801119a:	4607      	mov	r7, r0
 801119c:	b9a8      	cbnz	r0, 80111ca <rcl_subscription_init+0xde>
 801119e:	6820      	ldr	r0, [r4, #0]
 80111a0:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80111a4:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80111a8:	2270      	movs	r2, #112	@ 0x70
 80111aa:	4631      	mov	r1, r6
 80111ac:	f006 fb2f 	bl	801780e <memcpy>
 80111b0:	9807      	ldr	r0, [sp, #28]
 80111b2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80111b4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80111b6:	4798      	blx	r3
 80111b8:	4638      	mov	r0, r7
 80111ba:	b009      	add	sp, #36	@ 0x24
 80111bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111c0:	27c8      	movs	r7, #200	@ 0xc8
 80111c2:	4638      	mov	r0, r7
 80111c4:	b009      	add	sp, #36	@ 0x24
 80111c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ca:	6827      	ldr	r7, [r4, #0]
 80111cc:	b32f      	cbz	r7, 801121a <rcl_subscription_init+0x12e>
 80111ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80111d2:	b14b      	cbz	r3, 80111e8 <rcl_subscription_init+0xfc>
 80111d4:	4628      	mov	r0, r5
 80111d6:	f7ff fe41 	bl	8010e5c <rcl_node_get_rmw_handle>
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80111e0:	f003 fa10 	bl	8014604 <rmw_destroy_subscription>
 80111e4:	6827      	ldr	r7, [r4, #0]
 80111e6:	b197      	cbz	r7, 801120e <rcl_subscription_init+0x122>
 80111e8:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80111ec:	4628      	mov	r0, r5
 80111ee:	f7fb fca3 	bl	800cb38 <rcutils_allocator_is_valid>
 80111f2:	b158      	cbz	r0, 801120c <rcl_subscription_init+0x120>
 80111f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80111f6:	b148      	cbz	r0, 801120c <rcl_subscription_init+0x120>
 80111f8:	4629      	mov	r1, r5
 80111fa:	f002 f911 	bl	8013420 <rmw_subscription_content_filter_options_fini>
 80111fe:	4605      	mov	r5, r0
 8011200:	b9b8      	cbnz	r0, 8011232 <rcl_subscription_init+0x146>
 8011202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011204:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011206:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011208:	4798      	blx	r3
 801120a:	66fd      	str	r5, [r7, #108]	@ 0x6c
 801120c:	6827      	ldr	r7, [r4, #0]
 801120e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011210:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011212:	4638      	mov	r0, r7
 8011214:	4798      	blx	r3
 8011216:	2300      	movs	r3, #0
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	2701      	movs	r7, #1
 801121c:	e7c8      	b.n	80111b0 <rcl_subscription_init+0xc4>
 801121e:	2867      	cmp	r0, #103	@ 0x67
 8011220:	d0c6      	beq.n	80111b0 <rcl_subscription_init+0xc4>
 8011222:	2869      	cmp	r0, #105	@ 0x69
 8011224:	d003      	beq.n	801122e <rcl_subscription_init+0x142>
 8011226:	280a      	cmp	r0, #10
 8011228:	d1f7      	bne.n	801121a <rcl_subscription_init+0x12e>
 801122a:	270a      	movs	r7, #10
 801122c:	e7c0      	b.n	80111b0 <rcl_subscription_init+0xc4>
 801122e:	2767      	movs	r7, #103	@ 0x67
 8011230:	e7be      	b.n	80111b0 <rcl_subscription_init+0xc4>
 8011232:	f7ff fa0f 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8011236:	6827      	ldr	r7, [r4, #0]
 8011238:	e7e9      	b.n	801120e <rcl_subscription_init+0x122>
 801123a:	bf00      	nop

0801123c <rcl_subscription_get_default_options>:
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	4d14      	ldr	r5, [pc, #80]	@ (8011290 <rcl_subscription_get_default_options+0x54>)
 8011240:	4914      	ldr	r1, [pc, #80]	@ (8011294 <rcl_subscription_get_default_options+0x58>)
 8011242:	b08a      	sub	sp, #40	@ 0x28
 8011244:	4604      	mov	r4, r0
 8011246:	2250      	movs	r2, #80	@ 0x50
 8011248:	4628      	mov	r0, r5
 801124a:	f006 fae0 	bl	801780e <memcpy>
 801124e:	a804      	add	r0, sp, #16
 8011250:	f7fb fc64 	bl	800cb1c <rcutils_get_default_allocator>
 8011254:	f10d 0c10 	add.w	ip, sp, #16
 8011258:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801125c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011260:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011264:	466e      	mov	r6, sp
 8011266:	f8dc 3000 	ldr.w	r3, [ip]
 801126a:	f8ce 3000 	str.w	r3, [lr]
 801126e:	4630      	mov	r0, r6
 8011270:	f002 f8f0 	bl	8013454 <rmw_get_default_subscription_options>
 8011274:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011278:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801127c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011280:	2270      	movs	r2, #112	@ 0x70
 8011282:	4629      	mov	r1, r5
 8011284:	4620      	mov	r0, r4
 8011286:	f006 fac2 	bl	801780e <memcpy>
 801128a:	4620      	mov	r0, r4
 801128c:	b00a      	add	sp, #40	@ 0x28
 801128e:	bd70      	pop	{r4, r5, r6, pc}
 8011290:	2000dd38 	.word	0x2000dd38
 8011294:	08018bc8 	.word	0x08018bc8

08011298 <rcl_take>:
 8011298:	2800      	cmp	r0, #0
 801129a:	d04a      	beq.n	8011332 <rcl_take+0x9a>
 801129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a0:	4604      	mov	r4, r0
 80112a2:	6800      	ldr	r0, [r0, #0]
 80112a4:	b0a4      	sub	sp, #144	@ 0x90
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d03b      	beq.n	8011322 <rcl_take+0x8a>
 80112aa:	461f      	mov	r7, r3
 80112ac:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d036      	beq.n	8011322 <rcl_take+0x8a>
 80112b4:	460e      	mov	r6, r1
 80112b6:	2900      	cmp	r1, #0
 80112b8:	d039      	beq.n	801132e <rcl_take+0x96>
 80112ba:	4615      	mov	r5, r2
 80112bc:	2a00      	cmp	r2, #0
 80112be:	d03c      	beq.n	801133a <rcl_take+0xa2>
 80112c0:	a802      	add	r0, sp, #8
 80112c2:	f002 f951 	bl	8013568 <rmw_get_zero_initialized_message_info>
 80112c6:	f10d 0c08 	add.w	ip, sp, #8
 80112ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80112ce:	46ae      	mov	lr, r5
 80112d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80112d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80112e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80112e4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80112e8:	f04f 0800 	mov.w	r8, #0
 80112ec:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80112f0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80112f4:	6822      	ldr	r2, [r4, #0]
 80112f6:	462b      	mov	r3, r5
 80112f8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80112fc:	9700      	str	r7, [sp, #0]
 80112fe:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011302:	4631      	mov	r1, r6
 8011304:	f003 f9de 	bl	80146c4 <rmw_take_with_info>
 8011308:	4603      	mov	r3, r0
 801130a:	b9c0      	cbnz	r0, 801133e <rcl_take+0xa6>
 801130c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011310:	f240 1291 	movw	r2, #401	@ 0x191
 8011314:	2900      	cmp	r1, #0
 8011316:	bf08      	it	eq
 8011318:	4613      	moveq	r3, r2
 801131a:	4618      	mov	r0, r3
 801131c:	b024      	add	sp, #144	@ 0x90
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011322:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011326:	4618      	mov	r0, r3
 8011328:	b024      	add	sp, #144	@ 0x90
 801132a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132e:	230b      	movs	r3, #11
 8011330:	e7f3      	b.n	801131a <rcl_take+0x82>
 8011332:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011336:	4618      	mov	r0, r3
 8011338:	4770      	bx	lr
 801133a:	ad14      	add	r5, sp, #80	@ 0x50
 801133c:	e7c0      	b.n	80112c0 <rcl_take+0x28>
 801133e:	f7ff f989 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 8011342:	4603      	mov	r3, r0
 8011344:	e7e9      	b.n	801131a <rcl_take+0x82>
 8011346:	bf00      	nop

08011348 <rcl_subscription_get_rmw_handle>:
 8011348:	b118      	cbz	r0, 8011352 <rcl_subscription_get_rmw_handle+0xa>
 801134a:	6800      	ldr	r0, [r0, #0]
 801134c:	b108      	cbz	r0, 8011352 <rcl_subscription_get_rmw_handle+0xa>
 801134e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011352:	4770      	bx	lr

08011354 <rcl_subscription_is_valid>:
 8011354:	b130      	cbz	r0, 8011364 <rcl_subscription_is_valid+0x10>
 8011356:	6800      	ldr	r0, [r0, #0]
 8011358:	b120      	cbz	r0, 8011364 <rcl_subscription_is_valid+0x10>
 801135a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801135e:	3800      	subs	r0, #0
 8011360:	bf18      	it	ne
 8011362:	2001      	movne	r0, #1
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop

08011368 <rcl_get_system_time>:
 8011368:	4608      	mov	r0, r1
 801136a:	f7fb bc25 	b.w	800cbb8 <rcutils_system_time_now>
 801136e:	bf00      	nop

08011370 <rcl_get_steady_time>:
 8011370:	4608      	mov	r0, r1
 8011372:	f7fb bc49 	b.w	800cc08 <rcutils_steady_time_now>
 8011376:	bf00      	nop

08011378 <rcl_get_ros_time>:
 8011378:	7a03      	ldrb	r3, [r0, #8]
 801137a:	b510      	push	{r4, lr}
 801137c:	460c      	mov	r4, r1
 801137e:	b133      	cbz	r3, 801138e <rcl_get_ros_time+0x16>
 8011380:	2105      	movs	r1, #5
 8011382:	f001 fce9 	bl	8012d58 <__atomic_load_8>
 8011386:	e9c4 0100 	strd	r0, r1, [r4]
 801138a:	2000      	movs	r0, #0
 801138c:	bd10      	pop	{r4, pc}
 801138e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011392:	4608      	mov	r0, r1
 8011394:	f7fb bc10 	b.w	800cbb8 <rcutils_system_time_now>

08011398 <rcl_clock_init>:
 8011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139a:	4605      	mov	r5, r0
 801139c:	4610      	mov	r0, r2
 801139e:	4614      	mov	r4, r2
 80113a0:	460e      	mov	r6, r1
 80113a2:	f7fb fbc9 	bl	800cb38 <rcutils_allocator_is_valid>
 80113a6:	b128      	cbz	r0, 80113b4 <rcl_clock_init+0x1c>
 80113a8:	2d03      	cmp	r5, #3
 80113aa:	d803      	bhi.n	80113b4 <rcl_clock_init+0x1c>
 80113ac:	e8df f005 	tbb	[pc, r5]
 80113b0:	06532e1d 	.word	0x06532e1d
 80113b4:	f04f 0c0b 	mov.w	ip, #11
 80113b8:	4660      	mov	r0, ip
 80113ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113bc:	2e00      	cmp	r6, #0
 80113be:	d0f9      	beq.n	80113b4 <rcl_clock_init+0x1c>
 80113c0:	2c00      	cmp	r4, #0
 80113c2:	d0f7      	beq.n	80113b4 <rcl_clock_init+0x1c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80113ca:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011480 <rcl_clock_init+0xe8>
 80113ce:	6133      	str	r3, [r6, #16]
 80113d0:	f106 0514 	add.w	r5, r6, #20
 80113d4:	469c      	mov	ip, r3
 80113d6:	2703      	movs	r7, #3
 80113d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	602b      	str	r3, [r5, #0]
 80113e0:	7037      	strb	r7, [r6, #0]
 80113e2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80113e6:	4660      	mov	r0, ip
 80113e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ea:	2e00      	cmp	r6, #0
 80113ec:	d0e2      	beq.n	80113b4 <rcl_clock_init+0x1c>
 80113ee:	2300      	movs	r3, #0
 80113f0:	7033      	strb	r3, [r6, #0]
 80113f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80113f6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80113fa:	469c      	mov	ip, r3
 80113fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113fe:	f106 0514 	add.w	r5, r6, #20
 8011402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011404:	6823      	ldr	r3, [r4, #0]
 8011406:	602b      	str	r3, [r5, #0]
 8011408:	4660      	mov	r0, ip
 801140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801140c:	2e00      	cmp	r6, #0
 801140e:	d0d1      	beq.n	80113b4 <rcl_clock_init+0x1c>
 8011410:	2c00      	cmp	r4, #0
 8011412:	d0cf      	beq.n	80113b4 <rcl_clock_init+0x1c>
 8011414:	2700      	movs	r7, #0
 8011416:	7037      	strb	r7, [r6, #0]
 8011418:	46a4      	mov	ip, r4
 801141a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801141e:	f106 0514 	add.w	r5, r6, #20
 8011422:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011426:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801142c:	f8dc 3000 	ldr.w	r3, [ip]
 8011430:	602b      	str	r3, [r5, #0]
 8011432:	6921      	ldr	r1, [r4, #16]
 8011434:	6823      	ldr	r3, [r4, #0]
 8011436:	2010      	movs	r0, #16
 8011438:	4798      	blx	r3
 801143a:	6130      	str	r0, [r6, #16]
 801143c:	b1d0      	cbz	r0, 8011474 <rcl_clock_init+0xdc>
 801143e:	2200      	movs	r2, #0
 8011440:	2300      	movs	r3, #0
 8011442:	e9c0 2300 	strd	r2, r3, [r0]
 8011446:	2301      	movs	r3, #1
 8011448:	7207      	strb	r7, [r0, #8]
 801144a:	4a0c      	ldr	r2, [pc, #48]	@ (801147c <rcl_clock_init+0xe4>)
 801144c:	7033      	strb	r3, [r6, #0]
 801144e:	46bc      	mov	ip, r7
 8011450:	60f2      	str	r2, [r6, #12]
 8011452:	4660      	mov	r0, ip
 8011454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011456:	2e00      	cmp	r6, #0
 8011458:	d0ac      	beq.n	80113b4 <rcl_clock_init+0x1c>
 801145a:	2c00      	cmp	r4, #0
 801145c:	d0aa      	beq.n	80113b4 <rcl_clock_init+0x1c>
 801145e:	2300      	movs	r3, #0
 8011460:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011464:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011484 <rcl_clock_init+0xec>
 8011468:	6133      	str	r3, [r6, #16]
 801146a:	f106 0514 	add.w	r5, r6, #20
 801146e:	469c      	mov	ip, r3
 8011470:	2702      	movs	r7, #2
 8011472:	e7b1      	b.n	80113d8 <rcl_clock_init+0x40>
 8011474:	f04f 0c0a 	mov.w	ip, #10
 8011478:	e79e      	b.n	80113b8 <rcl_clock_init+0x20>
 801147a:	bf00      	nop
 801147c:	08011379 	.word	0x08011379
 8011480:	08011371 	.word	0x08011371
 8011484:	08011369 	.word	0x08011369

08011488 <rcl_clock_get_now>:
 8011488:	b140      	cbz	r0, 801149c <rcl_clock_get_now+0x14>
 801148a:	b139      	cbz	r1, 801149c <rcl_clock_get_now+0x14>
 801148c:	7803      	ldrb	r3, [r0, #0]
 801148e:	b11b      	cbz	r3, 8011498 <rcl_clock_get_now+0x10>
 8011490:	68c3      	ldr	r3, [r0, #12]
 8011492:	b10b      	cbz	r3, 8011498 <rcl_clock_get_now+0x10>
 8011494:	6900      	ldr	r0, [r0, #16]
 8011496:	4718      	bx	r3
 8011498:	2001      	movs	r0, #1
 801149a:	4770      	bx	lr
 801149c:	200b      	movs	r0, #11
 801149e:	4770      	bx	lr

080114a0 <rcl_timer_call>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	b087      	sub	sp, #28
 80114a6:	2800      	cmp	r0, #0
 80114a8:	d06d      	beq.n	8011586 <rcl_timer_call+0xe6>
 80114aa:	6803      	ldr	r3, [r0, #0]
 80114ac:	4604      	mov	r4, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d063      	beq.n	801157a <rcl_timer_call+0xda>
 80114b2:	f3bf 8f5b 	dmb	ish
 80114b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80114ba:	f3bf 8f5b 	dmb	ish
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d150      	bne.n	8011564 <rcl_timer_call+0xc4>
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	a904      	add	r1, sp, #16
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	f7ff ffde 	bl	8011488 <rcl_clock_get_now>
 80114cc:	4605      	mov	r5, r0
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d14a      	bne.n	8011568 <rcl_timer_call+0xc8>
 80114d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	db4a      	blt.n	8011570 <rcl_timer_call+0xd0>
 80114da:	6820      	ldr	r0, [r4, #0]
 80114dc:	f04f 0a05 	mov.w	sl, #5
 80114e0:	f8cd a000 	str.w	sl, [sp]
 80114e4:	3020      	adds	r0, #32
 80114e6:	f001 fca3 	bl	8012e30 <__atomic_exchange_8>
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	f3bf 8f5b 	dmb	ish
 80114f0:	4680      	mov	r8, r0
 80114f2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80114f6:	f3bf 8f5b 	dmb	ish
 80114fa:	6820      	ldr	r0, [r4, #0]
 80114fc:	4689      	mov	r9, r1
 80114fe:	3028      	adds	r0, #40	@ 0x28
 8011500:	4651      	mov	r1, sl
 8011502:	f001 fc29 	bl	8012d58 <__atomic_load_8>
 8011506:	4606      	mov	r6, r0
 8011508:	6820      	ldr	r0, [r4, #0]
 801150a:	460f      	mov	r7, r1
 801150c:	3018      	adds	r0, #24
 801150e:	4651      	mov	r1, sl
 8011510:	f001 fc22 	bl	8012d58 <__atomic_load_8>
 8011514:	1836      	adds	r6, r6, r0
 8011516:	4602      	mov	r2, r0
 8011518:	4682      	mov	sl, r0
 801151a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801151e:	eb47 0701 	adc.w	r7, r7, r1
 8011522:	4286      	cmp	r6, r0
 8011524:	460b      	mov	r3, r1
 8011526:	eb77 010c 	sbcs.w	r1, r7, ip
 801152a:	da04      	bge.n	8011536 <rcl_timer_call+0x96>
 801152c:	ea53 0102 	orrs.w	r1, r3, r2
 8011530:	d12e      	bne.n	8011590 <rcl_timer_call+0xf0>
 8011532:	4606      	mov	r6, r0
 8011534:	4667      	mov	r7, ip
 8011536:	6820      	ldr	r0, [r4, #0]
 8011538:	2105      	movs	r1, #5
 801153a:	4632      	mov	r2, r6
 801153c:	463b      	mov	r3, r7
 801153e:	3028      	adds	r0, #40	@ 0x28
 8011540:	9100      	str	r1, [sp, #0]
 8011542:	f001 fc3f 	bl	8012dc4 <__atomic_store_8>
 8011546:	f1bb 0f00 	cmp.w	fp, #0
 801154a:	d00d      	beq.n	8011568 <rcl_timer_call+0xc8>
 801154c:	9a04      	ldr	r2, [sp, #16]
 801154e:	9b05      	ldr	r3, [sp, #20]
 8011550:	ebb2 0208 	subs.w	r2, r2, r8
 8011554:	4620      	mov	r0, r4
 8011556:	eb63 0309 	sbc.w	r3, r3, r9
 801155a:	47d8      	blx	fp
 801155c:	4628      	mov	r0, r5
 801155e:	b007      	add	sp, #28
 8011560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011564:	f240 3521 	movw	r5, #801	@ 0x321
 8011568:	4628      	mov	r0, r5
 801156a:	b007      	add	sp, #28
 801156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011570:	2501      	movs	r5, #1
 8011572:	4628      	mov	r0, r5
 8011574:	b007      	add	sp, #28
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801157e:	4628      	mov	r0, r5
 8011580:	b007      	add	sp, #28
 8011582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011586:	250b      	movs	r5, #11
 8011588:	4628      	mov	r0, r5
 801158a:	b007      	add	sp, #28
 801158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011590:	1b80      	subs	r0, r0, r6
 8011592:	eb6c 0107 	sbc.w	r1, ip, r7
 8011596:	3801      	subs	r0, #1
 8011598:	f161 0100 	sbc.w	r1, r1, #0
 801159c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80115a0:	f7ef fa54 	bl	8000a4c <__aeabi_ldivmod>
 80115a4:	9b02      	ldr	r3, [sp, #8]
 80115a6:	3001      	adds	r0, #1
 80115a8:	f141 0100 	adc.w	r1, r1, #0
 80115ac:	fb00 f303 	mul.w	r3, r0, r3
 80115b0:	fb01 330a 	mla	r3, r1, sl, r3
 80115b4:	fba0 0a0a 	umull	r0, sl, r0, sl
 80115b8:	1986      	adds	r6, r0, r6
 80115ba:	4453      	add	r3, sl
 80115bc:	eb43 0707 	adc.w	r7, r3, r7
 80115c0:	e7b9      	b.n	8011536 <rcl_timer_call+0x96>
 80115c2:	bf00      	nop

080115c4 <rcl_timer_is_ready>:
 80115c4:	b570      	push	{r4, r5, r6, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	b378      	cbz	r0, 801162a <rcl_timer_is_ready+0x66>
 80115ca:	6803      	ldr	r3, [r0, #0]
 80115cc:	4604      	mov	r4, r0
 80115ce:	b383      	cbz	r3, 8011632 <rcl_timer_is_ready+0x6e>
 80115d0:	460d      	mov	r5, r1
 80115d2:	b351      	cbz	r1, 801162a <rcl_timer_is_ready+0x66>
 80115d4:	f3bf 8f5b 	dmb	ish
 80115d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80115dc:	f3bf 8f5b 	dmb	ish
 80115e0:	b953      	cbnz	r3, 80115f8 <rcl_timer_is_ready+0x34>
 80115e2:	6803      	ldr	r3, [r0, #0]
 80115e4:	4669      	mov	r1, sp
 80115e6:	6818      	ldr	r0, [r3, #0]
 80115e8:	f7ff ff4e 	bl	8011488 <rcl_clock_get_now>
 80115ec:	4606      	mov	r6, r0
 80115ee:	b140      	cbz	r0, 8011602 <rcl_timer_is_ready+0x3e>
 80115f0:	f240 3321 	movw	r3, #801	@ 0x321
 80115f4:	4298      	cmp	r0, r3
 80115f6:	d101      	bne.n	80115fc <rcl_timer_is_ready+0x38>
 80115f8:	2600      	movs	r6, #0
 80115fa:	702e      	strb	r6, [r5, #0]
 80115fc:	4630      	mov	r0, r6
 80115fe:	b002      	add	sp, #8
 8011600:	bd70      	pop	{r4, r5, r6, pc}
 8011602:	6820      	ldr	r0, [r4, #0]
 8011604:	2105      	movs	r1, #5
 8011606:	3028      	adds	r0, #40	@ 0x28
 8011608:	f001 fba6 	bl	8012d58 <__atomic_load_8>
 801160c:	9b00      	ldr	r3, [sp, #0]
 801160e:	1ac0      	subs	r0, r0, r3
 8011610:	9b01      	ldr	r3, [sp, #4]
 8011612:	eb61 0103 	sbc.w	r1, r1, r3
 8011616:	2801      	cmp	r0, #1
 8011618:	f171 0300 	sbcs.w	r3, r1, #0
 801161c:	bfb4      	ite	lt
 801161e:	2301      	movlt	r3, #1
 8011620:	2300      	movge	r3, #0
 8011622:	4630      	mov	r0, r6
 8011624:	702b      	strb	r3, [r5, #0]
 8011626:	b002      	add	sp, #8
 8011628:	bd70      	pop	{r4, r5, r6, pc}
 801162a:	260b      	movs	r6, #11
 801162c:	4630      	mov	r0, r6
 801162e:	b002      	add	sp, #8
 8011630:	bd70      	pop	{r4, r5, r6, pc}
 8011632:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011636:	e7e1      	b.n	80115fc <rcl_timer_is_ready+0x38>

08011638 <rcl_timer_get_time_until_next_call>:
 8011638:	b570      	push	{r4, r5, r6, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	b330      	cbz	r0, 801168c <rcl_timer_get_time_until_next_call+0x54>
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	4604      	mov	r4, r0
 8011642:	b33b      	cbz	r3, 8011694 <rcl_timer_get_time_until_next_call+0x5c>
 8011644:	460d      	mov	r5, r1
 8011646:	b309      	cbz	r1, 801168c <rcl_timer_get_time_until_next_call+0x54>
 8011648:	f3bf 8f5b 	dmb	ish
 801164c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011650:	f3bf 8f5b 	dmb	ish
 8011654:	b9ab      	cbnz	r3, 8011682 <rcl_timer_get_time_until_next_call+0x4a>
 8011656:	6803      	ldr	r3, [r0, #0]
 8011658:	4669      	mov	r1, sp
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	f7ff ff14 	bl	8011488 <rcl_clock_get_now>
 8011660:	4606      	mov	r6, r0
 8011662:	b958      	cbnz	r0, 801167c <rcl_timer_get_time_until_next_call+0x44>
 8011664:	6820      	ldr	r0, [r4, #0]
 8011666:	2105      	movs	r1, #5
 8011668:	3028      	adds	r0, #40	@ 0x28
 801166a:	f001 fb75 	bl	8012d58 <__atomic_load_8>
 801166e:	9b00      	ldr	r3, [sp, #0]
 8011670:	1ac0      	subs	r0, r0, r3
 8011672:	9b01      	ldr	r3, [sp, #4]
 8011674:	6028      	str	r0, [r5, #0]
 8011676:	eb61 0103 	sbc.w	r1, r1, r3
 801167a:	6069      	str	r1, [r5, #4]
 801167c:	4630      	mov	r0, r6
 801167e:	b002      	add	sp, #8
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	f240 3621 	movw	r6, #801	@ 0x321
 8011686:	4630      	mov	r0, r6
 8011688:	b002      	add	sp, #8
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	260b      	movs	r6, #11
 801168e:	4630      	mov	r0, r6
 8011690:	b002      	add	sp, #8
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011698:	e7f0      	b.n	801167c <rcl_timer_get_time_until_next_call+0x44>
 801169a:	bf00      	nop

0801169c <rcl_timer_get_guard_condition>:
 801169c:	b130      	cbz	r0, 80116ac <rcl_timer_get_guard_condition+0x10>
 801169e:	6800      	ldr	r0, [r0, #0]
 80116a0:	b120      	cbz	r0, 80116ac <rcl_timer_get_guard_condition+0x10>
 80116a2:	68c3      	ldr	r3, [r0, #12]
 80116a4:	b10b      	cbz	r3, 80116aa <rcl_timer_get_guard_condition+0xe>
 80116a6:	3008      	adds	r0, #8
 80116a8:	4770      	bx	lr
 80116aa:	4618      	mov	r0, r3
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop

080116b0 <rcl_get_zero_initialized_wait_set>:
 80116b0:	b510      	push	{r4, lr}
 80116b2:	4c08      	ldr	r4, [pc, #32]	@ (80116d4 <rcl_get_zero_initialized_wait_set+0x24>)
 80116b4:	4686      	mov	lr, r0
 80116b6:	4684      	mov	ip, r0
 80116b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	f8cc 3000 	str.w	r3, [ip]
 80116d0:	4670      	mov	r0, lr
 80116d2:	bd10      	pop	{r4, pc}
 80116d4:	08018c18 	.word	0x08018c18

080116d8 <rcl_wait_set_is_valid>:
 80116d8:	b118      	cbz	r0, 80116e2 <rcl_wait_set_is_valid+0xa>
 80116da:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80116dc:	3800      	subs	r0, #0
 80116de:	bf18      	it	ne
 80116e0:	2001      	movne	r0, #1
 80116e2:	4770      	bx	lr

080116e4 <rcl_wait_set_fini>:
 80116e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e8:	b082      	sub	sp, #8
 80116ea:	2800      	cmp	r0, #0
 80116ec:	f000 8095 	beq.w	801181a <rcl_wait_set_fini+0x136>
 80116f0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80116f2:	4604      	mov	r4, r0
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	f000 808c 	beq.w	8011812 <rcl_wait_set_fini+0x12e>
 80116fa:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80116fc:	f003 f9d0 	bl	8014aa0 <rmw_destroy_wait_set>
 8011700:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011702:	1e06      	subs	r6, r0, #0
 8011704:	bf18      	it	ne
 8011706:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801170a:	2d00      	cmp	r5, #0
 801170c:	f000 8081 	beq.w	8011812 <rcl_wait_set_fini+0x12e>
 8011710:	6820      	ldr	r0, [r4, #0]
 8011712:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011716:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011718:	2700      	movs	r7, #0
 801171a:	6067      	str	r7, [r4, #4]
 801171c:	602f      	str	r7, [r5, #0]
 801171e:	b120      	cbz	r0, 801172a <rcl_wait_set_fini+0x46>
 8011720:	9101      	str	r1, [sp, #4]
 8011722:	47c0      	blx	r8
 8011724:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011726:	9901      	ldr	r1, [sp, #4]
 8011728:	6027      	str	r7, [r4, #0]
 801172a:	68a8      	ldr	r0, [r5, #8]
 801172c:	b120      	cbz	r0, 8011738 <rcl_wait_set_fini+0x54>
 801172e:	47c0      	blx	r8
 8011730:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011732:	2300      	movs	r3, #0
 8011734:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011738:	68a0      	ldr	r0, [r4, #8]
 801173a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801173c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801173e:	f04f 0800 	mov.w	r8, #0
 8011742:	f8c4 800c 	str.w	r8, [r4, #12]
 8011746:	f8c5 800c 	str.w	r8, [r5, #12]
 801174a:	b128      	cbz	r0, 8011758 <rcl_wait_set_fini+0x74>
 801174c:	47b8      	blx	r7
 801174e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011750:	f8c4 8008 	str.w	r8, [r4, #8]
 8011754:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011756:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011758:	6968      	ldr	r0, [r5, #20]
 801175a:	f04f 0800 	mov.w	r8, #0
 801175e:	f8c5 8010 	str.w	r8, [r5, #16]
 8011762:	b128      	cbz	r0, 8011770 <rcl_wait_set_fini+0x8c>
 8011764:	47b8      	blx	r7
 8011766:	f8c5 8014 	str.w	r8, [r5, #20]
 801176a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801176c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801176e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011770:	6920      	ldr	r0, [r4, #16]
 8011772:	f04f 0800 	mov.w	r8, #0
 8011776:	f8c4 8014 	str.w	r8, [r4, #20]
 801177a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801177e:	b128      	cbz	r0, 801178c <rcl_wait_set_fini+0xa8>
 8011780:	47b8      	blx	r7
 8011782:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011784:	f8c4 8010 	str.w	r8, [r4, #16]
 8011788:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801178a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801178c:	69a0      	ldr	r0, [r4, #24]
 801178e:	f04f 0800 	mov.w	r8, #0
 8011792:	f8c4 801c 	str.w	r8, [r4, #28]
 8011796:	f8c5 8018 	str.w	r8, [r5, #24]
 801179a:	b128      	cbz	r0, 80117a8 <rcl_wait_set_fini+0xc4>
 801179c:	9101      	str	r1, [sp, #4]
 801179e:	47b8      	blx	r7
 80117a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117a2:	9901      	ldr	r1, [sp, #4]
 80117a4:	f8c4 8018 	str.w	r8, [r4, #24]
 80117a8:	6a28      	ldr	r0, [r5, #32]
 80117aa:	b120      	cbz	r0, 80117b6 <rcl_wait_set_fini+0xd2>
 80117ac:	47b8      	blx	r7
 80117ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117b0:	2300      	movs	r3, #0
 80117b2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80117b6:	6a20      	ldr	r0, [r4, #32]
 80117b8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80117bc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117be:	2700      	movs	r7, #0
 80117c0:	6267      	str	r7, [r4, #36]	@ 0x24
 80117c2:	626f      	str	r7, [r5, #36]	@ 0x24
 80117c4:	b120      	cbz	r0, 80117d0 <rcl_wait_set_fini+0xec>
 80117c6:	9101      	str	r1, [sp, #4]
 80117c8:	47c0      	blx	r8
 80117ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117cc:	9901      	ldr	r1, [sp, #4]
 80117ce:	6227      	str	r7, [r4, #32]
 80117d0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80117d2:	b120      	cbz	r0, 80117de <rcl_wait_set_fini+0xfa>
 80117d4:	47c0      	blx	r8
 80117d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117d8:	2300      	movs	r3, #0
 80117da:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80117de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80117e0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80117e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80117e6:	2700      	movs	r7, #0
 80117e8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80117ea:	632f      	str	r7, [r5, #48]	@ 0x30
 80117ec:	b120      	cbz	r0, 80117f8 <rcl_wait_set_fini+0x114>
 80117ee:	9101      	str	r1, [sp, #4]
 80117f0:	47c0      	blx	r8
 80117f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80117f4:	9901      	ldr	r1, [sp, #4]
 80117f6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80117f8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80117fa:	b120      	cbz	r0, 8011806 <rcl_wait_set_fini+0x122>
 80117fc:	47c0      	blx	r8
 80117fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011800:	2300      	movs	r3, #0
 8011802:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8011806:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011808:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801180a:	4628      	mov	r0, r5
 801180c:	4798      	blx	r3
 801180e:	2300      	movs	r3, #0
 8011810:	6323      	str	r3, [r4, #48]	@ 0x30
 8011812:	4630      	mov	r0, r6
 8011814:	b002      	add	sp, #8
 8011816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181a:	260b      	movs	r6, #11
 801181c:	4630      	mov	r0, r6
 801181e:	b002      	add	sp, #8
 8011820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011824 <rcl_wait_set_add_subscription>:
 8011824:	b318      	cbz	r0, 801186e <rcl_wait_set_add_subscription+0x4a>
 8011826:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011828:	b570      	push	{r4, r5, r6, lr}
 801182a:	4604      	mov	r4, r0
 801182c:	b30b      	cbz	r3, 8011872 <rcl_wait_set_add_subscription+0x4e>
 801182e:	b319      	cbz	r1, 8011878 <rcl_wait_set_add_subscription+0x54>
 8011830:	681d      	ldr	r5, [r3, #0]
 8011832:	6840      	ldr	r0, [r0, #4]
 8011834:	4285      	cmp	r5, r0
 8011836:	d217      	bcs.n	8011868 <rcl_wait_set_add_subscription+0x44>
 8011838:	6820      	ldr	r0, [r4, #0]
 801183a:	1c6e      	adds	r6, r5, #1
 801183c:	601e      	str	r6, [r3, #0]
 801183e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011842:	b102      	cbz	r2, 8011846 <rcl_wait_set_add_subscription+0x22>
 8011844:	6015      	str	r5, [r2, #0]
 8011846:	4608      	mov	r0, r1
 8011848:	f7ff fd7e 	bl	8011348 <rcl_subscription_get_rmw_handle>
 801184c:	b150      	cbz	r0, 8011864 <rcl_wait_set_add_subscription+0x40>
 801184e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011850:	6842      	ldr	r2, [r0, #4]
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011858:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801185a:	6853      	ldr	r3, [r2, #4]
 801185c:	3301      	adds	r3, #1
 801185e:	2000      	movs	r0, #0
 8011860:	6053      	str	r3, [r2, #4]
 8011862:	bd70      	pop	{r4, r5, r6, pc}
 8011864:	2001      	movs	r0, #1
 8011866:	bd70      	pop	{r4, r5, r6, pc}
 8011868:	f240 3086 	movw	r0, #902	@ 0x386
 801186c:	bd70      	pop	{r4, r5, r6, pc}
 801186e:	200b      	movs	r0, #11
 8011870:	4770      	bx	lr
 8011872:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011876:	bd70      	pop	{r4, r5, r6, pc}
 8011878:	200b      	movs	r0, #11
 801187a:	bd70      	pop	{r4, r5, r6, pc}

0801187c <rcl_wait_set_clear>:
 801187c:	2800      	cmp	r0, #0
 801187e:	d073      	beq.n	8011968 <rcl_wait_set_clear+0xec>
 8011880:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011882:	b510      	push	{r4, lr}
 8011884:	4604      	mov	r4, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d070      	beq.n	801196c <rcl_wait_set_clear+0xf0>
 801188a:	6800      	ldr	r0, [r0, #0]
 801188c:	b138      	cbz	r0, 801189e <rcl_wait_set_clear+0x22>
 801188e:	6862      	ldr	r2, [r4, #4]
 8011890:	2100      	movs	r1, #0
 8011892:	0092      	lsls	r2, r2, #2
 8011894:	f005 fef2 	bl	801767c <memset>
 8011898:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	68a0      	ldr	r0, [r4, #8]
 80118a0:	b138      	cbz	r0, 80118b2 <rcl_wait_set_clear+0x36>
 80118a2:	68e2      	ldr	r2, [r4, #12]
 80118a4:	2100      	movs	r1, #0
 80118a6:	0092      	lsls	r2, r2, #2
 80118a8:	f005 fee8 	bl	801767c <memset>
 80118ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118ae:	2200      	movs	r2, #0
 80118b0:	60da      	str	r2, [r3, #12]
 80118b2:	69a0      	ldr	r0, [r4, #24]
 80118b4:	b138      	cbz	r0, 80118c6 <rcl_wait_set_clear+0x4a>
 80118b6:	69e2      	ldr	r2, [r4, #28]
 80118b8:	2100      	movs	r1, #0
 80118ba:	0092      	lsls	r2, r2, #2
 80118bc:	f005 fede 	bl	801767c <memset>
 80118c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118c2:	2200      	movs	r2, #0
 80118c4:	619a      	str	r2, [r3, #24]
 80118c6:	6a20      	ldr	r0, [r4, #32]
 80118c8:	b138      	cbz	r0, 80118da <rcl_wait_set_clear+0x5e>
 80118ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80118cc:	2100      	movs	r1, #0
 80118ce:	0092      	lsls	r2, r2, #2
 80118d0:	f005 fed4 	bl	801767c <memset>
 80118d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118d6:	2200      	movs	r2, #0
 80118d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80118da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80118dc:	b138      	cbz	r0, 80118ee <rcl_wait_set_clear+0x72>
 80118de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80118e0:	2100      	movs	r1, #0
 80118e2:	0092      	lsls	r2, r2, #2
 80118e4:	f005 feca 	bl	801767c <memset>
 80118e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118ea:	2200      	movs	r2, #0
 80118ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80118ee:	6920      	ldr	r0, [r4, #16]
 80118f0:	b138      	cbz	r0, 8011902 <rcl_wait_set_clear+0x86>
 80118f2:	6962      	ldr	r2, [r4, #20]
 80118f4:	2100      	movs	r1, #0
 80118f6:	0092      	lsls	r2, r2, #2
 80118f8:	f005 fec0 	bl	801767c <memset>
 80118fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118fe:	2200      	movs	r2, #0
 8011900:	641a      	str	r2, [r3, #64]	@ 0x40
 8011902:	6898      	ldr	r0, [r3, #8]
 8011904:	b138      	cbz	r0, 8011916 <rcl_wait_set_clear+0x9a>
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	2100      	movs	r1, #0
 801190a:	0092      	lsls	r2, r2, #2
 801190c:	f005 feb6 	bl	801767c <memset>
 8011910:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011912:	2200      	movs	r2, #0
 8011914:	605a      	str	r2, [r3, #4]
 8011916:	6958      	ldr	r0, [r3, #20]
 8011918:	b138      	cbz	r0, 801192a <rcl_wait_set_clear+0xae>
 801191a:	691a      	ldr	r2, [r3, #16]
 801191c:	2100      	movs	r1, #0
 801191e:	0092      	lsls	r2, r2, #2
 8011920:	f005 feac 	bl	801767c <memset>
 8011924:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011926:	2200      	movs	r2, #0
 8011928:	611a      	str	r2, [r3, #16]
 801192a:	6a18      	ldr	r0, [r3, #32]
 801192c:	b138      	cbz	r0, 801193e <rcl_wait_set_clear+0xc2>
 801192e:	69da      	ldr	r2, [r3, #28]
 8011930:	2100      	movs	r1, #0
 8011932:	0092      	lsls	r2, r2, #2
 8011934:	f005 fea2 	bl	801767c <memset>
 8011938:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801193a:	2200      	movs	r2, #0
 801193c:	61da      	str	r2, [r3, #28]
 801193e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011940:	b138      	cbz	r0, 8011952 <rcl_wait_set_clear+0xd6>
 8011942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011944:	2100      	movs	r1, #0
 8011946:	0092      	lsls	r2, r2, #2
 8011948:	f005 fe98 	bl	801767c <memset>
 801194c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801194e:	2200      	movs	r2, #0
 8011950:	629a      	str	r2, [r3, #40]	@ 0x28
 8011952:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011954:	b138      	cbz	r0, 8011966 <rcl_wait_set_clear+0xea>
 8011956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011958:	2100      	movs	r1, #0
 801195a:	0092      	lsls	r2, r2, #2
 801195c:	f005 fe8e 	bl	801767c <memset>
 8011960:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011962:	2000      	movs	r0, #0
 8011964:	6358      	str	r0, [r3, #52]	@ 0x34
 8011966:	bd10      	pop	{r4, pc}
 8011968:	200b      	movs	r0, #11
 801196a:	4770      	bx	lr
 801196c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011970:	bd10      	pop	{r4, pc}
 8011972:	bf00      	nop

08011974 <rcl_wait_set_resize>:
 8011974:	2800      	cmp	r0, #0
 8011976:	f000 8185 	beq.w	8011c84 <rcl_wait_set_resize+0x310>
 801197a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801197e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8011980:	b083      	sub	sp, #12
 8011982:	4605      	mov	r5, r0
 8011984:	2c00      	cmp	r4, #0
 8011986:	f000 817f 	beq.w	8011c88 <rcl_wait_set_resize+0x314>
 801198a:	f04f 0900 	mov.w	r9, #0
 801198e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8011992:	461f      	mov	r7, r3
 8011994:	4688      	mov	r8, r1
 8011996:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801199a:	4616      	mov	r6, r2
 801199c:	f8c0 9004 	str.w	r9, [r0, #4]
 80119a0:	f8c4 9000 	str.w	r9, [r4]
 80119a4:	2900      	cmp	r1, #0
 80119a6:	f000 80bd 	beq.w	8011b24 <rcl_wait_set_resize+0x1b0>
 80119aa:	008c      	lsls	r4, r1, #2
 80119ac:	6800      	ldr	r0, [r0, #0]
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	4652      	mov	r2, sl
 80119b2:	4621      	mov	r1, r4
 80119b4:	4798      	blx	r3
 80119b6:	9b01      	ldr	r3, [sp, #4]
 80119b8:	6028      	str	r0, [r5, #0]
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f000 80cb 	beq.w	8011b56 <rcl_wait_set_resize+0x1e2>
 80119c0:	4622      	mov	r2, r4
 80119c2:	4649      	mov	r1, r9
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	f005 fe59 	bl	801767c <memset>
 80119ca:	f8c5 8004 	str.w	r8, [r5, #4]
 80119ce:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80119d2:	9b01      	ldr	r3, [sp, #4]
 80119d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80119d8:	f8c8 9004 	str.w	r9, [r8, #4]
 80119dc:	4652      	mov	r2, sl
 80119de:	4621      	mov	r1, r4
 80119e0:	4798      	blx	r3
 80119e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80119e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f000 80ac 	beq.w	8011b48 <rcl_wait_set_resize+0x1d4>
 80119f0:	4622      	mov	r2, r4
 80119f2:	4649      	mov	r1, r9
 80119f4:	4618      	mov	r0, r3
 80119f6:	f005 fe41 	bl	801767c <memset>
 80119fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80119fc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a00:	f04f 0800 	mov.w	r8, #0
 8011a04:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011a08:	f8c5 800c 	str.w	r8, [r5, #12]
 8011a0c:	f8c4 800c 	str.w	r8, [r4, #12]
 8011a10:	2e00      	cmp	r6, #0
 8011a12:	f040 80a4 	bne.w	8011b5e <rcl_wait_set_resize+0x1ea>
 8011a16:	68a8      	ldr	r0, [r5, #8]
 8011a18:	b128      	cbz	r0, 8011a26 <rcl_wait_set_resize+0xb2>
 8011a1a:	4649      	mov	r1, r9
 8011a1c:	4790      	blx	r2
 8011a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a20:	60ae      	str	r6, [r5, #8]
 8011a22:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a26:	f04f 0800 	mov.w	r8, #0
 8011a2a:	19f6      	adds	r6, r6, r7
 8011a2c:	f8c4 8010 	str.w	r8, [r4, #16]
 8011a30:	f040 80ac 	bne.w	8011b8c <rcl_wait_set_resize+0x218>
 8011a34:	6960      	ldr	r0, [r4, #20]
 8011a36:	b130      	cbz	r0, 8011a46 <rcl_wait_set_resize+0xd2>
 8011a38:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011a3a:	4649      	mov	r1, r9
 8011a3c:	4798      	blx	r3
 8011a3e:	6166      	str	r6, [r4, #20]
 8011a40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a42:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a46:	2600      	movs	r6, #0
 8011a48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011a4c:	616e      	str	r6, [r5, #20]
 8011a4e:	6426      	str	r6, [r4, #64]	@ 0x40
 8011a50:	2f00      	cmp	r7, #0
 8011a52:	f040 80ad 	bne.w	8011bb0 <rcl_wait_set_resize+0x23c>
 8011a56:	6928      	ldr	r0, [r5, #16]
 8011a58:	b138      	cbz	r0, 8011a6a <rcl_wait_set_resize+0xf6>
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	47d0      	blx	sl
 8011a5e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a60:	612f      	str	r7, [r5, #16]
 8011a62:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011a66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011a6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a6c:	2600      	movs	r6, #0
 8011a6e:	61ee      	str	r6, [r5, #28]
 8011a70:	61a6      	str	r6, [r4, #24]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f040 80af 	bne.w	8011bd6 <rcl_wait_set_resize+0x262>
 8011a78:	69a8      	ldr	r0, [r5, #24]
 8011a7a:	b120      	cbz	r0, 8011a86 <rcl_wait_set_resize+0x112>
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	47d0      	blx	sl
 8011a80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a84:	61ab      	str	r3, [r5, #24]
 8011a86:	6a20      	ldr	r0, [r4, #32]
 8011a88:	b128      	cbz	r0, 8011a96 <rcl_wait_set_resize+0x122>
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	47d0      	blx	sl
 8011a8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011a90:	2300      	movs	r3, #0
 8011a92:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a98:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011a9a:	2600      	movs	r6, #0
 8011a9c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011aa0:	626e      	str	r6, [r5, #36]	@ 0x24
 8011aa2:	6266      	str	r6, [r4, #36]	@ 0x24
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f000 80b6 	beq.w	8011c16 <rcl_wait_set_resize+0x2a2>
 8011aaa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011aae:	6a28      	ldr	r0, [r5, #32]
 8011ab0:	463a      	mov	r2, r7
 8011ab2:	4651      	mov	r1, sl
 8011ab4:	47c8      	blx	r9
 8011ab6:	6228      	str	r0, [r5, #32]
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d04c      	beq.n	8011b56 <rcl_wait_set_resize+0x1e2>
 8011abc:	4652      	mov	r2, sl
 8011abe:	4631      	mov	r1, r6
 8011ac0:	f005 fddc 	bl	801767c <memset>
 8011ac4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ac8:	626b      	str	r3, [r5, #36]	@ 0x24
 8011aca:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011acc:	62a6      	str	r6, [r4, #40]	@ 0x28
 8011ace:	463a      	mov	r2, r7
 8011ad0:	4651      	mov	r1, sl
 8011ad2:	47c8      	blx	r9
 8011ad4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011ad6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011ad8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011ada:	2c00      	cmp	r4, #0
 8011adc:	f000 80f0 	beq.w	8011cc0 <rcl_wait_set_resize+0x34c>
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	4652      	mov	r2, sl
 8011ae4:	4631      	mov	r1, r6
 8011ae6:	f005 fdc9 	bl	801767c <memset>
 8011aea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011aee:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011af0:	2600      	movs	r6, #0
 8011af2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011af6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011af8:	6326      	str	r6, [r4, #48]	@ 0x30
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	f040 809d 	bne.w	8011c3a <rcl_wait_set_resize+0x2c6>
 8011b00:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011b02:	b120      	cbz	r0, 8011b0e <rcl_wait_set_resize+0x19a>
 8011b04:	4639      	mov	r1, r7
 8011b06:	47c0      	blx	r8
 8011b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b0c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8011b0e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8011b10:	b310      	cbz	r0, 8011b58 <rcl_wait_set_resize+0x1e4>
 8011b12:	4639      	mov	r1, r7
 8011b14:	47c0      	blx	r8
 8011b16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b18:	2000      	movs	r0, #0
 8011b1a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8011b1e:	b003      	add	sp, #12
 8011b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	b120      	cbz	r0, 8011b32 <rcl_wait_set_resize+0x1be>
 8011b28:	4651      	mov	r1, sl
 8011b2a:	47d8      	blx	fp
 8011b2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b2e:	f8c5 8000 	str.w	r8, [r5]
 8011b32:	68a0      	ldr	r0, [r4, #8]
 8011b34:	2800      	cmp	r0, #0
 8011b36:	f43f af61 	beq.w	80119fc <rcl_wait_set_resize+0x88>
 8011b3a:	4651      	mov	r1, sl
 8011b3c:	47d8      	blx	fp
 8011b3e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b40:	2300      	movs	r3, #0
 8011b42:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011b46:	e759      	b.n	80119fc <rcl_wait_set_resize+0x88>
 8011b48:	6828      	ldr	r0, [r5, #0]
 8011b4a:	9301      	str	r3, [sp, #4]
 8011b4c:	4651      	mov	r1, sl
 8011b4e:	47d8      	blx	fp
 8011b50:	9b01      	ldr	r3, [sp, #4]
 8011b52:	e9c5 3300 	strd	r3, r3, [r5]
 8011b56:	200a      	movs	r0, #10
 8011b58:	b003      	add	sp, #12
 8011b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5e:	00b4      	lsls	r4, r6, #2
 8011b60:	68a8      	ldr	r0, [r5, #8]
 8011b62:	464a      	mov	r2, r9
 8011b64:	4621      	mov	r1, r4
 8011b66:	4798      	blx	r3
 8011b68:	60a8      	str	r0, [r5, #8]
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d0f3      	beq.n	8011b56 <rcl_wait_set_resize+0x1e2>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	4641      	mov	r1, r8
 8011b72:	f005 fd83 	bl	801767c <memset>
 8011b76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011b78:	60ee      	str	r6, [r5, #12]
 8011b7a:	f04f 0800 	mov.w	r8, #0
 8011b7e:	19f6      	adds	r6, r6, r7
 8011b80:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011b84:	f8c4 8010 	str.w	r8, [r4, #16]
 8011b88:	f43f af54 	beq.w	8011a34 <rcl_wait_set_resize+0xc0>
 8011b8c:	00b6      	lsls	r6, r6, #2
 8011b8e:	464a      	mov	r2, r9
 8011b90:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011b92:	6960      	ldr	r0, [r4, #20]
 8011b94:	4631      	mov	r1, r6
 8011b96:	4798      	blx	r3
 8011b98:	4681      	mov	r9, r0
 8011b9a:	6160      	str	r0, [r4, #20]
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	d076      	beq.n	8011c8e <rcl_wait_set_resize+0x31a>
 8011ba0:	4632      	mov	r2, r6
 8011ba2:	4641      	mov	r1, r8
 8011ba4:	f005 fd6a 	bl	801767c <memset>
 8011ba8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011baa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011bae:	e74a      	b.n	8011a46 <rcl_wait_set_resize+0xd2>
 8011bb0:	00bc      	lsls	r4, r7, #2
 8011bb2:	6928      	ldr	r0, [r5, #16]
 8011bb4:	464a      	mov	r2, r9
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	47c0      	blx	r8
 8011bba:	6128      	str	r0, [r5, #16]
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d0ca      	beq.n	8011b56 <rcl_wait_set_resize+0x1e2>
 8011bc0:	4622      	mov	r2, r4
 8011bc2:	4631      	mov	r1, r6
 8011bc4:	f005 fd5a 	bl	801767c <memset>
 8011bc8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011bca:	616f      	str	r7, [r5, #20]
 8011bcc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011bd0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011bd4:	e749      	b.n	8011a6a <rcl_wait_set_resize+0xf6>
 8011bd6:	009c      	lsls	r4, r3, #2
 8011bd8:	69a8      	ldr	r0, [r5, #24]
 8011bda:	464a      	mov	r2, r9
 8011bdc:	4621      	mov	r1, r4
 8011bde:	47c0      	blx	r8
 8011be0:	61a8      	str	r0, [r5, #24]
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d0b7      	beq.n	8011b56 <rcl_wait_set_resize+0x1e2>
 8011be6:	4622      	mov	r2, r4
 8011be8:	4631      	mov	r1, r6
 8011bea:	f005 fd47 	bl	801767c <memset>
 8011bee:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8011bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bf2:	61eb      	str	r3, [r5, #28]
 8011bf4:	6a38      	ldr	r0, [r7, #32]
 8011bf6:	61fe      	str	r6, [r7, #28]
 8011bf8:	464a      	mov	r2, r9
 8011bfa:	4621      	mov	r1, r4
 8011bfc:	47c0      	blx	r8
 8011bfe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c00:	6238      	str	r0, [r7, #32]
 8011c02:	6a1f      	ldr	r7, [r3, #32]
 8011c04:	2f00      	cmp	r7, #0
 8011c06:	d054      	beq.n	8011cb2 <rcl_wait_set_resize+0x33e>
 8011c08:	4622      	mov	r2, r4
 8011c0a:	4631      	mov	r1, r6
 8011c0c:	4638      	mov	r0, r7
 8011c0e:	f005 fd35 	bl	801767c <memset>
 8011c12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c14:	e73f      	b.n	8011a96 <rcl_wait_set_resize+0x122>
 8011c16:	6a28      	ldr	r0, [r5, #32]
 8011c18:	b120      	cbz	r0, 8011c24 <rcl_wait_set_resize+0x2b0>
 8011c1a:	4639      	mov	r1, r7
 8011c1c:	47c0      	blx	r8
 8011c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c20:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c22:	622b      	str	r3, [r5, #32]
 8011c24:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f43f af60 	beq.w	8011aec <rcl_wait_set_resize+0x178>
 8011c2c:	4639      	mov	r1, r7
 8011c2e:	47c0      	blx	r8
 8011c30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011c32:	2300      	movs	r3, #0
 8011c34:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011c38:	e758      	b.n	8011aec <rcl_wait_set_resize+0x178>
 8011c3a:	009c      	lsls	r4, r3, #2
 8011c3c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011c3e:	463a      	mov	r2, r7
 8011c40:	4621      	mov	r1, r4
 8011c42:	47c8      	blx	r9
 8011c44:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d085      	beq.n	8011b56 <rcl_wait_set_resize+0x1e2>
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	4631      	mov	r1, r6
 8011c4e:	f005 fd15 	bl	801767c <memset>
 8011c52:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c58:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011c5a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8011c5e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8011c62:	463a      	mov	r2, r7
 8011c64:	4621      	mov	r1, r4
 8011c66:	47c8      	blx	r9
 8011c68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c6a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8011c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c70:	b36b      	cbz	r3, 8011cce <rcl_wait_set_resize+0x35a>
 8011c72:	4622      	mov	r2, r4
 8011c74:	4631      	mov	r1, r6
 8011c76:	4618      	mov	r0, r3
 8011c78:	f005 fd00 	bl	801767c <memset>
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	b003      	add	sp, #12
 8011c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	200b      	movs	r0, #11
 8011c86:	4770      	bx	lr
 8011c88:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011c8c:	e764      	b.n	8011b58 <rcl_wait_set_resize+0x1e4>
 8011c8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c90:	68a8      	ldr	r0, [r5, #8]
 8011c92:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c96:	4798      	blx	r3
 8011c98:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c9a:	6928      	ldr	r0, [r5, #16]
 8011c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011c9e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011ca0:	f8c5 900c 	str.w	r9, [r5, #12]
 8011ca4:	f8c5 9008 	str.w	r9, [r5, #8]
 8011ca8:	4790      	blx	r2
 8011caa:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011cae:	200a      	movs	r0, #10
 8011cb0:	e752      	b.n	8011b58 <rcl_wait_set_resize+0x1e4>
 8011cb2:	69a8      	ldr	r0, [r5, #24]
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	47d0      	blx	sl
 8011cb8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011cbc:	200a      	movs	r0, #10
 8011cbe:	e74b      	b.n	8011b58 <rcl_wait_set_resize+0x1e4>
 8011cc0:	6a28      	ldr	r0, [r5, #32]
 8011cc2:	4639      	mov	r1, r7
 8011cc4:	47c0      	blx	r8
 8011cc6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011cca:	200a      	movs	r0, #10
 8011ccc:	e744      	b.n	8011b58 <rcl_wait_set_resize+0x1e4>
 8011cce:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	47c0      	blx	r8
 8011cd6:	9b01      	ldr	r3, [sp, #4]
 8011cd8:	200a      	movs	r0, #10
 8011cda:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011cde:	e73b      	b.n	8011b58 <rcl_wait_set_resize+0x1e4>

08011ce0 <rcl_wait_set_init>:
 8011ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	a810      	add	r0, sp, #64	@ 0x40
 8011cea:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8011cee:	460f      	mov	r7, r1
 8011cf0:	4690      	mov	r8, r2
 8011cf2:	4699      	mov	r9, r3
 8011cf4:	f7fa ff20 	bl	800cb38 <rcutils_allocator_is_valid>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d06b      	beq.n	8011dd4 <rcl_wait_set_init+0xf4>
 8011cfc:	2c00      	cmp	r4, #0
 8011cfe:	d069      	beq.n	8011dd4 <rcl_wait_set_init+0xf4>
 8011d00:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011d02:	b125      	cbz	r5, 8011d0e <rcl_wait_set_init+0x2e>
 8011d04:	2564      	movs	r5, #100	@ 0x64
 8011d06:	4628      	mov	r0, r5
 8011d08:	b004      	add	sp, #16
 8011d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d0e:	f1ba 0f00 	cmp.w	sl, #0
 8011d12:	d05f      	beq.n	8011dd4 <rcl_wait_set_init+0xf4>
 8011d14:	4650      	mov	r0, sl
 8011d16:	f7fe fcbb 	bl	8010690 <rcl_context_is_valid>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	d067      	beq.n	8011dee <rcl_wait_set_init+0x10e>
 8011d1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d20:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011d22:	205c      	movs	r0, #92	@ 0x5c
 8011d24:	4798      	blx	r3
 8011d26:	6320      	str	r0, [r4, #48]	@ 0x30
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d062      	beq.n	8011df2 <rcl_wait_set_init+0x112>
 8011d2c:	4629      	mov	r1, r5
 8011d2e:	225c      	movs	r2, #92	@ 0x5c
 8011d30:	f005 fca4 	bl	801767c <memset>
 8011d34:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011d38:	eb03 0e02 	add.w	lr, r3, r2
 8011d3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d3e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011d40:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011d44:	449e      	add	lr, r3
 8011d46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d4a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011d4e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8011d52:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011d56:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011d5a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8011d5e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8011d62:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8011d66:	f8da a000 	ldr.w	sl, [sl]
 8011d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011d6c:	44c6      	add	lr, r8
 8011d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8011d72:	602b      	str	r3, [r5, #0]
 8011d74:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011d78:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011d7c:	f002 fe86 	bl	8014a8c <rmw_create_wait_set>
 8011d80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011d82:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011d84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011d86:	b350      	cbz	r0, 8011dde <rcl_wait_set_init+0xfe>
 8011d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d8a:	9302      	str	r3, [sp, #8]
 8011d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d8e:	9301      	str	r3, [sp, #4]
 8011d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	4642      	mov	r2, r8
 8011d96:	464b      	mov	r3, r9
 8011d98:	4639      	mov	r1, r7
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f7ff fdea 	bl	8011974 <rcl_wait_set_resize>
 8011da0:	4605      	mov	r5, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d0af      	beq.n	8011d06 <rcl_wait_set_init+0x26>
 8011da6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011da8:	bb2b      	cbnz	r3, 8011df6 <rcl_wait_set_init+0x116>
 8011daa:	2600      	movs	r6, #0
 8011dac:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011db0:	9600      	str	r6, [sp, #0]
 8011db2:	4633      	mov	r3, r6
 8011db4:	4632      	mov	r2, r6
 8011db6:	4631      	mov	r1, r6
 8011db8:	4620      	mov	r0, r4
 8011dba:	f7ff fddb 	bl	8011974 <rcl_wait_set_resize>
 8011dbe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d0a0      	beq.n	8011d06 <rcl_wait_set_init+0x26>
 8011dc4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011dc6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011dc8:	4798      	blx	r3
 8011dca:	4628      	mov	r0, r5
 8011dcc:	6326      	str	r6, [r4, #48]	@ 0x30
 8011dce:	b004      	add	sp, #16
 8011dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dd4:	250b      	movs	r5, #11
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	b004      	add	sp, #16
 8011dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dde:	2501      	movs	r5, #1
 8011de0:	f002 fe5e 	bl	8014aa0 <rmw_destroy_wait_set>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	bf18      	it	ne
 8011de8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011dec:	e7dd      	b.n	8011daa <rcl_wait_set_init+0xca>
 8011dee:	2565      	movs	r5, #101	@ 0x65
 8011df0:	e789      	b.n	8011d06 <rcl_wait_set_init+0x26>
 8011df2:	250a      	movs	r5, #10
 8011df4:	e787      	b.n	8011d06 <rcl_wait_set_init+0x26>
 8011df6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011df8:	e7f2      	b.n	8011de0 <rcl_wait_set_init+0x100>
 8011dfa:	bf00      	nop

08011dfc <rcl_wait_set_add_guard_condition>:
 8011dfc:	b318      	cbz	r0, 8011e46 <rcl_wait_set_add_guard_condition+0x4a>
 8011dfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	4604      	mov	r4, r0
 8011e04:	b30b      	cbz	r3, 8011e4a <rcl_wait_set_add_guard_condition+0x4e>
 8011e06:	b319      	cbz	r1, 8011e50 <rcl_wait_set_add_guard_condition+0x54>
 8011e08:	68dd      	ldr	r5, [r3, #12]
 8011e0a:	68c0      	ldr	r0, [r0, #12]
 8011e0c:	4285      	cmp	r5, r0
 8011e0e:	d217      	bcs.n	8011e40 <rcl_wait_set_add_guard_condition+0x44>
 8011e10:	68a0      	ldr	r0, [r4, #8]
 8011e12:	1c6e      	adds	r6, r5, #1
 8011e14:	60de      	str	r6, [r3, #12]
 8011e16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011e1a:	b102      	cbz	r2, 8011e1e <rcl_wait_set_add_guard_condition+0x22>
 8011e1c:	6015      	str	r5, [r2, #0]
 8011e1e:	4608      	mov	r0, r1
 8011e20:	f004 fe32 	bl	8016a88 <rcl_guard_condition_get_rmw_handle>
 8011e24:	b150      	cbz	r0, 8011e3c <rcl_wait_set_add_guard_condition+0x40>
 8011e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e28:	6842      	ldr	r2, [r0, #4]
 8011e2a:	695b      	ldr	r3, [r3, #20]
 8011e2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011e32:	6913      	ldr	r3, [r2, #16]
 8011e34:	3301      	adds	r3, #1
 8011e36:	2000      	movs	r0, #0
 8011e38:	6113      	str	r3, [r2, #16]
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}
 8011e3c:	2001      	movs	r0, #1
 8011e3e:	bd70      	pop	{r4, r5, r6, pc}
 8011e40:	f240 3086 	movw	r0, #902	@ 0x386
 8011e44:	bd70      	pop	{r4, r5, r6, pc}
 8011e46:	200b      	movs	r0, #11
 8011e48:	4770      	bx	lr
 8011e4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	200b      	movs	r0, #11
 8011e52:	bd70      	pop	{r4, r5, r6, pc}

08011e54 <rcl_wait_set_add_timer>:
 8011e54:	b328      	cbz	r0, 8011ea2 <rcl_wait_set_add_timer+0x4e>
 8011e56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	b31b      	cbz	r3, 8011ea6 <rcl_wait_set_add_timer+0x52>
 8011e5e:	b329      	cbz	r1, 8011eac <rcl_wait_set_add_timer+0x58>
 8011e60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8011e62:	6965      	ldr	r5, [r4, #20]
 8011e64:	42a8      	cmp	r0, r5
 8011e66:	d219      	bcs.n	8011e9c <rcl_wait_set_add_timer+0x48>
 8011e68:	6925      	ldr	r5, [r4, #16]
 8011e6a:	1c46      	adds	r6, r0, #1
 8011e6c:	641e      	str	r6, [r3, #64]	@ 0x40
 8011e6e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011e72:	b102      	cbz	r2, 8011e76 <rcl_wait_set_add_timer+0x22>
 8011e74:	6010      	str	r0, [r2, #0]
 8011e76:	4608      	mov	r0, r1
 8011e78:	f7ff fc10 	bl	801169c <rcl_timer_get_guard_condition>
 8011e7c:	b168      	cbz	r0, 8011e9a <rcl_wait_set_add_timer+0x46>
 8011e7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011e80:	68e3      	ldr	r3, [r4, #12]
 8011e82:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011e84:	3b01      	subs	r3, #1
 8011e86:	441d      	add	r5, r3
 8011e88:	f004 fdfe 	bl	8016a88 <rcl_guard_condition_get_rmw_handle>
 8011e8c:	b180      	cbz	r0, 8011eb0 <rcl_wait_set_add_timer+0x5c>
 8011e8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011e90:	6842      	ldr	r2, [r0, #4]
 8011e92:	695b      	ldr	r3, [r3, #20]
 8011e94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e98:	2000      	movs	r0, #0
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	f240 3086 	movw	r0, #902	@ 0x386
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	200b      	movs	r0, #11
 8011ea4:	4770      	bx	lr
 8011ea6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011eaa:	bd70      	pop	{r4, r5, r6, pc}
 8011eac:	200b      	movs	r0, #11
 8011eae:	bd70      	pop	{r4, r5, r6, pc}
 8011eb0:	2001      	movs	r0, #1
 8011eb2:	bd70      	pop	{r4, r5, r6, pc}

08011eb4 <rcl_wait_set_add_client>:
 8011eb4:	b318      	cbz	r0, 8011efe <rcl_wait_set_add_client+0x4a>
 8011eb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	4604      	mov	r4, r0
 8011ebc:	b30b      	cbz	r3, 8011f02 <rcl_wait_set_add_client+0x4e>
 8011ebe:	b319      	cbz	r1, 8011f08 <rcl_wait_set_add_client+0x54>
 8011ec0:	699d      	ldr	r5, [r3, #24]
 8011ec2:	69c0      	ldr	r0, [r0, #28]
 8011ec4:	4285      	cmp	r5, r0
 8011ec6:	d217      	bcs.n	8011ef8 <rcl_wait_set_add_client+0x44>
 8011ec8:	69a0      	ldr	r0, [r4, #24]
 8011eca:	1c6e      	adds	r6, r5, #1
 8011ecc:	619e      	str	r6, [r3, #24]
 8011ece:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011ed2:	b102      	cbz	r2, 8011ed6 <rcl_wait_set_add_client+0x22>
 8011ed4:	6015      	str	r5, [r2, #0]
 8011ed6:	4608      	mov	r0, r1
 8011ed8:	f7fe fb2e 	bl	8010538 <rcl_client_get_rmw_handle>
 8011edc:	b150      	cbz	r0, 8011ef4 <rcl_wait_set_add_client+0x40>
 8011ede:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ee0:	6842      	ldr	r2, [r0, #4]
 8011ee2:	6a1b      	ldr	r3, [r3, #32]
 8011ee4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ee8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011eea:	69d3      	ldr	r3, [r2, #28]
 8011eec:	3301      	adds	r3, #1
 8011eee:	2000      	movs	r0, #0
 8011ef0:	61d3      	str	r3, [r2, #28]
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}
 8011ef8:	f240 3086 	movw	r0, #902	@ 0x386
 8011efc:	bd70      	pop	{r4, r5, r6, pc}
 8011efe:	200b      	movs	r0, #11
 8011f00:	4770      	bx	lr
 8011f02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f06:	bd70      	pop	{r4, r5, r6, pc}
 8011f08:	200b      	movs	r0, #11
 8011f0a:	bd70      	pop	{r4, r5, r6, pc}

08011f0c <rcl_wait_set_add_service>:
 8011f0c:	b318      	cbz	r0, 8011f56 <rcl_wait_set_add_service+0x4a>
 8011f0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011f10:	b570      	push	{r4, r5, r6, lr}
 8011f12:	4604      	mov	r4, r0
 8011f14:	b30b      	cbz	r3, 8011f5a <rcl_wait_set_add_service+0x4e>
 8011f16:	b319      	cbz	r1, 8011f60 <rcl_wait_set_add_service+0x54>
 8011f18:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011f1a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011f1c:	4285      	cmp	r5, r0
 8011f1e:	d217      	bcs.n	8011f50 <rcl_wait_set_add_service+0x44>
 8011f20:	6a20      	ldr	r0, [r4, #32]
 8011f22:	1c6e      	adds	r6, r5, #1
 8011f24:	625e      	str	r6, [r3, #36]	@ 0x24
 8011f26:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011f2a:	b102      	cbz	r2, 8011f2e <rcl_wait_set_add_service+0x22>
 8011f2c:	6015      	str	r5, [r2, #0]
 8011f2e:	4608      	mov	r0, r1
 8011f30:	f7ff f86e 	bl	8011010 <rcl_service_get_rmw_handle>
 8011f34:	b150      	cbz	r0, 8011f4c <rcl_wait_set_add_service+0x40>
 8011f36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f38:	6842      	ldr	r2, [r0, #4]
 8011f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f42:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011f44:	3301      	adds	r3, #1
 8011f46:	2000      	movs	r0, #0
 8011f48:	6293      	str	r3, [r2, #40]	@ 0x28
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	2001      	movs	r0, #1
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}
 8011f50:	f240 3086 	movw	r0, #902	@ 0x386
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	200b      	movs	r0, #11
 8011f58:	4770      	bx	lr
 8011f5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	200b      	movs	r0, #11
 8011f62:	bd70      	pop	{r4, r5, r6, pc}
 8011f64:	0000      	movs	r0, r0
	...

08011f68 <rcl_wait>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	ed2d 8b02 	vpush	{d8}
 8011f70:	b08d      	sub	sp, #52	@ 0x34
 8011f72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f76:	2800      	cmp	r0, #0
 8011f78:	f000 8143 	beq.w	8012202 <rcl_wait+0x29a>
 8011f7c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011f7e:	4605      	mov	r5, r0
 8011f80:	2e00      	cmp	r6, #0
 8011f82:	f000 8112 	beq.w	80121aa <rcl_wait+0x242>
 8011f86:	6843      	ldr	r3, [r0, #4]
 8011f88:	b983      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f8a:	68eb      	ldr	r3, [r5, #12]
 8011f8c:	b973      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f8e:	696b      	ldr	r3, [r5, #20]
 8011f90:	b963      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f92:	69eb      	ldr	r3, [r5, #28]
 8011f94:	b953      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f96:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011f98:	b943      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011f9c:	b933      	cbnz	r3, 8011fac <rcl_wait+0x44>
 8011f9e:	f240 3085 	movw	r0, #901	@ 0x385
 8011fa2:	b00d      	add	sp, #52	@ 0x34
 8011fa4:	ecbd 8b02 	vpop	{d8}
 8011fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	9b05      	ldr	r3, [sp, #20]
 8011fb4:	f173 0300 	sbcs.w	r3, r3, #0
 8011fb8:	f2c0 80f0 	blt.w	801219c <rcl_wait+0x234>
 8011fbc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011fc0:	4643      	mov	r3, r8
 8011fc2:	2a00      	cmp	r2, #0
 8011fc4:	f000 8133 	beq.w	801222e <rcl_wait+0x2c6>
 8011fc8:	2400      	movs	r4, #0
 8011fca:	4613      	mov	r3, r2
 8011fcc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8012240 <rcl_wait+0x2d8>
 8011fd0:	46a2      	mov	sl, r4
 8011fd2:	46a3      	mov	fp, r4
 8011fd4:	f240 3921 	movw	r9, #801	@ 0x321
 8011fd8:	4632      	mov	r2, r6
 8011fda:	e014      	b.n	8012006 <rcl_wait+0x9e>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d1e0      	bne.n	8011fa2 <rcl_wait+0x3a>
 8011fe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011fe4:	4542      	cmp	r2, r8
 8011fe6:	eb73 0107 	sbcs.w	r1, r3, r7
 8011fea:	da03      	bge.n	8011ff4 <rcl_wait+0x8c>
 8011fec:	4690      	mov	r8, r2
 8011fee:	461f      	mov	r7, r3
 8011ff0:	f04f 0b01 	mov.w	fp, #1
 8011ff4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011ff6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011ff8:	3401      	adds	r4, #1
 8011ffa:	f14a 0a00 	adc.w	sl, sl, #0
 8011ffe:	429c      	cmp	r4, r3
 8012000:	f17a 0100 	sbcs.w	r1, sl, #0
 8012004:	d228      	bcs.n	8012058 <rcl_wait+0xf0>
 8012006:	6928      	ldr	r0, [r5, #16]
 8012008:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801200c:	a908      	add	r1, sp, #32
 801200e:	00a6      	lsls	r6, r4, #2
 8012010:	2800      	cmp	r0, #0
 8012012:	d0f1      	beq.n	8011ff8 <rcl_wait+0x90>
 8012014:	68eb      	ldr	r3, [r5, #12]
 8012016:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801201a:	4423      	add	r3, r4
 801201c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012020:	f1be 0f00 	cmp.w	lr, #0
 8012024:	d006      	beq.n	8012034 <rcl_wait+0xcc>
 8012026:	6913      	ldr	r3, [r2, #16]
 8012028:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801202c:	3301      	adds	r3, #1
 801202e:	6113      	str	r3, [r2, #16]
 8012030:	692b      	ldr	r3, [r5, #16]
 8012032:	5998      	ldr	r0, [r3, r6]
 8012034:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012038:	f7ff fafe 	bl	8011638 <rcl_timer_get_time_until_next_call>
 801203c:	4548      	cmp	r0, r9
 801203e:	d1cd      	bne.n	8011fdc <rcl_wait+0x74>
 8012040:	692b      	ldr	r3, [r5, #16]
 8012042:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012044:	2100      	movs	r1, #0
 8012046:	5199      	str	r1, [r3, r6]
 8012048:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801204a:	3401      	adds	r4, #1
 801204c:	f14a 0a00 	adc.w	sl, sl, #0
 8012050:	429c      	cmp	r4, r3
 8012052:	f17a 0100 	sbcs.w	r1, sl, #0
 8012056:	d3d6      	bcc.n	8012006 <rcl_wait+0x9e>
 8012058:	4616      	mov	r6, r2
 801205a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801205e:	4313      	orrs	r3, r2
 8012060:	46d9      	mov	r9, fp
 8012062:	f040 80a9 	bne.w	80121b8 <rcl_wait+0x250>
 8012066:	2300      	movs	r3, #0
 8012068:	2200      	movs	r2, #0
 801206a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801206e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012072:	ab08      	add	r3, sp, #32
 8012074:	9302      	str	r3, [sp, #8]
 8012076:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012078:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801207c:	e9cd 3200 	strd	r3, r2, [sp]
 8012080:	f106 0110 	add.w	r1, r6, #16
 8012084:	f106 031c 	add.w	r3, r6, #28
 8012088:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801208c:	1d30      	adds	r0, r6, #4
 801208e:	f002 fb85 	bl	801479c <rmw_wait>
 8012092:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012096:	4680      	mov	r8, r0
 8012098:	b1ca      	cbz	r2, 80120ce <rcl_wait+0x166>
 801209a:	2400      	movs	r4, #0
 801209c:	4627      	mov	r7, r4
 801209e:	692a      	ldr	r2, [r5, #16]
 80120a0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80120a4:	f10d 011f 	add.w	r1, sp, #31
 80120a8:	00a6      	lsls	r6, r4, #2
 80120aa:	b160      	cbz	r0, 80120c6 <rcl_wait+0x15e>
 80120ac:	f88d 701f 	strb.w	r7, [sp, #31]
 80120b0:	f7ff fa88 	bl	80115c4 <rcl_timer_is_ready>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	f47f af74 	bne.w	8011fa2 <rcl_wait+0x3a>
 80120ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80120be:	b90b      	cbnz	r3, 80120c4 <rcl_wait+0x15c>
 80120c0:	692a      	ldr	r2, [r5, #16]
 80120c2:	5193      	str	r3, [r2, r6]
 80120c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80120c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80120c8:	3401      	adds	r4, #1
 80120ca:	42a2      	cmp	r2, r4
 80120cc:	d8e7      	bhi.n	801209e <rcl_wait+0x136>
 80120ce:	f038 0002 	bics.w	r0, r8, #2
 80120d2:	f040 8090 	bne.w	80121f6 <rcl_wait+0x28e>
 80120d6:	686e      	ldr	r6, [r5, #4]
 80120d8:	4602      	mov	r2, r0
 80120da:	b91e      	cbnz	r6, 80120e4 <rcl_wait+0x17c>
 80120dc:	e00d      	b.n	80120fa <rcl_wait+0x192>
 80120de:	3201      	adds	r2, #1
 80120e0:	42b2      	cmp	r2, r6
 80120e2:	d00a      	beq.n	80120fa <rcl_wait+0x192>
 80120e4:	6899      	ldr	r1, [r3, #8]
 80120e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80120ea:	2900      	cmp	r1, #0
 80120ec:	d1f7      	bne.n	80120de <rcl_wait+0x176>
 80120ee:	682c      	ldr	r4, [r5, #0]
 80120f0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80120f4:	3201      	adds	r2, #1
 80120f6:	42b2      	cmp	r2, r6
 80120f8:	d1f4      	bne.n	80120e4 <rcl_wait+0x17c>
 80120fa:	68ee      	ldr	r6, [r5, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	b91e      	cbnz	r6, 8012108 <rcl_wait+0x1a0>
 8012100:	e00d      	b.n	801211e <rcl_wait+0x1b6>
 8012102:	3201      	adds	r2, #1
 8012104:	42b2      	cmp	r2, r6
 8012106:	d00a      	beq.n	801211e <rcl_wait+0x1b6>
 8012108:	6959      	ldr	r1, [r3, #20]
 801210a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801210e:	2900      	cmp	r1, #0
 8012110:	d1f7      	bne.n	8012102 <rcl_wait+0x19a>
 8012112:	68ac      	ldr	r4, [r5, #8]
 8012114:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012118:	3201      	adds	r2, #1
 801211a:	42b2      	cmp	r2, r6
 801211c:	d1f4      	bne.n	8012108 <rcl_wait+0x1a0>
 801211e:	69ee      	ldr	r6, [r5, #28]
 8012120:	2200      	movs	r2, #0
 8012122:	b91e      	cbnz	r6, 801212c <rcl_wait+0x1c4>
 8012124:	e00d      	b.n	8012142 <rcl_wait+0x1da>
 8012126:	3201      	adds	r2, #1
 8012128:	42b2      	cmp	r2, r6
 801212a:	d00a      	beq.n	8012142 <rcl_wait+0x1da>
 801212c:	6a19      	ldr	r1, [r3, #32]
 801212e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012132:	2900      	cmp	r1, #0
 8012134:	d1f7      	bne.n	8012126 <rcl_wait+0x1be>
 8012136:	69ac      	ldr	r4, [r5, #24]
 8012138:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801213c:	3201      	adds	r2, #1
 801213e:	42b2      	cmp	r2, r6
 8012140:	d1f4      	bne.n	801212c <rcl_wait+0x1c4>
 8012142:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012144:	2200      	movs	r2, #0
 8012146:	b91e      	cbnz	r6, 8012150 <rcl_wait+0x1e8>
 8012148:	e00d      	b.n	8012166 <rcl_wait+0x1fe>
 801214a:	3201      	adds	r2, #1
 801214c:	4296      	cmp	r6, r2
 801214e:	d00a      	beq.n	8012166 <rcl_wait+0x1fe>
 8012150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012152:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012156:	2900      	cmp	r1, #0
 8012158:	d1f7      	bne.n	801214a <rcl_wait+0x1e2>
 801215a:	6a2c      	ldr	r4, [r5, #32]
 801215c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012160:	3201      	adds	r2, #1
 8012162:	4296      	cmp	r6, r2
 8012164:	d1f4      	bne.n	8012150 <rcl_wait+0x1e8>
 8012166:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012168:	2200      	movs	r2, #0
 801216a:	b91e      	cbnz	r6, 8012174 <rcl_wait+0x20c>
 801216c:	e00d      	b.n	801218a <rcl_wait+0x222>
 801216e:	3201      	adds	r2, #1
 8012170:	42b2      	cmp	r2, r6
 8012172:	d00a      	beq.n	801218a <rcl_wait+0x222>
 8012174:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012176:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801217a:	2900      	cmp	r1, #0
 801217c:	d1f7      	bne.n	801216e <rcl_wait+0x206>
 801217e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8012180:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012184:	3201      	adds	r2, #1
 8012186:	42b2      	cmp	r2, r6
 8012188:	d1f4      	bne.n	8012174 <rcl_wait+0x20c>
 801218a:	f1b8 0f02 	cmp.w	r8, #2
 801218e:	f47f af08 	bne.w	8011fa2 <rcl_wait+0x3a>
 8012192:	464b      	mov	r3, r9
 8012194:	2b00      	cmp	r3, #0
 8012196:	bf08      	it	eq
 8012198:	2002      	moveq	r0, #2
 801219a:	e702      	b.n	8011fa2 <rcl_wait+0x3a>
 801219c:	2a00      	cmp	r2, #0
 801219e:	d03a      	beq.n	8012216 <rcl_wait+0x2ae>
 80121a0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80121a4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80121a8:	e70e      	b.n	8011fc8 <rcl_wait+0x60>
 80121aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80121ae:	b00d      	add	sp, #52	@ 0x34
 80121b0:	ecbd 8b02 	vpop	{d8}
 80121b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b8:	9b04      	ldr	r3, [sp, #16]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	9b05      	ldr	r3, [sp, #20]
 80121be:	f173 0300 	sbcs.w	r3, r3, #0
 80121c2:	db24      	blt.n	801220e <rcl_wait+0x2a6>
 80121c4:	2f00      	cmp	r7, #0
 80121c6:	bfbc      	itt	lt
 80121c8:	f04f 0800 	movlt.w	r8, #0
 80121cc:	4647      	movlt	r7, r8
 80121ce:	a31e      	add	r3, pc, #120	@ (adr r3, 8012248 <rcl_wait+0x2e0>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	4640      	mov	r0, r8
 80121d6:	4639      	mov	r1, r7
 80121d8:	f7ee fc38 	bl	8000a4c <__aeabi_ldivmod>
 80121dc:	a31a      	add	r3, pc, #104	@ (adr r3, 8012248 <rcl_wait+0x2e0>)
 80121de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121e6:	4640      	mov	r0, r8
 80121e8:	4639      	mov	r1, r7
 80121ea:	f7ee fc2f 	bl	8000a4c <__aeabi_ldivmod>
 80121ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80121f2:	ab08      	add	r3, sp, #32
 80121f4:	e73e      	b.n	8012074 <rcl_wait+0x10c>
 80121f6:	2001      	movs	r0, #1
 80121f8:	b00d      	add	sp, #52	@ 0x34
 80121fa:	ecbd 8b02 	vpop	{d8}
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012202:	200b      	movs	r0, #11
 8012204:	b00d      	add	sp, #52	@ 0x34
 8012206:	ecbd 8b02 	vpop	{d8}
 801220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220e:	465b      	mov	r3, fp
 8012210:	2b00      	cmp	r3, #0
 8012212:	d1d7      	bne.n	80121c4 <rcl_wait+0x25c>
 8012214:	e72e      	b.n	8012074 <rcl_wait+0x10c>
 8012216:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801221a:	430b      	orrs	r3, r1
 801221c:	bf08      	it	eq
 801221e:	4691      	moveq	r9, r2
 8012220:	f43f af21 	beq.w	8012066 <rcl_wait+0xfe>
 8012224:	9b04      	ldr	r3, [sp, #16]
 8012226:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801222a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801222e:	2b01      	cmp	r3, #1
 8012230:	9b05      	ldr	r3, [sp, #20]
 8012232:	f173 0300 	sbcs.w	r3, r3, #0
 8012236:	f04f 0300 	mov.w	r3, #0
 801223a:	4699      	mov	r9, r3
 801223c:	dac2      	bge.n	80121c4 <rcl_wait+0x25c>
 801223e:	e719      	b.n	8012074 <rcl_wait+0x10c>
 8012240:	ffffffff 	.word	0xffffffff
 8012244:	7fffffff 	.word	0x7fffffff
 8012248:	3b9aca00 	.word	0x3b9aca00
 801224c:	00000000 	.word	0x00000000

08012250 <rcl_action_take_goal_response>:
 8012250:	2800      	cmp	r0, #0
 8012252:	d039      	beq.n	80122c8 <rcl_action_take_goal_response+0x78>
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	4604      	mov	r4, r0
 8012258:	6800      	ldr	r0, [r0, #0]
 801225a:	b380      	cbz	r0, 80122be <rcl_action_take_goal_response+0x6e>
 801225c:	460d      	mov	r5, r1
 801225e:	4616      	mov	r6, r2
 8012260:	f7fe f9ee 	bl	8010640 <rcl_client_is_valid>
 8012264:	b330      	cbz	r0, 80122b4 <rcl_action_take_goal_response+0x64>
 8012266:	6820      	ldr	r0, [r4, #0]
 8012268:	3004      	adds	r0, #4
 801226a:	f7fe f9e9 	bl	8010640 <rcl_client_is_valid>
 801226e:	b308      	cbz	r0, 80122b4 <rcl_action_take_goal_response+0x64>
 8012270:	6820      	ldr	r0, [r4, #0]
 8012272:	3008      	adds	r0, #8
 8012274:	f7fe f9e4 	bl	8010640 <rcl_client_is_valid>
 8012278:	b1e0      	cbz	r0, 80122b4 <rcl_action_take_goal_response+0x64>
 801227a:	6820      	ldr	r0, [r4, #0]
 801227c:	300c      	adds	r0, #12
 801227e:	f7ff f869 	bl	8011354 <rcl_subscription_is_valid>
 8012282:	b1b8      	cbz	r0, 80122b4 <rcl_action_take_goal_response+0x64>
 8012284:	6820      	ldr	r0, [r4, #0]
 8012286:	3010      	adds	r0, #16
 8012288:	f7ff f864 	bl	8011354 <rcl_subscription_is_valid>
 801228c:	b190      	cbz	r0, 80122b4 <rcl_action_take_goal_response+0x64>
 801228e:	b1cd      	cbz	r5, 80122c4 <rcl_action_take_goal_response+0x74>
 8012290:	b1c6      	cbz	r6, 80122c4 <rcl_action_take_goal_response+0x74>
 8012292:	6820      	ldr	r0, [r4, #0]
 8012294:	4632      	mov	r2, r6
 8012296:	4629      	mov	r1, r5
 8012298:	f7fe f98a 	bl	80105b0 <rcl_take_response>
 801229c:	b148      	cbz	r0, 80122b2 <rcl_action_take_goal_response+0x62>
 801229e:	280a      	cmp	r0, #10
 80122a0:	d007      	beq.n	80122b2 <rcl_action_take_goal_response+0x62>
 80122a2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80122a6:	f640 0337 	movw	r3, #2103	@ 0x837
 80122aa:	4290      	cmp	r0, r2
 80122ac:	bf0c      	ite	eq
 80122ae:	4618      	moveq	r0, r3
 80122b0:	2001      	movne	r0, #1
 80122b2:	bd70      	pop	{r4, r5, r6, pc}
 80122b4:	f7fa fc64 	bl	800cb80 <rcutils_reset_error>
 80122b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80122bc:	bd70      	pop	{r4, r5, r6, pc}
 80122be:	f640 0036 	movw	r0, #2102	@ 0x836
 80122c2:	bd70      	pop	{r4, r5, r6, pc}
 80122c4:	200b      	movs	r0, #11
 80122c6:	bd70      	pop	{r4, r5, r6, pc}
 80122c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop

080122d0 <rcl_action_send_result_request>:
 80122d0:	b390      	cbz	r0, 8012338 <rcl_action_send_result_request+0x68>
 80122d2:	b570      	push	{r4, r5, r6, lr}
 80122d4:	4604      	mov	r4, r0
 80122d6:	6800      	ldr	r0, [r0, #0]
 80122d8:	b348      	cbz	r0, 801232e <rcl_action_send_result_request+0x5e>
 80122da:	460d      	mov	r5, r1
 80122dc:	4616      	mov	r6, r2
 80122de:	f7fe f9af 	bl	8010640 <rcl_client_is_valid>
 80122e2:	b1f8      	cbz	r0, 8012324 <rcl_action_send_result_request+0x54>
 80122e4:	6820      	ldr	r0, [r4, #0]
 80122e6:	3004      	adds	r0, #4
 80122e8:	f7fe f9aa 	bl	8010640 <rcl_client_is_valid>
 80122ec:	b1d0      	cbz	r0, 8012324 <rcl_action_send_result_request+0x54>
 80122ee:	6820      	ldr	r0, [r4, #0]
 80122f0:	3008      	adds	r0, #8
 80122f2:	f7fe f9a5 	bl	8010640 <rcl_client_is_valid>
 80122f6:	b1a8      	cbz	r0, 8012324 <rcl_action_send_result_request+0x54>
 80122f8:	6820      	ldr	r0, [r4, #0]
 80122fa:	300c      	adds	r0, #12
 80122fc:	f7ff f82a 	bl	8011354 <rcl_subscription_is_valid>
 8012300:	b180      	cbz	r0, 8012324 <rcl_action_send_result_request+0x54>
 8012302:	6820      	ldr	r0, [r4, #0]
 8012304:	3010      	adds	r0, #16
 8012306:	f7ff f825 	bl	8011354 <rcl_subscription_is_valid>
 801230a:	b158      	cbz	r0, 8012324 <rcl_action_send_result_request+0x54>
 801230c:	b195      	cbz	r5, 8012334 <rcl_action_send_result_request+0x64>
 801230e:	b18e      	cbz	r6, 8012334 <rcl_action_send_result_request+0x64>
 8012310:	6820      	ldr	r0, [r4, #0]
 8012312:	4632      	mov	r2, r6
 8012314:	4629      	mov	r1, r5
 8012316:	3008      	adds	r0, #8
 8012318:	f7fe f914 	bl	8010544 <rcl_send_request>
 801231c:	3800      	subs	r0, #0
 801231e:	bf18      	it	ne
 8012320:	2001      	movne	r0, #1
 8012322:	bd70      	pop	{r4, r5, r6, pc}
 8012324:	f7fa fc2c 	bl	800cb80 <rcutils_reset_error>
 8012328:	f640 0036 	movw	r0, #2102	@ 0x836
 801232c:	bd70      	pop	{r4, r5, r6, pc}
 801232e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	200b      	movs	r0, #11
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	f640 0036 	movw	r0, #2102	@ 0x836
 801233c:	4770      	bx	lr
 801233e:	bf00      	nop

08012340 <rcl_action_take_result_response>:
 8012340:	2800      	cmp	r0, #0
 8012342:	d03a      	beq.n	80123ba <rcl_action_take_result_response+0x7a>
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	4604      	mov	r4, r0
 8012348:	6800      	ldr	r0, [r0, #0]
 801234a:	b388      	cbz	r0, 80123b0 <rcl_action_take_result_response+0x70>
 801234c:	460d      	mov	r5, r1
 801234e:	4616      	mov	r6, r2
 8012350:	f7fe f976 	bl	8010640 <rcl_client_is_valid>
 8012354:	b338      	cbz	r0, 80123a6 <rcl_action_take_result_response+0x66>
 8012356:	6820      	ldr	r0, [r4, #0]
 8012358:	3004      	adds	r0, #4
 801235a:	f7fe f971 	bl	8010640 <rcl_client_is_valid>
 801235e:	b310      	cbz	r0, 80123a6 <rcl_action_take_result_response+0x66>
 8012360:	6820      	ldr	r0, [r4, #0]
 8012362:	3008      	adds	r0, #8
 8012364:	f7fe f96c 	bl	8010640 <rcl_client_is_valid>
 8012368:	b1e8      	cbz	r0, 80123a6 <rcl_action_take_result_response+0x66>
 801236a:	6820      	ldr	r0, [r4, #0]
 801236c:	300c      	adds	r0, #12
 801236e:	f7fe fff1 	bl	8011354 <rcl_subscription_is_valid>
 8012372:	b1c0      	cbz	r0, 80123a6 <rcl_action_take_result_response+0x66>
 8012374:	6820      	ldr	r0, [r4, #0]
 8012376:	3010      	adds	r0, #16
 8012378:	f7fe ffec 	bl	8011354 <rcl_subscription_is_valid>
 801237c:	b198      	cbz	r0, 80123a6 <rcl_action_take_result_response+0x66>
 801237e:	b1d5      	cbz	r5, 80123b6 <rcl_action_take_result_response+0x76>
 8012380:	b1ce      	cbz	r6, 80123b6 <rcl_action_take_result_response+0x76>
 8012382:	6820      	ldr	r0, [r4, #0]
 8012384:	4632      	mov	r2, r6
 8012386:	4629      	mov	r1, r5
 8012388:	3008      	adds	r0, #8
 801238a:	f7fe f911 	bl	80105b0 <rcl_take_response>
 801238e:	b148      	cbz	r0, 80123a4 <rcl_action_take_result_response+0x64>
 8012390:	280a      	cmp	r0, #10
 8012392:	d007      	beq.n	80123a4 <rcl_action_take_result_response+0x64>
 8012394:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012398:	f640 0337 	movw	r3, #2103	@ 0x837
 801239c:	4290      	cmp	r0, r2
 801239e:	bf0c      	ite	eq
 80123a0:	4618      	moveq	r0, r3
 80123a2:	2001      	movne	r0, #1
 80123a4:	bd70      	pop	{r4, r5, r6, pc}
 80123a6:	f7fa fbeb 	bl	800cb80 <rcutils_reset_error>
 80123aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80123ae:	bd70      	pop	{r4, r5, r6, pc}
 80123b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80123b4:	bd70      	pop	{r4, r5, r6, pc}
 80123b6:	200b      	movs	r0, #11
 80123b8:	bd70      	pop	{r4, r5, r6, pc}
 80123ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80123be:	4770      	bx	lr

080123c0 <rcl_action_take_cancel_response>:
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d03a      	beq.n	801243a <rcl_action_take_cancel_response+0x7a>
 80123c4:	b570      	push	{r4, r5, r6, lr}
 80123c6:	4604      	mov	r4, r0
 80123c8:	6800      	ldr	r0, [r0, #0]
 80123ca:	b388      	cbz	r0, 8012430 <rcl_action_take_cancel_response+0x70>
 80123cc:	460d      	mov	r5, r1
 80123ce:	4616      	mov	r6, r2
 80123d0:	f7fe f936 	bl	8010640 <rcl_client_is_valid>
 80123d4:	b338      	cbz	r0, 8012426 <rcl_action_take_cancel_response+0x66>
 80123d6:	6820      	ldr	r0, [r4, #0]
 80123d8:	3004      	adds	r0, #4
 80123da:	f7fe f931 	bl	8010640 <rcl_client_is_valid>
 80123de:	b310      	cbz	r0, 8012426 <rcl_action_take_cancel_response+0x66>
 80123e0:	6820      	ldr	r0, [r4, #0]
 80123e2:	3008      	adds	r0, #8
 80123e4:	f7fe f92c 	bl	8010640 <rcl_client_is_valid>
 80123e8:	b1e8      	cbz	r0, 8012426 <rcl_action_take_cancel_response+0x66>
 80123ea:	6820      	ldr	r0, [r4, #0]
 80123ec:	300c      	adds	r0, #12
 80123ee:	f7fe ffb1 	bl	8011354 <rcl_subscription_is_valid>
 80123f2:	b1c0      	cbz	r0, 8012426 <rcl_action_take_cancel_response+0x66>
 80123f4:	6820      	ldr	r0, [r4, #0]
 80123f6:	3010      	adds	r0, #16
 80123f8:	f7fe ffac 	bl	8011354 <rcl_subscription_is_valid>
 80123fc:	b198      	cbz	r0, 8012426 <rcl_action_take_cancel_response+0x66>
 80123fe:	b1d5      	cbz	r5, 8012436 <rcl_action_take_cancel_response+0x76>
 8012400:	b1ce      	cbz	r6, 8012436 <rcl_action_take_cancel_response+0x76>
 8012402:	6820      	ldr	r0, [r4, #0]
 8012404:	4632      	mov	r2, r6
 8012406:	4629      	mov	r1, r5
 8012408:	3004      	adds	r0, #4
 801240a:	f7fe f8d1 	bl	80105b0 <rcl_take_response>
 801240e:	b148      	cbz	r0, 8012424 <rcl_action_take_cancel_response+0x64>
 8012410:	280a      	cmp	r0, #10
 8012412:	d007      	beq.n	8012424 <rcl_action_take_cancel_response+0x64>
 8012414:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012418:	f640 0337 	movw	r3, #2103	@ 0x837
 801241c:	4290      	cmp	r0, r2
 801241e:	bf0c      	ite	eq
 8012420:	4618      	moveq	r0, r3
 8012422:	2001      	movne	r0, #1
 8012424:	bd70      	pop	{r4, r5, r6, pc}
 8012426:	f7fa fbab 	bl	800cb80 <rcutils_reset_error>
 801242a:	f640 0036 	movw	r0, #2102	@ 0x836
 801242e:	bd70      	pop	{r4, r5, r6, pc}
 8012430:	f640 0036 	movw	r0, #2102	@ 0x836
 8012434:	bd70      	pop	{r4, r5, r6, pc}
 8012436:	200b      	movs	r0, #11
 8012438:	bd70      	pop	{r4, r5, r6, pc}
 801243a:	f640 0036 	movw	r0, #2102	@ 0x836
 801243e:	4770      	bx	lr

08012440 <rcl_action_take_feedback>:
 8012440:	2800      	cmp	r0, #0
 8012442:	d038      	beq.n	80124b6 <rcl_action_take_feedback+0x76>
 8012444:	b530      	push	{r4, r5, lr}
 8012446:	4604      	mov	r4, r0
 8012448:	6800      	ldr	r0, [r0, #0]
 801244a:	b091      	sub	sp, #68	@ 0x44
 801244c:	b378      	cbz	r0, 80124ae <rcl_action_take_feedback+0x6e>
 801244e:	460d      	mov	r5, r1
 8012450:	f7fe f8f6 	bl	8010640 <rcl_client_is_valid>
 8012454:	b328      	cbz	r0, 80124a2 <rcl_action_take_feedback+0x62>
 8012456:	6820      	ldr	r0, [r4, #0]
 8012458:	3004      	adds	r0, #4
 801245a:	f7fe f8f1 	bl	8010640 <rcl_client_is_valid>
 801245e:	b300      	cbz	r0, 80124a2 <rcl_action_take_feedback+0x62>
 8012460:	6820      	ldr	r0, [r4, #0]
 8012462:	3008      	adds	r0, #8
 8012464:	f7fe f8ec 	bl	8010640 <rcl_client_is_valid>
 8012468:	b1d8      	cbz	r0, 80124a2 <rcl_action_take_feedback+0x62>
 801246a:	6820      	ldr	r0, [r4, #0]
 801246c:	300c      	adds	r0, #12
 801246e:	f7fe ff71 	bl	8011354 <rcl_subscription_is_valid>
 8012472:	b1b0      	cbz	r0, 80124a2 <rcl_action_take_feedback+0x62>
 8012474:	6820      	ldr	r0, [r4, #0]
 8012476:	3010      	adds	r0, #16
 8012478:	f7fe ff6c 	bl	8011354 <rcl_subscription_is_valid>
 801247c:	b188      	cbz	r0, 80124a2 <rcl_action_take_feedback+0x62>
 801247e:	b1ed      	cbz	r5, 80124bc <rcl_action_take_feedback+0x7c>
 8012480:	6820      	ldr	r0, [r4, #0]
 8012482:	2300      	movs	r3, #0
 8012484:	466a      	mov	r2, sp
 8012486:	4629      	mov	r1, r5
 8012488:	300c      	adds	r0, #12
 801248a:	f7fe ff05 	bl	8011298 <rcl_take>
 801248e:	b160      	cbz	r0, 80124aa <rcl_action_take_feedback+0x6a>
 8012490:	f240 1391 	movw	r3, #401	@ 0x191
 8012494:	4298      	cmp	r0, r3
 8012496:	d014      	beq.n	80124c2 <rcl_action_take_feedback+0x82>
 8012498:	280a      	cmp	r0, #10
 801249a:	bf18      	it	ne
 801249c:	2001      	movne	r0, #1
 801249e:	b011      	add	sp, #68	@ 0x44
 80124a0:	bd30      	pop	{r4, r5, pc}
 80124a2:	f7fa fb6d 	bl	800cb80 <rcutils_reset_error>
 80124a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80124aa:	b011      	add	sp, #68	@ 0x44
 80124ac:	bd30      	pop	{r4, r5, pc}
 80124ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80124b2:	b011      	add	sp, #68	@ 0x44
 80124b4:	bd30      	pop	{r4, r5, pc}
 80124b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80124ba:	4770      	bx	lr
 80124bc:	200b      	movs	r0, #11
 80124be:	b011      	add	sp, #68	@ 0x44
 80124c0:	bd30      	pop	{r4, r5, pc}
 80124c2:	f640 0037 	movw	r0, #2103	@ 0x837
 80124c6:	e7f0      	b.n	80124aa <rcl_action_take_feedback+0x6a>

080124c8 <rcl_action_wait_set_add_action_client>:
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d048      	beq.n	801255e <rcl_action_wait_set_add_action_client+0x96>
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	460c      	mov	r4, r1
 80124d0:	2900      	cmp	r1, #0
 80124d2:	d03c      	beq.n	801254e <rcl_action_wait_set_add_action_client+0x86>
 80124d4:	4605      	mov	r5, r0
 80124d6:	6808      	ldr	r0, [r1, #0]
 80124d8:	2800      	cmp	r0, #0
 80124da:	d038      	beq.n	801254e <rcl_action_wait_set_add_action_client+0x86>
 80124dc:	4617      	mov	r7, r2
 80124de:	461e      	mov	r6, r3
 80124e0:	f7fe f8ae 	bl	8010640 <rcl_client_is_valid>
 80124e4:	b3b0      	cbz	r0, 8012554 <rcl_action_wait_set_add_action_client+0x8c>
 80124e6:	6820      	ldr	r0, [r4, #0]
 80124e8:	3004      	adds	r0, #4
 80124ea:	f7fe f8a9 	bl	8010640 <rcl_client_is_valid>
 80124ee:	b388      	cbz	r0, 8012554 <rcl_action_wait_set_add_action_client+0x8c>
 80124f0:	6820      	ldr	r0, [r4, #0]
 80124f2:	3008      	adds	r0, #8
 80124f4:	f7fe f8a4 	bl	8010640 <rcl_client_is_valid>
 80124f8:	b360      	cbz	r0, 8012554 <rcl_action_wait_set_add_action_client+0x8c>
 80124fa:	6820      	ldr	r0, [r4, #0]
 80124fc:	300c      	adds	r0, #12
 80124fe:	f7fe ff29 	bl	8011354 <rcl_subscription_is_valid>
 8012502:	b338      	cbz	r0, 8012554 <rcl_action_wait_set_add_action_client+0x8c>
 8012504:	6820      	ldr	r0, [r4, #0]
 8012506:	3010      	adds	r0, #16
 8012508:	f7fe ff24 	bl	8011354 <rcl_subscription_is_valid>
 801250c:	b310      	cbz	r0, 8012554 <rcl_action_wait_set_add_action_client+0x8c>
 801250e:	6821      	ldr	r1, [r4, #0]
 8012510:	4628      	mov	r0, r5
 8012512:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012516:	f7ff fccd 	bl	8011eb4 <rcl_wait_set_add_client>
 801251a:	b9b8      	cbnz	r0, 801254c <rcl_action_wait_set_add_action_client+0x84>
 801251c:	6821      	ldr	r1, [r4, #0]
 801251e:	4628      	mov	r0, r5
 8012520:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8012524:	3104      	adds	r1, #4
 8012526:	f7ff fcc5 	bl	8011eb4 <rcl_wait_set_add_client>
 801252a:	b978      	cbnz	r0, 801254c <rcl_action_wait_set_add_action_client+0x84>
 801252c:	6821      	ldr	r1, [r4, #0]
 801252e:	4628      	mov	r0, r5
 8012530:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8012534:	3108      	adds	r1, #8
 8012536:	f7ff fcbd 	bl	8011eb4 <rcl_wait_set_add_client>
 801253a:	b938      	cbnz	r0, 801254c <rcl_action_wait_set_add_action_client+0x84>
 801253c:	6821      	ldr	r1, [r4, #0]
 801253e:	4628      	mov	r0, r5
 8012540:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8012544:	310c      	adds	r1, #12
 8012546:	f7ff f96d 	bl	8011824 <rcl_wait_set_add_subscription>
 801254a:	b158      	cbz	r0, 8012564 <rcl_action_wait_set_add_action_client+0x9c>
 801254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801254e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012554:	f7fa fb14 	bl	800cb80 <rcutils_reset_error>
 8012558:	f640 0036 	movw	r0, #2102	@ 0x836
 801255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801255e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012562:	4770      	bx	lr
 8012564:	6821      	ldr	r1, [r4, #0]
 8012566:	4628      	mov	r0, r5
 8012568:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801256c:	3110      	adds	r1, #16
 801256e:	f7ff f959 	bl	8011824 <rcl_wait_set_add_subscription>
 8012572:	2800      	cmp	r0, #0
 8012574:	d1ea      	bne.n	801254c <rcl_action_wait_set_add_action_client+0x84>
 8012576:	b11f      	cbz	r7, 8012580 <rcl_action_wait_set_add_action_client+0xb8>
 8012578:	6823      	ldr	r3, [r4, #0]
 801257a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801257e:	603b      	str	r3, [r7, #0]
 8012580:	2e00      	cmp	r6, #0
 8012582:	d0e3      	beq.n	801254c <rcl_action_wait_set_add_action_client+0x84>
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801258a:	6033      	str	r3, [r6, #0]
 801258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801258e:	bf00      	nop

08012590 <rcl_action_client_wait_set_get_entities_ready>:
 8012590:	2800      	cmp	r0, #0
 8012592:	f000 808d 	beq.w	80126b0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801259a:	460c      	mov	r4, r1
 801259c:	2900      	cmp	r1, #0
 801259e:	d077      	beq.n	8012690 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80125a0:	4605      	mov	r5, r0
 80125a2:	6808      	ldr	r0, [r1, #0]
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d073      	beq.n	8012690 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80125a8:	4616      	mov	r6, r2
 80125aa:	461f      	mov	r7, r3
 80125ac:	f7fe f848 	bl	8010640 <rcl_client_is_valid>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d071      	beq.n	8012698 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80125b4:	6820      	ldr	r0, [r4, #0]
 80125b6:	3004      	adds	r0, #4
 80125b8:	f7fe f842 	bl	8010640 <rcl_client_is_valid>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d06b      	beq.n	8012698 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80125c0:	6820      	ldr	r0, [r4, #0]
 80125c2:	3008      	adds	r0, #8
 80125c4:	f7fe f83c 	bl	8010640 <rcl_client_is_valid>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d065      	beq.n	8012698 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80125cc:	6820      	ldr	r0, [r4, #0]
 80125ce:	300c      	adds	r0, #12
 80125d0:	f7fe fec0 	bl	8011354 <rcl_subscription_is_valid>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d05f      	beq.n	8012698 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80125d8:	6820      	ldr	r0, [r4, #0]
 80125da:	3010      	adds	r0, #16
 80125dc:	f7fe feba 	bl	8011354 <rcl_subscription_is_valid>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d059      	beq.n	8012698 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80125e4:	2e00      	cmp	r6, #0
 80125e6:	d060      	beq.n	80126aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80125e8:	2f00      	cmp	r7, #0
 80125ea:	d05e      	beq.n	80126aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80125ec:	9b06      	ldr	r3, [sp, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d05b      	beq.n	80126aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80125f2:	9b07      	ldr	r3, [sp, #28]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d058      	beq.n	80126aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80125f8:	9b08      	ldr	r3, [sp, #32]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d055      	beq.n	80126aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	686a      	ldr	r2, [r5, #4]
 8012602:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012606:	428a      	cmp	r2, r1
 8012608:	d94c      	bls.n	80126a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801260a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801260e:	4282      	cmp	r2, r0
 8012610:	d948      	bls.n	80126a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012612:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8012616:	69ea      	ldr	r2, [r5, #28]
 8012618:	42a2      	cmp	r2, r4
 801261a:	d943      	bls.n	80126a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801261c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012620:	4562      	cmp	r2, ip
 8012622:	d93f      	bls.n	80126a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012624:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012628:	4572      	cmp	r2, lr
 801262a:	d93b      	bls.n	80126a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801262c:	69aa      	ldr	r2, [r5, #24]
 801262e:	682d      	ldr	r5, [r5, #0]
 8012630:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012634:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012638:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801263c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012640:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012644:	f103 0c0c 	add.w	ip, r3, #12
 8012648:	eba5 050c 	sub.w	r5, r5, ip
 801264c:	fab5 f585 	clz	r5, r5
 8012650:	096d      	lsrs	r5, r5, #5
 8012652:	7035      	strb	r5, [r6, #0]
 8012654:	f103 0510 	add.w	r5, r3, #16
 8012658:	1b64      	subs	r4, r4, r5
 801265a:	fab4 f484 	clz	r4, r4
 801265e:	0964      	lsrs	r4, r4, #5
 8012660:	703c      	strb	r4, [r7, #0]
 8012662:	eba3 0008 	sub.w	r0, r3, r8
 8012666:	1d1c      	adds	r4, r3, #4
 8012668:	3308      	adds	r3, #8
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	fab0 f080 	clz	r0, r0
 8012670:	9a06      	ldr	r2, [sp, #24]
 8012672:	0940      	lsrs	r0, r0, #5
 8012674:	1b09      	subs	r1, r1, r4
 8012676:	7010      	strb	r0, [r2, #0]
 8012678:	fab1 f181 	clz	r1, r1
 801267c:	9a07      	ldr	r2, [sp, #28]
 801267e:	0949      	lsrs	r1, r1, #5
 8012680:	7011      	strb	r1, [r2, #0]
 8012682:	fab3 f383 	clz	r3, r3
 8012686:	9a08      	ldr	r2, [sp, #32]
 8012688:	095b      	lsrs	r3, r3, #5
 801268a:	2000      	movs	r0, #0
 801268c:	7013      	strb	r3, [r2, #0]
 801268e:	e001      	b.n	8012694 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012690:	f640 0036 	movw	r0, #2102	@ 0x836
 8012694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012698:	f7fa fa72 	bl	800cb80 <rcutils_reset_error>
 801269c:	f640 0036 	movw	r0, #2102	@ 0x836
 80126a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a4:	2001      	movs	r0, #1
 80126a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126aa:	200b      	movs	r0, #11
 80126ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126b0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop

080126b8 <rcl_action_take_goal_request>:
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d039      	beq.n	8012730 <rcl_action_take_goal_request+0x78>
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	4604      	mov	r4, r0
 80126c0:	6800      	ldr	r0, [r0, #0]
 80126c2:	b380      	cbz	r0, 8012726 <rcl_action_take_goal_request+0x6e>
 80126c4:	460d      	mov	r5, r1
 80126c6:	4616      	mov	r6, r2
 80126c8:	f7fe fd00 	bl	80110cc <rcl_service_is_valid>
 80126cc:	b330      	cbz	r0, 801271c <rcl_action_take_goal_request+0x64>
 80126ce:	6820      	ldr	r0, [r4, #0]
 80126d0:	3004      	adds	r0, #4
 80126d2:	f7fe fcfb 	bl	80110cc <rcl_service_is_valid>
 80126d6:	b308      	cbz	r0, 801271c <rcl_action_take_goal_request+0x64>
 80126d8:	6820      	ldr	r0, [r4, #0]
 80126da:	3008      	adds	r0, #8
 80126dc:	f7fe fcf6 	bl	80110cc <rcl_service_is_valid>
 80126e0:	b1e0      	cbz	r0, 801271c <rcl_action_take_goal_request+0x64>
 80126e2:	6820      	ldr	r0, [r4, #0]
 80126e4:	300c      	adds	r0, #12
 80126e6:	f7f9 fab9 	bl	800bc5c <rcl_publisher_is_valid>
 80126ea:	b1b8      	cbz	r0, 801271c <rcl_action_take_goal_request+0x64>
 80126ec:	6820      	ldr	r0, [r4, #0]
 80126ee:	3010      	adds	r0, #16
 80126f0:	f7f9 fab4 	bl	800bc5c <rcl_publisher_is_valid>
 80126f4:	b190      	cbz	r0, 801271c <rcl_action_take_goal_request+0x64>
 80126f6:	b1cd      	cbz	r5, 801272c <rcl_action_take_goal_request+0x74>
 80126f8:	b1c6      	cbz	r6, 801272c <rcl_action_take_goal_request+0x74>
 80126fa:	6820      	ldr	r0, [r4, #0]
 80126fc:	4632      	mov	r2, r6
 80126fe:	4629      	mov	r1, r5
 8012700:	f7fe fc8c 	bl	801101c <rcl_take_request>
 8012704:	b148      	cbz	r0, 801271a <rcl_action_take_goal_request+0x62>
 8012706:	280a      	cmp	r0, #10
 8012708:	d007      	beq.n	801271a <rcl_action_take_goal_request+0x62>
 801270a:	f240 2259 	movw	r2, #601	@ 0x259
 801270e:	f640 0399 	movw	r3, #2201	@ 0x899
 8012712:	4290      	cmp	r0, r2
 8012714:	bf0c      	ite	eq
 8012716:	4618      	moveq	r0, r3
 8012718:	2001      	movne	r0, #1
 801271a:	bd70      	pop	{r4, r5, r6, pc}
 801271c:	f7fa fa30 	bl	800cb80 <rcutils_reset_error>
 8012720:	f640 0098 	movw	r0, #2200	@ 0x898
 8012724:	bd70      	pop	{r4, r5, r6, pc}
 8012726:	f640 0098 	movw	r0, #2200	@ 0x898
 801272a:	bd70      	pop	{r4, r5, r6, pc}
 801272c:	200b      	movs	r0, #11
 801272e:	bd70      	pop	{r4, r5, r6, pc}
 8012730:	f640 0098 	movw	r0, #2200	@ 0x898
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <rcl_action_send_goal_response>:
 8012738:	b390      	cbz	r0, 80127a0 <rcl_action_send_goal_response+0x68>
 801273a:	b570      	push	{r4, r5, r6, lr}
 801273c:	4604      	mov	r4, r0
 801273e:	6800      	ldr	r0, [r0, #0]
 8012740:	b348      	cbz	r0, 8012796 <rcl_action_send_goal_response+0x5e>
 8012742:	460d      	mov	r5, r1
 8012744:	4616      	mov	r6, r2
 8012746:	f7fe fcc1 	bl	80110cc <rcl_service_is_valid>
 801274a:	b1f8      	cbz	r0, 801278c <rcl_action_send_goal_response+0x54>
 801274c:	6820      	ldr	r0, [r4, #0]
 801274e:	3004      	adds	r0, #4
 8012750:	f7fe fcbc 	bl	80110cc <rcl_service_is_valid>
 8012754:	b1d0      	cbz	r0, 801278c <rcl_action_send_goal_response+0x54>
 8012756:	6820      	ldr	r0, [r4, #0]
 8012758:	3008      	adds	r0, #8
 801275a:	f7fe fcb7 	bl	80110cc <rcl_service_is_valid>
 801275e:	b1a8      	cbz	r0, 801278c <rcl_action_send_goal_response+0x54>
 8012760:	6820      	ldr	r0, [r4, #0]
 8012762:	300c      	adds	r0, #12
 8012764:	f7f9 fa7a 	bl	800bc5c <rcl_publisher_is_valid>
 8012768:	b180      	cbz	r0, 801278c <rcl_action_send_goal_response+0x54>
 801276a:	6820      	ldr	r0, [r4, #0]
 801276c:	3010      	adds	r0, #16
 801276e:	f7f9 fa75 	bl	800bc5c <rcl_publisher_is_valid>
 8012772:	b158      	cbz	r0, 801278c <rcl_action_send_goal_response+0x54>
 8012774:	b195      	cbz	r5, 801279c <rcl_action_send_goal_response+0x64>
 8012776:	b18e      	cbz	r6, 801279c <rcl_action_send_goal_response+0x64>
 8012778:	6820      	ldr	r0, [r4, #0]
 801277a:	4632      	mov	r2, r6
 801277c:	4629      	mov	r1, r5
 801277e:	f7fe fc8d 	bl	801109c <rcl_send_response>
 8012782:	b110      	cbz	r0, 801278a <rcl_action_send_goal_response+0x52>
 8012784:	2802      	cmp	r0, #2
 8012786:	bf18      	it	ne
 8012788:	2001      	movne	r0, #1
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	f7fa f9f8 	bl	800cb80 <rcutils_reset_error>
 8012790:	f640 0098 	movw	r0, #2200	@ 0x898
 8012794:	bd70      	pop	{r4, r5, r6, pc}
 8012796:	f640 0098 	movw	r0, #2200	@ 0x898
 801279a:	bd70      	pop	{r4, r5, r6, pc}
 801279c:	200b      	movs	r0, #11
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop

080127a8 <rcl_action_take_result_request>:
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d03a      	beq.n	8012822 <rcl_action_take_result_request+0x7a>
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	4604      	mov	r4, r0
 80127b0:	6800      	ldr	r0, [r0, #0]
 80127b2:	b388      	cbz	r0, 8012818 <rcl_action_take_result_request+0x70>
 80127b4:	460d      	mov	r5, r1
 80127b6:	4616      	mov	r6, r2
 80127b8:	f7fe fc88 	bl	80110cc <rcl_service_is_valid>
 80127bc:	b338      	cbz	r0, 801280e <rcl_action_take_result_request+0x66>
 80127be:	6820      	ldr	r0, [r4, #0]
 80127c0:	3004      	adds	r0, #4
 80127c2:	f7fe fc83 	bl	80110cc <rcl_service_is_valid>
 80127c6:	b310      	cbz	r0, 801280e <rcl_action_take_result_request+0x66>
 80127c8:	6820      	ldr	r0, [r4, #0]
 80127ca:	3008      	adds	r0, #8
 80127cc:	f7fe fc7e 	bl	80110cc <rcl_service_is_valid>
 80127d0:	b1e8      	cbz	r0, 801280e <rcl_action_take_result_request+0x66>
 80127d2:	6820      	ldr	r0, [r4, #0]
 80127d4:	300c      	adds	r0, #12
 80127d6:	f7f9 fa41 	bl	800bc5c <rcl_publisher_is_valid>
 80127da:	b1c0      	cbz	r0, 801280e <rcl_action_take_result_request+0x66>
 80127dc:	6820      	ldr	r0, [r4, #0]
 80127de:	3010      	adds	r0, #16
 80127e0:	f7f9 fa3c 	bl	800bc5c <rcl_publisher_is_valid>
 80127e4:	b198      	cbz	r0, 801280e <rcl_action_take_result_request+0x66>
 80127e6:	b1d5      	cbz	r5, 801281e <rcl_action_take_result_request+0x76>
 80127e8:	b1ce      	cbz	r6, 801281e <rcl_action_take_result_request+0x76>
 80127ea:	6820      	ldr	r0, [r4, #0]
 80127ec:	4632      	mov	r2, r6
 80127ee:	4629      	mov	r1, r5
 80127f0:	3008      	adds	r0, #8
 80127f2:	f7fe fc13 	bl	801101c <rcl_take_request>
 80127f6:	b148      	cbz	r0, 801280c <rcl_action_take_result_request+0x64>
 80127f8:	280a      	cmp	r0, #10
 80127fa:	d007      	beq.n	801280c <rcl_action_take_result_request+0x64>
 80127fc:	f240 2259 	movw	r2, #601	@ 0x259
 8012800:	f640 0399 	movw	r3, #2201	@ 0x899
 8012804:	4290      	cmp	r0, r2
 8012806:	bf0c      	ite	eq
 8012808:	4618      	moveq	r0, r3
 801280a:	2001      	movne	r0, #1
 801280c:	bd70      	pop	{r4, r5, r6, pc}
 801280e:	f7fa f9b7 	bl	800cb80 <rcutils_reset_error>
 8012812:	f640 0098 	movw	r0, #2200	@ 0x898
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	f640 0098 	movw	r0, #2200	@ 0x898
 801281c:	bd70      	pop	{r4, r5, r6, pc}
 801281e:	200b      	movs	r0, #11
 8012820:	bd70      	pop	{r4, r5, r6, pc}
 8012822:	f640 0098 	movw	r0, #2200	@ 0x898
 8012826:	4770      	bx	lr

08012828 <rcl_action_take_cancel_request>:
 8012828:	2800      	cmp	r0, #0
 801282a:	d03a      	beq.n	80128a2 <rcl_action_take_cancel_request+0x7a>
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	4604      	mov	r4, r0
 8012830:	6800      	ldr	r0, [r0, #0]
 8012832:	b388      	cbz	r0, 8012898 <rcl_action_take_cancel_request+0x70>
 8012834:	460d      	mov	r5, r1
 8012836:	4616      	mov	r6, r2
 8012838:	f7fe fc48 	bl	80110cc <rcl_service_is_valid>
 801283c:	b338      	cbz	r0, 801288e <rcl_action_take_cancel_request+0x66>
 801283e:	6820      	ldr	r0, [r4, #0]
 8012840:	3004      	adds	r0, #4
 8012842:	f7fe fc43 	bl	80110cc <rcl_service_is_valid>
 8012846:	b310      	cbz	r0, 801288e <rcl_action_take_cancel_request+0x66>
 8012848:	6820      	ldr	r0, [r4, #0]
 801284a:	3008      	adds	r0, #8
 801284c:	f7fe fc3e 	bl	80110cc <rcl_service_is_valid>
 8012850:	b1e8      	cbz	r0, 801288e <rcl_action_take_cancel_request+0x66>
 8012852:	6820      	ldr	r0, [r4, #0]
 8012854:	300c      	adds	r0, #12
 8012856:	f7f9 fa01 	bl	800bc5c <rcl_publisher_is_valid>
 801285a:	b1c0      	cbz	r0, 801288e <rcl_action_take_cancel_request+0x66>
 801285c:	6820      	ldr	r0, [r4, #0]
 801285e:	3010      	adds	r0, #16
 8012860:	f7f9 f9fc 	bl	800bc5c <rcl_publisher_is_valid>
 8012864:	b198      	cbz	r0, 801288e <rcl_action_take_cancel_request+0x66>
 8012866:	b1d5      	cbz	r5, 801289e <rcl_action_take_cancel_request+0x76>
 8012868:	b1ce      	cbz	r6, 801289e <rcl_action_take_cancel_request+0x76>
 801286a:	6820      	ldr	r0, [r4, #0]
 801286c:	4632      	mov	r2, r6
 801286e:	4629      	mov	r1, r5
 8012870:	3004      	adds	r0, #4
 8012872:	f7fe fbd3 	bl	801101c <rcl_take_request>
 8012876:	b148      	cbz	r0, 801288c <rcl_action_take_cancel_request+0x64>
 8012878:	280a      	cmp	r0, #10
 801287a:	d007      	beq.n	801288c <rcl_action_take_cancel_request+0x64>
 801287c:	f240 2259 	movw	r2, #601	@ 0x259
 8012880:	f640 0399 	movw	r3, #2201	@ 0x899
 8012884:	4290      	cmp	r0, r2
 8012886:	bf0c      	ite	eq
 8012888:	4618      	moveq	r0, r3
 801288a:	2001      	movne	r0, #1
 801288c:	bd70      	pop	{r4, r5, r6, pc}
 801288e:	f7fa f977 	bl	800cb80 <rcutils_reset_error>
 8012892:	f640 0098 	movw	r0, #2200	@ 0x898
 8012896:	bd70      	pop	{r4, r5, r6, pc}
 8012898:	f640 0098 	movw	r0, #2200	@ 0x898
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	200b      	movs	r0, #11
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80128a6:	4770      	bx	lr

080128a8 <rcl_action_send_cancel_response>:
 80128a8:	b398      	cbz	r0, 8012912 <rcl_action_send_cancel_response+0x6a>
 80128aa:	b570      	push	{r4, r5, r6, lr}
 80128ac:	4604      	mov	r4, r0
 80128ae:	6800      	ldr	r0, [r0, #0]
 80128b0:	b350      	cbz	r0, 8012908 <rcl_action_send_cancel_response+0x60>
 80128b2:	460d      	mov	r5, r1
 80128b4:	4616      	mov	r6, r2
 80128b6:	f7fe fc09 	bl	80110cc <rcl_service_is_valid>
 80128ba:	b300      	cbz	r0, 80128fe <rcl_action_send_cancel_response+0x56>
 80128bc:	6820      	ldr	r0, [r4, #0]
 80128be:	3004      	adds	r0, #4
 80128c0:	f7fe fc04 	bl	80110cc <rcl_service_is_valid>
 80128c4:	b1d8      	cbz	r0, 80128fe <rcl_action_send_cancel_response+0x56>
 80128c6:	6820      	ldr	r0, [r4, #0]
 80128c8:	3008      	adds	r0, #8
 80128ca:	f7fe fbff 	bl	80110cc <rcl_service_is_valid>
 80128ce:	b1b0      	cbz	r0, 80128fe <rcl_action_send_cancel_response+0x56>
 80128d0:	6820      	ldr	r0, [r4, #0]
 80128d2:	300c      	adds	r0, #12
 80128d4:	f7f9 f9c2 	bl	800bc5c <rcl_publisher_is_valid>
 80128d8:	b188      	cbz	r0, 80128fe <rcl_action_send_cancel_response+0x56>
 80128da:	6820      	ldr	r0, [r4, #0]
 80128dc:	3010      	adds	r0, #16
 80128de:	f7f9 f9bd 	bl	800bc5c <rcl_publisher_is_valid>
 80128e2:	b160      	cbz	r0, 80128fe <rcl_action_send_cancel_response+0x56>
 80128e4:	b19d      	cbz	r5, 801290e <rcl_action_send_cancel_response+0x66>
 80128e6:	b196      	cbz	r6, 801290e <rcl_action_send_cancel_response+0x66>
 80128e8:	6820      	ldr	r0, [r4, #0]
 80128ea:	4632      	mov	r2, r6
 80128ec:	4629      	mov	r1, r5
 80128ee:	3004      	adds	r0, #4
 80128f0:	f7fe fbd4 	bl	801109c <rcl_send_response>
 80128f4:	b110      	cbz	r0, 80128fc <rcl_action_send_cancel_response+0x54>
 80128f6:	2802      	cmp	r0, #2
 80128f8:	bf18      	it	ne
 80128fa:	2001      	movne	r0, #1
 80128fc:	bd70      	pop	{r4, r5, r6, pc}
 80128fe:	f7fa f93f 	bl	800cb80 <rcutils_reset_error>
 8012902:	f640 0098 	movw	r0, #2200	@ 0x898
 8012906:	bd70      	pop	{r4, r5, r6, pc}
 8012908:	f640 0098 	movw	r0, #2200	@ 0x898
 801290c:	bd70      	pop	{r4, r5, r6, pc}
 801290e:	200b      	movs	r0, #11
 8012910:	bd70      	pop	{r4, r5, r6, pc}
 8012912:	f640 0098 	movw	r0, #2200	@ 0x898
 8012916:	4770      	bx	lr

08012918 <rcl_action_wait_set_add_action_server>:
 8012918:	2800      	cmp	r0, #0
 801291a:	d04d      	beq.n	80129b8 <rcl_action_wait_set_add_action_server+0xa0>
 801291c:	b570      	push	{r4, r5, r6, lr}
 801291e:	460c      	mov	r4, r1
 8012920:	b159      	cbz	r1, 801293a <rcl_action_wait_set_add_action_server+0x22>
 8012922:	4605      	mov	r5, r0
 8012924:	6808      	ldr	r0, [r1, #0]
 8012926:	b140      	cbz	r0, 801293a <rcl_action_wait_set_add_action_server+0x22>
 8012928:	4616      	mov	r6, r2
 801292a:	f7fe fbcf 	bl	80110cc <rcl_service_is_valid>
 801292e:	b120      	cbz	r0, 801293a <rcl_action_wait_set_add_action_server+0x22>
 8012930:	6820      	ldr	r0, [r4, #0]
 8012932:	3004      	adds	r0, #4
 8012934:	f7fe fbca 	bl	80110cc <rcl_service_is_valid>
 8012938:	b910      	cbnz	r0, 8012940 <rcl_action_wait_set_add_action_server+0x28>
 801293a:	f640 0098 	movw	r0, #2200	@ 0x898
 801293e:	bd70      	pop	{r4, r5, r6, pc}
 8012940:	6820      	ldr	r0, [r4, #0]
 8012942:	3008      	adds	r0, #8
 8012944:	f7fe fbc2 	bl	80110cc <rcl_service_is_valid>
 8012948:	2800      	cmp	r0, #0
 801294a:	d0f6      	beq.n	801293a <rcl_action_wait_set_add_action_server+0x22>
 801294c:	6820      	ldr	r0, [r4, #0]
 801294e:	300c      	adds	r0, #12
 8012950:	f7f9 f99c 	bl	800bc8c <rcl_publisher_is_valid_except_context>
 8012954:	2800      	cmp	r0, #0
 8012956:	d0f0      	beq.n	801293a <rcl_action_wait_set_add_action_server+0x22>
 8012958:	6820      	ldr	r0, [r4, #0]
 801295a:	3010      	adds	r0, #16
 801295c:	f7f9 f996 	bl	800bc8c <rcl_publisher_is_valid_except_context>
 8012960:	2800      	cmp	r0, #0
 8012962:	d0ea      	beq.n	801293a <rcl_action_wait_set_add_action_server+0x22>
 8012964:	6821      	ldr	r1, [r4, #0]
 8012966:	4628      	mov	r0, r5
 8012968:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801296c:	f7ff face 	bl	8011f0c <rcl_wait_set_add_service>
 8012970:	2800      	cmp	r0, #0
 8012972:	d1e4      	bne.n	801293e <rcl_action_wait_set_add_action_server+0x26>
 8012974:	6821      	ldr	r1, [r4, #0]
 8012976:	4628      	mov	r0, r5
 8012978:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801297c:	3104      	adds	r1, #4
 801297e:	f7ff fac5 	bl	8011f0c <rcl_wait_set_add_service>
 8012982:	2800      	cmp	r0, #0
 8012984:	d1db      	bne.n	801293e <rcl_action_wait_set_add_action_server+0x26>
 8012986:	6821      	ldr	r1, [r4, #0]
 8012988:	4628      	mov	r0, r5
 801298a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801298e:	3108      	adds	r1, #8
 8012990:	f7ff fabc 	bl	8011f0c <rcl_wait_set_add_service>
 8012994:	2800      	cmp	r0, #0
 8012996:	d1d2      	bne.n	801293e <rcl_action_wait_set_add_action_server+0x26>
 8012998:	6821      	ldr	r1, [r4, #0]
 801299a:	4628      	mov	r0, r5
 801299c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80129a0:	3114      	adds	r1, #20
 80129a2:	f7ff fa57 	bl	8011e54 <rcl_wait_set_add_timer>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d1c9      	bne.n	801293e <rcl_action_wait_set_add_action_server+0x26>
 80129aa:	2e00      	cmp	r6, #0
 80129ac:	d0c7      	beq.n	801293e <rcl_action_wait_set_add_action_server+0x26>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80129b4:	6033      	str	r3, [r6, #0]
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop

080129c0 <rcl_action_server_wait_set_get_entities_ready>:
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d05a      	beq.n	8012a7a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c6:	460c      	mov	r4, r1
 80129c8:	b161      	cbz	r1, 80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80129ca:	4605      	mov	r5, r0
 80129cc:	6808      	ldr	r0, [r1, #0]
 80129ce:	b148      	cbz	r0, 80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80129d0:	4616      	mov	r6, r2
 80129d2:	461f      	mov	r7, r3
 80129d4:	f7fe fb7a 	bl	80110cc <rcl_service_is_valid>
 80129d8:	b120      	cbz	r0, 80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80129da:	6820      	ldr	r0, [r4, #0]
 80129dc:	3004      	adds	r0, #4
 80129de:	f7fe fb75 	bl	80110cc <rcl_service_is_valid>
 80129e2:	b910      	cbnz	r0, 80129ea <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80129e4:	f640 0098 	movw	r0, #2200	@ 0x898
 80129e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129ea:	6820      	ldr	r0, [r4, #0]
 80129ec:	3008      	adds	r0, #8
 80129ee:	f7fe fb6d 	bl	80110cc <rcl_service_is_valid>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0f6      	beq.n	80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80129f6:	6820      	ldr	r0, [r4, #0]
 80129f8:	300c      	adds	r0, #12
 80129fa:	f7f9 f947 	bl	800bc8c <rcl_publisher_is_valid_except_context>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0f0      	beq.n	80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a02:	6820      	ldr	r0, [r4, #0]
 8012a04:	3010      	adds	r0, #16
 8012a06:	f7f9 f941 	bl	800bc8c <rcl_publisher_is_valid_except_context>
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d0ea      	beq.n	80129e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012a0e:	b3be      	cbz	r6, 8012a80 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012a10:	b3b7      	cbz	r7, 8012a80 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012a12:	9b06      	ldr	r3, [sp, #24]
 8012a14:	b3a3      	cbz	r3, 8012a80 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012a16:	9b07      	ldr	r3, [sp, #28]
 8012a18:	b393      	cbz	r3, 8012a80 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012a1a:	6821      	ldr	r1, [r4, #0]
 8012a1c:	692a      	ldr	r2, [r5, #16]
 8012a1e:	6a2c      	ldr	r4, [r5, #32]
 8012a20:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8012a24:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012a28:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012a2c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012a30:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8012a34:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012a38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012a3c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012a40:	1a64      	subs	r4, r4, r1
 8012a42:	fab4 f484 	clz	r4, r4
 8012a46:	0964      	lsrs	r4, r4, #5
 8012a48:	7034      	strb	r4, [r6, #0]
 8012a4a:	1d0c      	adds	r4, r1, #4
 8012a4c:	1b1b      	subs	r3, r3, r4
 8012a4e:	fab3 f383 	clz	r3, r3
 8012a52:	095b      	lsrs	r3, r3, #5
 8012a54:	f101 0408 	add.w	r4, r1, #8
 8012a58:	703b      	strb	r3, [r7, #0]
 8012a5a:	f101 0314 	add.w	r3, r1, #20
 8012a5e:	1b01      	subs	r1, r0, r4
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	fab1 f181 	clz	r1, r1
 8012a66:	9a06      	ldr	r2, [sp, #24]
 8012a68:	0949      	lsrs	r1, r1, #5
 8012a6a:	7011      	strb	r1, [r2, #0]
 8012a6c:	fab3 f383 	clz	r3, r3
 8012a70:	9a07      	ldr	r2, [sp, #28]
 8012a72:	095b      	lsrs	r3, r3, #5
 8012a74:	2000      	movs	r0, #0
 8012a76:	7013      	strb	r3, [r2, #0]
 8012a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a7e:	4770      	bx	lr
 8012a80:	200b      	movs	r0, #11
 8012a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a84 <_execute_event_handler>:
 8012a84:	2002      	movs	r0, #2
 8012a86:	4770      	bx	lr

08012a88 <_cancel_goal_event_handler>:
 8012a88:	2003      	movs	r0, #3
 8012a8a:	4770      	bx	lr

08012a8c <_succeed_event_handler>:
 8012a8c:	2004      	movs	r0, #4
 8012a8e:	4770      	bx	lr

08012a90 <_abort_event_handler>:
 8012a90:	2006      	movs	r0, #6
 8012a92:	4770      	bx	lr

08012a94 <_canceled_event_handler>:
 8012a94:	2005      	movs	r0, #5
 8012a96:	4770      	bx	lr

08012a98 <rcl_action_transition_goal_state>:
 8012a98:	b2c2      	uxtb	r2, r0
 8012a9a:	2a06      	cmp	r2, #6
 8012a9c:	d80c      	bhi.n	8012ab8 <rcl_action_transition_goal_state+0x20>
 8012a9e:	2904      	cmp	r1, #4
 8012aa0:	d80a      	bhi.n	8012ab8 <rcl_action_transition_goal_state+0x20>
 8012aa2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012aa6:	b410      	push	{r4}
 8012aa8:	1853      	adds	r3, r2, r1
 8012aaa:	4c06      	ldr	r4, [pc, #24]	@ (8012ac4 <rcl_action_transition_goal_state+0x2c>)
 8012aac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012ab0:	b123      	cbz	r3, 8012abc <rcl_action_transition_goal_state+0x24>
 8012ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ab6:	4718      	bx	r3
 8012ab8:	2000      	movs	r0, #0
 8012aba:	4770      	bx	lr
 8012abc:	2000      	movs	r0, #0
 8012abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ac2:	4770      	bx	lr
 8012ac4:	08018c4c 	.word	0x08018c4c

08012ac8 <rcl_action_get_zero_initialized_cancel_response>:
 8012ac8:	b510      	push	{r4, lr}
 8012aca:	4c07      	ldr	r4, [pc, #28]	@ (8012ae8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012acc:	4686      	mov	lr, r0
 8012ace:	4684      	mov	ip, r0
 8012ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	f8cc 3000 	str.w	r3, [ip]
 8012ae2:	4670      	mov	r0, lr
 8012ae4:	bd10      	pop	{r4, pc}
 8012ae6:	bf00      	nop
 8012ae8:	08018cd8 	.word	0x08018cd8

08012aec <rclc_action_send_result_request>:
 8012aec:	b1d0      	cbz	r0, 8012b24 <rclc_action_send_result_request+0x38>
 8012aee:	b500      	push	{lr}
 8012af0:	4684      	mov	ip, r0
 8012af2:	b087      	sub	sp, #28
 8012af4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012af8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012afc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012b00:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012b04:	f10d 0e08 	add.w	lr, sp, #8
 8012b08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b0c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012b10:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8012b14:	a902      	add	r1, sp, #8
 8012b16:	3010      	adds	r0, #16
 8012b18:	f7ff fbda 	bl	80122d0 <rcl_action_send_result_request>
 8012b1c:	b920      	cbnz	r0, 8012b28 <rclc_action_send_result_request+0x3c>
 8012b1e:	b007      	add	sp, #28
 8012b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b24:	200b      	movs	r0, #11
 8012b26:	4770      	bx	lr
 8012b28:	9001      	str	r0, [sp, #4]
 8012b2a:	f7fa f829 	bl	800cb80 <rcutils_reset_error>
 8012b2e:	9801      	ldr	r0, [sp, #4]
 8012b30:	b007      	add	sp, #28
 8012b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b36:	bf00      	nop

08012b38 <rclc_action_take_goal_handle>:
 8012b38:	b160      	cbz	r0, 8012b54 <rclc_action_take_goal_handle+0x1c>
 8012b3a:	6883      	ldr	r3, [r0, #8]
 8012b3c:	b143      	cbz	r3, 8012b50 <rclc_action_take_goal_handle+0x18>
 8012b3e:	6819      	ldr	r1, [r3, #0]
 8012b40:	6081      	str	r1, [r0, #8]
 8012b42:	2200      	movs	r2, #0
 8012b44:	721a      	strb	r2, [r3, #8]
 8012b46:	68c1      	ldr	r1, [r0, #12]
 8012b48:	6019      	str	r1, [r3, #0]
 8012b4a:	621a      	str	r2, [r3, #32]
 8012b4c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012b4e:	60c3      	str	r3, [r0, #12]
 8012b50:	4618      	mov	r0, r3
 8012b52:	4770      	bx	lr
 8012b54:	4603      	mov	r3, r0
 8012b56:	e7fb      	b.n	8012b50 <rclc_action_take_goal_handle+0x18>

08012b58 <rclc_action_remove_used_goal_handle>:
 8012b58:	b180      	cbz	r0, 8012b7c <rclc_action_remove_used_goal_handle+0x24>
 8012b5a:	b179      	cbz	r1, 8012b7c <rclc_action_remove_used_goal_handle+0x24>
 8012b5c:	68c3      	ldr	r3, [r0, #12]
 8012b5e:	4299      	cmp	r1, r3
 8012b60:	d00d      	beq.n	8012b7e <rclc_action_remove_used_goal_handle+0x26>
 8012b62:	b12b      	cbz	r3, 8012b70 <rclc_action_remove_used_goal_handle+0x18>
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	4291      	cmp	r1, r2
 8012b68:	d003      	beq.n	8012b72 <rclc_action_remove_used_goal_handle+0x1a>
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1f9      	bne.n	8012b64 <rclc_action_remove_used_goal_handle+0xc>
 8012b70:	4770      	bx	lr
 8012b72:	680a      	ldr	r2, [r1, #0]
 8012b74:	601a      	str	r2, [r3, #0]
 8012b76:	6883      	ldr	r3, [r0, #8]
 8012b78:	600b      	str	r3, [r1, #0]
 8012b7a:	6081      	str	r1, [r0, #8]
 8012b7c:	4770      	bx	lr
 8012b7e:	680b      	ldr	r3, [r1, #0]
 8012b80:	60c3      	str	r3, [r0, #12]
 8012b82:	e7f8      	b.n	8012b76 <rclc_action_remove_used_goal_handle+0x1e>

08012b84 <rclc_action_find_goal_handle_by_uuid>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	b180      	cbz	r0, 8012baa <rclc_action_find_goal_handle_by_uuid+0x26>
 8012b88:	460d      	mov	r5, r1
 8012b8a:	b181      	cbz	r1, 8012bae <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012b8c:	68c4      	ldr	r4, [r0, #12]
 8012b8e:	b914      	cbnz	r4, 8012b96 <rclc_action_find_goal_handle_by_uuid+0x12>
 8012b90:	e009      	b.n	8012ba6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012b92:	6824      	ldr	r4, [r4, #0]
 8012b94:	b13c      	cbz	r4, 8012ba6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012b96:	f104 0009 	add.w	r0, r4, #9
 8012b9a:	2210      	movs	r2, #16
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	f004 fd43 	bl	8017628 <memcmp>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	d1f5      	bne.n	8012b92 <rclc_action_find_goal_handle_by_uuid+0xe>
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	bd38      	pop	{r3, r4, r5, pc}
 8012baa:	4604      	mov	r4, r0
 8012bac:	e7fb      	b.n	8012ba6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012bae:	460c      	mov	r4, r1
 8012bb0:	e7f9      	b.n	8012ba6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8012bb2:	bf00      	nop

08012bb4 <rclc_action_find_first_handle_by_status>:
 8012bb4:	b140      	cbz	r0, 8012bc8 <rclc_action_find_first_handle_by_status+0x14>
 8012bb6:	68c0      	ldr	r0, [r0, #12]
 8012bb8:	b910      	cbnz	r0, 8012bc0 <rclc_action_find_first_handle_by_status+0xc>
 8012bba:	e005      	b.n	8012bc8 <rclc_action_find_first_handle_by_status+0x14>
 8012bbc:	6800      	ldr	r0, [r0, #0]
 8012bbe:	b118      	cbz	r0, 8012bc8 <rclc_action_find_first_handle_by_status+0x14>
 8012bc0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012bc4:	428b      	cmp	r3, r1
 8012bc6:	d1f9      	bne.n	8012bbc <rclc_action_find_first_handle_by_status+0x8>
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop

08012bcc <rclc_action_find_first_terminated_handle>:
 8012bcc:	b140      	cbz	r0, 8012be0 <rclc_action_find_first_terminated_handle+0x14>
 8012bce:	68c0      	ldr	r0, [r0, #12]
 8012bd0:	b910      	cbnz	r0, 8012bd8 <rclc_action_find_first_terminated_handle+0xc>
 8012bd2:	e005      	b.n	8012be0 <rclc_action_find_first_terminated_handle+0x14>
 8012bd4:	6800      	ldr	r0, [r0, #0]
 8012bd6:	b118      	cbz	r0, 8012be0 <rclc_action_find_first_terminated_handle+0x14>
 8012bd8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012bdc:	2b03      	cmp	r3, #3
 8012bde:	ddf9      	ble.n	8012bd4 <rclc_action_find_first_terminated_handle+0x8>
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop

08012be4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8012be4:	b170      	cbz	r0, 8012c04 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012be6:	68c0      	ldr	r0, [r0, #12]
 8012be8:	b160      	cbz	r0, 8012c04 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012bea:	b410      	push	{r4}
 8012bec:	e001      	b.n	8012bf2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012bee:	6800      	ldr	r0, [r0, #0]
 8012bf0:	b128      	cbz	r0, 8012bfe <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8012bf2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8012bf6:	4299      	cmp	r1, r3
 8012bf8:	bf08      	it	eq
 8012bfa:	4294      	cmpeq	r4, r2
 8012bfc:	d1f7      	bne.n	8012bee <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c02:	4770      	bx	lr
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop

08012c08 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012c08:	b170      	cbz	r0, 8012c28 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012c0a:	68c0      	ldr	r0, [r0, #12]
 8012c0c:	b160      	cbz	r0, 8012c28 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012c0e:	b410      	push	{r4}
 8012c10:	e001      	b.n	8012c16 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012c12:	6800      	ldr	r0, [r0, #0]
 8012c14:	b128      	cbz	r0, 8012c22 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012c16:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	bf08      	it	eq
 8012c1e:	4294      	cmpeq	r4, r2
 8012c20:	d1f7      	bne.n	8012c12 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop

08012c2c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012c2c:	b170      	cbz	r0, 8012c4c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012c2e:	68c0      	ldr	r0, [r0, #12]
 8012c30:	b160      	cbz	r0, 8012c4c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012c32:	b410      	push	{r4}
 8012c34:	e001      	b.n	8012c3a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012c36:	6800      	ldr	r0, [r0, #0]
 8012c38:	b128      	cbz	r0, 8012c46 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012c3a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012c3e:	4299      	cmp	r1, r3
 8012c40:	bf08      	it	eq
 8012c42:	4294      	cmpeq	r4, r2
 8012c44:	d1f7      	bne.n	8012c36 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c4a:	4770      	bx	lr
 8012c4c:	4770      	bx	lr
 8012c4e:	bf00      	nop

08012c50 <rclc_action_find_first_handle_with_goal_response>:
 8012c50:	b140      	cbz	r0, 8012c64 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012c52:	68c0      	ldr	r0, [r0, #12]
 8012c54:	b910      	cbnz	r0, 8012c5c <rclc_action_find_first_handle_with_goal_response+0xc>
 8012c56:	e005      	b.n	8012c64 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012c58:	6800      	ldr	r0, [r0, #0]
 8012c5a:	b118      	cbz	r0, 8012c64 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012c5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d0f9      	beq.n	8012c58 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop

08012c68 <rclc_action_find_first_handle_with_result_response>:
 8012c68:	b140      	cbz	r0, 8012c7c <rclc_action_find_first_handle_with_result_response+0x14>
 8012c6a:	68c0      	ldr	r0, [r0, #12]
 8012c6c:	b910      	cbnz	r0, 8012c74 <rclc_action_find_first_handle_with_result_response+0xc>
 8012c6e:	e005      	b.n	8012c7c <rclc_action_find_first_handle_with_result_response+0x14>
 8012c70:	6800      	ldr	r0, [r0, #0]
 8012c72:	b118      	cbz	r0, 8012c7c <rclc_action_find_first_handle_with_result_response+0x14>
 8012c74:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d0f9      	beq.n	8012c70 <rclc_action_find_first_handle_with_result_response+0x8>
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop

08012c80 <rclc_action_server_response_goal_request>:
 8012c80:	b198      	cbz	r0, 8012caa <rclc_action_server_response_goal_request+0x2a>
 8012c82:	b510      	push	{r4, lr}
 8012c84:	6844      	ldr	r4, [r0, #4]
 8012c86:	b086      	sub	sp, #24
 8012c88:	2200      	movs	r2, #0
 8012c8a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	9205      	str	r2, [sp, #20]
 8012c92:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8012c96:	aa03      	add	r2, sp, #12
 8012c98:	f104 0010 	add.w	r0, r4, #16
 8012c9c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012ca0:	f7ff fd4a 	bl	8012738 <rcl_action_send_goal_response>
 8012ca4:	b918      	cbnz	r0, 8012cae <rclc_action_server_response_goal_request+0x2e>
 8012ca6:	b006      	add	sp, #24
 8012ca8:	bd10      	pop	{r4, pc}
 8012caa:	200b      	movs	r0, #11
 8012cac:	4770      	bx	lr
 8012cae:	9001      	str	r0, [sp, #4]
 8012cb0:	f7f9 ff66 	bl	800cb80 <rcutils_reset_error>
 8012cb4:	9801      	ldr	r0, [sp, #4]
 8012cb6:	b006      	add	sp, #24
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	bf00      	nop
 8012cbc:	0000      	movs	r0, r0
	...

08012cc0 <rclc_action_server_goal_cancel_accept>:
 8012cc0:	b310      	cbz	r0, 8012d08 <rclc_action_server_goal_cancel_accept+0x48>
 8012cc2:	b510      	push	{r4, lr}
 8012cc4:	b090      	sub	sp, #64	@ 0x40
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	a806      	add	r0, sp, #24
 8012cca:	f7ff fefd 	bl	8012ac8 <rcl_action_get_zero_initialized_cancel_response>
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012cd4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012cd8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012cdc:	f88d 3018 	strb.w	r3, [sp, #24]
 8012ce0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012ce4:	f8cd d01c 	str.w	sp, [sp, #28]
 8012ce8:	46ec      	mov	ip, sp
 8012cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cee:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012d10 <rclc_action_server_goal_cancel_accept+0x50>
 8012cf2:	6860      	ldr	r0, [r4, #4]
 8012cf4:	aa06      	add	r2, sp, #24
 8012cf6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012cfa:	3010      	adds	r0, #16
 8012cfc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012d00:	f7ff fdd2 	bl	80128a8 <rcl_action_send_cancel_response>
 8012d04:	b010      	add	sp, #64	@ 0x40
 8012d06:	bd10      	pop	{r4, pc}
 8012d08:	200b      	movs	r0, #11
 8012d0a:	4770      	bx	lr
 8012d0c:	f3af 8000 	nop.w
 8012d10:	00000001 	.word	0x00000001
 8012d14:	00000001 	.word	0x00000001

08012d18 <rclc_action_server_goal_cancel_reject>:
 8012d18:	b082      	sub	sp, #8
 8012d1a:	b530      	push	{r4, r5, lr}
 8012d1c:	b08b      	sub	sp, #44	@ 0x2c
 8012d1e:	ac0e      	add	r4, sp, #56	@ 0x38
 8012d20:	e884 000c 	stmia.w	r4, {r2, r3}
 8012d24:	b188      	cbz	r0, 8012d4a <rclc_action_server_goal_cancel_reject+0x32>
 8012d26:	4604      	mov	r4, r0
 8012d28:	a801      	add	r0, sp, #4
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	f7ff fecc 	bl	8012ac8 <rcl_action_get_zero_initialized_cancel_response>
 8012d30:	aa01      	add	r2, sp, #4
 8012d32:	a90e      	add	r1, sp, #56	@ 0x38
 8012d34:	f104 0010 	add.w	r0, r4, #16
 8012d38:	f88d 5004 	strb.w	r5, [sp, #4]
 8012d3c:	f7ff fdb4 	bl	80128a8 <rcl_action_send_cancel_response>
 8012d40:	b00b      	add	sp, #44	@ 0x2c
 8012d42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d46:	b002      	add	sp, #8
 8012d48:	4770      	bx	lr
 8012d4a:	200b      	movs	r0, #11
 8012d4c:	b00b      	add	sp, #44	@ 0x2c
 8012d4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d52:	b002      	add	sp, #8
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop

08012d58 <__atomic_load_8>:
 8012d58:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012d5c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012d60:	4a15      	ldr	r2, [pc, #84]	@ (8012db8 <__atomic_load_8+0x60>)
 8012d62:	4b16      	ldr	r3, [pc, #88]	@ (8012dbc <__atomic_load_8+0x64>)
 8012d64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012d68:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012d6c:	fb02 f101 	mul.w	r1, r2, r1
 8012d70:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012d74:	fba3 2301 	umull	r2, r3, r3, r1
 8012d78:	091b      	lsrs	r3, r3, #4
 8012d7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012d7e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012d82:	b4d0      	push	{r4, r6, r7}
 8012d84:	4c0e      	ldr	r4, [pc, #56]	@ (8012dc0 <__atomic_load_8+0x68>)
 8012d86:	1ac9      	subs	r1, r1, r3
 8012d88:	1862      	adds	r2, r4, r1
 8012d8a:	f04f 0c01 	mov.w	ip, #1
 8012d8e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012d92:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012d96:	2e00      	cmp	r6, #0
 8012d98:	d1f9      	bne.n	8012d8e <__atomic_load_8+0x36>
 8012d9a:	f3bf 8f5b 	dmb	ish
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1f4      	bne.n	8012d8e <__atomic_load_8+0x36>
 8012da4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012da8:	f3bf 8f5b 	dmb	ish
 8012dac:	5463      	strb	r3, [r4, r1]
 8012dae:	4630      	mov	r0, r6
 8012db0:	4639      	mov	r1, r7
 8012db2:	bcd0      	pop	{r4, r6, r7}
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	27d4eb2d 	.word	0x27d4eb2d
 8012dbc:	b21642c9 	.word	0xb21642c9
 8012dc0:	2000dda8 	.word	0x2000dda8

08012dc4 <__atomic_store_8>:
 8012dc4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012dc8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012dd2:	4c14      	ldr	r4, [pc, #80]	@ (8012e24 <__atomic_store_8+0x60>)
 8012dd4:	4d14      	ldr	r5, [pc, #80]	@ (8012e28 <__atomic_store_8+0x64>)
 8012dd6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012dda:	fb04 f101 	mul.w	r1, r4, r1
 8012dde:	4c13      	ldr	r4, [pc, #76]	@ (8012e2c <__atomic_store_8+0x68>)
 8012de0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012de4:	fba4 4e01 	umull	r4, lr, r4, r1
 8012de8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012dec:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012df0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8012df4:	eba1 0e0e 	sub.w	lr, r1, lr
 8012df8:	eb05 0c0e 	add.w	ip, r5, lr
 8012dfc:	f04f 0401 	mov.w	r4, #1
 8012e00:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012e04:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012e08:	2e00      	cmp	r6, #0
 8012e0a:	d1f9      	bne.n	8012e00 <__atomic_store_8+0x3c>
 8012e0c:	f3bf 8f5b 	dmb	ish
 8012e10:	b2c9      	uxtb	r1, r1
 8012e12:	2900      	cmp	r1, #0
 8012e14:	d1f4      	bne.n	8012e00 <__atomic_store_8+0x3c>
 8012e16:	e9c0 2300 	strd	r2, r3, [r0]
 8012e1a:	f3bf 8f5b 	dmb	ish
 8012e1e:	f805 100e 	strb.w	r1, [r5, lr]
 8012e22:	bd70      	pop	{r4, r5, r6, pc}
 8012e24:	27d4eb2d 	.word	0x27d4eb2d
 8012e28:	2000dda8 	.word	0x2000dda8
 8012e2c:	b21642c9 	.word	0xb21642c9

08012e30 <__atomic_exchange_8>:
 8012e30:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012e34:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012e38:	4916      	ldr	r1, [pc, #88]	@ (8012e94 <__atomic_exchange_8+0x64>)
 8012e3a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012e3e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012e42:	fb01 fc0c 	mul.w	ip, r1, ip
 8012e46:	4914      	ldr	r1, [pc, #80]	@ (8012e98 <__atomic_exchange_8+0x68>)
 8012e48:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	4605      	mov	r5, r0
 8012e50:	fba1 010c 	umull	r0, r1, r1, ip
 8012e54:	0909      	lsrs	r1, r1, #4
 8012e56:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012e5a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8012e9c <__atomic_exchange_8+0x6c>)
 8012e60:	ebac 0c01 	sub.w	ip, ip, r1
 8012e64:	eb06 010c 	add.w	r1, r6, ip
 8012e68:	f04f 0e01 	mov.w	lr, #1
 8012e6c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012e70:	e8c1 ef40 	strexb	r0, lr, [r1]
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d1f9      	bne.n	8012e6c <__atomic_exchange_8+0x3c>
 8012e78:	f3bf 8f5b 	dmb	ish
 8012e7c:	b2e4      	uxtb	r4, r4
 8012e7e:	2c00      	cmp	r4, #0
 8012e80:	d1f4      	bne.n	8012e6c <__atomic_exchange_8+0x3c>
 8012e82:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012e86:	e9c5 2300 	strd	r2, r3, [r5]
 8012e8a:	f3bf 8f5b 	dmb	ish
 8012e8e:	f806 400c 	strb.w	r4, [r6, ip]
 8012e92:	bd70      	pop	{r4, r5, r6, pc}
 8012e94:	27d4eb2d 	.word	0x27d4eb2d
 8012e98:	b21642c9 	.word	0xb21642c9
 8012e9c:	2000dda8 	.word	0x2000dda8

08012ea0 <rcutils_get_env>:
 8012ea0:	b168      	cbz	r0, 8012ebe <rcutils_get_env+0x1e>
 8012ea2:	b510      	push	{r4, lr}
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	b129      	cbz	r1, 8012eb4 <rcutils_get_env+0x14>
 8012ea8:	f004 f81a 	bl	8016ee0 <getenv>
 8012eac:	b120      	cbz	r0, 8012eb8 <rcutils_get_env+0x18>
 8012eae:	6020      	str	r0, [r4, #0]
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	bd10      	pop	{r4, pc}
 8012eb4:	4803      	ldr	r0, [pc, #12]	@ (8012ec4 <rcutils_get_env+0x24>)
 8012eb6:	bd10      	pop	{r4, pc}
 8012eb8:	4b03      	ldr	r3, [pc, #12]	@ (8012ec8 <rcutils_get_env+0x28>)
 8012eba:	6023      	str	r3, [r4, #0]
 8012ebc:	bd10      	pop	{r4, pc}
 8012ebe:	4803      	ldr	r0, [pc, #12]	@ (8012ecc <rcutils_get_env+0x2c>)
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	08018d18 	.word	0x08018d18
 8012ec8:	08018e3c 	.word	0x08018e3c
 8012ecc:	08018cfc 	.word	0x08018cfc

08012ed0 <rcutils_format_string_limit>:
 8012ed0:	b40f      	push	{r0, r1, r2, r3}
 8012ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ed4:	b083      	sub	sp, #12
 8012ed6:	ac08      	add	r4, sp, #32
 8012ed8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012ede:	b34e      	cbz	r6, 8012f34 <rcutils_format_string_limit+0x64>
 8012ee0:	a808      	add	r0, sp, #32
 8012ee2:	f7f9 fe29 	bl	800cb38 <rcutils_allocator_is_valid>
 8012ee6:	b328      	cbz	r0, 8012f34 <rcutils_format_string_limit+0x64>
 8012ee8:	2100      	movs	r1, #0
 8012eea:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012eec:	4632      	mov	r2, r6
 8012eee:	4608      	mov	r0, r1
 8012ef0:	e9cd 3300 	strd	r3, r3, [sp]
 8012ef4:	f000 f8f4 	bl	80130e0 <rcutils_vsnprintf>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	4605      	mov	r5, r0
 8012efc:	d01a      	beq.n	8012f34 <rcutils_format_string_limit+0x64>
 8012efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012f02:	1c47      	adds	r7, r0, #1
 8012f04:	429f      	cmp	r7, r3
 8012f06:	bf84      	itt	hi
 8012f08:	461f      	movhi	r7, r3
 8012f0a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012f0e:	4638      	mov	r0, r7
 8012f10:	9b08      	ldr	r3, [sp, #32]
 8012f12:	4798      	blx	r3
 8012f14:	4604      	mov	r4, r0
 8012f16:	b168      	cbz	r0, 8012f34 <rcutils_format_string_limit+0x64>
 8012f18:	9b01      	ldr	r3, [sp, #4]
 8012f1a:	4632      	mov	r2, r6
 8012f1c:	4639      	mov	r1, r7
 8012f1e:	f000 f8df 	bl	80130e0 <rcutils_vsnprintf>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	db02      	blt.n	8012f2c <rcutils_format_string_limit+0x5c>
 8012f26:	2300      	movs	r3, #0
 8012f28:	5563      	strb	r3, [r4, r5]
 8012f2a:	e004      	b.n	8012f36 <rcutils_format_string_limit+0x66>
 8012f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012f30:	4620      	mov	r0, r4
 8012f32:	4798      	blx	r3
 8012f34:	2400      	movs	r4, #0
 8012f36:	4620      	mov	r0, r4
 8012f38:	b003      	add	sp, #12
 8012f3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f3e:	b004      	add	sp, #16
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop

08012f44 <rcutils_repl_str>:
 8012f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f48:	ed2d 8b02 	vpush	{d8}
 8012f4c:	b087      	sub	sp, #28
 8012f4e:	4680      	mov	r8, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	f8cd 8004 	str.w	r8, [sp, #4]
 8012f56:	ee08 2a10 	vmov	s16, r2
 8012f5a:	468a      	mov	sl, r1
 8012f5c:	4699      	mov	r9, r3
 8012f5e:	f7ed f961 	bl	8000224 <strlen>
 8012f62:	2600      	movs	r6, #0
 8012f64:	4647      	mov	r7, r8
 8012f66:	9002      	str	r0, [sp, #8]
 8012f68:	46b3      	mov	fp, r6
 8012f6a:	2510      	movs	r5, #16
 8012f6c:	46b0      	mov	r8, r6
 8012f6e:	e01d      	b.n	8012fac <rcutils_repl_str+0x68>
 8012f70:	f10b 0b01 	add.w	fp, fp, #1
 8012f74:	455e      	cmp	r6, fp
 8012f76:	d211      	bcs.n	8012f9c <rcutils_repl_str+0x58>
 8012f78:	442e      	add	r6, r5
 8012f7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012f7e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012f82:	00b1      	lsls	r1, r6, #2
 8012f84:	4798      	blx	r3
 8012f86:	2800      	cmp	r0, #0
 8012f88:	f000 8088 	beq.w	801309c <rcutils_repl_str+0x158>
 8012f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f90:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012f94:	4680      	mov	r8, r0
 8012f96:	bf28      	it	cs
 8012f98:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012f9c:	9a01      	ldr	r2, [sp, #4]
 8012f9e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012fa2:	1aa2      	subs	r2, r4, r2
 8012fa4:	f843 2c04 	str.w	r2, [r3, #-4]
 8012fa8:	9b02      	ldr	r3, [sp, #8]
 8012faa:	18e7      	adds	r7, r4, r3
 8012fac:	4651      	mov	r1, sl
 8012fae:	4638      	mov	r0, r7
 8012fb0:	f004 fb8b 	bl	80176ca <strstr>
 8012fb4:	4604      	mov	r4, r0
 8012fb6:	4640      	mov	r0, r8
 8012fb8:	2c00      	cmp	r4, #0
 8012fba:	d1d9      	bne.n	8012f70 <rcutils_repl_str+0x2c>
 8012fbc:	46b8      	mov	r8, r7
 8012fbe:	4607      	mov	r7, r0
 8012fc0:	4640      	mov	r0, r8
 8012fc2:	f7ed f92f 	bl	8000224 <strlen>
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	eba8 0303 	sub.w	r3, r8, r3
 8012fcc:	181c      	adds	r4, r3, r0
 8012fce:	9404      	str	r4, [sp, #16]
 8012fd0:	f1bb 0f00 	cmp.w	fp, #0
 8012fd4:	d04a      	beq.n	801306c <rcutils_repl_str+0x128>
 8012fd6:	ee18 0a10 	vmov	r0, s16
 8012fda:	f7ed f923 	bl	8000224 <strlen>
 8012fde:	9b02      	ldr	r3, [sp, #8]
 8012fe0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012fe4:	1ac3      	subs	r3, r0, r3
 8012fe6:	fb0b 4303 	mla	r3, fp, r3, r4
 8012fea:	461a      	mov	r2, r3
 8012fec:	9305      	str	r3, [sp, #20]
 8012fee:	4606      	mov	r6, r0
 8012ff0:	f8d9 3000 	ldr.w	r3, [r9]
 8012ff4:	1c50      	adds	r0, r2, #1
 8012ff6:	4798      	blx	r3
 8012ff8:	9003      	str	r0, [sp, #12]
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	d04f      	beq.n	801309e <rcutils_repl_str+0x15a>
 8012ffe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013002:	683a      	ldr	r2, [r7, #0]
 8013004:	4641      	mov	r1, r8
 8013006:	f004 fc02 	bl	801780e <memcpy>
 801300a:	683d      	ldr	r5, [r7, #0]
 801300c:	9b03      	ldr	r3, [sp, #12]
 801300e:	9701      	str	r7, [sp, #4]
 8013010:	46ba      	mov	sl, r7
 8013012:	441d      	add	r5, r3
 8013014:	9f02      	ldr	r7, [sp, #8]
 8013016:	f8cd 9008 	str.w	r9, [sp, #8]
 801301a:	2401      	movs	r4, #1
 801301c:	46d1      	mov	r9, sl
 801301e:	ee18 aa10 	vmov	sl, s16
 8013022:	e00a      	b.n	801303a <rcutils_repl_str+0xf6>
 8013024:	f8d9 5000 	ldr.w	r5, [r9]
 8013028:	1aaa      	subs	r2, r5, r2
 801302a:	1885      	adds	r5, r0, r2
 801302c:	f004 fbef 	bl	801780e <memcpy>
 8013030:	45a3      	cmp	fp, r4
 8013032:	f104 0201 	add.w	r2, r4, #1
 8013036:	d935      	bls.n	80130a4 <rcutils_repl_str+0x160>
 8013038:	4614      	mov	r4, r2
 801303a:	4632      	mov	r2, r6
 801303c:	4651      	mov	r1, sl
 801303e:	4628      	mov	r0, r5
 8013040:	f004 fbe5 	bl	801780e <memcpy>
 8013044:	f859 2b04 	ldr.w	r2, [r9], #4
 8013048:	45a3      	cmp	fp, r4
 801304a:	443a      	add	r2, r7
 801304c:	eb05 0006 	add.w	r0, r5, r6
 8013050:	eb08 0102 	add.w	r1, r8, r2
 8013054:	d1e6      	bne.n	8013024 <rcutils_repl_str+0xe0>
 8013056:	9b04      	ldr	r3, [sp, #16]
 8013058:	1a9a      	subs	r2, r3, r2
 801305a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801305e:	f004 fbd6 	bl	801780e <memcpy>
 8013062:	9a03      	ldr	r2, [sp, #12]
 8013064:	9905      	ldr	r1, [sp, #20]
 8013066:	2300      	movs	r3, #0
 8013068:	5453      	strb	r3, [r2, r1]
 801306a:	e00b      	b.n	8013084 <rcutils_repl_str+0x140>
 801306c:	4620      	mov	r0, r4
 801306e:	f8d9 3000 	ldr.w	r3, [r9]
 8013072:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013076:	3001      	adds	r0, #1
 8013078:	4798      	blx	r3
 801307a:	9003      	str	r0, [sp, #12]
 801307c:	b110      	cbz	r0, 8013084 <rcutils_repl_str+0x140>
 801307e:	9901      	ldr	r1, [sp, #4]
 8013080:	f004 fbbd 	bl	80177fe <strcpy>
 8013084:	4638      	mov	r0, r7
 8013086:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801308a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801308e:	4798      	blx	r3
 8013090:	9803      	ldr	r0, [sp, #12]
 8013092:	b007      	add	sp, #28
 8013094:	ecbd 8b02 	vpop	{d8}
 8013098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309c:	4647      	mov	r7, r8
 801309e:	2300      	movs	r3, #0
 80130a0:	9303      	str	r3, [sp, #12]
 80130a2:	e7ef      	b.n	8013084 <rcutils_repl_str+0x140>
 80130a4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80130a8:	e7db      	b.n	8013062 <rcutils_repl_str+0x11e>
 80130aa:	bf00      	nop

080130ac <rcutils_snprintf>:
 80130ac:	b40c      	push	{r2, r3}
 80130ae:	b530      	push	{r4, r5, lr}
 80130b0:	b083      	sub	sp, #12
 80130b2:	ab06      	add	r3, sp, #24
 80130b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80130b8:	9301      	str	r3, [sp, #4]
 80130ba:	b152      	cbz	r2, 80130d2 <rcutils_snprintf+0x26>
 80130bc:	b138      	cbz	r0, 80130ce <rcutils_snprintf+0x22>
 80130be:	b141      	cbz	r1, 80130d2 <rcutils_snprintf+0x26>
 80130c0:	f004 faa4 	bl	801760c <vsniprintf>
 80130c4:	b003      	add	sp, #12
 80130c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130ca:	b002      	add	sp, #8
 80130cc:	4770      	bx	lr
 80130ce:	2900      	cmp	r1, #0
 80130d0:	d0f6      	beq.n	80130c0 <rcutils_snprintf+0x14>
 80130d2:	f004 fb67 	bl	80177a4 <__errno>
 80130d6:	2316      	movs	r3, #22
 80130d8:	6003      	str	r3, [r0, #0]
 80130da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130de:	e7f1      	b.n	80130c4 <rcutils_snprintf+0x18>

080130e0 <rcutils_vsnprintf>:
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	b13a      	cbz	r2, 80130f4 <rcutils_vsnprintf+0x14>
 80130e4:	b120      	cbz	r0, 80130f0 <rcutils_vsnprintf+0x10>
 80130e6:	b129      	cbz	r1, 80130f4 <rcutils_vsnprintf+0x14>
 80130e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130ec:	f004 ba8e 	b.w	801760c <vsniprintf>
 80130f0:	2900      	cmp	r1, #0
 80130f2:	d0f9      	beq.n	80130e8 <rcutils_vsnprintf+0x8>
 80130f4:	f004 fb56 	bl	80177a4 <__errno>
 80130f8:	2316      	movs	r3, #22
 80130fa:	6003      	str	r3, [r0, #0]
 80130fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013100:	bd70      	pop	{r4, r5, r6, pc}
 8013102:	bf00      	nop

08013104 <rcutils_strdup>:
 8013104:	b084      	sub	sp, #16
 8013106:	b570      	push	{r4, r5, r6, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	ac07      	add	r4, sp, #28
 801310c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013110:	4605      	mov	r5, r0
 8013112:	b1b0      	cbz	r0, 8013142 <rcutils_strdup+0x3e>
 8013114:	f7ed f886 	bl	8000224 <strlen>
 8013118:	1c42      	adds	r2, r0, #1
 801311a:	9b07      	ldr	r3, [sp, #28]
 801311c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801311e:	9201      	str	r2, [sp, #4]
 8013120:	4606      	mov	r6, r0
 8013122:	4610      	mov	r0, r2
 8013124:	4798      	blx	r3
 8013126:	4604      	mov	r4, r0
 8013128:	b128      	cbz	r0, 8013136 <rcutils_strdup+0x32>
 801312a:	9a01      	ldr	r2, [sp, #4]
 801312c:	4629      	mov	r1, r5
 801312e:	f004 fb6e 	bl	801780e <memcpy>
 8013132:	2300      	movs	r3, #0
 8013134:	55a3      	strb	r3, [r4, r6]
 8013136:	4620      	mov	r0, r4
 8013138:	b002      	add	sp, #8
 801313a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801313e:	b004      	add	sp, #16
 8013140:	4770      	bx	lr
 8013142:	4604      	mov	r4, r0
 8013144:	e7f7      	b.n	8013136 <rcutils_strdup+0x32>
 8013146:	bf00      	nop

08013148 <rcutils_strndup>:
 8013148:	b082      	sub	sp, #8
 801314a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314c:	ac06      	add	r4, sp, #24
 801314e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013152:	4605      	mov	r5, r0
 8013154:	b188      	cbz	r0, 801317a <rcutils_strndup+0x32>
 8013156:	1c4f      	adds	r7, r1, #1
 8013158:	460e      	mov	r6, r1
 801315a:	4638      	mov	r0, r7
 801315c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801315e:	4790      	blx	r2
 8013160:	4604      	mov	r4, r0
 8013162:	b128      	cbz	r0, 8013170 <rcutils_strndup+0x28>
 8013164:	463a      	mov	r2, r7
 8013166:	4629      	mov	r1, r5
 8013168:	f004 fb51 	bl	801780e <memcpy>
 801316c:	2300      	movs	r3, #0
 801316e:	55a3      	strb	r3, [r4, r6]
 8013170:	4620      	mov	r0, r4
 8013172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013176:	b002      	add	sp, #8
 8013178:	4770      	bx	lr
 801317a:	4604      	mov	r4, r0
 801317c:	e7f8      	b.n	8013170 <rcutils_strndup+0x28>
 801317e:	bf00      	nop

08013180 <rcutils_get_zero_initialized_string_map>:
 8013180:	4b01      	ldr	r3, [pc, #4]	@ (8013188 <rcutils_get_zero_initialized_string_map+0x8>)
 8013182:	2000      	movs	r0, #0
 8013184:	6018      	str	r0, [r3, #0]
 8013186:	4770      	bx	lr
 8013188:	2000ddc0 	.word	0x2000ddc0

0801318c <rcutils_string_map_reserve>:
 801318c:	2800      	cmp	r0, #0
 801318e:	d05f      	beq.n	8013250 <rcutils_string_map_reserve+0xc4>
 8013190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013194:	460c      	mov	r4, r1
 8013196:	6801      	ldr	r1, [r0, #0]
 8013198:	b082      	sub	sp, #8
 801319a:	4605      	mov	r5, r0
 801319c:	b129      	cbz	r1, 80131aa <rcutils_string_map_reserve+0x1e>
 801319e:	68cb      	ldr	r3, [r1, #12]
 80131a0:	42a3      	cmp	r3, r4
 80131a2:	d906      	bls.n	80131b2 <rcutils_string_map_reserve+0x26>
 80131a4:	461c      	mov	r4, r3
 80131a6:	2900      	cmp	r1, #0
 80131a8:	d1f9      	bne.n	801319e <rcutils_string_map_reserve+0x12>
 80131aa:	201f      	movs	r0, #31
 80131ac:	b002      	add	sp, #8
 80131ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b2:	688b      	ldr	r3, [r1, #8]
 80131b4:	42a3      	cmp	r3, r4
 80131b6:	d047      	beq.n	8013248 <rcutils_string_map_reserve+0xbc>
 80131b8:	6a0e      	ldr	r6, [r1, #32]
 80131ba:	2c00      	cmp	r4, #0
 80131bc:	d034      	beq.n	8013228 <rcutils_string_map_reserve+0x9c>
 80131be:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80131c2:	d243      	bcs.n	801324c <rcutils_string_map_reserve+0xc0>
 80131c4:	00a7      	lsls	r7, r4, #2
 80131c6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80131ca:	6808      	ldr	r0, [r1, #0]
 80131cc:	4632      	mov	r2, r6
 80131ce:	4639      	mov	r1, r7
 80131d0:	47c0      	blx	r8
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d03a      	beq.n	801324c <rcutils_string_map_reserve+0xc0>
 80131d6:	682b      	ldr	r3, [r5, #0]
 80131d8:	4632      	mov	r2, r6
 80131da:	6018      	str	r0, [r3, #0]
 80131dc:	4639      	mov	r1, r7
 80131de:	6858      	ldr	r0, [r3, #4]
 80131e0:	47c0      	blx	r8
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d032      	beq.n	801324c <rcutils_string_map_reserve+0xc0>
 80131e6:	682d      	ldr	r5, [r5, #0]
 80131e8:	68ab      	ldr	r3, [r5, #8]
 80131ea:	6068      	str	r0, [r5, #4]
 80131ec:	42a3      	cmp	r3, r4
 80131ee:	d226      	bcs.n	801323e <rcutils_string_map_reserve+0xb2>
 80131f0:	682a      	ldr	r2, [r5, #0]
 80131f2:	eb00 0c07 	add.w	ip, r0, r7
 80131f6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80131fa:	45e6      	cmp	lr, ip
 80131fc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013200:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013204:	d203      	bcs.n	801320e <rcutils_string_map_reserve+0x82>
 8013206:	eb02 0c07 	add.w	ip, r2, r7
 801320a:	4566      	cmp	r6, ip
 801320c:	d322      	bcc.n	8013254 <rcutils_string_map_reserve+0xc8>
 801320e:	1ae3      	subs	r3, r4, r3
 8013210:	009a      	lsls	r2, r3, #2
 8013212:	4670      	mov	r0, lr
 8013214:	2100      	movs	r1, #0
 8013216:	9201      	str	r2, [sp, #4]
 8013218:	f004 fa30 	bl	801767c <memset>
 801321c:	9a01      	ldr	r2, [sp, #4]
 801321e:	2100      	movs	r1, #0
 8013220:	4630      	mov	r0, r6
 8013222:	f004 fa2b 	bl	801767c <memset>
 8013226:	e00a      	b.n	801323e <rcutils_string_map_reserve+0xb2>
 8013228:	694f      	ldr	r7, [r1, #20]
 801322a:	6808      	ldr	r0, [r1, #0]
 801322c:	4631      	mov	r1, r6
 801322e:	47b8      	blx	r7
 8013230:	682b      	ldr	r3, [r5, #0]
 8013232:	4631      	mov	r1, r6
 8013234:	6858      	ldr	r0, [r3, #4]
 8013236:	601c      	str	r4, [r3, #0]
 8013238:	47b8      	blx	r7
 801323a:	682d      	ldr	r5, [r5, #0]
 801323c:	606c      	str	r4, [r5, #4]
 801323e:	2000      	movs	r0, #0
 8013240:	60ac      	str	r4, [r5, #8]
 8013242:	b002      	add	sp, #8
 8013244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013248:	2000      	movs	r0, #0
 801324a:	e7af      	b.n	80131ac <rcutils_string_map_reserve+0x20>
 801324c:	200a      	movs	r0, #10
 801324e:	e7ad      	b.n	80131ac <rcutils_string_map_reserve+0x20>
 8013250:	200b      	movs	r0, #11
 8013252:	4770      	bx	lr
 8013254:	1f0b      	subs	r3, r1, #4
 8013256:	4418      	add	r0, r3
 8013258:	4413      	add	r3, r2
 801325a:	3a04      	subs	r2, #4
 801325c:	4417      	add	r7, r2
 801325e:	2200      	movs	r2, #0
 8013260:	f843 2f04 	str.w	r2, [r3, #4]!
 8013264:	42bb      	cmp	r3, r7
 8013266:	f840 2f04 	str.w	r2, [r0, #4]!
 801326a:	d1f9      	bne.n	8013260 <rcutils_string_map_reserve+0xd4>
 801326c:	e7e7      	b.n	801323e <rcutils_string_map_reserve+0xb2>
 801326e:	bf00      	nop

08013270 <rcutils_string_map_init>:
 8013270:	b082      	sub	sp, #8
 8013272:	b570      	push	{r4, r5, r6, lr}
 8013274:	ac04      	add	r4, sp, #16
 8013276:	e884 000c 	stmia.w	r4, {r2, r3}
 801327a:	b380      	cbz	r0, 80132de <rcutils_string_map_init+0x6e>
 801327c:	6806      	ldr	r6, [r0, #0]
 801327e:	4604      	mov	r4, r0
 8013280:	b12e      	cbz	r6, 801328e <rcutils_string_map_init+0x1e>
 8013282:	251e      	movs	r5, #30
 8013284:	4628      	mov	r0, r5
 8013286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801328a:	b002      	add	sp, #8
 801328c:	4770      	bx	lr
 801328e:	a804      	add	r0, sp, #16
 8013290:	460d      	mov	r5, r1
 8013292:	f7f9 fc51 	bl	800cb38 <rcutils_allocator_is_valid>
 8013296:	b310      	cbz	r0, 80132de <rcutils_string_map_init+0x6e>
 8013298:	9b04      	ldr	r3, [sp, #16]
 801329a:	9908      	ldr	r1, [sp, #32]
 801329c:	2024      	movs	r0, #36	@ 0x24
 801329e:	4798      	blx	r3
 80132a0:	6020      	str	r0, [r4, #0]
 80132a2:	b310      	cbz	r0, 80132ea <rcutils_string_map_init+0x7a>
 80132a4:	f10d 0e10 	add.w	lr, sp, #16
 80132a8:	e9c0 6600 	strd	r6, r6, [r0]
 80132ac:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80132b0:	f100 0c10 	add.w	ip, r0, #16
 80132b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132bc:	f8de 3000 	ldr.w	r3, [lr]
 80132c0:	f8cc 3000 	str.w	r3, [ip]
 80132c4:	4629      	mov	r1, r5
 80132c6:	4620      	mov	r0, r4
 80132c8:	f7ff ff60 	bl	801318c <rcutils_string_map_reserve>
 80132cc:	4605      	mov	r5, r0
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d0d8      	beq.n	8013284 <rcutils_string_map_init+0x14>
 80132d2:	9b05      	ldr	r3, [sp, #20]
 80132d4:	9908      	ldr	r1, [sp, #32]
 80132d6:	6820      	ldr	r0, [r4, #0]
 80132d8:	4798      	blx	r3
 80132da:	6026      	str	r6, [r4, #0]
 80132dc:	e7d2      	b.n	8013284 <rcutils_string_map_init+0x14>
 80132de:	250b      	movs	r5, #11
 80132e0:	4628      	mov	r0, r5
 80132e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132e6:	b002      	add	sp, #8
 80132e8:	4770      	bx	lr
 80132ea:	250a      	movs	r5, #10
 80132ec:	e7ca      	b.n	8013284 <rcutils_string_map_init+0x14>
 80132ee:	bf00      	nop

080132f0 <rcutils_string_map_fini>:
 80132f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f4:	b082      	sub	sp, #8
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d03a      	beq.n	8013370 <rcutils_string_map_fini+0x80>
 80132fa:	6804      	ldr	r4, [r0, #0]
 80132fc:	4606      	mov	r6, r0
 80132fe:	2c00      	cmp	r4, #0
 8013300:	d032      	beq.n	8013368 <rcutils_string_map_fini+0x78>
 8013302:	68a3      	ldr	r3, [r4, #8]
 8013304:	b32b      	cbz	r3, 8013352 <rcutils_string_map_fini+0x62>
 8013306:	2500      	movs	r5, #0
 8013308:	6822      	ldr	r2, [r4, #0]
 801330a:	462f      	mov	r7, r5
 801330c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013310:	b1e0      	cbz	r0, 801334c <rcutils_string_map_fini+0x5c>
 8013312:	6a21      	ldr	r1, [r4, #32]
 8013314:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8013318:	9101      	str	r1, [sp, #4]
 801331a:	47c0      	blx	r8
 801331c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013320:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013324:	9901      	ldr	r1, [sp, #4]
 8013326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801332a:	47c0      	blx	r8
 801332c:	68e3      	ldr	r3, [r4, #12]
 801332e:	6862      	ldr	r2, [r4, #4]
 8013330:	3b01      	subs	r3, #1
 8013332:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013336:	60e3      	str	r3, [r4, #12]
 8013338:	6834      	ldr	r4, [r6, #0]
 801333a:	68a3      	ldr	r3, [r4, #8]
 801333c:	3501      	adds	r5, #1
 801333e:	429d      	cmp	r5, r3
 8013340:	d207      	bcs.n	8013352 <rcutils_string_map_fini+0x62>
 8013342:	6822      	ldr	r2, [r4, #0]
 8013344:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013348:	2800      	cmp	r0, #0
 801334a:	d1e2      	bne.n	8013312 <rcutils_string_map_fini+0x22>
 801334c:	3501      	adds	r5, #1
 801334e:	429d      	cmp	r5, r3
 8013350:	d3dc      	bcc.n	801330c <rcutils_string_map_fini+0x1c>
 8013352:	2100      	movs	r1, #0
 8013354:	4630      	mov	r0, r6
 8013356:	f7ff ff19 	bl	801318c <rcutils_string_map_reserve>
 801335a:	4604      	mov	r4, r0
 801335c:	b920      	cbnz	r0, 8013368 <rcutils_string_map_fini+0x78>
 801335e:	6830      	ldr	r0, [r6, #0]
 8013360:	6943      	ldr	r3, [r0, #20]
 8013362:	6a01      	ldr	r1, [r0, #32]
 8013364:	4798      	blx	r3
 8013366:	6034      	str	r4, [r6, #0]
 8013368:	4620      	mov	r0, r4
 801336a:	b002      	add	sp, #8
 801336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013370:	240b      	movs	r4, #11
 8013372:	4620      	mov	r0, r4
 8013374:	b002      	add	sp, #8
 8013376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337a:	bf00      	nop

0801337c <rcutils_string_map_getn>:
 801337c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013380:	b300      	cbz	r0, 80133c4 <rcutils_string_map_getn+0x48>
 8013382:	6807      	ldr	r7, [r0, #0]
 8013384:	b1ff      	cbz	r7, 80133c6 <rcutils_string_map_getn+0x4a>
 8013386:	4688      	mov	r8, r1
 8013388:	b1e1      	cbz	r1, 80133c4 <rcutils_string_map_getn+0x48>
 801338a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801338e:	683e      	ldr	r6, [r7, #0]
 8013390:	f1ba 0f00 	cmp.w	sl, #0
 8013394:	d016      	beq.n	80133c4 <rcutils_string_map_getn+0x48>
 8013396:	4691      	mov	r9, r2
 8013398:	3e04      	subs	r6, #4
 801339a:	2400      	movs	r4, #0
 801339c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80133a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80133a4:	4628      	mov	r0, r5
 80133a6:	3401      	adds	r4, #1
 80133a8:	b155      	cbz	r5, 80133c0 <rcutils_string_map_getn+0x44>
 80133aa:	f7ec ff3b 	bl	8000224 <strlen>
 80133ae:	4548      	cmp	r0, r9
 80133b0:	4602      	mov	r2, r0
 80133b2:	4629      	mov	r1, r5
 80133b4:	bf38      	it	cc
 80133b6:	464a      	movcc	r2, r9
 80133b8:	4640      	mov	r0, r8
 80133ba:	f004 f974 	bl	80176a6 <strncmp>
 80133be:	b128      	cbz	r0, 80133cc <rcutils_string_map_getn+0x50>
 80133c0:	45a2      	cmp	sl, r4
 80133c2:	d1eb      	bne.n	801339c <rcutils_string_map_getn+0x20>
 80133c4:	2700      	movs	r7, #0
 80133c6:	4638      	mov	r0, r7
 80133c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f853 700b 	ldr.w	r7, [r3, fp]
 80133d2:	4638      	mov	r0, r7
 80133d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133d8 <rmw_get_zero_initialized_context>:
 80133d8:	b510      	push	{r4, lr}
 80133da:	4604      	mov	r4, r0
 80133dc:	3010      	adds	r0, #16
 80133de:	f000 f80b 	bl	80133f8 <rmw_get_zero_initialized_init_options>
 80133e2:	2300      	movs	r3, #0
 80133e4:	2000      	movs	r0, #0
 80133e6:	2100      	movs	r1, #0
 80133e8:	e9c4 0100 	strd	r0, r1, [r4]
 80133ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80133f0:	60a3      	str	r3, [r4, #8]
 80133f2:	4620      	mov	r0, r4
 80133f4:	bd10      	pop	{r4, pc}
 80133f6:	bf00      	nop

080133f8 <rmw_get_zero_initialized_init_options>:
 80133f8:	b510      	push	{r4, lr}
 80133fa:	2238      	movs	r2, #56	@ 0x38
 80133fc:	4604      	mov	r4, r0
 80133fe:	2100      	movs	r1, #0
 8013400:	f004 f93c 	bl	801767c <memset>
 8013404:	f104 0010 	add.w	r0, r4, #16
 8013408:	f000 f806 	bl	8013418 <rmw_get_default_security_options>
 801340c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013410:	60e3      	str	r3, [r4, #12]
 8013412:	4620      	mov	r0, r4
 8013414:	bd10      	pop	{r4, pc}
 8013416:	bf00      	nop

08013418 <rmw_get_default_security_options>:
 8013418:	2200      	movs	r2, #0
 801341a:	7002      	strb	r2, [r0, #0]
 801341c:	6042      	str	r2, [r0, #4]
 801341e:	4770      	bx	lr

08013420 <rmw_subscription_content_filter_options_fini>:
 8013420:	b1b0      	cbz	r0, 8013450 <rmw_subscription_content_filter_options_fini+0x30>
 8013422:	b538      	push	{r3, r4, r5, lr}
 8013424:	4604      	mov	r4, r0
 8013426:	4608      	mov	r0, r1
 8013428:	460d      	mov	r5, r1
 801342a:	f7f9 fb85 	bl	800cb38 <rcutils_allocator_is_valid>
 801342e:	b168      	cbz	r0, 801344c <rmw_subscription_content_filter_options_fini+0x2c>
 8013430:	6820      	ldr	r0, [r4, #0]
 8013432:	b120      	cbz	r0, 801343e <rmw_subscription_content_filter_options_fini+0x1e>
 8013434:	686b      	ldr	r3, [r5, #4]
 8013436:	6929      	ldr	r1, [r5, #16]
 8013438:	4798      	blx	r3
 801343a:	2300      	movs	r3, #0
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	1d20      	adds	r0, r4, #4
 8013440:	f003 fbfa 	bl	8016c38 <rcutils_string_array_fini>
 8013444:	3800      	subs	r0, #0
 8013446:	bf18      	it	ne
 8013448:	2001      	movne	r0, #1
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	200b      	movs	r0, #11
 801344e:	bd38      	pop	{r3, r4, r5, pc}
 8013450:	200b      	movs	r0, #11
 8013452:	4770      	bx	lr

08013454 <rmw_get_default_subscription_options>:
 8013454:	2200      	movs	r2, #0
 8013456:	e9c0 2200 	strd	r2, r2, [r0]
 801345a:	6082      	str	r2, [r0, #8]
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop

08013460 <rmw_time_equal>:
 8013460:	b4f0      	push	{r4, r5, r6, r7}
 8013462:	b084      	sub	sp, #16
 8013464:	ac04      	add	r4, sp, #16
 8013466:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801346a:	4603      	mov	r3, r0
 801346c:	4924      	ldr	r1, [pc, #144]	@ (8013500 <rmw_time_equal+0xa0>)
 801346e:	9e03      	ldr	r6, [sp, #12]
 8013470:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013474:	2202      	movs	r2, #2
 8013476:	4299      	cmp	r1, r3
 8013478:	41aa      	sbcs	r2, r5
 801347a:	d330      	bcc.n	80134de <rmw_time_equal+0x7e>
 801347c:	4c21      	ldr	r4, [pc, #132]	@ (8013504 <rmw_time_equal+0xa4>)
 801347e:	fba3 3204 	umull	r3, r2, r3, r4
 8013482:	fb04 2205 	mla	r2, r4, r5, r2
 8013486:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801348a:	43dd      	mvns	r5, r3
 801348c:	1a8c      	subs	r4, r1, r2
 801348e:	4285      	cmp	r5, r0
 8013490:	41b4      	sbcs	r4, r6
 8013492:	d332      	bcc.n	80134fa <rmw_time_equal+0x9a>
 8013494:	eb10 0c03 	adds.w	ip, r0, r3
 8013498:	eb42 0106 	adc.w	r1, r2, r6
 801349c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80134a0:	4817      	ldr	r0, [pc, #92]	@ (8013500 <rmw_time_equal+0xa0>)
 80134a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80134a4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80134a6:	2202      	movs	r2, #2
 80134a8:	4298      	cmp	r0, r3
 80134aa:	41b2      	sbcs	r2, r6
 80134ac:	d31c      	bcc.n	80134e8 <rmw_time_equal+0x88>
 80134ae:	4c15      	ldr	r4, [pc, #84]	@ (8013504 <rmw_time_equal+0xa4>)
 80134b0:	fba3 3204 	umull	r3, r2, r3, r4
 80134b4:	fb04 2206 	mla	r2, r4, r6, r2
 80134b8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80134bc:	43de      	mvns	r6, r3
 80134be:	1a84      	subs	r4, r0, r2
 80134c0:	42ae      	cmp	r6, r5
 80134c2:	41bc      	sbcs	r4, r7
 80134c4:	d315      	bcc.n	80134f2 <rmw_time_equal+0x92>
 80134c6:	195b      	adds	r3, r3, r5
 80134c8:	eb42 0207 	adc.w	r2, r2, r7
 80134cc:	428a      	cmp	r2, r1
 80134ce:	bf08      	it	eq
 80134d0:	4563      	cmpeq	r3, ip
 80134d2:	bf0c      	ite	eq
 80134d4:	2001      	moveq	r0, #1
 80134d6:	2000      	movne	r0, #0
 80134d8:	b004      	add	sp, #16
 80134da:	bcf0      	pop	{r4, r5, r6, r7}
 80134dc:	4770      	bx	lr
 80134de:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80134e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80134e6:	e7d9      	b.n	801349c <rmw_time_equal+0x3c>
 80134e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134ec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80134f0:	e7ec      	b.n	80134cc <rmw_time_equal+0x6c>
 80134f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134f6:	4602      	mov	r2, r0
 80134f8:	e7e8      	b.n	80134cc <rmw_time_equal+0x6c>
 80134fa:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80134fe:	e7cd      	b.n	801349c <rmw_time_equal+0x3c>
 8013500:	25c17d04 	.word	0x25c17d04
 8013504:	3b9aca00 	.word	0x3b9aca00

08013508 <rmw_time_total_nsec>:
 8013508:	b470      	push	{r4, r5, r6}
 801350a:	b085      	sub	sp, #20
 801350c:	ac04      	add	r4, sp, #16
 801350e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013512:	4603      	mov	r3, r0
 8013514:	4912      	ldr	r1, [pc, #72]	@ (8013560 <rmw_time_total_nsec+0x58>)
 8013516:	9e03      	ldr	r6, [sp, #12]
 8013518:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801351c:	2202      	movs	r2, #2
 801351e:	4299      	cmp	r1, r3
 8013520:	41aa      	sbcs	r2, r5
 8013522:	d311      	bcc.n	8013548 <rmw_time_total_nsec+0x40>
 8013524:	4c0f      	ldr	r4, [pc, #60]	@ (8013564 <rmw_time_total_nsec+0x5c>)
 8013526:	fba3 3204 	umull	r3, r2, r3, r4
 801352a:	fb04 2205 	mla	r2, r4, r5, r2
 801352e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013532:	43dd      	mvns	r5, r3
 8013534:	1a8c      	subs	r4, r1, r2
 8013536:	4285      	cmp	r5, r0
 8013538:	41b4      	sbcs	r4, r6
 801353a:	d30c      	bcc.n	8013556 <rmw_time_total_nsec+0x4e>
 801353c:	1818      	adds	r0, r3, r0
 801353e:	eb42 0106 	adc.w	r1, r2, r6
 8013542:	b005      	add	sp, #20
 8013544:	bc70      	pop	{r4, r5, r6}
 8013546:	4770      	bx	lr
 8013548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801354c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013550:	b005      	add	sp, #20
 8013552:	bc70      	pop	{r4, r5, r6}
 8013554:	4770      	bx	lr
 8013556:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801355a:	b005      	add	sp, #20
 801355c:	bc70      	pop	{r4, r5, r6}
 801355e:	4770      	bx	lr
 8013560:	25c17d04 	.word	0x25c17d04
 8013564:	3b9aca00 	.word	0x3b9aca00

08013568 <rmw_get_zero_initialized_message_info>:
 8013568:	b510      	push	{r4, lr}
 801356a:	2240      	movs	r2, #64	@ 0x40
 801356c:	4604      	mov	r4, r0
 801356e:	2100      	movs	r1, #0
 8013570:	f004 f884 	bl	801767c <memset>
 8013574:	4620      	mov	r0, r4
 8013576:	bd10      	pop	{r4, pc}

08013578 <rmw_validate_full_topic_name>:
 8013578:	2800      	cmp	r0, #0
 801357a:	d057      	beq.n	801362c <rmw_validate_full_topic_name+0xb4>
 801357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013580:	460d      	mov	r5, r1
 8013582:	2900      	cmp	r1, #0
 8013584:	d054      	beq.n	8013630 <rmw_validate_full_topic_name+0xb8>
 8013586:	4616      	mov	r6, r2
 8013588:	4604      	mov	r4, r0
 801358a:	f7ec fe4b 	bl	8000224 <strlen>
 801358e:	b148      	cbz	r0, 80135a4 <rmw_validate_full_topic_name+0x2c>
 8013590:	7823      	ldrb	r3, [r4, #0]
 8013592:	2b2f      	cmp	r3, #47	@ 0x2f
 8013594:	d00d      	beq.n	80135b2 <rmw_validate_full_topic_name+0x3a>
 8013596:	2302      	movs	r3, #2
 8013598:	602b      	str	r3, [r5, #0]
 801359a:	b13e      	cbz	r6, 80135ac <rmw_validate_full_topic_name+0x34>
 801359c:	2000      	movs	r0, #0
 801359e:	6030      	str	r0, [r6, #0]
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a4:	2301      	movs	r3, #1
 80135a6:	602b      	str	r3, [r5, #0]
 80135a8:	2e00      	cmp	r6, #0
 80135aa:	d1f7      	bne.n	801359c <rmw_validate_full_topic_name+0x24>
 80135ac:	2000      	movs	r0, #0
 80135ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b2:	1e43      	subs	r3, r0, #1
 80135b4:	5ce2      	ldrb	r2, [r4, r3]
 80135b6:	2a2f      	cmp	r2, #47	@ 0x2f
 80135b8:	d03c      	beq.n	8013634 <rmw_validate_full_topic_name+0xbc>
 80135ba:	1e63      	subs	r3, r4, #1
 80135bc:	eb03 0800 	add.w	r8, r3, r0
 80135c0:	f1c4 0e01 	rsb	lr, r4, #1
 80135c4:	eb0e 0703 	add.w	r7, lr, r3
 80135c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80135cc:	f021 0220 	bic.w	r2, r1, #32
 80135d0:	3a41      	subs	r2, #65	@ 0x41
 80135d2:	2a19      	cmp	r2, #25
 80135d4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80135d8:	d90b      	bls.n	80135f2 <rmw_validate_full_topic_name+0x7a>
 80135da:	295f      	cmp	r1, #95	@ 0x5f
 80135dc:	d009      	beq.n	80135f2 <rmw_validate_full_topic_name+0x7a>
 80135de:	f1bc 0f0a 	cmp.w	ip, #10
 80135e2:	d906      	bls.n	80135f2 <rmw_validate_full_topic_name+0x7a>
 80135e4:	2304      	movs	r3, #4
 80135e6:	602b      	str	r3, [r5, #0]
 80135e8:	2e00      	cmp	r6, #0
 80135ea:	d0df      	beq.n	80135ac <rmw_validate_full_topic_name+0x34>
 80135ec:	6037      	str	r7, [r6, #0]
 80135ee:	2000      	movs	r0, #0
 80135f0:	e7d6      	b.n	80135a0 <rmw_validate_full_topic_name+0x28>
 80135f2:	4543      	cmp	r3, r8
 80135f4:	d1e6      	bne.n	80135c4 <rmw_validate_full_topic_name+0x4c>
 80135f6:	4f1a      	ldr	r7, [pc, #104]	@ (8013660 <rmw_validate_full_topic_name+0xe8>)
 80135f8:	2301      	movs	r3, #1
 80135fa:	e004      	b.n	8013606 <rmw_validate_full_topic_name+0x8e>
 80135fc:	4298      	cmp	r0, r3
 80135fe:	f104 0401 	add.w	r4, r4, #1
 8013602:	d91c      	bls.n	801363e <rmw_validate_full_topic_name+0xc6>
 8013604:	4613      	mov	r3, r2
 8013606:	4298      	cmp	r0, r3
 8013608:	f103 0201 	add.w	r2, r3, #1
 801360c:	d0f6      	beq.n	80135fc <rmw_validate_full_topic_name+0x84>
 801360e:	7821      	ldrb	r1, [r4, #0]
 8013610:	292f      	cmp	r1, #47	@ 0x2f
 8013612:	d1f3      	bne.n	80135fc <rmw_validate_full_topic_name+0x84>
 8013614:	7861      	ldrb	r1, [r4, #1]
 8013616:	292f      	cmp	r1, #47	@ 0x2f
 8013618:	d01c      	beq.n	8013654 <rmw_validate_full_topic_name+0xdc>
 801361a:	5dc9      	ldrb	r1, [r1, r7]
 801361c:	0749      	lsls	r1, r1, #29
 801361e:	d5ed      	bpl.n	80135fc <rmw_validate_full_topic_name+0x84>
 8013620:	2206      	movs	r2, #6
 8013622:	602a      	str	r2, [r5, #0]
 8013624:	2e00      	cmp	r6, #0
 8013626:	d0c1      	beq.n	80135ac <rmw_validate_full_topic_name+0x34>
 8013628:	6033      	str	r3, [r6, #0]
 801362a:	e7bf      	b.n	80135ac <rmw_validate_full_topic_name+0x34>
 801362c:	200b      	movs	r0, #11
 801362e:	4770      	bx	lr
 8013630:	200b      	movs	r0, #11
 8013632:	e7b5      	b.n	80135a0 <rmw_validate_full_topic_name+0x28>
 8013634:	2203      	movs	r2, #3
 8013636:	602a      	str	r2, [r5, #0]
 8013638:	2e00      	cmp	r6, #0
 801363a:	d1f5      	bne.n	8013628 <rmw_validate_full_topic_name+0xb0>
 801363c:	e7b6      	b.n	80135ac <rmw_validate_full_topic_name+0x34>
 801363e:	28f7      	cmp	r0, #247	@ 0xf7
 8013640:	d802      	bhi.n	8013648 <rmw_validate_full_topic_name+0xd0>
 8013642:	2000      	movs	r0, #0
 8013644:	6028      	str	r0, [r5, #0]
 8013646:	e7ab      	b.n	80135a0 <rmw_validate_full_topic_name+0x28>
 8013648:	2307      	movs	r3, #7
 801364a:	602b      	str	r3, [r5, #0]
 801364c:	2e00      	cmp	r6, #0
 801364e:	d0ad      	beq.n	80135ac <rmw_validate_full_topic_name+0x34>
 8013650:	23f6      	movs	r3, #246	@ 0xf6
 8013652:	e7e9      	b.n	8013628 <rmw_validate_full_topic_name+0xb0>
 8013654:	2205      	movs	r2, #5
 8013656:	602a      	str	r2, [r5, #0]
 8013658:	2e00      	cmp	r6, #0
 801365a:	d1e5      	bne.n	8013628 <rmw_validate_full_topic_name+0xb0>
 801365c:	e7a6      	b.n	80135ac <rmw_validate_full_topic_name+0x34>
 801365e:	bf00      	nop
 8013660:	08019314 	.word	0x08019314

08013664 <rmw_validate_namespace_with_size>:
 8013664:	b340      	cbz	r0, 80136b8 <rmw_validate_namespace_with_size+0x54>
 8013666:	b570      	push	{r4, r5, r6, lr}
 8013668:	4614      	mov	r4, r2
 801366a:	b0c2      	sub	sp, #264	@ 0x108
 801366c:	b332      	cbz	r2, 80136bc <rmw_validate_namespace_with_size+0x58>
 801366e:	2901      	cmp	r1, #1
 8013670:	460d      	mov	r5, r1
 8013672:	461e      	mov	r6, r3
 8013674:	d102      	bne.n	801367c <rmw_validate_namespace_with_size+0x18>
 8013676:	7803      	ldrb	r3, [r0, #0]
 8013678:	2b2f      	cmp	r3, #47	@ 0x2f
 801367a:	d012      	beq.n	80136a2 <rmw_validate_namespace_with_size+0x3e>
 801367c:	aa01      	add	r2, sp, #4
 801367e:	4669      	mov	r1, sp
 8013680:	f7ff ff7a 	bl	8013578 <rmw_validate_full_topic_name>
 8013684:	b978      	cbnz	r0, 80136a6 <rmw_validate_namespace_with_size+0x42>
 8013686:	9b00      	ldr	r3, [sp, #0]
 8013688:	b14b      	cbz	r3, 801369e <rmw_validate_namespace_with_size+0x3a>
 801368a:	2b07      	cmp	r3, #7
 801368c:	d007      	beq.n	801369e <rmw_validate_namespace_with_size+0x3a>
 801368e:	1e5a      	subs	r2, r3, #1
 8013690:	2a05      	cmp	r2, #5
 8013692:	d82b      	bhi.n	80136ec <rmw_validate_namespace_with_size+0x88>
 8013694:	e8df f002 	tbb	[pc, r2]
 8013698:	1e212427 	.word	0x1e212427
 801369c:	141b      	.short	0x141b
 801369e:	2df5      	cmp	r5, #245	@ 0xf5
 80136a0:	d803      	bhi.n	80136aa <rmw_validate_namespace_with_size+0x46>
 80136a2:	2000      	movs	r0, #0
 80136a4:	6020      	str	r0, [r4, #0]
 80136a6:	b042      	add	sp, #264	@ 0x108
 80136a8:	bd70      	pop	{r4, r5, r6, pc}
 80136aa:	2307      	movs	r3, #7
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	2e00      	cmp	r6, #0
 80136b0:	d0f9      	beq.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136b2:	23f4      	movs	r3, #244	@ 0xf4
 80136b4:	6033      	str	r3, [r6, #0]
 80136b6:	e7f6      	b.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136b8:	200b      	movs	r0, #11
 80136ba:	4770      	bx	lr
 80136bc:	200b      	movs	r0, #11
 80136be:	e7f2      	b.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136c0:	2306      	movs	r3, #6
 80136c2:	6023      	str	r3, [r4, #0]
 80136c4:	2e00      	cmp	r6, #0
 80136c6:	d0ee      	beq.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136c8:	9b01      	ldr	r3, [sp, #4]
 80136ca:	6033      	str	r3, [r6, #0]
 80136cc:	e7eb      	b.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136ce:	2305      	movs	r3, #5
 80136d0:	6023      	str	r3, [r4, #0]
 80136d2:	e7f7      	b.n	80136c4 <rmw_validate_namespace_with_size+0x60>
 80136d4:	2304      	movs	r3, #4
 80136d6:	6023      	str	r3, [r4, #0]
 80136d8:	e7f4      	b.n	80136c4 <rmw_validate_namespace_with_size+0x60>
 80136da:	2303      	movs	r3, #3
 80136dc:	6023      	str	r3, [r4, #0]
 80136de:	e7f1      	b.n	80136c4 <rmw_validate_namespace_with_size+0x60>
 80136e0:	2302      	movs	r3, #2
 80136e2:	6023      	str	r3, [r4, #0]
 80136e4:	e7ee      	b.n	80136c4 <rmw_validate_namespace_with_size+0x60>
 80136e6:	2301      	movs	r3, #1
 80136e8:	6023      	str	r3, [r4, #0]
 80136ea:	e7eb      	b.n	80136c4 <rmw_validate_namespace_with_size+0x60>
 80136ec:	4a03      	ldr	r2, [pc, #12]	@ (80136fc <rmw_validate_namespace_with_size+0x98>)
 80136ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80136f2:	a802      	add	r0, sp, #8
 80136f4:	f7ff fcda 	bl	80130ac <rcutils_snprintf>
 80136f8:	2001      	movs	r0, #1
 80136fa:	e7d4      	b.n	80136a6 <rmw_validate_namespace_with_size+0x42>
 80136fc:	08018d34 	.word	0x08018d34

08013700 <rmw_validate_namespace>:
 8013700:	b168      	cbz	r0, 801371e <rmw_validate_namespace+0x1e>
 8013702:	b570      	push	{r4, r5, r6, lr}
 8013704:	460d      	mov	r5, r1
 8013706:	4616      	mov	r6, r2
 8013708:	4604      	mov	r4, r0
 801370a:	f7ec fd8b 	bl	8000224 <strlen>
 801370e:	4633      	mov	r3, r6
 8013710:	4601      	mov	r1, r0
 8013712:	462a      	mov	r2, r5
 8013714:	4620      	mov	r0, r4
 8013716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801371a:	f7ff bfa3 	b.w	8013664 <rmw_validate_namespace_with_size>
 801371e:	200b      	movs	r0, #11
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop

08013724 <rmw_namespace_validation_result_string>:
 8013724:	2807      	cmp	r0, #7
 8013726:	bf9a      	itte	ls
 8013728:	4b02      	ldrls	r3, [pc, #8]	@ (8013734 <rmw_namespace_validation_result_string+0x10>)
 801372a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801372e:	4802      	ldrhi	r0, [pc, #8]	@ (8013738 <rmw_namespace_validation_result_string+0x14>)
 8013730:	4770      	bx	lr
 8013732:	bf00      	nop
 8013734:	08018f2c 	.word	0x08018f2c
 8013738:	08018d84 	.word	0x08018d84

0801373c <rmw_validate_node_name>:
 801373c:	2800      	cmp	r0, #0
 801373e:	d03b      	beq.n	80137b8 <rmw_validate_node_name+0x7c>
 8013740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	460d      	mov	r5, r1
 8013746:	2900      	cmp	r1, #0
 8013748:	d038      	beq.n	80137bc <rmw_validate_node_name+0x80>
 801374a:	4616      	mov	r6, r2
 801374c:	4604      	mov	r4, r0
 801374e:	f7ec fd69 	bl	8000224 <strlen>
 8013752:	b1e0      	cbz	r0, 801378e <rmw_validate_node_name+0x52>
 8013754:	1e63      	subs	r3, r4, #1
 8013756:	eb03 0800 	add.w	r8, r3, r0
 801375a:	f1c4 0101 	rsb	r1, r4, #1
 801375e:	18cf      	adds	r7, r1, r3
 8013760:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013764:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013768:	f02e 0c20 	bic.w	ip, lr, #32
 801376c:	2a09      	cmp	r2, #9
 801376e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8013772:	d914      	bls.n	801379e <rmw_validate_node_name+0x62>
 8013774:	f1bc 0f19 	cmp.w	ip, #25
 8013778:	d911      	bls.n	801379e <rmw_validate_node_name+0x62>
 801377a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801377e:	d00e      	beq.n	801379e <rmw_validate_node_name+0x62>
 8013780:	2302      	movs	r3, #2
 8013782:	602b      	str	r3, [r5, #0]
 8013784:	b106      	cbz	r6, 8013788 <rmw_validate_node_name+0x4c>
 8013786:	6037      	str	r7, [r6, #0]
 8013788:	2000      	movs	r0, #0
 801378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801378e:	2301      	movs	r3, #1
 8013790:	602b      	str	r3, [r5, #0]
 8013792:	2e00      	cmp	r6, #0
 8013794:	d0f8      	beq.n	8013788 <rmw_validate_node_name+0x4c>
 8013796:	2000      	movs	r0, #0
 8013798:	6030      	str	r0, [r6, #0]
 801379a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801379e:	4543      	cmp	r3, r8
 80137a0:	d1dd      	bne.n	801375e <rmw_validate_node_name+0x22>
 80137a2:	7822      	ldrb	r2, [r4, #0]
 80137a4:	4b0d      	ldr	r3, [pc, #52]	@ (80137dc <rmw_validate_node_name+0xa0>)
 80137a6:	5cd3      	ldrb	r3, [r2, r3]
 80137a8:	f013 0304 	ands.w	r3, r3, #4
 80137ac:	d110      	bne.n	80137d0 <rmw_validate_node_name+0x94>
 80137ae:	28ff      	cmp	r0, #255	@ 0xff
 80137b0:	d806      	bhi.n	80137c0 <rmw_validate_node_name+0x84>
 80137b2:	602b      	str	r3, [r5, #0]
 80137b4:	4618      	mov	r0, r3
 80137b6:	e7e8      	b.n	801378a <rmw_validate_node_name+0x4e>
 80137b8:	200b      	movs	r0, #11
 80137ba:	4770      	bx	lr
 80137bc:	200b      	movs	r0, #11
 80137be:	e7e4      	b.n	801378a <rmw_validate_node_name+0x4e>
 80137c0:	2204      	movs	r2, #4
 80137c2:	602a      	str	r2, [r5, #0]
 80137c4:	2e00      	cmp	r6, #0
 80137c6:	d0df      	beq.n	8013788 <rmw_validate_node_name+0x4c>
 80137c8:	22fe      	movs	r2, #254	@ 0xfe
 80137ca:	6032      	str	r2, [r6, #0]
 80137cc:	4618      	mov	r0, r3
 80137ce:	e7dc      	b.n	801378a <rmw_validate_node_name+0x4e>
 80137d0:	2303      	movs	r3, #3
 80137d2:	602b      	str	r3, [r5, #0]
 80137d4:	2e00      	cmp	r6, #0
 80137d6:	d1de      	bne.n	8013796 <rmw_validate_node_name+0x5a>
 80137d8:	e7d6      	b.n	8013788 <rmw_validate_node_name+0x4c>
 80137da:	bf00      	nop
 80137dc:	08019314 	.word	0x08019314

080137e0 <rmw_node_name_validation_result_string>:
 80137e0:	2804      	cmp	r0, #4
 80137e2:	bf9a      	itte	ls
 80137e4:	4b02      	ldrls	r3, [pc, #8]	@ (80137f0 <rmw_node_name_validation_result_string+0x10>)
 80137e6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80137ea:	4802      	ldrhi	r0, [pc, #8]	@ (80137f4 <rmw_node_name_validation_result_string+0x14>)
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop
 80137f0:	08019038 	.word	0x08019038
 80137f4:	08018f4c 	.word	0x08018f4c

080137f8 <get_memory>:
 80137f8:	4603      	mov	r3, r0
 80137fa:	6840      	ldr	r0, [r0, #4]
 80137fc:	b158      	cbz	r0, 8013816 <get_memory+0x1e>
 80137fe:	6842      	ldr	r2, [r0, #4]
 8013800:	605a      	str	r2, [r3, #4]
 8013802:	b10a      	cbz	r2, 8013808 <get_memory+0x10>
 8013804:	2100      	movs	r1, #0
 8013806:	6011      	str	r1, [r2, #0]
 8013808:	681a      	ldr	r2, [r3, #0]
 801380a:	6042      	str	r2, [r0, #4]
 801380c:	b102      	cbz	r2, 8013810 <get_memory+0x18>
 801380e:	6010      	str	r0, [r2, #0]
 8013810:	2200      	movs	r2, #0
 8013812:	6002      	str	r2, [r0, #0]
 8013814:	6018      	str	r0, [r3, #0]
 8013816:	4770      	bx	lr

08013818 <put_memory>:
 8013818:	680b      	ldr	r3, [r1, #0]
 801381a:	b10b      	cbz	r3, 8013820 <put_memory+0x8>
 801381c:	684a      	ldr	r2, [r1, #4]
 801381e:	605a      	str	r2, [r3, #4]
 8013820:	684a      	ldr	r2, [r1, #4]
 8013822:	b102      	cbz	r2, 8013826 <put_memory+0xe>
 8013824:	6013      	str	r3, [r2, #0]
 8013826:	6803      	ldr	r3, [r0, #0]
 8013828:	428b      	cmp	r3, r1
 801382a:	6843      	ldr	r3, [r0, #4]
 801382c:	bf08      	it	eq
 801382e:	6002      	streq	r2, [r0, #0]
 8013830:	604b      	str	r3, [r1, #4]
 8013832:	b103      	cbz	r3, 8013836 <put_memory+0x1e>
 8013834:	6019      	str	r1, [r3, #0]
 8013836:	2300      	movs	r3, #0
 8013838:	600b      	str	r3, [r1, #0]
 801383a:	6041      	str	r1, [r0, #4]
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop

08013840 <rmw_destroy_client>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	b128      	cbz	r0, 8013850 <rmw_destroy_client+0x10>
 8013844:	4604      	mov	r4, r0
 8013846:	6800      	ldr	r0, [r0, #0]
 8013848:	460d      	mov	r5, r1
 801384a:	f7f9 ff1b 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 801384e:	b910      	cbnz	r0, 8013856 <rmw_destroy_client+0x16>
 8013850:	2401      	movs	r4, #1
 8013852:	4620      	mov	r0, r4
 8013854:	bd70      	pop	{r4, r5, r6, pc}
 8013856:	6863      	ldr	r3, [r4, #4]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d0f9      	beq.n	8013850 <rmw_destroy_client+0x10>
 801385c:	2d00      	cmp	r5, #0
 801385e:	d0f7      	beq.n	8013850 <rmw_destroy_client+0x10>
 8013860:	6828      	ldr	r0, [r5, #0]
 8013862:	f7f9 ff0f 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 8013866:	2800      	cmp	r0, #0
 8013868:	d0f2      	beq.n	8013850 <rmw_destroy_client+0x10>
 801386a:	686e      	ldr	r6, [r5, #4]
 801386c:	2e00      	cmp	r6, #0
 801386e:	d0ef      	beq.n	8013850 <rmw_destroy_client+0x10>
 8013870:	6864      	ldr	r4, [r4, #4]
 8013872:	6932      	ldr	r2, [r6, #16]
 8013874:	6920      	ldr	r0, [r4, #16]
 8013876:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801387a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801387e:	6819      	ldr	r1, [r3, #0]
 8013880:	f002 f916 	bl	8015ab0 <uxr_buffer_cancel_data>
 8013884:	4602      	mov	r2, r0
 8013886:	6920      	ldr	r0, [r4, #16]
 8013888:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801388c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013890:	f7f9 fe78 	bl	800d584 <run_xrce_session>
 8013894:	6920      	ldr	r0, [r4, #16]
 8013896:	6932      	ldr	r2, [r6, #16]
 8013898:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801389c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138a0:	6819      	ldr	r1, [r3, #0]
 80138a2:	f7f9 ffc5 	bl	800d830 <uxr_buffer_delete_entity>
 80138a6:	4602      	mov	r2, r0
 80138a8:	6920      	ldr	r0, [r4, #16]
 80138aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80138ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80138b2:	f7f9 fe67 	bl	800d584 <run_xrce_session>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	4628      	mov	r0, r5
 80138ba:	bf14      	ite	ne
 80138bc:	2400      	movne	r4, #0
 80138be:	2402      	moveq	r4, #2
 80138c0:	f7f9 fd48 	bl	800d354 <rmw_uxrce_fini_client_memory>
 80138c4:	e7c5      	b.n	8013852 <rmw_destroy_client+0x12>
 80138c6:	bf00      	nop

080138c8 <rmw_get_implementation_identifier>:
 80138c8:	4b01      	ldr	r3, [pc, #4]	@ (80138d0 <rmw_get_implementation_identifier+0x8>)
 80138ca:	6818      	ldr	r0, [r3, #0]
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop
 80138d0:	08019064 	.word	0x08019064

080138d4 <rmw_init_options_init>:
 80138d4:	b084      	sub	sp, #16
 80138d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138d8:	b083      	sub	sp, #12
 80138da:	ad09      	add	r5, sp, #36	@ 0x24
 80138dc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80138e0:	b130      	cbz	r0, 80138f0 <rmw_init_options_init+0x1c>
 80138e2:	4604      	mov	r4, r0
 80138e4:	4628      	mov	r0, r5
 80138e6:	f7f9 f927 	bl	800cb38 <rcutils_allocator_is_valid>
 80138ea:	b108      	cbz	r0, 80138f0 <rmw_init_options_init+0x1c>
 80138ec:	68a6      	ldr	r6, [r4, #8]
 80138ee:	b12e      	cbz	r6, 80138fc <rmw_init_options_init+0x28>
 80138f0:	200b      	movs	r0, #11
 80138f2:	b003      	add	sp, #12
 80138f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138f8:	b004      	add	sp, #16
 80138fa:	4770      	bx	lr
 80138fc:	2200      	movs	r2, #0
 80138fe:	2300      	movs	r3, #0
 8013900:	e9c4 2300 	strd	r2, r3, [r4]
 8013904:	4b20      	ldr	r3, [pc, #128]	@ (8013988 <rmw_init_options_init+0xb4>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	60a3      	str	r3, [r4, #8]
 801390a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801390c:	f104 0c20 	add.w	ip, r4, #32
 8013910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013914:	466f      	mov	r7, sp
 8013916:	682b      	ldr	r3, [r5, #0]
 8013918:	f8cc 3000 	str.w	r3, [ip]
 801391c:	4638      	mov	r0, r7
 801391e:	61e6      	str	r6, [r4, #28]
 8013920:	60e6      	str	r6, [r4, #12]
 8013922:	f7ff fd79 	bl	8013418 <rmw_get_default_security_options>
 8013926:	e897 0003 	ldmia.w	r7, {r0, r1}
 801392a:	f104 0310 	add.w	r3, r4, #16
 801392e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013932:	2203      	movs	r2, #3
 8013934:	4815      	ldr	r0, [pc, #84]	@ (801398c <rmw_init_options_init+0xb8>)
 8013936:	4916      	ldr	r1, [pc, #88]	@ (8013990 <rmw_init_options_init+0xbc>)
 8013938:	7626      	strb	r6, [r4, #24]
 801393a:	f7f9 fc4b 	bl	800d1d4 <rmw_uxrce_init_init_options_impl_memory>
 801393e:	4813      	ldr	r0, [pc, #76]	@ (801398c <rmw_init_options_init+0xb8>)
 8013940:	f7ff ff5a 	bl	80137f8 <get_memory>
 8013944:	b1f0      	cbz	r0, 8013984 <rmw_init_options_init+0xb0>
 8013946:	4a13      	ldr	r2, [pc, #76]	@ (8013994 <rmw_init_options_init+0xc0>)
 8013948:	6883      	ldr	r3, [r0, #8]
 801394a:	6851      	ldr	r1, [r2, #4]
 801394c:	7810      	ldrb	r0, [r2, #0]
 801394e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013950:	7418      	strb	r0, [r3, #16]
 8013952:	6159      	str	r1, [r3, #20]
 8013954:	68d1      	ldr	r1, [r2, #12]
 8013956:	61d9      	str	r1, [r3, #28]
 8013958:	6911      	ldr	r1, [r2, #16]
 801395a:	6219      	str	r1, [r3, #32]
 801395c:	6951      	ldr	r1, [r2, #20]
 801395e:	6892      	ldr	r2, [r2, #8]
 8013960:	619a      	str	r2, [r3, #24]
 8013962:	6259      	str	r1, [r3, #36]	@ 0x24
 8013964:	f7fb fbc0 	bl	800f0e8 <uxr_nanos>
 8013968:	f003 fbc0 	bl	80170ec <srand>
 801396c:	f003 fbec 	bl	8017148 <rand>
 8013970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013972:	6298      	str	r0, [r3, #40]	@ 0x28
 8013974:	2800      	cmp	r0, #0
 8013976:	d0f9      	beq.n	801396c <rmw_init_options_init+0x98>
 8013978:	2000      	movs	r0, #0
 801397a:	b003      	add	sp, #12
 801397c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013980:	b004      	add	sp, #16
 8013982:	4770      	bx	lr
 8013984:	2001      	movs	r0, #1
 8013986:	e7b4      	b.n	80138f2 <rmw_init_options_init+0x1e>
 8013988:	08019064 	.word	0x08019064
 801398c:	2000dca4 	.word	0x2000dca4
 8013990:	20009540 	.word	0x20009540
 8013994:	200093cc 	.word	0x200093cc

08013998 <rmw_init_options_copy>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	b088      	sub	sp, #32
 801399c:	b160      	cbz	r0, 80139b8 <rmw_init_options_copy+0x20>
 801399e:	460d      	mov	r5, r1
 80139a0:	b151      	cbz	r1, 80139b8 <rmw_init_options_copy+0x20>
 80139a2:	4604      	mov	r4, r0
 80139a4:	6880      	ldr	r0, [r0, #8]
 80139a6:	b128      	cbz	r0, 80139b4 <rmw_init_options_copy+0x1c>
 80139a8:	4b33      	ldr	r3, [pc, #204]	@ (8013a78 <rmw_init_options_copy+0xe0>)
 80139aa:	6819      	ldr	r1, [r3, #0]
 80139ac:	f7ec fc30 	bl	8000210 <strcmp>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d154      	bne.n	8013a5e <rmw_init_options_copy+0xc6>
 80139b4:	68ab      	ldr	r3, [r5, #8]
 80139b6:	b11b      	cbz	r3, 80139c0 <rmw_init_options_copy+0x28>
 80139b8:	240b      	movs	r4, #11
 80139ba:	4620      	mov	r0, r4
 80139bc:	b008      	add	sp, #32
 80139be:	bd70      	pop	{r4, r5, r6, pc}
 80139c0:	4623      	mov	r3, r4
 80139c2:	462a      	mov	r2, r5
 80139c4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80139c8:	f8d3 c000 	ldr.w	ip, [r3]
 80139cc:	6858      	ldr	r0, [r3, #4]
 80139ce:	6899      	ldr	r1, [r3, #8]
 80139d0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80139d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80139d8:	3310      	adds	r3, #16
 80139da:	42b3      	cmp	r3, r6
 80139dc:	f8c2 c000 	str.w	ip, [r2]
 80139e0:	6050      	str	r0, [r2, #4]
 80139e2:	6091      	str	r1, [r2, #8]
 80139e4:	f102 0210 	add.w	r2, r2, #16
 80139e8:	d1ee      	bne.n	80139c8 <rmw_init_options_copy+0x30>
 80139ea:	6819      	ldr	r1, [r3, #0]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	6053      	str	r3, [r2, #4]
 80139f0:	6011      	str	r1, [r2, #0]
 80139f2:	f104 0e20 	add.w	lr, r4, #32
 80139f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139fa:	f10d 0c0c 	add.w	ip, sp, #12
 80139fe:	4666      	mov	r6, ip
 8013a00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a04:	f8de 3000 	ldr.w	r3, [lr]
 8013a08:	f8cc 3000 	str.w	r3, [ip]
 8013a0c:	4630      	mov	r0, r6
 8013a0e:	f7f9 f893 	bl	800cb38 <rcutils_allocator_is_valid>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0d0      	beq.n	80139b8 <rmw_init_options_copy+0x20>
 8013a16:	ab08      	add	r3, sp, #32
 8013a18:	e913 0003 	ldmdb	r3, {r0, r1}
 8013a1c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013a20:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013a24:	69e0      	ldr	r0, [r4, #28]
 8013a26:	f7ff fb6d 	bl	8013104 <rcutils_strdup>
 8013a2a:	61e8      	str	r0, [r5, #28]
 8013a2c:	69e3      	ldr	r3, [r4, #28]
 8013a2e:	b103      	cbz	r3, 8013a32 <rmw_init_options_copy+0x9a>
 8013a30:	b1f8      	cbz	r0, 8013a72 <rmw_init_options_copy+0xda>
 8013a32:	4812      	ldr	r0, [pc, #72]	@ (8013a7c <rmw_init_options_copy+0xe4>)
 8013a34:	f7ff fee0 	bl	80137f8 <get_memory>
 8013a38:	b1a8      	cbz	r0, 8013a66 <rmw_init_options_copy+0xce>
 8013a3a:	6883      	ldr	r3, [r0, #8]
 8013a3c:	636b      	str	r3, [r5, #52]	@ 0x34
 8013a3e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013a40:	f102 0c10 	add.w	ip, r2, #16
 8013a44:	f103 0510 	add.w	r5, r3, #16
 8013a48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a4e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013a52:	2400      	movs	r4, #0
 8013a54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8013a58:	4620      	mov	r0, r4
 8013a5a:	b008      	add	sp, #32
 8013a5c:	bd70      	pop	{r4, r5, r6, pc}
 8013a5e:	240c      	movs	r4, #12
 8013a60:	4620      	mov	r0, r4
 8013a62:	b008      	add	sp, #32
 8013a64:	bd70      	pop	{r4, r5, r6, pc}
 8013a66:	9b04      	ldr	r3, [sp, #16]
 8013a68:	9907      	ldr	r1, [sp, #28]
 8013a6a:	69e8      	ldr	r0, [r5, #28]
 8013a6c:	4798      	blx	r3
 8013a6e:	2401      	movs	r4, #1
 8013a70:	e7a3      	b.n	80139ba <rmw_init_options_copy+0x22>
 8013a72:	240a      	movs	r4, #10
 8013a74:	e7a1      	b.n	80139ba <rmw_init_options_copy+0x22>
 8013a76:	bf00      	nop
 8013a78:	08019064 	.word	0x08019064
 8013a7c:	2000dca4 	.word	0x2000dca4

08013a80 <rmw_init_options_fini>:
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d041      	beq.n	8013b08 <rmw_init_options_fini+0x88>
 8013a84:	b510      	push	{r4, lr}
 8013a86:	4604      	mov	r4, r0
 8013a88:	b08e      	sub	sp, #56	@ 0x38
 8013a8a:	3020      	adds	r0, #32
 8013a8c:	f7f9 f854 	bl	800cb38 <rcutils_allocator_is_valid>
 8013a90:	b380      	cbz	r0, 8013af4 <rmw_init_options_fini+0x74>
 8013a92:	68a0      	ldr	r0, [r4, #8]
 8013a94:	b120      	cbz	r0, 8013aa0 <rmw_init_options_fini+0x20>
 8013a96:	4b1e      	ldr	r3, [pc, #120]	@ (8013b10 <rmw_init_options_fini+0x90>)
 8013a98:	6819      	ldr	r1, [r3, #0]
 8013a9a:	f7ec fbb9 	bl	8000210 <strcmp>
 8013a9e:	bb88      	cbnz	r0, 8013b04 <rmw_init_options_fini+0x84>
 8013aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8013b14 <rmw_init_options_fini+0x94>)
 8013aa2:	6819      	ldr	r1, [r3, #0]
 8013aa4:	b351      	cbz	r1, 8013afc <rmw_init_options_fini+0x7c>
 8013aa6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013aa8:	e001      	b.n	8013aae <rmw_init_options_fini+0x2e>
 8013aaa:	6849      	ldr	r1, [r1, #4]
 8013aac:	b331      	cbz	r1, 8013afc <rmw_init_options_fini+0x7c>
 8013aae:	688b      	ldr	r3, [r1, #8]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d1fa      	bne.n	8013aaa <rmw_init_options_fini+0x2a>
 8013ab4:	4817      	ldr	r0, [pc, #92]	@ (8013b14 <rmw_init_options_fini+0x94>)
 8013ab6:	f7ff feaf 	bl	8013818 <put_memory>
 8013aba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013abc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013abe:	69e0      	ldr	r0, [r4, #28]
 8013ac0:	4798      	blx	r3
 8013ac2:	4668      	mov	r0, sp
 8013ac4:	f7ff fc98 	bl	80133f8 <rmw_get_zero_initialized_init_options>
 8013ac8:	46ee      	mov	lr, sp
 8013aca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ace:	46a4      	mov	ip, r4
 8013ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ad4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013adc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ae4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013ae8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013aec:	2300      	movs	r3, #0
 8013aee:	4618      	mov	r0, r3
 8013af0:	b00e      	add	sp, #56	@ 0x38
 8013af2:	bd10      	pop	{r4, pc}
 8013af4:	230b      	movs	r3, #11
 8013af6:	4618      	mov	r0, r3
 8013af8:	b00e      	add	sp, #56	@ 0x38
 8013afa:	bd10      	pop	{r4, pc}
 8013afc:	2301      	movs	r3, #1
 8013afe:	4618      	mov	r0, r3
 8013b00:	b00e      	add	sp, #56	@ 0x38
 8013b02:	bd10      	pop	{r4, pc}
 8013b04:	230c      	movs	r3, #12
 8013b06:	e7f2      	b.n	8013aee <rmw_init_options_fini+0x6e>
 8013b08:	230b      	movs	r3, #11
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	08019064 	.word	0x08019064
 8013b14:	2000dca4 	.word	0x2000dca4

08013b18 <rmw_init>:
 8013b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b1c:	b083      	sub	sp, #12
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	f000 80d3 	beq.w	8013cca <rmw_init+0x1b2>
 8013b24:	460e      	mov	r6, r1
 8013b26:	2900      	cmp	r1, #0
 8013b28:	f000 80cf 	beq.w	8013cca <rmw_init+0x1b2>
 8013b2c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013b2e:	4605      	mov	r5, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	f000 80ca 	beq.w	8013cca <rmw_init+0x1b2>
 8013b36:	4b78      	ldr	r3, [pc, #480]	@ (8013d18 <rmw_init+0x200>)
 8013b38:	6880      	ldr	r0, [r0, #8]
 8013b3a:	681f      	ldr	r7, [r3, #0]
 8013b3c:	b128      	cbz	r0, 8013b4a <rmw_init+0x32>
 8013b3e:	4639      	mov	r1, r7
 8013b40:	f7ec fb66 	bl	8000210 <strcmp>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	f040 80ca 	bne.w	8013cde <rmw_init+0x1c6>
 8013b4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b4e:	4c73      	ldr	r4, [pc, #460]	@ (8013d1c <rmw_init+0x204>)
 8013b50:	4973      	ldr	r1, [pc, #460]	@ (8013d20 <rmw_init+0x208>)
 8013b52:	4874      	ldr	r0, [pc, #464]	@ (8013d24 <rmw_init+0x20c>)
 8013b54:	60b7      	str	r7, [r6, #8]
 8013b56:	e9c6 2300 	strd	r2, r3, [r6]
 8013b5a:	68eb      	ldr	r3, [r5, #12]
 8013b5c:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013b5e:	2201      	movs	r2, #1
 8013b60:	f7f9 fad8 	bl	800d114 <rmw_uxrce_init_session_memory>
 8013b64:	4620      	mov	r0, r4
 8013b66:	4970      	ldr	r1, [pc, #448]	@ (8013d28 <rmw_init+0x210>)
 8013b68:	2204      	movs	r2, #4
 8013b6a:	f7f9 fb13 	bl	800d194 <rmw_uxrce_init_static_input_buffer_memory>
 8013b6e:	f04f 0800 	mov.w	r8, #0
 8013b72:	486c      	ldr	r0, [pc, #432]	@ (8013d24 <rmw_init+0x20c>)
 8013b74:	f884 800d 	strb.w	r8, [r4, #13]
 8013b78:	f7ff fe3e 	bl	80137f8 <get_memory>
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	f000 80a9 	beq.w	8013cd4 <rmw_init+0x1bc>
 8013b82:	6884      	ldr	r4, [r0, #8]
 8013b84:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8013b86:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013b88:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013b8c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013b90:	9101      	str	r1, [sp, #4]
 8013b92:	6a00      	ldr	r0, [r0, #32]
 8013b94:	9000      	str	r0, [sp, #0]
 8013b96:	f104 0910 	add.w	r9, r4, #16
 8013b9a:	4661      	mov	r1, ip
 8013b9c:	4648      	mov	r0, r9
 8013b9e:	f001 f9bf 	bl	8014f20 <uxr_set_custom_transport_callbacks>
 8013ba2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8013ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013baa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8013bae:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013bb2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013bb6:	495d      	ldr	r1, [pc, #372]	@ (8013d2c <rmw_init+0x214>)
 8013bb8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8013bbc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013bc0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013bc4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013bc8:	4859      	ldr	r0, [pc, #356]	@ (8013d30 <rmw_init+0x218>)
 8013bca:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8013bce:	2201      	movs	r2, #1
 8013bd0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8013bd2:	f7f9 fa7f 	bl	800d0d4 <rmw_uxrce_init_node_memory>
 8013bd6:	4957      	ldr	r1, [pc, #348]	@ (8013d34 <rmw_init+0x21c>)
 8013bd8:	4857      	ldr	r0, [pc, #348]	@ (8013d38 <rmw_init+0x220>)
 8013bda:	2205      	movs	r2, #5
 8013bdc:	f7f9 fa5a 	bl	800d094 <rmw_uxrce_init_subscription_memory>
 8013be0:	4956      	ldr	r1, [pc, #344]	@ (8013d3c <rmw_init+0x224>)
 8013be2:	4857      	ldr	r0, [pc, #348]	@ (8013d40 <rmw_init+0x228>)
 8013be4:	220a      	movs	r2, #10
 8013be6:	f7f9 fa35 	bl	800d054 <rmw_uxrce_init_publisher_memory>
 8013bea:	4956      	ldr	r1, [pc, #344]	@ (8013d44 <rmw_init+0x22c>)
 8013bec:	4856      	ldr	r0, [pc, #344]	@ (8013d48 <rmw_init+0x230>)
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f7f9 f9f0 	bl	800cfd4 <rmw_uxrce_init_service_memory>
 8013bf4:	4955      	ldr	r1, [pc, #340]	@ (8013d4c <rmw_init+0x234>)
 8013bf6:	4856      	ldr	r0, [pc, #344]	@ (8013d50 <rmw_init+0x238>)
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	f7f9 fa0b 	bl	800d014 <rmw_uxrce_init_client_memory>
 8013bfe:	4955      	ldr	r1, [pc, #340]	@ (8013d54 <rmw_init+0x23c>)
 8013c00:	4855      	ldr	r0, [pc, #340]	@ (8013d58 <rmw_init+0x240>)
 8013c02:	220f      	movs	r2, #15
 8013c04:	f7f9 faa6 	bl	800d154 <rmw_uxrce_init_topic_memory>
 8013c08:	4954      	ldr	r1, [pc, #336]	@ (8013d5c <rmw_init+0x244>)
 8013c0a:	4855      	ldr	r0, [pc, #340]	@ (8013d60 <rmw_init+0x248>)
 8013c0c:	2203      	movs	r2, #3
 8013c0e:	f7f9 fae1 	bl	800d1d4 <rmw_uxrce_init_init_options_impl_memory>
 8013c12:	4954      	ldr	r1, [pc, #336]	@ (8013d64 <rmw_init+0x24c>)
 8013c14:	4854      	ldr	r0, [pc, #336]	@ (8013d68 <rmw_init+0x250>)
 8013c16:	2204      	movs	r2, #4
 8013c18:	f7f9 fafc 	bl	800d214 <rmw_uxrce_init_wait_set_memory>
 8013c1c:	4953      	ldr	r1, [pc, #332]	@ (8013d6c <rmw_init+0x254>)
 8013c1e:	4854      	ldr	r0, [pc, #336]	@ (8013d70 <rmw_init+0x258>)
 8013c20:	2204      	movs	r2, #4
 8013c22:	f7f9 fb17 	bl	800d254 <rmw_uxrce_init_guard_condition_memory>
 8013c26:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013c28:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013c2a:	4642      	mov	r2, r8
 8013c2c:	f000 fd9e 	bl	801476c <rmw_uxrce_transport_init>
 8013c30:	4607      	mov	r7, r0
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d158      	bne.n	8013ce8 <rmw_init+0x1d0>
 8013c36:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013c38:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013c3e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7fa f8b4 	bl	800ddb0 <uxr_init_session>
 8013c48:	494a      	ldr	r1, [pc, #296]	@ (8013d74 <rmw_init+0x25c>)
 8013c4a:	4622      	mov	r2, r4
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	f7fa f8d3 	bl	800ddf8 <uxr_set_topic_callback>
 8013c52:	4949      	ldr	r1, [pc, #292]	@ (8013d78 <rmw_init+0x260>)
 8013c54:	463a      	mov	r2, r7
 8013c56:	4628      	mov	r0, r5
 8013c58:	f7fa f8ca 	bl	800ddf0 <uxr_set_status_callback>
 8013c5c:	4947      	ldr	r1, [pc, #284]	@ (8013d7c <rmw_init+0x264>)
 8013c5e:	463a      	mov	r2, r7
 8013c60:	4628      	mov	r0, r5
 8013c62:	f7fa f8cd 	bl	800de00 <uxr_set_request_callback>
 8013c66:	4946      	ldr	r1, [pc, #280]	@ (8013d80 <rmw_init+0x268>)
 8013c68:	463a      	mov	r2, r7
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f7fa f8cc 	bl	800de08 <uxr_set_reply_callback>
 8013c70:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013c74:	2304      	movs	r3, #4
 8013c76:	0092      	lsls	r2, r2, #2
 8013c78:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	f7fa f901 	bl	800de84 <uxr_create_input_reliable_stream>
 8013c82:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013c86:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8013c8a:	0092      	lsls	r2, r2, #2
 8013c8c:	2304      	movs	r3, #4
 8013c8e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8013c92:	4628      	mov	r0, r5
 8013c94:	f7fa f8ce 	bl	800de34 <uxr_create_output_reliable_stream>
 8013c98:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f7fa f8eb 	bl	800de78 <uxr_create_input_best_effort_stream>
 8013ca2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8013ca6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8013caa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013cae:	3114      	adds	r1, #20
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	f7fa f8ad 	bl	800de10 <uxr_create_output_best_effort_stream>
 8013cb6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7fa fe38 	bl	800e930 <uxr_create_session>
 8013cc0:	b1f8      	cbz	r0, 8013d02 <rmw_init+0x1ea>
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	b003      	add	sp, #12
 8013cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cca:	270b      	movs	r7, #11
 8013ccc:	4638      	mov	r0, r7
 8013cce:	b003      	add	sp, #12
 8013cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cd4:	2701      	movs	r7, #1
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	b003      	add	sp, #12
 8013cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cde:	270c      	movs	r7, #12
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	b003      	add	sp, #12
 8013ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ce8:	4648      	mov	r0, r9
 8013cea:	f001 f95b 	bl	8014fa4 <uxr_close_custom_transport>
 8013cee:	480d      	ldr	r0, [pc, #52]	@ (8013d24 <rmw_init+0x20c>)
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	f7ff fd91 	bl	8013818 <put_memory>
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013cfc:	b003      	add	sp, #12
 8013cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d02:	4648      	mov	r0, r9
 8013d04:	f001 f94e 	bl	8014fa4 <uxr_close_custom_transport>
 8013d08:	4806      	ldr	r0, [pc, #24]	@ (8013d24 <rmw_init+0x20c>)
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	f7ff fd84 	bl	8013818 <put_memory>
 8013d10:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8013d12:	2701      	movs	r7, #1
 8013d14:	e7d5      	b.n	8013cc2 <rmw_init+0x1aa>
 8013d16:	bf00      	nop
 8013d18:	08019064 	.word	0x08019064
 8013d1c:	2000dcf4 	.word	0x2000dcf4
 8013d20:	20009fa0 	.word	0x20009fa0
 8013d24:	2000dce4 	.word	0x2000dce4
 8013d28:	2000b548 	.word	0x2000b548
 8013d2c:	200095c4 	.word	0x200095c4
 8013d30:	2000dcb4 	.word	0x2000dcb4
 8013d34:	2000d648 	.word	0x2000d648
 8013d38:	2000dd04 	.word	0x2000dd04
 8013d3c:	20009668 	.word	0x20009668
 8013d40:	2000dcc4 	.word	0x2000dcc4
 8013d44:	20009ed8 	.word	0x20009ed8
 8013d48:	2000dcd4 	.word	0x2000dcd4
 8013d4c:	200093f8 	.word	0x200093f8
 8013d50:	200093e8 	.word	0x200093e8
 8013d54:	2000da80 	.word	0x2000da80
 8013d58:	2000dd14 	.word	0x2000dd14
 8013d5c:	20009540 	.word	0x20009540
 8013d60:	2000dca4 	.word	0x2000dca4
 8013d64:	2000dc24 	.word	0x2000dc24
 8013d68:	2000dd24 	.word	0x2000dd24
 8013d6c:	200094c0 	.word	0x200094c0
 8013d70:	2000dc94 	.word	0x2000dc94
 8013d74:	08016c91 	.word	0x08016c91
 8013d78:	08016c89 	.word	0x08016c89
 8013d7c:	08016d29 	.word	0x08016d29
 8013d80:	08016dc5 	.word	0x08016dc5

08013d84 <rmw_context_fini>:
 8013d84:	4b17      	ldr	r3, [pc, #92]	@ (8013de4 <rmw_context_fini+0x60>)
 8013d86:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8013d88:	b570      	push	{r4, r5, r6, lr}
 8013d8a:	681c      	ldr	r4, [r3, #0]
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	b334      	cbz	r4, 8013dde <rmw_context_fini+0x5a>
 8013d90:	2600      	movs	r6, #0
 8013d92:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013d96:	6902      	ldr	r2, [r0, #16]
 8013d98:	428a      	cmp	r2, r1
 8013d9a:	d018      	beq.n	8013dce <rmw_context_fini+0x4a>
 8013d9c:	2c00      	cmp	r4, #0
 8013d9e:	d1f8      	bne.n	8013d92 <rmw_context_fini+0xe>
 8013da0:	b189      	cbz	r1, 8013dc6 <rmw_context_fini+0x42>
 8013da2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8013da6:	789b      	ldrb	r3, [r3, #2]
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013dae:	bf14      	ite	ne
 8013db0:	210a      	movne	r1, #10
 8013db2:	2100      	moveq	r1, #0
 8013db4:	f7fa fd94 	bl	800e8e0 <uxr_delete_session_retries>
 8013db8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013dba:	f7f9 fa6b 	bl	800d294 <rmw_uxrce_fini_session_memory>
 8013dbe:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013dc0:	3010      	adds	r0, #16
 8013dc2:	f001 f8ef 	bl	8014fa4 <uxr_close_custom_transport>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013dca:	4630      	mov	r0, r6
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	3018      	adds	r0, #24
 8013dd0:	f000 f90e 	bl	8013ff0 <rmw_destroy_node>
 8013dd4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013dd6:	4606      	mov	r6, r0
 8013dd8:	2c00      	cmp	r4, #0
 8013dda:	d1da      	bne.n	8013d92 <rmw_context_fini+0xe>
 8013ddc:	e7e0      	b.n	8013da0 <rmw_context_fini+0x1c>
 8013dde:	4626      	mov	r6, r4
 8013de0:	e7de      	b.n	8013da0 <rmw_context_fini+0x1c>
 8013de2:	bf00      	nop
 8013de4:	2000dcb4 	.word	0x2000dcb4

08013de8 <create_topic>:
 8013de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dec:	4605      	mov	r5, r0
 8013dee:	b084      	sub	sp, #16
 8013df0:	4822      	ldr	r0, [pc, #136]	@ (8013e7c <create_topic+0x94>)
 8013df2:	460f      	mov	r7, r1
 8013df4:	4616      	mov	r6, r2
 8013df6:	f7ff fcff 	bl	80137f8 <get_memory>
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	d039      	beq.n	8013e74 <create_topic+0x8c>
 8013e00:	692b      	ldr	r3, [r5, #16]
 8013e02:	6884      	ldr	r4, [r0, #8]
 8013e04:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013e84 <create_topic+0x9c>
 8013e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e0c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013e10:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013e14:	1c42      	adds	r2, r0, #1
 8013e16:	2102      	movs	r1, #2
 8013e18:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013e1c:	f7f9 ff0a 	bl	800dc34 <uxr_object_id>
 8013e20:	223c      	movs	r2, #60	@ 0x3c
 8013e22:	6120      	str	r0, [r4, #16]
 8013e24:	4641      	mov	r1, r8
 8013e26:	4638      	mov	r0, r7
 8013e28:	f7f9 fc12 	bl	800d650 <generate_topic_name>
 8013e2c:	b1f0      	cbz	r0, 8013e6c <create_topic+0x84>
 8013e2e:	4f14      	ldr	r7, [pc, #80]	@ (8013e80 <create_topic+0x98>)
 8013e30:	4630      	mov	r0, r6
 8013e32:	2264      	movs	r2, #100	@ 0x64
 8013e34:	4639      	mov	r1, r7
 8013e36:	f7f9 fbdb 	bl	800d5f0 <generate_type_name>
 8013e3a:	b1b8      	cbz	r0, 8013e6c <create_topic+0x84>
 8013e3c:	6928      	ldr	r0, [r5, #16]
 8013e3e:	2306      	movs	r3, #6
 8013e40:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013e44:	f8cd 8000 	str.w	r8, [sp]
 8013e48:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013e4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e50:	6811      	ldr	r1, [r2, #0]
 8013e52:	696b      	ldr	r3, [r5, #20]
 8013e54:	6922      	ldr	r2, [r4, #16]
 8013e56:	f7f9 fd69 	bl	800d92c <uxr_buffer_create_topic_bin>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	6928      	ldr	r0, [r5, #16]
 8013e5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013e62:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013e66:	f7f9 fb8d 	bl	800d584 <run_xrce_session>
 8013e6a:	b918      	cbnz	r0, 8013e74 <create_topic+0x8c>
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f7f9 fa87 	bl	800d380 <rmw_uxrce_fini_topic_memory>
 8013e72:	2400      	movs	r4, #0
 8013e74:	4620      	mov	r0, r4
 8013e76:	b004      	add	sp, #16
 8013e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e7c:	2000dd14 	.word	0x2000dd14
 8013e80:	2000de00 	.word	0x2000de00
 8013e84:	2000ddc4 	.word	0x2000ddc4

08013e88 <destroy_topic>:
 8013e88:	b538      	push	{r3, r4, r5, lr}
 8013e8a:	6985      	ldr	r5, [r0, #24]
 8013e8c:	b1d5      	cbz	r5, 8013ec4 <destroy_topic+0x3c>
 8013e8e:	4604      	mov	r4, r0
 8013e90:	6928      	ldr	r0, [r5, #16]
 8013e92:	6922      	ldr	r2, [r4, #16]
 8013e94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013e98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013e9c:	6819      	ldr	r1, [r3, #0]
 8013e9e:	f7f9 fcc7 	bl	800d830 <uxr_buffer_delete_entity>
 8013ea2:	4602      	mov	r2, r0
 8013ea4:	6928      	ldr	r0, [r5, #16]
 8013ea6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013eaa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013eae:	f7f9 fb69 	bl	800d584 <run_xrce_session>
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	bf14      	ite	ne
 8013eb8:	2400      	movne	r4, #0
 8013eba:	2402      	moveq	r4, #2
 8013ebc:	f7f9 fa60 	bl	800d380 <rmw_uxrce_fini_topic_memory>
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	bd38      	pop	{r3, r4, r5, pc}
 8013ec4:	2401      	movs	r4, #1
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	bd38      	pop	{r3, r4, r5, pc}
 8013eca:	bf00      	nop

08013ecc <create_node>:
 8013ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ed0:	b083      	sub	sp, #12
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d05f      	beq.n	8013f96 <create_node+0xca>
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	4835      	ldr	r0, [pc, #212]	@ (8013fb0 <create_node+0xe4>)
 8013eda:	460f      	mov	r7, r1
 8013edc:	4690      	mov	r8, r2
 8013ede:	461d      	mov	r5, r3
 8013ee0:	f7ff fc8a 	bl	80137f8 <get_memory>
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d056      	beq.n	8013f96 <create_node+0xca>
 8013ee8:	6884      	ldr	r4, [r0, #8]
 8013eea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013eec:	6123      	str	r3, [r4, #16]
 8013eee:	f7ff fceb 	bl	80138c8 <rmw_get_implementation_identifier>
 8013ef2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013ef6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013efa:	f8c4 9020 	str.w	r9, [r4, #32]
 8013efe:	4630      	mov	r0, r6
 8013f00:	f7ec f990 	bl	8000224 <strlen>
 8013f04:	1c42      	adds	r2, r0, #1
 8013f06:	2a3c      	cmp	r2, #60	@ 0x3c
 8013f08:	f104 0518 	add.w	r5, r4, #24
 8013f0c:	d840      	bhi.n	8013f90 <create_node+0xc4>
 8013f0e:	4648      	mov	r0, r9
 8013f10:	4631      	mov	r1, r6
 8013f12:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013f16:	f003 fc7a 	bl	801780e <memcpy>
 8013f1a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8013f1e:	4638      	mov	r0, r7
 8013f20:	f7ec f980 	bl	8000224 <strlen>
 8013f24:	1c42      	adds	r2, r0, #1
 8013f26:	2a3c      	cmp	r2, #60	@ 0x3c
 8013f28:	d832      	bhi.n	8013f90 <create_node+0xc4>
 8013f2a:	4639      	mov	r1, r7
 8013f2c:	4648      	mov	r0, r9
 8013f2e:	f003 fc6e 	bl	801780e <memcpy>
 8013f32:	6923      	ldr	r3, [r4, #16]
 8013f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013f38:	2101      	movs	r1, #1
 8013f3a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8013f3e:	1842      	adds	r2, r0, r1
 8013f40:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8013f44:	f7f9 fe76 	bl	800dc34 <uxr_object_id>
 8013f48:	6160      	str	r0, [r4, #20]
 8013f4a:	783b      	ldrb	r3, [r7, #0]
 8013f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f4e:	d127      	bne.n	8013fa0 <create_node+0xd4>
 8013f50:	787b      	ldrb	r3, [r7, #1]
 8013f52:	bb2b      	cbnz	r3, 8013fa0 <create_node+0xd4>
 8013f54:	4a17      	ldr	r2, [pc, #92]	@ (8013fb4 <create_node+0xe8>)
 8013f56:	4818      	ldr	r0, [pc, #96]	@ (8013fb8 <create_node+0xec>)
 8013f58:	4633      	mov	r3, r6
 8013f5a:	213c      	movs	r1, #60	@ 0x3c
 8013f5c:	f003 fab4 	bl	80174c8 <sniprintf>
 8013f60:	6920      	ldr	r0, [r4, #16]
 8013f62:	4915      	ldr	r1, [pc, #84]	@ (8013fb8 <create_node+0xec>)
 8013f64:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013f68:	9100      	str	r1, [sp, #0]
 8013f6a:	2106      	movs	r1, #6
 8013f6c:	9101      	str	r1, [sp, #4]
 8013f6e:	6811      	ldr	r1, [r2, #0]
 8013f70:	6962      	ldr	r2, [r4, #20]
 8013f72:	fa1f f388 	uxth.w	r3, r8
 8013f76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013f7a:	f7f9 fca5 	bl	800d8c8 <uxr_buffer_create_participant_bin>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	6920      	ldr	r0, [r4, #16]
 8013f82:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013f86:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013f8a:	f7f9 fafb 	bl	800d584 <run_xrce_session>
 8013f8e:	b918      	cbnz	r0, 8013f98 <create_node+0xcc>
 8013f90:	4628      	mov	r0, r5
 8013f92:	f7f9 f985 	bl	800d2a0 <rmw_uxrce_fini_node_memory>
 8013f96:	2500      	movs	r5, #0
 8013f98:	4628      	mov	r0, r5
 8013f9a:	b003      	add	sp, #12
 8013f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fa0:	4a06      	ldr	r2, [pc, #24]	@ (8013fbc <create_node+0xf0>)
 8013fa2:	9600      	str	r6, [sp, #0]
 8013fa4:	463b      	mov	r3, r7
 8013fa6:	213c      	movs	r1, #60	@ 0x3c
 8013fa8:	4803      	ldr	r0, [pc, #12]	@ (8013fb8 <create_node+0xec>)
 8013faa:	f003 fa8d 	bl	80174c8 <sniprintf>
 8013fae:	e7d7      	b.n	8013f60 <create_node+0x94>
 8013fb0:	2000dcb4 	.word	0x2000dcb4
 8013fb4:	08018a30 	.word	0x08018a30
 8013fb8:	2000de64 	.word	0x2000de64
 8013fbc:	08018bb4 	.word	0x08018bb4

08013fc0 <rmw_create_node>:
 8013fc0:	b199      	cbz	r1, 8013fea <rmw_create_node+0x2a>
 8013fc2:	780b      	ldrb	r3, [r1, #0]
 8013fc4:	468c      	mov	ip, r1
 8013fc6:	b183      	cbz	r3, 8013fea <rmw_create_node+0x2a>
 8013fc8:	b410      	push	{r4}
 8013fca:	4614      	mov	r4, r2
 8013fcc:	b14a      	cbz	r2, 8013fe2 <rmw_create_node+0x22>
 8013fce:	7813      	ldrb	r3, [r2, #0]
 8013fd0:	b13b      	cbz	r3, 8013fe2 <rmw_create_node+0x22>
 8013fd2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	4621      	mov	r1, r4
 8013fd8:	4660      	mov	r0, ip
 8013fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fde:	f7ff bf75 	b.w	8013ecc <create_node>
 8013fe2:	2000      	movs	r0, #0
 8013fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe8:	4770      	bx	lr
 8013fea:	2000      	movs	r0, #0
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop

08013ff0 <rmw_destroy_node>:
 8013ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ff2:	b328      	cbz	r0, 8014040 <rmw_destroy_node+0x50>
 8013ff4:	4607      	mov	r7, r0
 8013ff6:	6800      	ldr	r0, [r0, #0]
 8013ff8:	b120      	cbz	r0, 8014004 <rmw_destroy_node+0x14>
 8013ffa:	4b36      	ldr	r3, [pc, #216]	@ (80140d4 <rmw_destroy_node+0xe4>)
 8013ffc:	6819      	ldr	r1, [r3, #0]
 8013ffe:	f7ec f907 	bl	8000210 <strcmp>
 8014002:	b9e8      	cbnz	r0, 8014040 <rmw_destroy_node+0x50>
 8014004:	687d      	ldr	r5, [r7, #4]
 8014006:	b1dd      	cbz	r5, 8014040 <rmw_destroy_node+0x50>
 8014008:	4b33      	ldr	r3, [pc, #204]	@ (80140d8 <rmw_destroy_node+0xe8>)
 801400a:	681c      	ldr	r4, [r3, #0]
 801400c:	2c00      	cmp	r4, #0
 801400e:	d05f      	beq.n	80140d0 <rmw_destroy_node+0xe0>
 8014010:	2600      	movs	r6, #0
 8014012:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014016:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801401a:	429d      	cmp	r5, r3
 801401c:	d013      	beq.n	8014046 <rmw_destroy_node+0x56>
 801401e:	2c00      	cmp	r4, #0
 8014020:	d1f7      	bne.n	8014012 <rmw_destroy_node+0x22>
 8014022:	4b2e      	ldr	r3, [pc, #184]	@ (80140dc <rmw_destroy_node+0xec>)
 8014024:	681c      	ldr	r4, [r3, #0]
 8014026:	b1c4      	cbz	r4, 801405a <rmw_destroy_node+0x6a>
 8014028:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801402c:	6a0b      	ldr	r3, [r1, #32]
 801402e:	429d      	cmp	r5, r3
 8014030:	d1f9      	bne.n	8014026 <rmw_destroy_node+0x36>
 8014032:	317c      	adds	r1, #124	@ 0x7c
 8014034:	4638      	mov	r0, r7
 8014036:	f000 fae5 	bl	8014604 <rmw_destroy_subscription>
 801403a:	2801      	cmp	r0, #1
 801403c:	4606      	mov	r6, r0
 801403e:	d1f2      	bne.n	8014026 <rmw_destroy_node+0x36>
 8014040:	2601      	movs	r6, #1
 8014042:	4630      	mov	r0, r6
 8014044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014046:	3184      	adds	r1, #132	@ 0x84
 8014048:	4638      	mov	r0, r7
 801404a:	f7f8 ff71 	bl	800cf30 <rmw_destroy_publisher>
 801404e:	2801      	cmp	r0, #1
 8014050:	4606      	mov	r6, r0
 8014052:	d0f5      	beq.n	8014040 <rmw_destroy_node+0x50>
 8014054:	2c00      	cmp	r4, #0
 8014056:	d1dc      	bne.n	8014012 <rmw_destroy_node+0x22>
 8014058:	e7e3      	b.n	8014022 <rmw_destroy_node+0x32>
 801405a:	4b21      	ldr	r3, [pc, #132]	@ (80140e0 <rmw_destroy_node+0xf0>)
 801405c:	681c      	ldr	r4, [r3, #0]
 801405e:	b16c      	cbz	r4, 801407c <rmw_destroy_node+0x8c>
 8014060:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014064:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014066:	429d      	cmp	r5, r3
 8014068:	d1f9      	bne.n	801405e <rmw_destroy_node+0x6e>
 801406a:	317c      	adds	r1, #124	@ 0x7c
 801406c:	4638      	mov	r0, r7
 801406e:	f000 f993 	bl	8014398 <rmw_destroy_service>
 8014072:	2801      	cmp	r0, #1
 8014074:	4606      	mov	r6, r0
 8014076:	d0e3      	beq.n	8014040 <rmw_destroy_node+0x50>
 8014078:	2c00      	cmp	r4, #0
 801407a:	d1f1      	bne.n	8014060 <rmw_destroy_node+0x70>
 801407c:	4b19      	ldr	r3, [pc, #100]	@ (80140e4 <rmw_destroy_node+0xf4>)
 801407e:	681c      	ldr	r4, [r3, #0]
 8014080:	b16c      	cbz	r4, 801409e <rmw_destroy_node+0xae>
 8014082:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014086:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014088:	429d      	cmp	r5, r3
 801408a:	d1f9      	bne.n	8014080 <rmw_destroy_node+0x90>
 801408c:	317c      	adds	r1, #124	@ 0x7c
 801408e:	4638      	mov	r0, r7
 8014090:	f7ff fbd6 	bl	8013840 <rmw_destroy_client>
 8014094:	2801      	cmp	r0, #1
 8014096:	4606      	mov	r6, r0
 8014098:	d0d2      	beq.n	8014040 <rmw_destroy_node+0x50>
 801409a:	2c00      	cmp	r4, #0
 801409c:	d1f1      	bne.n	8014082 <rmw_destroy_node+0x92>
 801409e:	6928      	ldr	r0, [r5, #16]
 80140a0:	696a      	ldr	r2, [r5, #20]
 80140a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80140a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80140aa:	6819      	ldr	r1, [r3, #0]
 80140ac:	f7f9 fbc0 	bl	800d830 <uxr_buffer_delete_entity>
 80140b0:	4602      	mov	r2, r0
 80140b2:	6928      	ldr	r0, [r5, #16]
 80140b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80140b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80140bc:	f7f9 fa62 	bl	800d584 <run_xrce_session>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	bf08      	it	eq
 80140c4:	2602      	moveq	r6, #2
 80140c6:	4638      	mov	r0, r7
 80140c8:	f7f9 f8ea 	bl	800d2a0 <rmw_uxrce_fini_node_memory>
 80140cc:	4630      	mov	r0, r6
 80140ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d0:	4626      	mov	r6, r4
 80140d2:	e7a6      	b.n	8014022 <rmw_destroy_node+0x32>
 80140d4:	08019064 	.word	0x08019064
 80140d8:	2000dcc4 	.word	0x2000dcc4
 80140dc:	2000dd04 	.word	0x2000dd04
 80140e0:	2000dcd4 	.word	0x2000dcd4
 80140e4:	200093e8 	.word	0x200093e8

080140e8 <rmw_node_get_graph_guard_condition>:
 80140e8:	6843      	ldr	r3, [r0, #4]
 80140ea:	6918      	ldr	r0, [r3, #16]
 80140ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80140f0:	4770      	bx	lr
 80140f2:	bf00      	nop

080140f4 <rmw_send_request>:
 80140f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140f8:	4604      	mov	r4, r0
 80140fa:	6800      	ldr	r0, [r0, #0]
 80140fc:	b08b      	sub	sp, #44	@ 0x2c
 80140fe:	460e      	mov	r6, r1
 8014100:	4615      	mov	r5, r2
 8014102:	b128      	cbz	r0, 8014110 <rmw_send_request+0x1c>
 8014104:	4b21      	ldr	r3, [pc, #132]	@ (801418c <rmw_send_request+0x98>)
 8014106:	6819      	ldr	r1, [r3, #0]
 8014108:	f7ec f882 	bl	8000210 <strcmp>
 801410c:	2800      	cmp	r0, #0
 801410e:	d139      	bne.n	8014184 <rmw_send_request+0x90>
 8014110:	6864      	ldr	r4, [r4, #4]
 8014112:	6963      	ldr	r3, [r4, #20]
 8014114:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014118:	689b      	ldr	r3, [r3, #8]
 801411a:	4798      	blx	r3
 801411c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014120:	4630      	mov	r0, r6
 8014122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014126:	4798      	blx	r3
 8014128:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801412c:	9000      	str	r0, [sp, #0]
 801412e:	6922      	ldr	r2, [r4, #16]
 8014130:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014132:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014136:	ab02      	add	r3, sp, #8
 8014138:	f7fb f876 	bl	800f228 <uxr_prepare_output_stream>
 801413c:	2700      	movs	r7, #0
 801413e:	6028      	str	r0, [r5, #0]
 8014140:	606f      	str	r7, [r5, #4]
 8014142:	b198      	cbz	r0, 801416c <rmw_send_request+0x78>
 8014144:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014148:	a902      	add	r1, sp, #8
 801414a:	4630      	mov	r0, r6
 801414c:	4798      	blx	r3
 801414e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014152:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014156:	2b01      	cmp	r3, #1
 8014158:	d00c      	beq.n	8014174 <rmw_send_request+0x80>
 801415a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801415c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014160:	f7fa fa76 	bl	800e650 <uxr_run_session_until_confirm_delivery>
 8014164:	4638      	mov	r0, r7
 8014166:	b00b      	add	sp, #44	@ 0x2c
 8014168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801416c:	2001      	movs	r0, #1
 801416e:	b00b      	add	sp, #44	@ 0x2c
 8014170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014174:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014178:	f7f9 feaa 	bl	800ded0 <uxr_flash_output_streams>
 801417c:	4638      	mov	r0, r7
 801417e:	b00b      	add	sp, #44	@ 0x2c
 8014180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014184:	200c      	movs	r0, #12
 8014186:	b00b      	add	sp, #44	@ 0x2c
 8014188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801418c:	08019064 	.word	0x08019064

08014190 <rmw_take_request>:
 8014190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014194:	4605      	mov	r5, r0
 8014196:	6800      	ldr	r0, [r0, #0]
 8014198:	b089      	sub	sp, #36	@ 0x24
 801419a:	460c      	mov	r4, r1
 801419c:	4690      	mov	r8, r2
 801419e:	461e      	mov	r6, r3
 80141a0:	b128      	cbz	r0, 80141ae <rmw_take_request+0x1e>
 80141a2:	4b28      	ldr	r3, [pc, #160]	@ (8014244 <rmw_take_request+0xb4>)
 80141a4:	6819      	ldr	r1, [r3, #0]
 80141a6:	f7ec f833 	bl	8000210 <strcmp>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d146      	bne.n	801423c <rmw_take_request+0xac>
 80141ae:	b10e      	cbz	r6, 80141b4 <rmw_take_request+0x24>
 80141b0:	2300      	movs	r3, #0
 80141b2:	7033      	strb	r3, [r6, #0]
 80141b4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80141b8:	f7f9 f966 	bl	800d488 <rmw_uxrce_clean_expired_static_input_buffer>
 80141bc:	4648      	mov	r0, r9
 80141be:	f7f9 f93b 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141c2:	4607      	mov	r7, r0
 80141c4:	b3b0      	cbz	r0, 8014234 <rmw_take_request+0xa4>
 80141c6:	6885      	ldr	r5, [r0, #8]
 80141c8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80141cc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80141d0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80141d4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80141d8:	7423      	strb	r3, [r4, #16]
 80141da:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80141de:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80141e2:	74e2      	strb	r2, [r4, #19]
 80141e4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80141e8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80141ec:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80141f0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80141f4:	61e1      	str	r1, [r4, #28]
 80141f6:	6162      	str	r2, [r4, #20]
 80141f8:	61a3      	str	r3, [r4, #24]
 80141fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	4798      	blx	r3
 8014202:	6844      	ldr	r4, [r0, #4]
 8014204:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014208:	f105 0110 	add.w	r1, r5, #16
 801420c:	4668      	mov	r0, sp
 801420e:	f7f7 fbc7 	bl	800b9a0 <ucdr_init_buffer>
 8014212:	68e3      	ldr	r3, [r4, #12]
 8014214:	4641      	mov	r1, r8
 8014216:	4668      	mov	r0, sp
 8014218:	4798      	blx	r3
 801421a:	4639      	mov	r1, r7
 801421c:	4604      	mov	r4, r0
 801421e:	480a      	ldr	r0, [pc, #40]	@ (8014248 <rmw_take_request+0xb8>)
 8014220:	f7ff fafa 	bl	8013818 <put_memory>
 8014224:	b106      	cbz	r6, 8014228 <rmw_take_request+0x98>
 8014226:	7034      	strb	r4, [r6, #0]
 8014228:	f084 0001 	eor.w	r0, r4, #1
 801422c:	b2c0      	uxtb	r0, r0
 801422e:	b009      	add	sp, #36	@ 0x24
 8014230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014234:	2001      	movs	r0, #1
 8014236:	b009      	add	sp, #36	@ 0x24
 8014238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801423c:	200c      	movs	r0, #12
 801423e:	b009      	add	sp, #36	@ 0x24
 8014240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014244:	08019064 	.word	0x08019064
 8014248:	2000dcf4 	.word	0x2000dcf4

0801424c <rmw_send_response>:
 801424c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801424e:	4605      	mov	r5, r0
 8014250:	6800      	ldr	r0, [r0, #0]
 8014252:	b091      	sub	sp, #68	@ 0x44
 8014254:	460c      	mov	r4, r1
 8014256:	4616      	mov	r6, r2
 8014258:	b128      	cbz	r0, 8014266 <rmw_send_response+0x1a>
 801425a:	4b29      	ldr	r3, [pc, #164]	@ (8014300 <rmw_send_response+0xb4>)
 801425c:	6819      	ldr	r1, [r3, #0]
 801425e:	f7eb ffd7 	bl	8000210 <strcmp>
 8014262:	2800      	cmp	r0, #0
 8014264:	d141      	bne.n	80142ea <rmw_send_response+0x9e>
 8014266:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801426a:	9306      	str	r3, [sp, #24]
 801426c:	4623      	mov	r3, r4
 801426e:	9207      	str	r2, [sp, #28]
 8014270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014274:	686d      	ldr	r5, [r5, #4]
 8014276:	789b      	ldrb	r3, [r3, #2]
 8014278:	68a1      	ldr	r1, [r4, #8]
 801427a:	f88d 2017 	strb.w	r2, [sp, #23]
 801427e:	f88d 3016 	strb.w	r3, [sp, #22]
 8014282:	68e2      	ldr	r2, [r4, #12]
 8014284:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014288:	6860      	ldr	r0, [r4, #4]
 801428a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801428e:	ab02      	add	r3, sp, #8
 8014290:	c307      	stmia	r3!, {r0, r1, r2}
 8014292:	696b      	ldr	r3, [r5, #20]
 8014294:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	4798      	blx	r3
 801429a:	6844      	ldr	r4, [r0, #4]
 801429c:	4630      	mov	r0, r6
 801429e:	6923      	ldr	r3, [r4, #16]
 80142a0:	4798      	blx	r3
 80142a2:	f100 0318 	add.w	r3, r0, #24
 80142a6:	6938      	ldr	r0, [r7, #16]
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	692a      	ldr	r2, [r5, #16]
 80142ac:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80142ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142b2:	ab08      	add	r3, sp, #32
 80142b4:	f7fa ffb8 	bl	800f228 <uxr_prepare_output_stream>
 80142b8:	b910      	cbnz	r0, 80142c0 <rmw_send_response+0x74>
 80142ba:	2001      	movs	r0, #1
 80142bc:	b011      	add	sp, #68	@ 0x44
 80142be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c0:	a902      	add	r1, sp, #8
 80142c2:	a808      	add	r0, sp, #32
 80142c4:	f7fc f8e8 	bl	8010498 <uxr_serialize_SampleIdentity>
 80142c8:	68a3      	ldr	r3, [r4, #8]
 80142ca:	a908      	add	r1, sp, #32
 80142cc:	4630      	mov	r0, r6
 80142ce:	4798      	blx	r3
 80142d0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80142d4:	6938      	ldr	r0, [r7, #16]
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d00a      	beq.n	80142f0 <rmw_send_response+0xa4>
 80142da:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80142dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142e0:	f7fa f9b6 	bl	800e650 <uxr_run_session_until_confirm_delivery>
 80142e4:	2000      	movs	r0, #0
 80142e6:	b011      	add	sp, #68	@ 0x44
 80142e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142ea:	200c      	movs	r0, #12
 80142ec:	b011      	add	sp, #68	@ 0x44
 80142ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80142f4:	f7f9 fdec 	bl	800ded0 <uxr_flash_output_streams>
 80142f8:	2000      	movs	r0, #0
 80142fa:	b011      	add	sp, #68	@ 0x44
 80142fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142fe:	bf00      	nop
 8014300:	08019064 	.word	0x08019064

08014304 <rmw_take_response>:
 8014304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014308:	4604      	mov	r4, r0
 801430a:	6800      	ldr	r0, [r0, #0]
 801430c:	b088      	sub	sp, #32
 801430e:	4688      	mov	r8, r1
 8014310:	4617      	mov	r7, r2
 8014312:	461d      	mov	r5, r3
 8014314:	b120      	cbz	r0, 8014320 <rmw_take_response+0x1c>
 8014316:	4b1e      	ldr	r3, [pc, #120]	@ (8014390 <rmw_take_response+0x8c>)
 8014318:	6819      	ldr	r1, [r3, #0]
 801431a:	f7eb ff79 	bl	8000210 <strcmp>
 801431e:	bb78      	cbnz	r0, 8014380 <rmw_take_response+0x7c>
 8014320:	b10d      	cbz	r5, 8014326 <rmw_take_response+0x22>
 8014322:	2300      	movs	r3, #0
 8014324:	702b      	strb	r3, [r5, #0]
 8014326:	6864      	ldr	r4, [r4, #4]
 8014328:	f7f9 f8ae 	bl	800d488 <rmw_uxrce_clean_expired_static_input_buffer>
 801432c:	4620      	mov	r0, r4
 801432e:	f7f9 f883 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014332:	4606      	mov	r6, r0
 8014334:	b340      	cbz	r0, 8014388 <rmw_take_response+0x84>
 8014336:	6963      	ldr	r3, [r4, #20]
 8014338:	6884      	ldr	r4, [r0, #8]
 801433a:	68db      	ldr	r3, [r3, #12]
 801433c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014340:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014344:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014348:	4798      	blx	r3
 801434a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801434e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014352:	f104 0110 	add.w	r1, r4, #16
 8014356:	4668      	mov	r0, sp
 8014358:	f7f7 fb22 	bl	800b9a0 <ucdr_init_buffer>
 801435c:	4639      	mov	r1, r7
 801435e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014362:	4668      	mov	r0, sp
 8014364:	4798      	blx	r3
 8014366:	4631      	mov	r1, r6
 8014368:	4604      	mov	r4, r0
 801436a:	480a      	ldr	r0, [pc, #40]	@ (8014394 <rmw_take_response+0x90>)
 801436c:	f7ff fa54 	bl	8013818 <put_memory>
 8014370:	b105      	cbz	r5, 8014374 <rmw_take_response+0x70>
 8014372:	702c      	strb	r4, [r5, #0]
 8014374:	f084 0001 	eor.w	r0, r4, #1
 8014378:	b2c0      	uxtb	r0, r0
 801437a:	b008      	add	sp, #32
 801437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014380:	200c      	movs	r0, #12
 8014382:	b008      	add	sp, #32
 8014384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014388:	2001      	movs	r0, #1
 801438a:	b008      	add	sp, #32
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014390:	08019064 	.word	0x08019064
 8014394:	2000dcf4 	.word	0x2000dcf4

08014398 <rmw_destroy_service>:
 8014398:	b570      	push	{r4, r5, r6, lr}
 801439a:	b128      	cbz	r0, 80143a8 <rmw_destroy_service+0x10>
 801439c:	4604      	mov	r4, r0
 801439e:	6800      	ldr	r0, [r0, #0]
 80143a0:	460d      	mov	r5, r1
 80143a2:	f7f9 f96f 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 80143a6:	b910      	cbnz	r0, 80143ae <rmw_destroy_service+0x16>
 80143a8:	2401      	movs	r4, #1
 80143aa:	4620      	mov	r0, r4
 80143ac:	bd70      	pop	{r4, r5, r6, pc}
 80143ae:	6863      	ldr	r3, [r4, #4]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d0f9      	beq.n	80143a8 <rmw_destroy_service+0x10>
 80143b4:	2d00      	cmp	r5, #0
 80143b6:	d0f7      	beq.n	80143a8 <rmw_destroy_service+0x10>
 80143b8:	6828      	ldr	r0, [r5, #0]
 80143ba:	f7f9 f963 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 80143be:	2800      	cmp	r0, #0
 80143c0:	d0f2      	beq.n	80143a8 <rmw_destroy_service+0x10>
 80143c2:	686e      	ldr	r6, [r5, #4]
 80143c4:	2e00      	cmp	r6, #0
 80143c6:	d0ef      	beq.n	80143a8 <rmw_destroy_service+0x10>
 80143c8:	6864      	ldr	r4, [r4, #4]
 80143ca:	6932      	ldr	r2, [r6, #16]
 80143cc:	6920      	ldr	r0, [r4, #16]
 80143ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80143d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80143d6:	6819      	ldr	r1, [r3, #0]
 80143d8:	f001 fb6a 	bl	8015ab0 <uxr_buffer_cancel_data>
 80143dc:	4602      	mov	r2, r0
 80143de:	6920      	ldr	r0, [r4, #16]
 80143e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80143e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80143e8:	f7f9 f8cc 	bl	800d584 <run_xrce_session>
 80143ec:	6920      	ldr	r0, [r4, #16]
 80143ee:	6932      	ldr	r2, [r6, #16]
 80143f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80143f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80143f8:	6819      	ldr	r1, [r3, #0]
 80143fa:	f7f9 fa19 	bl	800d830 <uxr_buffer_delete_entity>
 80143fe:	4602      	mov	r2, r0
 8014400:	6920      	ldr	r0, [r4, #16]
 8014402:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014406:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801440a:	f7f9 f8bb 	bl	800d584 <run_xrce_session>
 801440e:	2800      	cmp	r0, #0
 8014410:	4628      	mov	r0, r5
 8014412:	bf14      	ite	ne
 8014414:	2400      	movne	r4, #0
 8014416:	2402      	moveq	r4, #2
 8014418:	f7f8 ff86 	bl	800d328 <rmw_uxrce_fini_service_memory>
 801441c:	e7c5      	b.n	80143aa <rmw_destroy_service+0x12>
 801441e:	bf00      	nop

08014420 <rmw_create_subscription>:
 8014420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014424:	b08d      	sub	sp, #52	@ 0x34
 8014426:	2800      	cmp	r0, #0
 8014428:	f000 80d1 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 801442c:	460e      	mov	r6, r1
 801442e:	2900      	cmp	r1, #0
 8014430:	f000 80cd 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 8014434:	4604      	mov	r4, r0
 8014436:	6800      	ldr	r0, [r0, #0]
 8014438:	4615      	mov	r5, r2
 801443a:	4698      	mov	r8, r3
 801443c:	f7f9 f922 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 8014440:	2800      	cmp	r0, #0
 8014442:	f000 80c4 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 8014446:	2d00      	cmp	r5, #0
 8014448:	f000 80c1 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 801444c:	782b      	ldrb	r3, [r5, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	f000 80bd 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 8014454:	f1b8 0f00 	cmp.w	r8, #0
 8014458:	f000 80b9 	beq.w	80145ce <rmw_create_subscription+0x1ae>
 801445c:	485e      	ldr	r0, [pc, #376]	@ (80145d8 <rmw_create_subscription+0x1b8>)
 801445e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014462:	f7ff f9c9 	bl	80137f8 <get_memory>
 8014466:	4604      	mov	r4, r0
 8014468:	2800      	cmp	r0, #0
 801446a:	f000 80b1 	beq.w	80145d0 <rmw_create_subscription+0x1b0>
 801446e:	6887      	ldr	r7, [r0, #8]
 8014470:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8014474:	f7ff fa28 	bl	80138c8 <rmw_get_implementation_identifier>
 8014478:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801447c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801447e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8014482:	4628      	mov	r0, r5
 8014484:	f7eb fece 	bl	8000224 <strlen>
 8014488:	3001      	adds	r0, #1
 801448a:	283c      	cmp	r0, #60	@ 0x3c
 801448c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8014490:	f200 8096 	bhi.w	80145c0 <rmw_create_subscription+0x1a0>
 8014494:	4a51      	ldr	r2, [pc, #324]	@ (80145dc <rmw_create_subscription+0x1bc>)
 8014496:	462b      	mov	r3, r5
 8014498:	213c      	movs	r1, #60	@ 0x3c
 801449a:	4650      	mov	r0, sl
 801449c:	f003 f814 	bl	80174c8 <sniprintf>
 80144a0:	4641      	mov	r1, r8
 80144a2:	f8c7 9020 	str.w	r9, [r7, #32]
 80144a6:	2250      	movs	r2, #80	@ 0x50
 80144a8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80144ac:	f003 f9af 	bl	801780e <memcpy>
 80144b0:	494b      	ldr	r1, [pc, #300]	@ (80145e0 <rmw_create_subscription+0x1c0>)
 80144b2:	4630      	mov	r0, r6
 80144b4:	f7f9 f8f4 	bl	800d6a0 <get_message_typesupport_handle>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	f000 8081 	beq.w	80145c0 <rmw_create_subscription+0x1a0>
 80144be:	6842      	ldr	r2, [r0, #4]
 80144c0:	61ba      	str	r2, [r7, #24]
 80144c2:	2a00      	cmp	r2, #0
 80144c4:	d07c      	beq.n	80145c0 <rmw_create_subscription+0x1a0>
 80144c6:	4629      	mov	r1, r5
 80144c8:	4643      	mov	r3, r8
 80144ca:	4648      	mov	r0, r9
 80144cc:	f7ff fc8c 	bl	8013de8 <create_topic>
 80144d0:	61f8      	str	r0, [r7, #28]
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d078      	beq.n	80145c8 <rmw_create_subscription+0x1a8>
 80144d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80144da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80144de:	2104      	movs	r1, #4
 80144e0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80144e4:	1c42      	adds	r2, r0, #1
 80144e6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80144ea:	f7f9 fba3 	bl	800dc34 <uxr_object_id>
 80144ee:	6138      	str	r0, [r7, #16]
 80144f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80144f4:	2506      	movs	r5, #6
 80144f6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80144fa:	9500      	str	r5, [sp, #0]
 80144fc:	6819      	ldr	r1, [r3, #0]
 80144fe:	693a      	ldr	r2, [r7, #16]
 8014500:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014508:	f7f9 fa76 	bl	800d9f8 <uxr_buffer_create_subscriber_bin>
 801450c:	4602      	mov	r2, r0
 801450e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014512:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014516:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801451a:	f7f9 f833 	bl	800d584 <run_xrce_session>
 801451e:	2800      	cmp	r0, #0
 8014520:	d04e      	beq.n	80145c0 <rmw_create_subscription+0x1a0>
 8014522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801452a:	4629      	mov	r1, r5
 801452c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8014530:	1c42      	adds	r2, r0, #1
 8014532:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8014536:	f7f9 fb7d 	bl	800dc34 <uxr_object_id>
 801453a:	ae08      	add	r6, sp, #32
 801453c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	6178      	str	r0, [r7, #20]
 8014544:	4641      	mov	r1, r8
 8014546:	4630      	mov	r0, r6
 8014548:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801454c:	9305      	str	r3, [sp, #20]
 801454e:	f7f9 f835 	bl	800d5bc <convert_qos_profile>
 8014552:	9503      	str	r5, [sp, #12]
 8014554:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014558:	9b05      	ldr	r3, [sp, #20]
 801455a:	9001      	str	r0, [sp, #4]
 801455c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8014568:	f8db 1000 	ldr.w	r1, [fp]
 801456c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8014570:	f7f9 fae8 	bl	800db44 <uxr_buffer_create_datareader_bin>
 8014574:	4602      	mov	r2, r0
 8014576:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801457a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801457e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014582:	f7f8 ffff 	bl	800d584 <run_xrce_session>
 8014586:	b1d8      	cbz	r0, 80145c0 <rmw_create_subscription+0x1a0>
 8014588:	f898 3008 	ldrb.w	r3, [r8, #8]
 801458c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014590:	2b02      	cmp	r3, #2
 8014592:	bf0c      	ite	eq
 8014594:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8014598:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801459c:	9307      	str	r3, [sp, #28]
 801459e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80145a2:	2200      	movs	r2, #0
 80145a4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80145a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80145aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	9b07      	ldr	r3, [sp, #28]
 80145b4:	6809      	ldr	r1, [r1, #0]
 80145b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80145ba:	f001 fa3f 	bl	8015a3c <uxr_buffer_request_data>
 80145be:	e007      	b.n	80145d0 <rmw_create_subscription+0x1b0>
 80145c0:	69f8      	ldr	r0, [r7, #28]
 80145c2:	b108      	cbz	r0, 80145c8 <rmw_create_subscription+0x1a8>
 80145c4:	f7f8 fedc 	bl	800d380 <rmw_uxrce_fini_topic_memory>
 80145c8:	4620      	mov	r0, r4
 80145ca:	f7f8 fe97 	bl	800d2fc <rmw_uxrce_fini_subscription_memory>
 80145ce:	2400      	movs	r4, #0
 80145d0:	4620      	mov	r0, r4
 80145d2:	b00d      	add	sp, #52	@ 0x34
 80145d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d8:	2000dd04 	.word	0x2000dd04
 80145dc:	08018a30 	.word	0x08018a30
 80145e0:	080187c0 	.word	0x080187c0

080145e4 <rmw_subscription_get_actual_qos>:
 80145e4:	b150      	cbz	r0, 80145fc <rmw_subscription_get_actual_qos+0x18>
 80145e6:	b508      	push	{r3, lr}
 80145e8:	460b      	mov	r3, r1
 80145ea:	b149      	cbz	r1, 8014600 <rmw_subscription_get_actual_qos+0x1c>
 80145ec:	6841      	ldr	r1, [r0, #4]
 80145ee:	2250      	movs	r2, #80	@ 0x50
 80145f0:	3128      	adds	r1, #40	@ 0x28
 80145f2:	4618      	mov	r0, r3
 80145f4:	f003 f90b 	bl	801780e <memcpy>
 80145f8:	2000      	movs	r0, #0
 80145fa:	bd08      	pop	{r3, pc}
 80145fc:	200b      	movs	r0, #11
 80145fe:	4770      	bx	lr
 8014600:	200b      	movs	r0, #11
 8014602:	bd08      	pop	{r3, pc}

08014604 <rmw_destroy_subscription>:
 8014604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014606:	b128      	cbz	r0, 8014614 <rmw_destroy_subscription+0x10>
 8014608:	4604      	mov	r4, r0
 801460a:	6800      	ldr	r0, [r0, #0]
 801460c:	460d      	mov	r5, r1
 801460e:	f7f9 f839 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 8014612:	b910      	cbnz	r0, 801461a <rmw_destroy_subscription+0x16>
 8014614:	2401      	movs	r4, #1
 8014616:	4620      	mov	r0, r4
 8014618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801461a:	6863      	ldr	r3, [r4, #4]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d0f9      	beq.n	8014614 <rmw_destroy_subscription+0x10>
 8014620:	2d00      	cmp	r5, #0
 8014622:	d0f7      	beq.n	8014614 <rmw_destroy_subscription+0x10>
 8014624:	6828      	ldr	r0, [r5, #0]
 8014626:	f7f9 f82d 	bl	800d684 <is_uxrce_rmw_identifier_valid>
 801462a:	2800      	cmp	r0, #0
 801462c:	d0f2      	beq.n	8014614 <rmw_destroy_subscription+0x10>
 801462e:	686c      	ldr	r4, [r5, #4]
 8014630:	2c00      	cmp	r4, #0
 8014632:	d0ef      	beq.n	8014614 <rmw_destroy_subscription+0x10>
 8014634:	6a26      	ldr	r6, [r4, #32]
 8014636:	6962      	ldr	r2, [r4, #20]
 8014638:	6930      	ldr	r0, [r6, #16]
 801463a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801463e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014642:	6819      	ldr	r1, [r3, #0]
 8014644:	f001 fa34 	bl	8015ab0 <uxr_buffer_cancel_data>
 8014648:	4602      	mov	r2, r0
 801464a:	6930      	ldr	r0, [r6, #16]
 801464c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014650:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014654:	f7f8 ff96 	bl	800d584 <run_xrce_session>
 8014658:	69e0      	ldr	r0, [r4, #28]
 801465a:	f7ff fc15 	bl	8013e88 <destroy_topic>
 801465e:	6a23      	ldr	r3, [r4, #32]
 8014660:	6962      	ldr	r2, [r4, #20]
 8014662:	6918      	ldr	r0, [r3, #16]
 8014664:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014668:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801466c:	6819      	ldr	r1, [r3, #0]
 801466e:	f7f9 f8df 	bl	800d830 <uxr_buffer_delete_entity>
 8014672:	6a23      	ldr	r3, [r4, #32]
 8014674:	6922      	ldr	r2, [r4, #16]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801467c:	4604      	mov	r4, r0
 801467e:	6809      	ldr	r1, [r1, #0]
 8014680:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014684:	f7f9 f8d4 	bl	800d830 <uxr_buffer_delete_entity>
 8014688:	6937      	ldr	r7, [r6, #16]
 801468a:	4622      	mov	r2, r4
 801468c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8014690:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8014694:	4604      	mov	r4, r0
 8014696:	4638      	mov	r0, r7
 8014698:	f7f8 ff74 	bl	800d584 <run_xrce_session>
 801469c:	6936      	ldr	r6, [r6, #16]
 801469e:	4622      	mov	r2, r4
 80146a0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80146a4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80146a8:	4604      	mov	r4, r0
 80146aa:	4630      	mov	r0, r6
 80146ac:	f7f8 ff6a 	bl	800d584 <run_xrce_session>
 80146b0:	b12c      	cbz	r4, 80146be <rmw_destroy_subscription+0xba>
 80146b2:	b120      	cbz	r0, 80146be <rmw_destroy_subscription+0xba>
 80146b4:	2400      	movs	r4, #0
 80146b6:	4628      	mov	r0, r5
 80146b8:	f7f8 fe20 	bl	800d2fc <rmw_uxrce_fini_subscription_memory>
 80146bc:	e7ab      	b.n	8014616 <rmw_destroy_subscription+0x12>
 80146be:	2402      	movs	r4, #2
 80146c0:	e7f9      	b.n	80146b6 <rmw_destroy_subscription+0xb2>
 80146c2:	bf00      	nop

080146c4 <rmw_take_with_info>:
 80146c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146c6:	4604      	mov	r4, r0
 80146c8:	6800      	ldr	r0, [r0, #0]
 80146ca:	b089      	sub	sp, #36	@ 0x24
 80146cc:	460f      	mov	r7, r1
 80146ce:	4615      	mov	r5, r2
 80146d0:	b128      	cbz	r0, 80146de <rmw_take_with_info+0x1a>
 80146d2:	4b24      	ldr	r3, [pc, #144]	@ (8014764 <rmw_take_with_info+0xa0>)
 80146d4:	6819      	ldr	r1, [r3, #0]
 80146d6:	f7eb fd9b 	bl	8000210 <strcmp>
 80146da:	2800      	cmp	r0, #0
 80146dc:	d13e      	bne.n	801475c <rmw_take_with_info+0x98>
 80146de:	b305      	cbz	r5, 8014722 <rmw_take_with_info+0x5e>
 80146e0:	6864      	ldr	r4, [r4, #4]
 80146e2:	2300      	movs	r3, #0
 80146e4:	702b      	strb	r3, [r5, #0]
 80146e6:	f7f8 fecf 	bl	800d488 <rmw_uxrce_clean_expired_static_input_buffer>
 80146ea:	4620      	mov	r0, r4
 80146ec:	f7f8 fea4 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 80146f0:	4606      	mov	r6, r0
 80146f2:	b1f0      	cbz	r0, 8014732 <rmw_take_with_info+0x6e>
 80146f4:	6881      	ldr	r1, [r0, #8]
 80146f6:	4668      	mov	r0, sp
 80146f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80146fc:	3110      	adds	r1, #16
 80146fe:	f7f7 f94f 	bl	800b9a0 <ucdr_init_buffer>
 8014702:	69a3      	ldr	r3, [r4, #24]
 8014704:	4639      	mov	r1, r7
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	4668      	mov	r0, sp
 801470a:	4798      	blx	r3
 801470c:	4631      	mov	r1, r6
 801470e:	4604      	mov	r4, r0
 8014710:	4815      	ldr	r0, [pc, #84]	@ (8014768 <rmw_take_with_info+0xa4>)
 8014712:	f7ff f881 	bl	8013818 <put_memory>
 8014716:	702c      	strb	r4, [r5, #0]
 8014718:	f084 0001 	eor.w	r0, r4, #1
 801471c:	b2c0      	uxtb	r0, r0
 801471e:	b009      	add	sp, #36	@ 0x24
 8014720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014722:	6864      	ldr	r4, [r4, #4]
 8014724:	f7f8 feb0 	bl	800d488 <rmw_uxrce_clean_expired_static_input_buffer>
 8014728:	4620      	mov	r0, r4
 801472a:	f7f8 fe85 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 801472e:	4605      	mov	r5, r0
 8014730:	b910      	cbnz	r0, 8014738 <rmw_take_with_info+0x74>
 8014732:	2001      	movs	r0, #1
 8014734:	b009      	add	sp, #36	@ 0x24
 8014736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014738:	68a9      	ldr	r1, [r5, #8]
 801473a:	4668      	mov	r0, sp
 801473c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014740:	3110      	adds	r1, #16
 8014742:	f7f7 f92d 	bl	800b9a0 <ucdr_init_buffer>
 8014746:	69a3      	ldr	r3, [r4, #24]
 8014748:	4639      	mov	r1, r7
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	4668      	mov	r0, sp
 801474e:	4798      	blx	r3
 8014750:	4629      	mov	r1, r5
 8014752:	4604      	mov	r4, r0
 8014754:	4804      	ldr	r0, [pc, #16]	@ (8014768 <rmw_take_with_info+0xa4>)
 8014756:	f7ff f85f 	bl	8013818 <put_memory>
 801475a:	e7dd      	b.n	8014718 <rmw_take_with_info+0x54>
 801475c:	200c      	movs	r0, #12
 801475e:	b009      	add	sp, #36	@ 0x24
 8014760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014762:	bf00      	nop
 8014764:	08019064 	.word	0x08019064
 8014768:	2000dcf4 	.word	0x2000dcf4

0801476c <rmw_uxrce_transport_init>:
 801476c:	b508      	push	{r3, lr}
 801476e:	b108      	cbz	r0, 8014774 <rmw_uxrce_transport_init+0x8>
 8014770:	f100 0210 	add.w	r2, r0, #16
 8014774:	b139      	cbz	r1, 8014786 <rmw_uxrce_transport_init+0x1a>
 8014776:	6949      	ldr	r1, [r1, #20]
 8014778:	4610      	mov	r0, r2
 801477a:	f000 fbdf 	bl	8014f3c <uxr_init_custom_transport>
 801477e:	f080 0001 	eor.w	r0, r0, #1
 8014782:	b2c0      	uxtb	r0, r0
 8014784:	bd08      	pop	{r3, pc}
 8014786:	4b04      	ldr	r3, [pc, #16]	@ (8014798 <rmw_uxrce_transport_init+0x2c>)
 8014788:	4610      	mov	r0, r2
 801478a:	6859      	ldr	r1, [r3, #4]
 801478c:	f000 fbd6 	bl	8014f3c <uxr_init_custom_transport>
 8014790:	f080 0001 	eor.w	r0, r0, #1
 8014794:	b2c0      	uxtb	r0, r0
 8014796:	bd08      	pop	{r3, pc}
 8014798:	200093cc 	.word	0x200093cc

0801479c <rmw_wait>:
 801479c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147a0:	b089      	sub	sp, #36	@ 0x24
 80147a2:	4605      	mov	r5, r0
 80147a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80147a6:	460e      	mov	r6, r1
 80147a8:	4698      	mov	r8, r3
 80147aa:	4691      	mov	r9, r2
 80147ac:	2a00      	cmp	r2, #0
 80147ae:	f000 810a 	beq.w	80149c6 <rmw_wait+0x22a>
 80147b2:	b16c      	cbz	r4, 80147d0 <rmw_wait+0x34>
 80147b4:	4bae      	ldr	r3, [pc, #696]	@ (8014a70 <rmw_wait+0x2d4>)
 80147b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147b8:	af04      	add	r7, sp, #16
 80147ba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80147be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80147c6:	f7fe fe4b 	bl	8013460 <rmw_time_equal>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	f000 8127 	beq.w	8014a1e <rmw_wait+0x282>
 80147d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80147d4:	f7f8 fe58 	bl	800d488 <rmw_uxrce_clean_expired_static_input_buffer>
 80147d8:	4ba6      	ldr	r3, [pc, #664]	@ (8014a74 <rmw_wait+0x2d8>)
 80147da:	681c      	ldr	r4, [r3, #0]
 80147dc:	b14c      	cbz	r4, 80147f2 <rmw_wait+0x56>
 80147de:	4623      	mov	r3, r4
 80147e0:	2100      	movs	r1, #0
 80147e2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80147e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80147ea:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d1f7      	bne.n	80147e2 <rmw_wait+0x46>
 80147f2:	f1b9 0f00 	cmp.w	r9, #0
 80147f6:	d011      	beq.n	801481c <rmw_wait+0x80>
 80147f8:	f8d9 1000 	ldr.w	r1, [r9]
 80147fc:	b171      	cbz	r1, 801481c <rmw_wait+0x80>
 80147fe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014802:	2300      	movs	r3, #0
 8014804:	2001      	movs	r0, #1
 8014806:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801480a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801480c:	6912      	ldr	r2, [r2, #16]
 801480e:	3301      	adds	r3, #1
 8014810:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014814:	4299      	cmp	r1, r3
 8014816:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801481a:	d1f4      	bne.n	8014806 <rmw_wait+0x6a>
 801481c:	f1b8 0f00 	cmp.w	r8, #0
 8014820:	d011      	beq.n	8014846 <rmw_wait+0xaa>
 8014822:	f8d8 1000 	ldr.w	r1, [r8]
 8014826:	b171      	cbz	r1, 8014846 <rmw_wait+0xaa>
 8014828:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801482c:	2300      	movs	r3, #0
 801482e:	2001      	movs	r0, #1
 8014830:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014834:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014836:	6912      	ldr	r2, [r2, #16]
 8014838:	3301      	adds	r3, #1
 801483a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801483e:	4299      	cmp	r1, r3
 8014840:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014844:	d1f4      	bne.n	8014830 <rmw_wait+0x94>
 8014846:	b185      	cbz	r5, 801486a <rmw_wait+0xce>
 8014848:	6829      	ldr	r1, [r5, #0]
 801484a:	b171      	cbz	r1, 801486a <rmw_wait+0xce>
 801484c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014850:	2300      	movs	r3, #0
 8014852:	2001      	movs	r0, #1
 8014854:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014858:	6a12      	ldr	r2, [r2, #32]
 801485a:	6912      	ldr	r2, [r2, #16]
 801485c:	3301      	adds	r3, #1
 801485e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014862:	4299      	cmp	r1, r3
 8014864:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014868:	d1f4      	bne.n	8014854 <rmw_wait+0xb8>
 801486a:	b34c      	cbz	r4, 80148c0 <rmw_wait+0x124>
 801486c:	4622      	mov	r2, r4
 801486e:	2300      	movs	r3, #0
 8014870:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014874:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014878:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801487c:	440b      	add	r3, r1
 801487e:	b2db      	uxtb	r3, r3
 8014880:	2a00      	cmp	r2, #0
 8014882:	d1f5      	bne.n	8014870 <rmw_wait+0xd4>
 8014884:	2b00      	cmp	r3, #0
 8014886:	f000 8084 	beq.w	8014992 <rmw_wait+0x1f6>
 801488a:	1c7a      	adds	r2, r7, #1
 801488c:	d00d      	beq.n	80148aa <rmw_wait+0x10e>
 801488e:	ee07 7a90 	vmov	s15, r7
 8014892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014896:	ee07 3a90 	vmov	s15, r3
 801489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80148a2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80148a6:	ee17 7a90 	vmov	r7, s15
 80148aa:	68a0      	ldr	r0, [r4, #8]
 80148ac:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80148b0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f040 8090 	bne.w	80149da <rmw_wait+0x23e>
 80148ba:	6864      	ldr	r4, [r4, #4]
 80148bc:	2c00      	cmp	r4, #0
 80148be:	d1f4      	bne.n	80148aa <rmw_wait+0x10e>
 80148c0:	f1b9 0f00 	cmp.w	r9, #0
 80148c4:	f000 80bc 	beq.w	8014a40 <rmw_wait+0x2a4>
 80148c8:	f8d9 7000 	ldr.w	r7, [r9]
 80148cc:	2f00      	cmp	r7, #0
 80148ce:	f000 808e 	beq.w	80149ee <rmw_wait+0x252>
 80148d2:	2400      	movs	r4, #0
 80148d4:	4627      	mov	r7, r4
 80148d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80148da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80148de:	f7f8 fdab 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 80148e2:	2800      	cmp	r0, #0
 80148e4:	d05f      	beq.n	80149a6 <rmw_wait+0x20a>
 80148e6:	f8d9 3000 	ldr.w	r3, [r9]
 80148ea:	3401      	adds	r4, #1
 80148ec:	42a3      	cmp	r3, r4
 80148ee:	f04f 0701 	mov.w	r7, #1
 80148f2:	d8f0      	bhi.n	80148d6 <rmw_wait+0x13a>
 80148f4:	f1b8 0f00 	cmp.w	r8, #0
 80148f8:	d012      	beq.n	8014920 <rmw_wait+0x184>
 80148fa:	f8d8 3000 	ldr.w	r3, [r8]
 80148fe:	b17b      	cbz	r3, 8014920 <rmw_wait+0x184>
 8014900:	2400      	movs	r4, #0
 8014902:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014906:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801490a:	f7f8 fd95 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 801490e:	2800      	cmp	r0, #0
 8014910:	d051      	beq.n	80149b6 <rmw_wait+0x21a>
 8014912:	f8d8 3000 	ldr.w	r3, [r8]
 8014916:	3401      	adds	r4, #1
 8014918:	42a3      	cmp	r3, r4
 801491a:	f04f 0701 	mov.w	r7, #1
 801491e:	d8f0      	bhi.n	8014902 <rmw_wait+0x166>
 8014920:	b1dd      	cbz	r5, 801495a <rmw_wait+0x1be>
 8014922:	682b      	ldr	r3, [r5, #0]
 8014924:	b1cb      	cbz	r3, 801495a <rmw_wait+0x1be>
 8014926:	2400      	movs	r4, #0
 8014928:	686b      	ldr	r3, [r5, #4]
 801492a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801492e:	f7f8 fd83 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014932:	b158      	cbz	r0, 801494c <rmw_wait+0x1b0>
 8014934:	682b      	ldr	r3, [r5, #0]
 8014936:	3401      	adds	r4, #1
 8014938:	42a3      	cmp	r3, r4
 801493a:	d969      	bls.n	8014a10 <rmw_wait+0x274>
 801493c:	686b      	ldr	r3, [r5, #4]
 801493e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014942:	2701      	movs	r7, #1
 8014944:	f7f8 fd78 	bl	800d438 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014948:	2800      	cmp	r0, #0
 801494a:	d1f3      	bne.n	8014934 <rmw_wait+0x198>
 801494c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8014950:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014954:	3401      	adds	r4, #1
 8014956:	42a3      	cmp	r3, r4
 8014958:	d8e6      	bhi.n	8014928 <rmw_wait+0x18c>
 801495a:	b1a6      	cbz	r6, 8014986 <rmw_wait+0x1ea>
 801495c:	6834      	ldr	r4, [r6, #0]
 801495e:	b194      	cbz	r4, 8014986 <rmw_wait+0x1ea>
 8014960:	2300      	movs	r3, #0
 8014962:	461d      	mov	r5, r3
 8014964:	e004      	b.n	8014970 <rmw_wait+0x1d4>
 8014966:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801496a:	3301      	adds	r3, #1
 801496c:	42a3      	cmp	r3, r4
 801496e:	d00a      	beq.n	8014986 <rmw_wait+0x1ea>
 8014970:	6870      	ldr	r0, [r6, #4]
 8014972:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014976:	7c0a      	ldrb	r2, [r1, #16]
 8014978:	2a00      	cmp	r2, #0
 801497a:	d0f4      	beq.n	8014966 <rmw_wait+0x1ca>
 801497c:	3301      	adds	r3, #1
 801497e:	42a3      	cmp	r3, r4
 8014980:	740d      	strb	r5, [r1, #16]
 8014982:	4617      	mov	r7, r2
 8014984:	d1f4      	bne.n	8014970 <rmw_wait+0x1d4>
 8014986:	2f00      	cmp	r7, #0
 8014988:	d03e      	beq.n	8014a08 <rmw_wait+0x26c>
 801498a:	2000      	movs	r0, #0
 801498c:	b009      	add	sp, #36	@ 0x24
 801498e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014992:	68a0      	ldr	r0, [r4, #8]
 8014994:	2100      	movs	r1, #0
 8014996:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801499a:	f7f9 fe1f 	bl	800e5dc <uxr_run_session_timeout>
 801499e:	6864      	ldr	r4, [r4, #4]
 80149a0:	2c00      	cmp	r4, #0
 80149a2:	d1f6      	bne.n	8014992 <rmw_wait+0x1f6>
 80149a4:	e78c      	b.n	80148c0 <rmw_wait+0x124>
 80149a6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80149aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80149ae:	3401      	adds	r4, #1
 80149b0:	42a3      	cmp	r3, r4
 80149b2:	d890      	bhi.n	80148d6 <rmw_wait+0x13a>
 80149b4:	e79e      	b.n	80148f4 <rmw_wait+0x158>
 80149b6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80149ba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80149be:	3401      	adds	r4, #1
 80149c0:	429c      	cmp	r4, r3
 80149c2:	d39e      	bcc.n	8014902 <rmw_wait+0x166>
 80149c4:	e7ac      	b.n	8014920 <rmw_wait+0x184>
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	f47f aef3 	bne.w	80147b2 <rmw_wait+0x16>
 80149cc:	2800      	cmp	r0, #0
 80149ce:	f47f aef0 	bne.w	80147b2 <rmw_wait+0x16>
 80149d2:	2900      	cmp	r1, #0
 80149d4:	f47f aeed 	bne.w	80147b2 <rmw_wait+0x16>
 80149d8:	e7d7      	b.n	801498a <rmw_wait+0x1ee>
 80149da:	4639      	mov	r1, r7
 80149dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149e0:	f7f9 fe16 	bl	800e610 <uxr_run_session_until_data>
 80149e4:	6864      	ldr	r4, [r4, #4]
 80149e6:	2c00      	cmp	r4, #0
 80149e8:	f47f af5f 	bne.w	80148aa <rmw_wait+0x10e>
 80149ec:	e768      	b.n	80148c0 <rmw_wait+0x124>
 80149ee:	f1b8 0f00 	cmp.w	r8, #0
 80149f2:	d032      	beq.n	8014a5a <rmw_wait+0x2be>
 80149f4:	f8d8 3000 	ldr.w	r3, [r8]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d181      	bne.n	8014900 <rmw_wait+0x164>
 80149fc:	461f      	mov	r7, r3
 80149fe:	2d00      	cmp	r5, #0
 8014a00:	d18f      	bne.n	8014922 <rmw_wait+0x186>
 8014a02:	462f      	mov	r7, r5
 8014a04:	2e00      	cmp	r6, #0
 8014a06:	d1a9      	bne.n	801495c <rmw_wait+0x1c0>
 8014a08:	2002      	movs	r0, #2
 8014a0a:	b009      	add	sp, #36	@ 0x24
 8014a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a10:	2e00      	cmp	r6, #0
 8014a12:	d0ba      	beq.n	801498a <rmw_wait+0x1ee>
 8014a14:	6834      	ldr	r4, [r6, #0]
 8014a16:	2701      	movs	r7, #1
 8014a18:	2c00      	cmp	r4, #0
 8014a1a:	d1a1      	bne.n	8014960 <rmw_wait+0x1c4>
 8014a1c:	e7b5      	b.n	801498a <rmw_wait+0x1ee>
 8014a1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014a22:	f7fe fd71 	bl	8013508 <rmw_time_total_nsec>
 8014a26:	2300      	movs	r3, #0
 8014a28:	4a13      	ldr	r2, [pc, #76]	@ (8014a78 <rmw_wait+0x2dc>)
 8014a2a:	f7ec f85f 	bl	8000aec <__aeabi_uldivmod>
 8014a2e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014a32:	f171 0300 	sbcs.w	r3, r1, #0
 8014a36:	4607      	mov	r7, r0
 8014a38:	bfa8      	it	ge
 8014a3a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8014a3e:	e6c9      	b.n	80147d4 <rmw_wait+0x38>
 8014a40:	f1b8 0f00 	cmp.w	r8, #0
 8014a44:	d009      	beq.n	8014a5a <rmw_wait+0x2be>
 8014a46:	f8d8 3000 	ldr.w	r3, [r8]
 8014a4a:	464f      	mov	r7, r9
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	f47f af57 	bne.w	8014900 <rmw_wait+0x164>
 8014a52:	2d00      	cmp	r5, #0
 8014a54:	f47f af65 	bne.w	8014922 <rmw_wait+0x186>
 8014a58:	e7d3      	b.n	8014a02 <rmw_wait+0x266>
 8014a5a:	b17d      	cbz	r5, 8014a7c <rmw_wait+0x2e0>
 8014a5c:	682b      	ldr	r3, [r5, #0]
 8014a5e:	4647      	mov	r7, r8
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	f47f af60 	bne.w	8014926 <rmw_wait+0x18a>
 8014a66:	2e00      	cmp	r6, #0
 8014a68:	f47f af78 	bne.w	801495c <rmw_wait+0x1c0>
 8014a6c:	e7cc      	b.n	8014a08 <rmw_wait+0x26c>
 8014a6e:	bf00      	nop
 8014a70:	08018678 	.word	0x08018678
 8014a74:	2000dce4 	.word	0x2000dce4
 8014a78:	000f4240 	.word	0x000f4240
 8014a7c:	2e00      	cmp	r6, #0
 8014a7e:	d0c3      	beq.n	8014a08 <rmw_wait+0x26c>
 8014a80:	6834      	ldr	r4, [r6, #0]
 8014a82:	462f      	mov	r7, r5
 8014a84:	2c00      	cmp	r4, #0
 8014a86:	f47f af6b 	bne.w	8014960 <rmw_wait+0x1c4>
 8014a8a:	e7bd      	b.n	8014a08 <rmw_wait+0x26c>

08014a8c <rmw_create_wait_set>:
 8014a8c:	b508      	push	{r3, lr}
 8014a8e:	4803      	ldr	r0, [pc, #12]	@ (8014a9c <rmw_create_wait_set+0x10>)
 8014a90:	f7fe feb2 	bl	80137f8 <get_memory>
 8014a94:	b108      	cbz	r0, 8014a9a <rmw_create_wait_set+0xe>
 8014a96:	6880      	ldr	r0, [r0, #8]
 8014a98:	3010      	adds	r0, #16
 8014a9a:	bd08      	pop	{r3, pc}
 8014a9c:	2000dd24 	.word	0x2000dd24

08014aa0 <rmw_destroy_wait_set>:
 8014aa0:	b508      	push	{r3, lr}
 8014aa2:	4b08      	ldr	r3, [pc, #32]	@ (8014ac4 <rmw_destroy_wait_set+0x24>)
 8014aa4:	6819      	ldr	r1, [r3, #0]
 8014aa6:	b911      	cbnz	r1, 8014aae <rmw_destroy_wait_set+0xe>
 8014aa8:	e00a      	b.n	8014ac0 <rmw_destroy_wait_set+0x20>
 8014aaa:	6849      	ldr	r1, [r1, #4]
 8014aac:	b141      	cbz	r1, 8014ac0 <rmw_destroy_wait_set+0x20>
 8014aae:	688b      	ldr	r3, [r1, #8]
 8014ab0:	3310      	adds	r3, #16
 8014ab2:	4298      	cmp	r0, r3
 8014ab4:	d1f9      	bne.n	8014aaa <rmw_destroy_wait_set+0xa>
 8014ab6:	4803      	ldr	r0, [pc, #12]	@ (8014ac4 <rmw_destroy_wait_set+0x24>)
 8014ab8:	f7fe feae 	bl	8013818 <put_memory>
 8014abc:	2000      	movs	r0, #0
 8014abe:	bd08      	pop	{r3, pc}
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	bd08      	pop	{r3, pc}
 8014ac4:	2000dd24 	.word	0x2000dd24

08014ac8 <rmw_uros_epoch_nanos>:
 8014ac8:	4b05      	ldr	r3, [pc, #20]	@ (8014ae0 <rmw_uros_epoch_nanos+0x18>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	b123      	cbz	r3, 8014ad8 <rmw_uros_epoch_nanos+0x10>
 8014ace:	6898      	ldr	r0, [r3, #8]
 8014ad0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ad4:	f7f9 b9f2 	b.w	800debc <uxr_epoch_nanos>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	2100      	movs	r1, #0
 8014adc:	4770      	bx	lr
 8014ade:	bf00      	nop
 8014ae0:	2000dce4 	.word	0x2000dce4

08014ae4 <std_msgs__msg__Int32__init>:
 8014ae4:	3800      	subs	r0, #0
 8014ae6:	bf18      	it	ne
 8014ae8:	2001      	movne	r0, #1
 8014aea:	4770      	bx	lr

08014aec <std_msgs__msg__Int32__fini>:
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop

08014af0 <ucdr_serialize_endian_array_char>:
 8014af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014af4:	4619      	mov	r1, r3
 8014af6:	461f      	mov	r7, r3
 8014af8:	4605      	mov	r5, r0
 8014afa:	4690      	mov	r8, r2
 8014afc:	f7f6 fefc 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014b00:	b9e0      	cbnz	r0, 8014b3c <ucdr_serialize_endian_array_char+0x4c>
 8014b02:	463e      	mov	r6, r7
 8014b04:	e009      	b.n	8014b1a <ucdr_serialize_endian_array_char+0x2a>
 8014b06:	68a8      	ldr	r0, [r5, #8]
 8014b08:	f002 fe81 	bl	801780e <memcpy>
 8014b0c:	68ab      	ldr	r3, [r5, #8]
 8014b0e:	6928      	ldr	r0, [r5, #16]
 8014b10:	4423      	add	r3, r4
 8014b12:	4420      	add	r0, r4
 8014b14:	1b36      	subs	r6, r6, r4
 8014b16:	60ab      	str	r3, [r5, #8]
 8014b18:	6128      	str	r0, [r5, #16]
 8014b1a:	4631      	mov	r1, r6
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	4628      	mov	r0, r5
 8014b20:	f7f6 ff72 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014b24:	1bb9      	subs	r1, r7, r6
 8014b26:	4441      	add	r1, r8
 8014b28:	4604      	mov	r4, r0
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d1ea      	bne.n	8014b06 <ucdr_serialize_endian_array_char+0x16>
 8014b30:	2301      	movs	r3, #1
 8014b32:	7da8      	ldrb	r0, [r5, #22]
 8014b34:	756b      	strb	r3, [r5, #21]
 8014b36:	4058      	eors	r0, r3
 8014b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b3c:	463a      	mov	r2, r7
 8014b3e:	68a8      	ldr	r0, [r5, #8]
 8014b40:	4641      	mov	r1, r8
 8014b42:	f002 fe64 	bl	801780e <memcpy>
 8014b46:	68aa      	ldr	r2, [r5, #8]
 8014b48:	692b      	ldr	r3, [r5, #16]
 8014b4a:	443a      	add	r2, r7
 8014b4c:	443b      	add	r3, r7
 8014b4e:	60aa      	str	r2, [r5, #8]
 8014b50:	612b      	str	r3, [r5, #16]
 8014b52:	e7ed      	b.n	8014b30 <ucdr_serialize_endian_array_char+0x40>

08014b54 <ucdr_deserialize_endian_array_char>:
 8014b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b58:	4619      	mov	r1, r3
 8014b5a:	461f      	mov	r7, r3
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	4690      	mov	r8, r2
 8014b60:	f7f6 feca 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014b64:	b9e0      	cbnz	r0, 8014ba0 <ucdr_deserialize_endian_array_char+0x4c>
 8014b66:	463e      	mov	r6, r7
 8014b68:	e009      	b.n	8014b7e <ucdr_deserialize_endian_array_char+0x2a>
 8014b6a:	68a9      	ldr	r1, [r5, #8]
 8014b6c:	f002 fe4f 	bl	801780e <memcpy>
 8014b70:	68ab      	ldr	r3, [r5, #8]
 8014b72:	6928      	ldr	r0, [r5, #16]
 8014b74:	4423      	add	r3, r4
 8014b76:	4420      	add	r0, r4
 8014b78:	1b36      	subs	r6, r6, r4
 8014b7a:	60ab      	str	r3, [r5, #8]
 8014b7c:	6128      	str	r0, [r5, #16]
 8014b7e:	2201      	movs	r2, #1
 8014b80:	4631      	mov	r1, r6
 8014b82:	4628      	mov	r0, r5
 8014b84:	f7f6 ff40 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014b88:	4604      	mov	r4, r0
 8014b8a:	1bb8      	subs	r0, r7, r6
 8014b8c:	4440      	add	r0, r8
 8014b8e:	4622      	mov	r2, r4
 8014b90:	2c00      	cmp	r4, #0
 8014b92:	d1ea      	bne.n	8014b6a <ucdr_deserialize_endian_array_char+0x16>
 8014b94:	2301      	movs	r3, #1
 8014b96:	7da8      	ldrb	r0, [r5, #22]
 8014b98:	756b      	strb	r3, [r5, #21]
 8014b9a:	4058      	eors	r0, r3
 8014b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba0:	463a      	mov	r2, r7
 8014ba2:	68a9      	ldr	r1, [r5, #8]
 8014ba4:	4640      	mov	r0, r8
 8014ba6:	f002 fe32 	bl	801780e <memcpy>
 8014baa:	68aa      	ldr	r2, [r5, #8]
 8014bac:	692b      	ldr	r3, [r5, #16]
 8014bae:	443a      	add	r2, r7
 8014bb0:	443b      	add	r3, r7
 8014bb2:	60aa      	str	r2, [r5, #8]
 8014bb4:	612b      	str	r3, [r5, #16]
 8014bb6:	e7ed      	b.n	8014b94 <ucdr_deserialize_endian_array_char+0x40>

08014bb8 <ucdr_serialize_array_uint8_t>:
 8014bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bbc:	4688      	mov	r8, r1
 8014bbe:	4611      	mov	r1, r2
 8014bc0:	4617      	mov	r7, r2
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	f7f6 fe98 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014bc8:	b9e0      	cbnz	r0, 8014c04 <ucdr_serialize_array_uint8_t+0x4c>
 8014bca:	463e      	mov	r6, r7
 8014bcc:	e009      	b.n	8014be2 <ucdr_serialize_array_uint8_t+0x2a>
 8014bce:	68a8      	ldr	r0, [r5, #8]
 8014bd0:	f002 fe1d 	bl	801780e <memcpy>
 8014bd4:	68aa      	ldr	r2, [r5, #8]
 8014bd6:	692b      	ldr	r3, [r5, #16]
 8014bd8:	4422      	add	r2, r4
 8014bda:	4423      	add	r3, r4
 8014bdc:	1b36      	subs	r6, r6, r4
 8014bde:	60aa      	str	r2, [r5, #8]
 8014be0:	612b      	str	r3, [r5, #16]
 8014be2:	4631      	mov	r1, r6
 8014be4:	2201      	movs	r2, #1
 8014be6:	4628      	mov	r0, r5
 8014be8:	f7f6 ff0e 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014bec:	1bb9      	subs	r1, r7, r6
 8014bee:	4441      	add	r1, r8
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d1ea      	bne.n	8014bce <ucdr_serialize_array_uint8_t+0x16>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	7da8      	ldrb	r0, [r5, #22]
 8014bfc:	756b      	strb	r3, [r5, #21]
 8014bfe:	4058      	eors	r0, r3
 8014c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c04:	463a      	mov	r2, r7
 8014c06:	68a8      	ldr	r0, [r5, #8]
 8014c08:	4641      	mov	r1, r8
 8014c0a:	f002 fe00 	bl	801780e <memcpy>
 8014c0e:	68aa      	ldr	r2, [r5, #8]
 8014c10:	692b      	ldr	r3, [r5, #16]
 8014c12:	443a      	add	r2, r7
 8014c14:	443b      	add	r3, r7
 8014c16:	60aa      	str	r2, [r5, #8]
 8014c18:	612b      	str	r3, [r5, #16]
 8014c1a:	e7ed      	b.n	8014bf8 <ucdr_serialize_array_uint8_t+0x40>

08014c1c <ucdr_serialize_endian_array_uint8_t>:
 8014c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c20:	4619      	mov	r1, r3
 8014c22:	461f      	mov	r7, r3
 8014c24:	4605      	mov	r5, r0
 8014c26:	4690      	mov	r8, r2
 8014c28:	f7f6 fe66 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014c2c:	b9e0      	cbnz	r0, 8014c68 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014c2e:	463e      	mov	r6, r7
 8014c30:	e009      	b.n	8014c46 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014c32:	68a8      	ldr	r0, [r5, #8]
 8014c34:	f002 fdeb 	bl	801780e <memcpy>
 8014c38:	68ab      	ldr	r3, [r5, #8]
 8014c3a:	6928      	ldr	r0, [r5, #16]
 8014c3c:	4423      	add	r3, r4
 8014c3e:	4420      	add	r0, r4
 8014c40:	1b36      	subs	r6, r6, r4
 8014c42:	60ab      	str	r3, [r5, #8]
 8014c44:	6128      	str	r0, [r5, #16]
 8014c46:	4631      	mov	r1, r6
 8014c48:	2201      	movs	r2, #1
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f7f6 fedc 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014c50:	1bb9      	subs	r1, r7, r6
 8014c52:	4441      	add	r1, r8
 8014c54:	4604      	mov	r4, r0
 8014c56:	4602      	mov	r2, r0
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d1ea      	bne.n	8014c32 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	7da8      	ldrb	r0, [r5, #22]
 8014c60:	756b      	strb	r3, [r5, #21]
 8014c62:	4058      	eors	r0, r3
 8014c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c68:	463a      	mov	r2, r7
 8014c6a:	68a8      	ldr	r0, [r5, #8]
 8014c6c:	4641      	mov	r1, r8
 8014c6e:	f002 fdce 	bl	801780e <memcpy>
 8014c72:	68aa      	ldr	r2, [r5, #8]
 8014c74:	692b      	ldr	r3, [r5, #16]
 8014c76:	443a      	add	r2, r7
 8014c78:	443b      	add	r3, r7
 8014c7a:	60aa      	str	r2, [r5, #8]
 8014c7c:	612b      	str	r3, [r5, #16]
 8014c7e:	e7ed      	b.n	8014c5c <ucdr_serialize_endian_array_uint8_t+0x40>

08014c80 <ucdr_deserialize_array_uint8_t>:
 8014c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c84:	4688      	mov	r8, r1
 8014c86:	4611      	mov	r1, r2
 8014c88:	4617      	mov	r7, r2
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	f7f6 fe34 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014c90:	b9e0      	cbnz	r0, 8014ccc <ucdr_deserialize_array_uint8_t+0x4c>
 8014c92:	463e      	mov	r6, r7
 8014c94:	e009      	b.n	8014caa <ucdr_deserialize_array_uint8_t+0x2a>
 8014c96:	68a9      	ldr	r1, [r5, #8]
 8014c98:	f002 fdb9 	bl	801780e <memcpy>
 8014c9c:	68aa      	ldr	r2, [r5, #8]
 8014c9e:	692b      	ldr	r3, [r5, #16]
 8014ca0:	4422      	add	r2, r4
 8014ca2:	4423      	add	r3, r4
 8014ca4:	1b36      	subs	r6, r6, r4
 8014ca6:	60aa      	str	r2, [r5, #8]
 8014ca8:	612b      	str	r3, [r5, #16]
 8014caa:	2201      	movs	r2, #1
 8014cac:	4631      	mov	r1, r6
 8014cae:	4628      	mov	r0, r5
 8014cb0:	f7f6 feaa 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	1bb8      	subs	r0, r7, r6
 8014cb8:	4440      	add	r0, r8
 8014cba:	4622      	mov	r2, r4
 8014cbc:	2c00      	cmp	r4, #0
 8014cbe:	d1ea      	bne.n	8014c96 <ucdr_deserialize_array_uint8_t+0x16>
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	7da8      	ldrb	r0, [r5, #22]
 8014cc4:	756b      	strb	r3, [r5, #21]
 8014cc6:	4058      	eors	r0, r3
 8014cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ccc:	463a      	mov	r2, r7
 8014cce:	68a9      	ldr	r1, [r5, #8]
 8014cd0:	4640      	mov	r0, r8
 8014cd2:	f002 fd9c 	bl	801780e <memcpy>
 8014cd6:	68aa      	ldr	r2, [r5, #8]
 8014cd8:	692b      	ldr	r3, [r5, #16]
 8014cda:	443a      	add	r2, r7
 8014cdc:	443b      	add	r3, r7
 8014cde:	60aa      	str	r2, [r5, #8]
 8014ce0:	612b      	str	r3, [r5, #16]
 8014ce2:	e7ed      	b.n	8014cc0 <ucdr_deserialize_array_uint8_t+0x40>

08014ce4 <ucdr_deserialize_endian_array_uint8_t>:
 8014ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce8:	4619      	mov	r1, r3
 8014cea:	461f      	mov	r7, r3
 8014cec:	4605      	mov	r5, r0
 8014cee:	4690      	mov	r8, r2
 8014cf0:	f7f6 fe02 	bl	800b8f8 <ucdr_check_buffer_available_for>
 8014cf4:	b9e0      	cbnz	r0, 8014d30 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014cf6:	463e      	mov	r6, r7
 8014cf8:	e009      	b.n	8014d0e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014cfa:	68a9      	ldr	r1, [r5, #8]
 8014cfc:	f002 fd87 	bl	801780e <memcpy>
 8014d00:	68ab      	ldr	r3, [r5, #8]
 8014d02:	6928      	ldr	r0, [r5, #16]
 8014d04:	4423      	add	r3, r4
 8014d06:	4420      	add	r0, r4
 8014d08:	1b36      	subs	r6, r6, r4
 8014d0a:	60ab      	str	r3, [r5, #8]
 8014d0c:	6128      	str	r0, [r5, #16]
 8014d0e:	2201      	movs	r2, #1
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	f7f6 fe78 	bl	800ba08 <ucdr_check_final_buffer_behavior_array>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	1bb8      	subs	r0, r7, r6
 8014d1c:	4440      	add	r0, r8
 8014d1e:	4622      	mov	r2, r4
 8014d20:	2c00      	cmp	r4, #0
 8014d22:	d1ea      	bne.n	8014cfa <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014d24:	2301      	movs	r3, #1
 8014d26:	7da8      	ldrb	r0, [r5, #22]
 8014d28:	756b      	strb	r3, [r5, #21]
 8014d2a:	4058      	eors	r0, r3
 8014d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d30:	463a      	mov	r2, r7
 8014d32:	68a9      	ldr	r1, [r5, #8]
 8014d34:	4640      	mov	r0, r8
 8014d36:	f002 fd6a 	bl	801780e <memcpy>
 8014d3a:	68aa      	ldr	r2, [r5, #8]
 8014d3c:	692b      	ldr	r3, [r5, #16]
 8014d3e:	443a      	add	r2, r7
 8014d40:	443b      	add	r3, r7
 8014d42:	60aa      	str	r2, [r5, #8]
 8014d44:	612b      	str	r3, [r5, #16]
 8014d46:	e7ed      	b.n	8014d24 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014d48 <ucdr_serialize_sequence_char>:
 8014d48:	b570      	push	{r4, r5, r6, lr}
 8014d4a:	4615      	mov	r5, r2
 8014d4c:	460e      	mov	r6, r1
 8014d4e:	7d01      	ldrb	r1, [r0, #20]
 8014d50:	4604      	mov	r4, r0
 8014d52:	f7f5 ff91 	bl	800ac78 <ucdr_serialize_endian_uint32_t>
 8014d56:	b90d      	cbnz	r5, 8014d5c <ucdr_serialize_sequence_char+0x14>
 8014d58:	2001      	movs	r0, #1
 8014d5a:	bd70      	pop	{r4, r5, r6, pc}
 8014d5c:	7d21      	ldrb	r1, [r4, #20]
 8014d5e:	462b      	mov	r3, r5
 8014d60:	4632      	mov	r2, r6
 8014d62:	4620      	mov	r0, r4
 8014d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d68:	f7ff bec2 	b.w	8014af0 <ucdr_serialize_endian_array_char>

08014d6c <ucdr_deserialize_sequence_char>:
 8014d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d70:	461d      	mov	r5, r3
 8014d72:	4616      	mov	r6, r2
 8014d74:	460f      	mov	r7, r1
 8014d76:	461a      	mov	r2, r3
 8014d78:	7d01      	ldrb	r1, [r0, #20]
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	f7f6 f8a4 	bl	800aec8 <ucdr_deserialize_endian_uint32_t>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	429e      	cmp	r6, r3
 8014d84:	bf3c      	itt	cc
 8014d86:	2201      	movcc	r2, #1
 8014d88:	75a2      	strbcc	r2, [r4, #22]
 8014d8a:	b913      	cbnz	r3, 8014d92 <ucdr_deserialize_sequence_char+0x26>
 8014d8c:	2001      	movs	r0, #1
 8014d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d92:	7d21      	ldrb	r1, [r4, #20]
 8014d94:	463a      	mov	r2, r7
 8014d96:	4620      	mov	r0, r4
 8014d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d9c:	f7ff beda 	b.w	8014b54 <ucdr_deserialize_endian_array_char>

08014da0 <ucdr_serialize_sequence_uint8_t>:
 8014da0:	b570      	push	{r4, r5, r6, lr}
 8014da2:	4615      	mov	r5, r2
 8014da4:	460e      	mov	r6, r1
 8014da6:	7d01      	ldrb	r1, [r0, #20]
 8014da8:	4604      	mov	r4, r0
 8014daa:	f7f5 ff65 	bl	800ac78 <ucdr_serialize_endian_uint32_t>
 8014dae:	b90d      	cbnz	r5, 8014db4 <ucdr_serialize_sequence_uint8_t+0x14>
 8014db0:	2001      	movs	r0, #1
 8014db2:	bd70      	pop	{r4, r5, r6, pc}
 8014db4:	7d21      	ldrb	r1, [r4, #20]
 8014db6:	462b      	mov	r3, r5
 8014db8:	4632      	mov	r2, r6
 8014dba:	4620      	mov	r0, r4
 8014dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dc0:	f7ff bf2c 	b.w	8014c1c <ucdr_serialize_endian_array_uint8_t>

08014dc4 <ucdr_deserialize_sequence_uint8_t>:
 8014dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc8:	461d      	mov	r5, r3
 8014dca:	4616      	mov	r6, r2
 8014dcc:	460f      	mov	r7, r1
 8014dce:	461a      	mov	r2, r3
 8014dd0:	7d01      	ldrb	r1, [r0, #20]
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	f7f6 f878 	bl	800aec8 <ucdr_deserialize_endian_uint32_t>
 8014dd8:	682b      	ldr	r3, [r5, #0]
 8014dda:	429e      	cmp	r6, r3
 8014ddc:	bf3c      	itt	cc
 8014dde:	2201      	movcc	r2, #1
 8014de0:	75a2      	strbcc	r2, [r4, #22]
 8014de2:	b913      	cbnz	r3, 8014dea <ucdr_deserialize_sequence_uint8_t+0x26>
 8014de4:	2001      	movs	r0, #1
 8014de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dea:	7d21      	ldrb	r1, [r4, #20]
 8014dec:	463a      	mov	r2, r7
 8014dee:	4620      	mov	r0, r4
 8014df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014df4:	f7ff bf76 	b.w	8014ce4 <ucdr_deserialize_endian_array_uint8_t>

08014df8 <ucdr_serialize_string>:
 8014df8:	b510      	push	{r4, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	4604      	mov	r4, r0
 8014dfe:	4608      	mov	r0, r1
 8014e00:	9101      	str	r1, [sp, #4]
 8014e02:	f7eb fa0f 	bl	8000224 <strlen>
 8014e06:	9901      	ldr	r1, [sp, #4]
 8014e08:	1c42      	adds	r2, r0, #1
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	b002      	add	sp, #8
 8014e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e12:	f7ff bf99 	b.w	8014d48 <ucdr_serialize_sequence_char>
 8014e16:	bf00      	nop

08014e18 <ucdr_deserialize_string>:
 8014e18:	b500      	push	{lr}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	ab01      	add	r3, sp, #4
 8014e1e:	f7ff ffa5 	bl	8014d6c <ucdr_deserialize_sequence_char>
 8014e22:	b003      	add	sp, #12
 8014e24:	f85d fb04 	ldr.w	pc, [sp], #4

08014e28 <get_custom_error>:
 8014e28:	4b01      	ldr	r3, [pc, #4]	@ (8014e30 <get_custom_error+0x8>)
 8014e2a:	7818      	ldrb	r0, [r3, #0]
 8014e2c:	4770      	bx	lr
 8014e2e:	bf00      	nop
 8014e30:	2000dea0 	.word	0x2000dea0

08014e34 <recv_custom_msg>:
 8014e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e38:	4693      	mov	fp, r2
 8014e3a:	b089      	sub	sp, #36	@ 0x24
 8014e3c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014e40:	9305      	str	r3, [sp, #20]
 8014e42:	468a      	mov	sl, r1
 8014e44:	2100      	movs	r1, #0
 8014e46:	4604      	mov	r4, r0
 8014e48:	f88d 101e 	strb.w	r1, [sp, #30]
 8014e4c:	b322      	cbz	r2, 8014e98 <recv_custom_msg+0x64>
 8014e4e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014e52:	f10d 081f 	add.w	r8, sp, #31
 8014e56:	af05      	add	r7, sp, #20
 8014e58:	f10d 061e 	add.w	r6, sp, #30
 8014e5c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014e60:	e002      	b.n	8014e68 <recv_custom_msg+0x34>
 8014e62:	9b05      	ldr	r3, [sp, #20]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	dd0f      	ble.n	8014e88 <recv_custom_msg+0x54>
 8014e68:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014e6c:	4623      	mov	r3, r4
 8014e6e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014e72:	e9cd 5600 	strd	r5, r6, [sp]
 8014e76:	4622      	mov	r2, r4
 8014e78:	4648      	mov	r0, r9
 8014e7a:	f001 f92d 	bl	80160d8 <uxr_read_framed_msg>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d0ef      	beq.n	8014e62 <recv_custom_msg+0x2e>
 8014e82:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014e86:	b1b3      	cbz	r3, 8014eb6 <recv_custom_msg+0x82>
 8014e88:	4b0f      	ldr	r3, [pc, #60]	@ (8014ec8 <recv_custom_msg+0x94>)
 8014e8a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014e8e:	701a      	strb	r2, [r3, #0]
 8014e90:	2000      	movs	r0, #0
 8014e92:	b009      	add	sp, #36	@ 0x24
 8014e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e98:	f10d 021f 	add.w	r2, sp, #31
 8014e9c:	9200      	str	r2, [sp, #0]
 8014e9e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ea6:	4601      	mov	r1, r0
 8014ea8:	47a8      	blx	r5
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d0ec      	beq.n	8014e88 <recv_custom_msg+0x54>
 8014eae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d1e8      	bne.n	8014e88 <recv_custom_msg+0x54>
 8014eb6:	f8cb 0000 	str.w	r0, [fp]
 8014eba:	2001      	movs	r0, #1
 8014ebc:	f8ca 4000 	str.w	r4, [sl]
 8014ec0:	b009      	add	sp, #36	@ 0x24
 8014ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec6:	bf00      	nop
 8014ec8:	2000dea0 	.word	0x2000dea0

08014ecc <send_custom_msg>:
 8014ecc:	b530      	push	{r4, r5, lr}
 8014ece:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014ed2:	b087      	sub	sp, #28
 8014ed4:	4615      	mov	r5, r2
 8014ed6:	b974      	cbnz	r4, 8014ef6 <send_custom_msg+0x2a>
 8014ed8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014edc:	f10d 0317 	add.w	r3, sp, #23
 8014ee0:	47a0      	blx	r4
 8014ee2:	b108      	cbz	r0, 8014ee8 <send_custom_msg+0x1c>
 8014ee4:	42a8      	cmp	r0, r5
 8014ee6:	d015      	beq.n	8014f14 <send_custom_msg+0x48>
 8014ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8014f1c <send_custom_msg+0x50>)
 8014eea:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014eee:	701a      	strb	r2, [r3, #0]
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	b007      	add	sp, #28
 8014ef4:	bd30      	pop	{r4, r5, pc}
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	2200      	movs	r2, #0
 8014efa:	f10d 0117 	add.w	r1, sp, #23
 8014efe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014f02:	4602      	mov	r2, r0
 8014f04:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014f08:	9500      	str	r5, [sp, #0]
 8014f0a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014f0e:	f000 feeb 	bl	8015ce8 <uxr_write_framed_msg>
 8014f12:	e7e6      	b.n	8014ee2 <send_custom_msg+0x16>
 8014f14:	2001      	movs	r0, #1
 8014f16:	b007      	add	sp, #28
 8014f18:	bd30      	pop	{r4, r5, pc}
 8014f1a:	bf00      	nop
 8014f1c:	2000dea0 	.word	0x2000dea0

08014f20 <uxr_set_custom_transport_callbacks>:
 8014f20:	b410      	push	{r4}
 8014f22:	9c01      	ldr	r4, [sp, #4]
 8014f24:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014f28:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014f2c:	9b02      	ldr	r3, [sp, #8]
 8014f2e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f36:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014f3a:	4770      	bx	lr

08014f3c <uxr_init_custom_transport>:
 8014f3c:	b538      	push	{r3, r4, r5, lr}
 8014f3e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014f42:	b303      	cbz	r3, 8014f86 <uxr_init_custom_transport+0x4a>
 8014f44:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014f48:	4604      	mov	r4, r0
 8014f4a:	b1e2      	cbz	r2, 8014f86 <uxr_init_custom_transport+0x4a>
 8014f4c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014f50:	b1ca      	cbz	r2, 8014f86 <uxr_init_custom_transport+0x4a>
 8014f52:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014f56:	b1b2      	cbz	r2, 8014f86 <uxr_init_custom_transport+0x4a>
 8014f58:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014f5c:	4798      	blx	r3
 8014f5e:	4605      	mov	r5, r0
 8014f60:	b188      	cbz	r0, 8014f86 <uxr_init_custom_transport+0x4a>
 8014f62:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014f66:	b98b      	cbnz	r3, 8014f8c <uxr_init_custom_transport+0x50>
 8014f68:	490b      	ldr	r1, [pc, #44]	@ (8014f98 <uxr_init_custom_transport+0x5c>)
 8014f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8014f9c <uxr_init_custom_transport+0x60>)
 8014f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8014fa0 <uxr_init_custom_transport+0x64>)
 8014f6e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014f76:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014f7a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014f7e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014f82:	4628      	mov	r0, r5
 8014f84:	bd38      	pop	{r3, r4, r5, pc}
 8014f86:	2500      	movs	r5, #0
 8014f88:	4628      	mov	r0, r5
 8014f8a:	bd38      	pop	{r3, r4, r5, pc}
 8014f8c:	2100      	movs	r1, #0
 8014f8e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014f92:	f000 fea3 	bl	8015cdc <uxr_init_framing_io>
 8014f96:	e7e7      	b.n	8014f68 <uxr_init_custom_transport+0x2c>
 8014f98:	08014ecd 	.word	0x08014ecd
 8014f9c:	08014e35 	.word	0x08014e35
 8014fa0:	08014e29 	.word	0x08014e29

08014fa4 <uxr_close_custom_transport>:
 8014fa4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014fa8:	4718      	bx	r3
 8014faa:	bf00      	nop

08014fac <uxr_init_input_best_effort_stream>:
 8014fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fb0:	8003      	strh	r3, [r0, #0]
 8014fb2:	4770      	bx	lr

08014fb4 <uxr_reset_input_best_effort_stream>:
 8014fb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fb8:	8003      	strh	r3, [r0, #0]
 8014fba:	4770      	bx	lr

08014fbc <uxr_receive_best_effort_message>:
 8014fbc:	b538      	push	{r3, r4, r5, lr}
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	8800      	ldrh	r0, [r0, #0]
 8014fc2:	460d      	mov	r5, r1
 8014fc4:	f000 fe72 	bl	8015cac <uxr_seq_num_cmp>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014fd0:	bfb8      	it	lt
 8014fd2:	8025      	strhlt	r5, [r4, #0]
 8014fd4:	bd38      	pop	{r3, r4, r5, pc}
 8014fd6:	bf00      	nop

08014fd8 <on_full_input_buffer>:
 8014fd8:	b570      	push	{r4, r5, r6, lr}
 8014fda:	4605      	mov	r5, r0
 8014fdc:	460c      	mov	r4, r1
 8014fde:	682b      	ldr	r3, [r5, #0]
 8014fe0:	6809      	ldr	r1, [r1, #0]
 8014fe2:	8920      	ldrh	r0, [r4, #8]
 8014fe4:	6862      	ldr	r2, [r4, #4]
 8014fe6:	fbb2 f2f0 	udiv	r2, r2, r0
 8014fea:	eba3 0c01 	sub.w	ip, r3, r1
 8014fee:	fbbc fcf2 	udiv	ip, ip, r2
 8014ff2:	f10c 0c01 	add.w	ip, ip, #1
 8014ff6:	fa1f f38c 	uxth.w	r3, ip
 8014ffa:	fbb3 f6f0 	udiv	r6, r3, r0
 8014ffe:	fb00 3316 	mls	r3, r0, r6, r3
 8015002:	b29b      	uxth	r3, r3
 8015004:	fb02 f303 	mul.w	r3, r2, r3
 8015008:	1d18      	adds	r0, r3, #4
 801500a:	4408      	add	r0, r1
 801500c:	7d26      	ldrb	r6, [r4, #20]
 801500e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015012:	b116      	cbz	r6, 801501a <on_full_input_buffer+0x42>
 8015014:	2600      	movs	r6, #0
 8015016:	f840 6c04 	str.w	r6, [r0, #-4]
 801501a:	2a03      	cmp	r2, #3
 801501c:	d801      	bhi.n	8015022 <on_full_input_buffer+0x4a>
 801501e:	2001      	movs	r0, #1
 8015020:	bd70      	pop	{r4, r5, r6, pc}
 8015022:	3308      	adds	r3, #8
 8015024:	4419      	add	r1, r3
 8015026:	4628      	mov	r0, r5
 8015028:	692b      	ldr	r3, [r5, #16]
 801502a:	3a04      	subs	r2, #4
 801502c:	f7f6 fcb0 	bl	800b990 <ucdr_init_buffer_origin>
 8015030:	4628      	mov	r0, r5
 8015032:	4903      	ldr	r1, [pc, #12]	@ (8015040 <on_full_input_buffer+0x68>)
 8015034:	4622      	mov	r2, r4
 8015036:	f7f6 fc87 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 801503a:	2000      	movs	r0, #0
 801503c:	bd70      	pop	{r4, r5, r6, pc}
 801503e:	bf00      	nop
 8015040:	08014fd9 	.word	0x08014fd9

08015044 <uxr_init_input_reliable_stream>:
 8015044:	b500      	push	{lr}
 8015046:	e9c0 1200 	strd	r1, r2, [r0]
 801504a:	f04f 0e00 	mov.w	lr, #0
 801504e:	9a01      	ldr	r2, [sp, #4]
 8015050:	8103      	strh	r3, [r0, #8]
 8015052:	6102      	str	r2, [r0, #16]
 8015054:	f880 e014 	strb.w	lr, [r0, #20]
 8015058:	b1d3      	cbz	r3, 8015090 <uxr_init_input_reliable_stream+0x4c>
 801505a:	f8c1 e000 	str.w	lr, [r1]
 801505e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015062:	f1bc 0f01 	cmp.w	ip, #1
 8015066:	d913      	bls.n	8015090 <uxr_init_input_reliable_stream+0x4c>
 8015068:	2301      	movs	r3, #1
 801506a:	fbb3 f1fc 	udiv	r1, r3, ip
 801506e:	fb0c 3111 	mls	r1, ip, r1, r3
 8015072:	b289      	uxth	r1, r1
 8015074:	6842      	ldr	r2, [r0, #4]
 8015076:	fbb2 f2fc 	udiv	r2, r2, ip
 801507a:	fb01 f202 	mul.w	r2, r1, r2
 801507e:	6801      	ldr	r1, [r0, #0]
 8015080:	f841 e002 	str.w	lr, [r1, r2]
 8015084:	3301      	adds	r3, #1
 8015086:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801508a:	b29b      	uxth	r3, r3
 801508c:	459c      	cmp	ip, r3
 801508e:	d8ec      	bhi.n	801506a <uxr_init_input_reliable_stream+0x26>
 8015090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015094:	60c3      	str	r3, [r0, #12]
 8015096:	f85d fb04 	ldr.w	pc, [sp], #4
 801509a:	bf00      	nop

0801509c <uxr_reset_input_reliable_stream>:
 801509c:	8901      	ldrh	r1, [r0, #8]
 801509e:	b1e9      	cbz	r1, 80150dc <uxr_reset_input_reliable_stream+0x40>
 80150a0:	f04f 0c00 	mov.w	ip, #0
 80150a4:	b500      	push	{lr}
 80150a6:	4663      	mov	r3, ip
 80150a8:	46e6      	mov	lr, ip
 80150aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80150ae:	fb01 3312 	mls	r3, r1, r2, r3
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	6842      	ldr	r2, [r0, #4]
 80150b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80150ba:	fb02 f303 	mul.w	r3, r2, r3
 80150be:	6802      	ldr	r2, [r0, #0]
 80150c0:	f842 e003 	str.w	lr, [r2, r3]
 80150c4:	f10c 0c01 	add.w	ip, ip, #1
 80150c8:	8901      	ldrh	r1, [r0, #8]
 80150ca:	fa1f f38c 	uxth.w	r3, ip
 80150ce:	4299      	cmp	r1, r3
 80150d0:	d8eb      	bhi.n	80150aa <uxr_reset_input_reliable_stream+0xe>
 80150d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150d6:	60c3      	str	r3, [r0, #12]
 80150d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150e0:	60c3      	str	r3, [r0, #12]
 80150e2:	4770      	bx	lr

080150e4 <uxr_receive_reliable_message>:
 80150e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150e8:	4604      	mov	r4, r0
 80150ea:	460d      	mov	r5, r1
 80150ec:	8901      	ldrh	r1, [r0, #8]
 80150ee:	8980      	ldrh	r0, [r0, #12]
 80150f0:	4690      	mov	r8, r2
 80150f2:	461f      	mov	r7, r3
 80150f4:	f000 fdd2 	bl	8015c9c <uxr_seq_num_add>
 80150f8:	4629      	mov	r1, r5
 80150fa:	4606      	mov	r6, r0
 80150fc:	89a0      	ldrh	r0, [r4, #12]
 80150fe:	f000 fdd5 	bl	8015cac <uxr_seq_num_cmp>
 8015102:	2800      	cmp	r0, #0
 8015104:	db0a      	blt.n	801511c <uxr_receive_reliable_message+0x38>
 8015106:	2600      	movs	r6, #0
 8015108:	89e0      	ldrh	r0, [r4, #14]
 801510a:	4629      	mov	r1, r5
 801510c:	f000 fdce 	bl	8015cac <uxr_seq_num_cmp>
 8015110:	2800      	cmp	r0, #0
 8015112:	da00      	bge.n	8015116 <uxr_receive_reliable_message+0x32>
 8015114:	81e5      	strh	r5, [r4, #14]
 8015116:	4630      	mov	r0, r6
 8015118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801511c:	4630      	mov	r0, r6
 801511e:	4629      	mov	r1, r5
 8015120:	f000 fdc4 	bl	8015cac <uxr_seq_num_cmp>
 8015124:	2800      	cmp	r0, #0
 8015126:	dbee      	blt.n	8015106 <uxr_receive_reliable_message+0x22>
 8015128:	6923      	ldr	r3, [r4, #16]
 801512a:	4640      	mov	r0, r8
 801512c:	4798      	blx	r3
 801512e:	2101      	movs	r1, #1
 8015130:	4681      	mov	r9, r0
 8015132:	89a0      	ldrh	r0, [r4, #12]
 8015134:	f000 fdb2 	bl	8015c9c <uxr_seq_num_add>
 8015138:	f1b9 0f00 	cmp.w	r9, #0
 801513c:	d101      	bne.n	8015142 <uxr_receive_reliable_message+0x5e>
 801513e:	4285      	cmp	r5, r0
 8015140:	d047      	beq.n	80151d2 <uxr_receive_reliable_message+0xee>
 8015142:	8922      	ldrh	r2, [r4, #8]
 8015144:	fbb5 f0f2 	udiv	r0, r5, r2
 8015148:	fb02 5010 	mls	r0, r2, r0, r5
 801514c:	b280      	uxth	r0, r0
 801514e:	6863      	ldr	r3, [r4, #4]
 8015150:	fbb3 f3f2 	udiv	r3, r3, r2
 8015154:	fb00 f303 	mul.w	r3, r0, r3
 8015158:	6820      	ldr	r0, [r4, #0]
 801515a:	3304      	adds	r3, #4
 801515c:	4418      	add	r0, r3
 801515e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1cf      	bne.n	8015106 <uxr_receive_reliable_message+0x22>
 8015166:	4641      	mov	r1, r8
 8015168:	463a      	mov	r2, r7
 801516a:	f002 fb50 	bl	801780e <memcpy>
 801516e:	8921      	ldrh	r1, [r4, #8]
 8015170:	fbb5 f2f1 	udiv	r2, r5, r1
 8015174:	fb01 5212 	mls	r2, r1, r2, r5
 8015178:	b292      	uxth	r2, r2
 801517a:	6863      	ldr	r3, [r4, #4]
 801517c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015180:	fb02 f303 	mul.w	r3, r2, r3
 8015184:	6822      	ldr	r2, [r4, #0]
 8015186:	50d7      	str	r7, [r2, r3]
 8015188:	9a08      	ldr	r2, [sp, #32]
 801518a:	2301      	movs	r3, #1
 801518c:	7013      	strb	r3, [r2, #0]
 801518e:	f1b9 0f00 	cmp.w	r9, #0
 8015192:	d0b8      	beq.n	8015106 <uxr_receive_reliable_message+0x22>
 8015194:	89a6      	ldrh	r6, [r4, #12]
 8015196:	4630      	mov	r0, r6
 8015198:	2101      	movs	r1, #1
 801519a:	f000 fd7f 	bl	8015c9c <uxr_seq_num_add>
 801519e:	8922      	ldrh	r2, [r4, #8]
 80151a0:	6863      	ldr	r3, [r4, #4]
 80151a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80151a6:	4606      	mov	r6, r0
 80151a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80151ac:	fb02 6010 	mls	r0, r2, r0, r6
 80151b0:	b280      	uxth	r0, r0
 80151b2:	fb00 f303 	mul.w	r3, r0, r3
 80151b6:	6820      	ldr	r0, [r4, #0]
 80151b8:	3304      	adds	r3, #4
 80151ba:	4418      	add	r0, r3
 80151bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d0a0      	beq.n	8015106 <uxr_receive_reliable_message+0x22>
 80151c4:	6923      	ldr	r3, [r4, #16]
 80151c6:	4798      	blx	r3
 80151c8:	2802      	cmp	r0, #2
 80151ca:	d008      	beq.n	80151de <uxr_receive_reliable_message+0xfa>
 80151cc:	2801      	cmp	r0, #1
 80151ce:	d0e2      	beq.n	8015196 <uxr_receive_reliable_message+0xb2>
 80151d0:	e799      	b.n	8015106 <uxr_receive_reliable_message+0x22>
 80151d2:	9b08      	ldr	r3, [sp, #32]
 80151d4:	81a5      	strh	r5, [r4, #12]
 80151d6:	2601      	movs	r6, #1
 80151d8:	f883 9000 	strb.w	r9, [r3]
 80151dc:	e794      	b.n	8015108 <uxr_receive_reliable_message+0x24>
 80151de:	2601      	movs	r6, #1
 80151e0:	e792      	b.n	8015108 <uxr_receive_reliable_message+0x24>
 80151e2:	bf00      	nop

080151e4 <uxr_next_input_reliable_buffer_available>:
 80151e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151e8:	4604      	mov	r4, r0
 80151ea:	460f      	mov	r7, r1
 80151ec:	8980      	ldrh	r0, [r0, #12]
 80151ee:	2101      	movs	r1, #1
 80151f0:	4690      	mov	r8, r2
 80151f2:	f000 fd53 	bl	8015c9c <uxr_seq_num_add>
 80151f6:	8922      	ldrh	r2, [r4, #8]
 80151f8:	fbb0 f6f2 	udiv	r6, r0, r2
 80151fc:	fb02 0616 	mls	r6, r2, r6, r0
 8015200:	b2b6      	uxth	r6, r6
 8015202:	6863      	ldr	r3, [r4, #4]
 8015204:	fbb3 f3f2 	udiv	r3, r3, r2
 8015208:	fb06 f303 	mul.w	r3, r6, r3
 801520c:	6826      	ldr	r6, [r4, #0]
 801520e:	3304      	adds	r3, #4
 8015210:	441e      	add	r6, r3
 8015212:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015216:	f1b9 0f00 	cmp.w	r9, #0
 801521a:	d023      	beq.n	8015264 <uxr_next_input_reliable_buffer_available+0x80>
 801521c:	6923      	ldr	r3, [r4, #16]
 801521e:	4605      	mov	r5, r0
 8015220:	4630      	mov	r0, r6
 8015222:	4798      	blx	r3
 8015224:	4682      	mov	sl, r0
 8015226:	b300      	cbz	r0, 801526a <uxr_next_input_reliable_buffer_available+0x86>
 8015228:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801522c:	2101      	movs	r1, #1
 801522e:	4650      	mov	r0, sl
 8015230:	f000 fd34 	bl	8015c9c <uxr_seq_num_add>
 8015234:	8921      	ldrh	r1, [r4, #8]
 8015236:	fbb0 f2f1 	udiv	r2, r0, r1
 801523a:	4682      	mov	sl, r0
 801523c:	fb01 0212 	mls	r2, r1, r2, r0
 8015240:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015244:	b292      	uxth	r2, r2
 8015246:	fbb3 f3f1 	udiv	r3, r3, r1
 801524a:	fb02 f303 	mul.w	r3, r2, r3
 801524e:	3304      	adds	r3, #4
 8015250:	4418      	add	r0, r3
 8015252:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015256:	b12b      	cbz	r3, 8015264 <uxr_next_input_reliable_buffer_available+0x80>
 8015258:	6923      	ldr	r3, [r4, #16]
 801525a:	4798      	blx	r3
 801525c:	2802      	cmp	r0, #2
 801525e:	d01b      	beq.n	8015298 <uxr_next_input_reliable_buffer_available+0xb4>
 8015260:	2801      	cmp	r0, #1
 8015262:	d0e3      	beq.n	801522c <uxr_next_input_reliable_buffer_available+0x48>
 8015264:	2000      	movs	r0, #0
 8015266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526a:	464a      	mov	r2, r9
 801526c:	4631      	mov	r1, r6
 801526e:	4638      	mov	r0, r7
 8015270:	f7f6 fb96 	bl	800b9a0 <ucdr_init_buffer>
 8015274:	8921      	ldrh	r1, [r4, #8]
 8015276:	fbb5 f2f1 	udiv	r2, r5, r1
 801527a:	fb01 5212 	mls	r2, r1, r2, r5
 801527e:	b292      	uxth	r2, r2
 8015280:	6863      	ldr	r3, [r4, #4]
 8015282:	fbb3 f3f1 	udiv	r3, r3, r1
 8015286:	fb02 f303 	mul.w	r3, r2, r3
 801528a:	6822      	ldr	r2, [r4, #0]
 801528c:	f842 a003 	str.w	sl, [r2, r3]
 8015290:	2001      	movs	r0, #1
 8015292:	81a5      	strh	r5, [r4, #12]
 8015294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015298:	8920      	ldrh	r0, [r4, #8]
 801529a:	fbb5 f3f0 	udiv	r3, r5, r0
 801529e:	fb00 5513 	mls	r5, r0, r3, r5
 80152a2:	b2ad      	uxth	r5, r5
 80152a4:	6863      	ldr	r3, [r4, #4]
 80152a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80152aa:	fb03 f505 	mul.w	r5, r3, r5
 80152ae:	6823      	ldr	r3, [r4, #0]
 80152b0:	2000      	movs	r0, #0
 80152b2:	5158      	str	r0, [r3, r5]
 80152b4:	eb06 0108 	add.w	r1, r6, r8
 80152b8:	eba9 0208 	sub.w	r2, r9, r8
 80152bc:	4638      	mov	r0, r7
 80152be:	f7f6 fb6f 	bl	800b9a0 <ucdr_init_buffer>
 80152c2:	4638      	mov	r0, r7
 80152c4:	4903      	ldr	r1, [pc, #12]	@ (80152d4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80152c6:	4622      	mov	r2, r4
 80152c8:	f7f6 fb3e 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 80152cc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80152d0:	2001      	movs	r0, #1
 80152d2:	e7c8      	b.n	8015266 <uxr_next_input_reliable_buffer_available+0x82>
 80152d4:	08014fd9 	.word	0x08014fd9

080152d8 <uxr_process_heartbeat>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4611      	mov	r1, r2
 80152dc:	4604      	mov	r4, r0
 80152de:	89c0      	ldrh	r0, [r0, #14]
 80152e0:	4615      	mov	r5, r2
 80152e2:	f000 fce3 	bl	8015cac <uxr_seq_num_cmp>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	bfb8      	it	lt
 80152ea:	81e5      	strhlt	r5, [r4, #14]
 80152ec:	bd38      	pop	{r3, r4, r5, pc}
 80152ee:	bf00      	nop

080152f0 <uxr_compute_acknack>:
 80152f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152f4:	8903      	ldrh	r3, [r0, #8]
 80152f6:	8985      	ldrh	r5, [r0, #12]
 80152f8:	4604      	mov	r4, r0
 80152fa:	460e      	mov	r6, r1
 80152fc:	b1d3      	cbz	r3, 8015334 <uxr_compute_acknack+0x44>
 80152fe:	4628      	mov	r0, r5
 8015300:	2701      	movs	r7, #1
 8015302:	e003      	b.n	801530c <uxr_compute_acknack+0x1c>
 8015304:	4567      	cmp	r7, ip
 8015306:	d215      	bcs.n	8015334 <uxr_compute_acknack+0x44>
 8015308:	89a0      	ldrh	r0, [r4, #12]
 801530a:	3701      	adds	r7, #1
 801530c:	b2b9      	uxth	r1, r7
 801530e:	f000 fcc5 	bl	8015c9c <uxr_seq_num_add>
 8015312:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015316:	fbb0 f3fc 	udiv	r3, r0, ip
 801531a:	fb0c 0313 	mls	r3, ip, r3, r0
 801531e:	b29a      	uxth	r2, r3
 8015320:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015324:	fbb3 f3fc 	udiv	r3, r3, ip
 8015328:	fb02 f303 	mul.w	r3, r2, r3
 801532c:	58cb      	ldr	r3, [r1, r3]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d1e8      	bne.n	8015304 <uxr_compute_acknack+0x14>
 8015332:	4605      	mov	r5, r0
 8015334:	8035      	strh	r5, [r6, #0]
 8015336:	2101      	movs	r1, #1
 8015338:	4628      	mov	r0, r5
 801533a:	89e7      	ldrh	r7, [r4, #14]
 801533c:	f000 fcb2 	bl	8015ca4 <uxr_seq_num_sub>
 8015340:	4601      	mov	r1, r0
 8015342:	4638      	mov	r0, r7
 8015344:	f000 fcae 	bl	8015ca4 <uxr_seq_num_sub>
 8015348:	4605      	mov	r5, r0
 801534a:	b318      	cbz	r0, 8015394 <uxr_compute_acknack+0xa4>
 801534c:	f04f 0900 	mov.w	r9, #0
 8015350:	464f      	mov	r7, r9
 8015352:	f04f 0801 	mov.w	r8, #1
 8015356:	fa1f f189 	uxth.w	r1, r9
 801535a:	8830      	ldrh	r0, [r6, #0]
 801535c:	f000 fc9e 	bl	8015c9c <uxr_seq_num_add>
 8015360:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015364:	fbb0 f3fc 	udiv	r3, r0, ip
 8015368:	e9d4 1200 	ldrd	r1, r2, [r4]
 801536c:	fb03 001c 	mls	r0, r3, ip, r0
 8015370:	b283      	uxth	r3, r0
 8015372:	fbb2 f2fc 	udiv	r2, r2, ip
 8015376:	fb02 f303 	mul.w	r3, r2, r3
 801537a:	fa08 f209 	lsl.w	r2, r8, r9
 801537e:	58cb      	ldr	r3, [r1, r3]
 8015380:	f109 0901 	add.w	r9, r9, #1
 8015384:	b90b      	cbnz	r3, 801538a <uxr_compute_acknack+0x9a>
 8015386:	4317      	orrs	r7, r2
 8015388:	b2bf      	uxth	r7, r7
 801538a:	454d      	cmp	r5, r9
 801538c:	d1e3      	bne.n	8015356 <uxr_compute_acknack+0x66>
 801538e:	4638      	mov	r0, r7
 8015390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015394:	4607      	mov	r7, r0
 8015396:	4638      	mov	r0, r7
 8015398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801539c <uxr_init_output_best_effort_stream>:
 801539c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80153a0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80153a4:	6001      	str	r1, [r0, #0]
 80153a6:	7303      	strb	r3, [r0, #12]
 80153a8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop

080153b0 <uxr_reset_output_best_effort_stream>:
 80153b0:	7b02      	ldrb	r2, [r0, #12]
 80153b2:	6042      	str	r2, [r0, #4]
 80153b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80153b8:	81c3      	strh	r3, [r0, #14]
 80153ba:	4770      	bx	lr

080153bc <uxr_prepare_best_effort_buffer_to_write>:
 80153bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153be:	4604      	mov	r4, r0
 80153c0:	b083      	sub	sp, #12
 80153c2:	6840      	ldr	r0, [r0, #4]
 80153c4:	460d      	mov	r5, r1
 80153c6:	4616      	mov	r6, r2
 80153c8:	f7f9 fe6e 	bl	800f0a8 <uxr_submessage_padding>
 80153cc:	6863      	ldr	r3, [r4, #4]
 80153ce:	4418      	add	r0, r3
 80153d0:	68a3      	ldr	r3, [r4, #8]
 80153d2:	1942      	adds	r2, r0, r5
 80153d4:	4293      	cmp	r3, r2
 80153d6:	bf2c      	ite	cs
 80153d8:	2701      	movcs	r7, #1
 80153da:	2700      	movcc	r7, #0
 80153dc:	d202      	bcs.n	80153e4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80153de:	4638      	mov	r0, r7
 80153e0:	b003      	add	sp, #12
 80153e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153e4:	9000      	str	r0, [sp, #0]
 80153e6:	6821      	ldr	r1, [r4, #0]
 80153e8:	4630      	mov	r0, r6
 80153ea:	2300      	movs	r3, #0
 80153ec:	f7f6 fac6 	bl	800b97c <ucdr_init_buffer_origin_offset>
 80153f0:	6861      	ldr	r1, [r4, #4]
 80153f2:	4638      	mov	r0, r7
 80153f4:	4429      	add	r1, r5
 80153f6:	6061      	str	r1, [r4, #4]
 80153f8:	b003      	add	sp, #12
 80153fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080153fc <uxr_prepare_best_effort_buffer_to_send>:
 80153fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015400:	4604      	mov	r4, r0
 8015402:	461d      	mov	r5, r3
 8015404:	6840      	ldr	r0, [r0, #4]
 8015406:	7b23      	ldrb	r3, [r4, #12]
 8015408:	4298      	cmp	r0, r3
 801540a:	bf8c      	ite	hi
 801540c:	2601      	movhi	r6, #1
 801540e:	2600      	movls	r6, #0
 8015410:	d802      	bhi.n	8015418 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015412:	4630      	mov	r0, r6
 8015414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015418:	4688      	mov	r8, r1
 801541a:	89e0      	ldrh	r0, [r4, #14]
 801541c:	2101      	movs	r1, #1
 801541e:	4617      	mov	r7, r2
 8015420:	f000 fc3c 	bl	8015c9c <uxr_seq_num_add>
 8015424:	6823      	ldr	r3, [r4, #0]
 8015426:	81e0      	strh	r0, [r4, #14]
 8015428:	8028      	strh	r0, [r5, #0]
 801542a:	f8c8 3000 	str.w	r3, [r8]
 801542e:	6863      	ldr	r3, [r4, #4]
 8015430:	603b      	str	r3, [r7, #0]
 8015432:	7b23      	ldrb	r3, [r4, #12]
 8015434:	6063      	str	r3, [r4, #4]
 8015436:	4630      	mov	r0, r6
 8015438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801543c <on_full_output_buffer>:
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	6802      	ldr	r2, [r0, #0]
 8015440:	460c      	mov	r4, r1
 8015442:	6809      	ldr	r1, [r1, #0]
 8015444:	8923      	ldrh	r3, [r4, #8]
 8015446:	eba2 0c01 	sub.w	ip, r2, r1
 801544a:	6862      	ldr	r2, [r4, #4]
 801544c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015450:	fbbc fcf2 	udiv	ip, ip, r2
 8015454:	f10c 0c01 	add.w	ip, ip, #1
 8015458:	fa1f fc8c 	uxth.w	ip, ip
 801545c:	fbbc fef3 	udiv	lr, ip, r3
 8015460:	fb03 c31e 	mls	r3, r3, lr, ip
 8015464:	b29b      	uxth	r3, r3
 8015466:	fb02 f303 	mul.w	r3, r2, r3
 801546a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801546e:	58ca      	ldr	r2, [r1, r3]
 8015470:	4463      	add	r3, ip
 8015472:	eba2 020c 	sub.w	r2, r2, ip
 8015476:	3308      	adds	r3, #8
 8015478:	4605      	mov	r5, r0
 801547a:	4419      	add	r1, r3
 801547c:	3a04      	subs	r2, #4
 801547e:	6903      	ldr	r3, [r0, #16]
 8015480:	f7f6 fa86 	bl	800b990 <ucdr_init_buffer_origin>
 8015484:	4628      	mov	r0, r5
 8015486:	4903      	ldr	r1, [pc, #12]	@ (8015494 <on_full_output_buffer+0x58>)
 8015488:	4622      	mov	r2, r4
 801548a:	f7f6 fa5d 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 801548e:	2000      	movs	r0, #0
 8015490:	bd38      	pop	{r3, r4, r5, pc}
 8015492:	bf00      	nop
 8015494:	0801543d 	.word	0x0801543d

08015498 <uxr_init_output_reliable_stream>:
 8015498:	b410      	push	{r4}
 801549a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801549e:	8103      	strh	r3, [r0, #8]
 80154a0:	e9c0 1200 	strd	r1, r2, [r0]
 80154a4:	f880 c00c 	strb.w	ip, [r0, #12]
 80154a8:	b1d3      	cbz	r3, 80154e0 <uxr_init_output_reliable_stream+0x48>
 80154aa:	f8c1 c000 	str.w	ip, [r1]
 80154ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154b2:	f1bc 0f01 	cmp.w	ip, #1
 80154b6:	d913      	bls.n	80154e0 <uxr_init_output_reliable_stream+0x48>
 80154b8:	2301      	movs	r3, #1
 80154ba:	fbb3 f1fc 	udiv	r1, r3, ip
 80154be:	fb0c 3111 	mls	r1, ip, r1, r3
 80154c2:	b289      	uxth	r1, r1
 80154c4:	6842      	ldr	r2, [r0, #4]
 80154c6:	6804      	ldr	r4, [r0, #0]
 80154c8:	fbb2 f2fc 	udiv	r2, r2, ip
 80154cc:	fb01 f202 	mul.w	r2, r1, r2
 80154d0:	7b01      	ldrb	r1, [r0, #12]
 80154d2:	50a1      	str	r1, [r4, r2]
 80154d4:	3301      	adds	r3, #1
 80154d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80154da:	b29b      	uxth	r3, r3
 80154dc:	459c      	cmp	ip, r3
 80154de:	d8ec      	bhi.n	80154ba <uxr_init_output_reliable_stream+0x22>
 80154e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80154e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80154e8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80154ec:	4905      	ldr	r1, [pc, #20]	@ (8015504 <uxr_init_output_reliable_stream+0x6c>)
 80154ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154f2:	f8c0 100e 	str.w	r1, [r0, #14]
 80154f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154fa:	2300      	movs	r3, #0
 80154fc:	8242      	strh	r2, [r0, #18]
 80154fe:	8403      	strh	r3, [r0, #32]
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	ffff0000 	.word	0xffff0000

08015508 <uxr_reset_output_reliable_stream>:
 8015508:	8901      	ldrh	r1, [r0, #8]
 801550a:	b1b1      	cbz	r1, 801553a <uxr_reset_output_reliable_stream+0x32>
 801550c:	f04f 0c00 	mov.w	ip, #0
 8015510:	4663      	mov	r3, ip
 8015512:	fbb3 f2f1 	udiv	r2, r3, r1
 8015516:	fb01 3312 	mls	r3, r1, r2, r3
 801551a:	b29b      	uxth	r3, r3
 801551c:	6842      	ldr	r2, [r0, #4]
 801551e:	fbb2 f2f1 	udiv	r2, r2, r1
 8015522:	6801      	ldr	r1, [r0, #0]
 8015524:	fb02 f303 	mul.w	r3, r2, r3
 8015528:	7b02      	ldrb	r2, [r0, #12]
 801552a:	50ca      	str	r2, [r1, r3]
 801552c:	f10c 0c01 	add.w	ip, ip, #1
 8015530:	8901      	ldrh	r1, [r0, #8]
 8015532:	fa1f f38c 	uxth.w	r3, ip
 8015536:	4299      	cmp	r1, r3
 8015538:	d8eb      	bhi.n	8015512 <uxr_reset_output_reliable_stream+0xa>
 801553a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801553e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015542:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015546:	4904      	ldr	r1, [pc, #16]	@ (8015558 <uxr_reset_output_reliable_stream+0x50>)
 8015548:	f8c0 100e 	str.w	r1, [r0, #14]
 801554c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015550:	2300      	movs	r3, #0
 8015552:	8242      	strh	r2, [r0, #18]
 8015554:	8403      	strh	r3, [r0, #32]
 8015556:	4770      	bx	lr
 8015558:	ffff0000 	.word	0xffff0000

0801555c <uxr_prepare_reliable_buffer_to_write>:
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	4604      	mov	r4, r0
 8015562:	b091      	sub	sp, #68	@ 0x44
 8015564:	8900      	ldrh	r0, [r0, #8]
 8015566:	89e6      	ldrh	r6, [r4, #14]
 8015568:	6823      	ldr	r3, [r4, #0]
 801556a:	9204      	str	r2, [sp, #16]
 801556c:	fbb6 f2f0 	udiv	r2, r6, r0
 8015570:	fb00 6212 	mls	r2, r0, r2, r6
 8015574:	b292      	uxth	r2, r2
 8015576:	6865      	ldr	r5, [r4, #4]
 8015578:	fbb5 f5f0 	udiv	r5, r5, r0
 801557c:	fb05 3202 	mla	r2, r5, r2, r3
 8015580:	3204      	adds	r2, #4
 8015582:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015586:	f894 900c 	ldrb.w	r9, [r4, #12]
 801558a:	9203      	str	r2, [sp, #12]
 801558c:	468b      	mov	fp, r1
 801558e:	1f2f      	subs	r7, r5, #4
 8015590:	2800      	cmp	r0, #0
 8015592:	f000 814c 	beq.w	801582e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015596:	f04f 0c00 	mov.w	ip, #0
 801559a:	46e2      	mov	sl, ip
 801559c:	4661      	mov	r1, ip
 801559e:	fbb1 f2f0 	udiv	r2, r1, r0
 80155a2:	fb00 1212 	mls	r2, r0, r2, r1
 80155a6:	b292      	uxth	r2, r2
 80155a8:	fb05 f202 	mul.w	r2, r5, r2
 80155ac:	f10c 0c01 	add.w	ip, ip, #1
 80155b0:	589a      	ldr	r2, [r3, r2]
 80155b2:	454a      	cmp	r2, r9
 80155b4:	bf08      	it	eq
 80155b6:	f10a 0a01 	addeq.w	sl, sl, #1
 80155ba:	fa1f f18c 	uxth.w	r1, ip
 80155be:	bf08      	it	eq
 80155c0:	fa1f fa8a 	uxtheq.w	sl, sl
 80155c4:	4281      	cmp	r1, r0
 80155c6:	d3ea      	bcc.n	801559e <uxr_prepare_reliable_buffer_to_write+0x42>
 80155c8:	4640      	mov	r0, r8
 80155ca:	2104      	movs	r1, #4
 80155cc:	f8cd a014 	str.w	sl, [sp, #20]
 80155d0:	f7f6 f9ea 	bl	800b9a8 <ucdr_alignment>
 80155d4:	4480      	add	r8, r0
 80155d6:	eb08 020b 	add.w	r2, r8, fp
 80155da:	42ba      	cmp	r2, r7
 80155dc:	f240 80cd 	bls.w	801577a <uxr_prepare_reliable_buffer_to_write+0x21e>
 80155e0:	7b22      	ldrb	r2, [r4, #12]
 80155e2:	445a      	add	r2, fp
 80155e4:	42ba      	cmp	r2, r7
 80155e6:	f240 80b5 	bls.w	8015754 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80155ea:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80155ee:	33fc      	adds	r3, #252	@ 0xfc
 80155f0:	b2ba      	uxth	r2, r7
 80155f2:	4413      	add	r3, r2
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	fb0a f903 	mul.w	r9, sl, r3
 80155fa:	45d9      	cmp	r9, fp
 80155fc:	9305      	str	r3, [sp, #20]
 80155fe:	9306      	str	r3, [sp, #24]
 8015600:	f0c0 80b7 	bcc.w	8015772 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015604:	f108 0304 	add.w	r3, r8, #4
 8015608:	42bb      	cmp	r3, r7
 801560a:	f080 80db 	bcs.w	80157c4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801560e:	f1a2 0904 	sub.w	r9, r2, #4
 8015612:	eba9 0908 	sub.w	r9, r9, r8
 8015616:	9b05      	ldr	r3, [sp, #20]
 8015618:	fa1f f989 	uxth.w	r9, r9
 801561c:	ebab 0b09 	sub.w	fp, fp, r9
 8015620:	fbbb f2f3 	udiv	r2, fp, r3
 8015624:	fb03 b312 	mls	r3, r3, r2, fp
 8015628:	2b00      	cmp	r3, #0
 801562a:	f000 80c8 	beq.w	80157be <uxr_prepare_reliable_buffer_to_write+0x262>
 801562e:	3201      	adds	r2, #1
 8015630:	b292      	uxth	r2, r2
 8015632:	9306      	str	r3, [sp, #24]
 8015634:	4552      	cmp	r2, sl
 8015636:	f200 809c 	bhi.w	8015772 <uxr_prepare_reliable_buffer_to_write+0x216>
 801563a:	f10d 0b20 	add.w	fp, sp, #32
 801563e:	2a00      	cmp	r2, #0
 8015640:	d042      	beq.n	80156c8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015642:	f8cd 801c 	str.w	r8, [sp, #28]
 8015646:	f04f 0a00 	mov.w	sl, #0
 801564a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801564e:	9505      	str	r5, [sp, #20]
 8015650:	f10d 0b20 	add.w	fp, sp, #32
 8015654:	4615      	mov	r5, r2
 8015656:	e000      	b.n	801565a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015658:	46c1      	mov	r9, r8
 801565a:	8920      	ldrh	r0, [r4, #8]
 801565c:	fbb6 f2f0 	udiv	r2, r6, r0
 8015660:	fb00 6112 	mls	r1, r0, r2, r6
 8015664:	b28a      	uxth	r2, r1
 8015666:	6863      	ldr	r3, [r4, #4]
 8015668:	fbb3 f1f0 	udiv	r1, r3, r0
 801566c:	6823      	ldr	r3, [r4, #0]
 801566e:	fb02 f101 	mul.w	r1, r2, r1
 8015672:	3104      	adds	r1, #4
 8015674:	4419      	add	r1, r3
 8015676:	4658      	mov	r0, fp
 8015678:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801567c:	9200      	str	r2, [sp, #0]
 801567e:	2300      	movs	r3, #0
 8015680:	463a      	mov	r2, r7
 8015682:	f7f6 f97b 	bl	800b97c <ucdr_init_buffer_origin_offset>
 8015686:	464a      	mov	r2, r9
 8015688:	2300      	movs	r3, #0
 801568a:	210d      	movs	r1, #13
 801568c:	4658      	mov	r0, fp
 801568e:	f7f9 fccb 	bl	800f028 <uxr_buffer_submessage_header>
 8015692:	8921      	ldrh	r1, [r4, #8]
 8015694:	fbb6 f2f1 	udiv	r2, r6, r1
 8015698:	fb01 6212 	mls	r2, r1, r2, r6
 801569c:	b292      	uxth	r2, r2
 801569e:	6863      	ldr	r3, [r4, #4]
 80156a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80156a4:	fb02 f303 	mul.w	r3, r2, r3
 80156a8:	6822      	ldr	r2, [r4, #0]
 80156aa:	4630      	mov	r0, r6
 80156ac:	50d7      	str	r7, [r2, r3]
 80156ae:	2101      	movs	r1, #1
 80156b0:	f000 faf4 	bl	8015c9c <uxr_seq_num_add>
 80156b4:	f10a 0a01 	add.w	sl, sl, #1
 80156b8:	fa1f f38a 	uxth.w	r3, sl
 80156bc:	429d      	cmp	r5, r3
 80156be:	4606      	mov	r6, r0
 80156c0:	d8ca      	bhi.n	8015658 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80156c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80156c6:	9d05      	ldr	r5, [sp, #20]
 80156c8:	8920      	ldrh	r0, [r4, #8]
 80156ca:	fbb6 f3f0 	udiv	r3, r6, r0
 80156ce:	fb00 6313 	mls	r3, r0, r3, r6
 80156d2:	b299      	uxth	r1, r3
 80156d4:	6863      	ldr	r3, [r4, #4]
 80156d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80156da:	fb01 f303 	mul.w	r3, r1, r3
 80156de:	6821      	ldr	r1, [r4, #0]
 80156e0:	3304      	adds	r3, #4
 80156e2:	4419      	add	r1, r3
 80156e4:	463a      	mov	r2, r7
 80156e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80156ea:	9000      	str	r0, [sp, #0]
 80156ec:	2300      	movs	r3, #0
 80156ee:	4658      	mov	r0, fp
 80156f0:	f7f6 f944 	bl	800b97c <ucdr_init_buffer_origin_offset>
 80156f4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80156f8:	4658      	mov	r0, fp
 80156fa:	fa1f f289 	uxth.w	r2, r9
 80156fe:	2302      	movs	r3, #2
 8015700:	210d      	movs	r1, #13
 8015702:	f7f9 fc91 	bl	800f028 <uxr_buffer_submessage_header>
 8015706:	9b03      	ldr	r3, [sp, #12]
 8015708:	8927      	ldrh	r7, [r4, #8]
 801570a:	7b20      	ldrb	r0, [r4, #12]
 801570c:	f108 0104 	add.w	r1, r8, #4
 8015710:	440b      	add	r3, r1
 8015712:	4619      	mov	r1, r3
 8015714:	fbb6 f3f7 	udiv	r3, r6, r7
 8015718:	fb07 6313 	mls	r3, r7, r3, r6
 801571c:	f1a5 0208 	sub.w	r2, r5, #8
 8015720:	b29d      	uxth	r5, r3
 8015722:	3004      	adds	r0, #4
 8015724:	6863      	ldr	r3, [r4, #4]
 8015726:	fbb3 f3f7 	udiv	r3, r3, r7
 801572a:	fb05 f303 	mul.w	r3, r5, r3
 801572e:	6825      	ldr	r5, [r4, #0]
 8015730:	4448      	add	r0, r9
 8015732:	50e8      	str	r0, [r5, r3]
 8015734:	9d04      	ldr	r5, [sp, #16]
 8015736:	eba2 0208 	sub.w	r2, r2, r8
 801573a:	4628      	mov	r0, r5
 801573c:	f7f6 f930 	bl	800b9a0 <ucdr_init_buffer>
 8015740:	4628      	mov	r0, r5
 8015742:	493c      	ldr	r1, [pc, #240]	@ (8015834 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015744:	4622      	mov	r2, r4
 8015746:	f7f6 f8ff 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 801574a:	2001      	movs	r0, #1
 801574c:	81e6      	strh	r6, [r4, #14]
 801574e:	b011      	add	sp, #68	@ 0x44
 8015750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015754:	2101      	movs	r1, #1
 8015756:	89e0      	ldrh	r0, [r4, #14]
 8015758:	f000 faa0 	bl	8015c9c <uxr_seq_num_add>
 801575c:	8921      	ldrh	r1, [r4, #8]
 801575e:	4605      	mov	r5, r0
 8015760:	8a60      	ldrh	r0, [r4, #18]
 8015762:	f000 fa9b 	bl	8015c9c <uxr_seq_num_add>
 8015766:	4601      	mov	r1, r0
 8015768:	4628      	mov	r0, r5
 801576a:	f000 fa9f 	bl	8015cac <uxr_seq_num_cmp>
 801576e:	2800      	cmp	r0, #0
 8015770:	dd42      	ble.n	80157f8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015772:	2000      	movs	r0, #0
 8015774:	b011      	add	sp, #68	@ 0x44
 8015776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801577a:	8921      	ldrh	r1, [r4, #8]
 801577c:	8a60      	ldrh	r0, [r4, #18]
 801577e:	9205      	str	r2, [sp, #20]
 8015780:	f000 fa8c 	bl	8015c9c <uxr_seq_num_add>
 8015784:	4601      	mov	r1, r0
 8015786:	4630      	mov	r0, r6
 8015788:	f000 fa90 	bl	8015cac <uxr_seq_num_cmp>
 801578c:	2800      	cmp	r0, #0
 801578e:	9a05      	ldr	r2, [sp, #20]
 8015790:	dcef      	bgt.n	8015772 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015792:	8927      	ldrh	r7, [r4, #8]
 8015794:	fbb6 f3f7 	udiv	r3, r6, r7
 8015798:	fb07 6313 	mls	r3, r7, r3, r6
 801579c:	b29d      	uxth	r5, r3
 801579e:	6863      	ldr	r3, [r4, #4]
 80157a0:	6824      	ldr	r4, [r4, #0]
 80157a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80157a6:	fb05 f303 	mul.w	r3, r5, r3
 80157aa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80157ae:	50e2      	str	r2, [r4, r3]
 80157b0:	2300      	movs	r3, #0
 80157b2:	f8cd 8000 	str.w	r8, [sp]
 80157b6:	f7f6 f8e1 	bl	800b97c <ucdr_init_buffer_origin_offset>
 80157ba:	2001      	movs	r0, #1
 80157bc:	e7da      	b.n	8015774 <uxr_prepare_reliable_buffer_to_write+0x218>
 80157be:	b293      	uxth	r3, r2
 80157c0:	461a      	mov	r2, r3
 80157c2:	e737      	b.n	8015634 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80157c4:	4630      	mov	r0, r6
 80157c6:	2101      	movs	r1, #1
 80157c8:	9207      	str	r2, [sp, #28]
 80157ca:	f000 fa67 	bl	8015c9c <uxr_seq_num_add>
 80157ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80157d2:	fbb0 f1fc 	udiv	r1, r0, ip
 80157d6:	fb0c 0111 	mls	r1, ip, r1, r0
 80157da:	4606      	mov	r6, r0
 80157dc:	b288      	uxth	r0, r1
 80157de:	6863      	ldr	r3, [r4, #4]
 80157e0:	fbb3 f1fc 	udiv	r1, r3, ip
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	9a07      	ldr	r2, [sp, #28]
 80157e8:	fb00 f101 	mul.w	r1, r0, r1
 80157ec:	3104      	adds	r1, #4
 80157ee:	440b      	add	r3, r1
 80157f0:	9303      	str	r3, [sp, #12]
 80157f2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80157f6:	e70a      	b.n	801560e <uxr_prepare_reliable_buffer_to_write+0xb2>
 80157f8:	8921      	ldrh	r1, [r4, #8]
 80157fa:	fbb5 f3f1 	udiv	r3, r5, r1
 80157fe:	fb01 5313 	mls	r3, r1, r3, r5
 8015802:	b29a      	uxth	r2, r3
 8015804:	6863      	ldr	r3, [r4, #4]
 8015806:	fbb3 f3f1 	udiv	r3, r3, r1
 801580a:	6821      	ldr	r1, [r4, #0]
 801580c:	9804      	ldr	r0, [sp, #16]
 801580e:	fb02 f303 	mul.w	r3, r2, r3
 8015812:	3304      	adds	r3, #4
 8015814:	7b22      	ldrb	r2, [r4, #12]
 8015816:	4419      	add	r1, r3
 8015818:	445a      	add	r2, fp
 801581a:	f841 2c04 	str.w	r2, [r1, #-4]
 801581e:	7b23      	ldrb	r3, [r4, #12]
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	2300      	movs	r3, #0
 8015824:	f7f6 f8aa 	bl	800b97c <ucdr_init_buffer_origin_offset>
 8015828:	81e5      	strh	r5, [r4, #14]
 801582a:	2001      	movs	r0, #1
 801582c:	e7a2      	b.n	8015774 <uxr_prepare_reliable_buffer_to_write+0x218>
 801582e:	4682      	mov	sl, r0
 8015830:	e6ca      	b.n	80155c8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015832:	bf00      	nop
 8015834:	0801543d 	.word	0x0801543d

08015838 <uxr_prepare_next_reliable_buffer_to_send>:
 8015838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583a:	4604      	mov	r4, r0
 801583c:	460f      	mov	r7, r1
 801583e:	8a00      	ldrh	r0, [r0, #16]
 8015840:	2101      	movs	r1, #1
 8015842:	4616      	mov	r6, r2
 8015844:	461d      	mov	r5, r3
 8015846:	f000 fa29 	bl	8015c9c <uxr_seq_num_add>
 801584a:	8028      	strh	r0, [r5, #0]
 801584c:	8922      	ldrh	r2, [r4, #8]
 801584e:	fbb0 f3f2 	udiv	r3, r0, r2
 8015852:	fb02 0c13 	mls	ip, r2, r3, r0
 8015856:	fa1f fc8c 	uxth.w	ip, ip
 801585a:	6863      	ldr	r3, [r4, #4]
 801585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015860:	fb0c fc03 	mul.w	ip, ip, r3
 8015864:	6823      	ldr	r3, [r4, #0]
 8015866:	89e1      	ldrh	r1, [r4, #14]
 8015868:	f10c 0c04 	add.w	ip, ip, #4
 801586c:	4463      	add	r3, ip
 801586e:	603b      	str	r3, [r7, #0]
 8015870:	6823      	ldr	r3, [r4, #0]
 8015872:	449c      	add	ip, r3
 8015874:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015878:	6033      	str	r3, [r6, #0]
 801587a:	f000 fa17 	bl	8015cac <uxr_seq_num_cmp>
 801587e:	2800      	cmp	r0, #0
 8015880:	dd01      	ble.n	8015886 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015882:	2000      	movs	r0, #0
 8015884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015886:	7b23      	ldrb	r3, [r4, #12]
 8015888:	6832      	ldr	r2, [r6, #0]
 801588a:	429a      	cmp	r2, r3
 801588c:	d9f9      	bls.n	8015882 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801588e:	8a61      	ldrh	r1, [r4, #18]
 8015890:	8a20      	ldrh	r0, [r4, #16]
 8015892:	f000 fa07 	bl	8015ca4 <uxr_seq_num_sub>
 8015896:	8923      	ldrh	r3, [r4, #8]
 8015898:	4283      	cmp	r3, r0
 801589a:	d0f2      	beq.n	8015882 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801589c:	8828      	ldrh	r0, [r5, #0]
 801589e:	89e3      	ldrh	r3, [r4, #14]
 80158a0:	8220      	strh	r0, [r4, #16]
 80158a2:	4298      	cmp	r0, r3
 80158a4:	d001      	beq.n	80158aa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80158a6:	2001      	movs	r0, #1
 80158a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158aa:	2101      	movs	r1, #1
 80158ac:	f000 f9f6 	bl	8015c9c <uxr_seq_num_add>
 80158b0:	81e0      	strh	r0, [r4, #14]
 80158b2:	2001      	movs	r0, #1
 80158b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158b6:	bf00      	nop

080158b8 <uxr_update_output_stream_heartbeat_timestamp>:
 80158b8:	b570      	push	{r4, r5, r6, lr}
 80158ba:	8a01      	ldrh	r1, [r0, #16]
 80158bc:	4604      	mov	r4, r0
 80158be:	8a40      	ldrh	r0, [r0, #18]
 80158c0:	4615      	mov	r5, r2
 80158c2:	461e      	mov	r6, r3
 80158c4:	f000 f9f2 	bl	8015cac <uxr_seq_num_cmp>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	db07      	blt.n	80158dc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80158cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80158d4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80158d8:	2000      	movs	r0, #0
 80158da:	bd70      	pop	{r4, r5, r6, pc}
 80158dc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80158e0:	b940      	cbnz	r0, 80158f4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80158e2:	2301      	movs	r3, #1
 80158e4:	f884 3020 	strb.w	r3, [r4, #32]
 80158e8:	3564      	adds	r5, #100	@ 0x64
 80158ea:	f146 0600 	adc.w	r6, r6, #0
 80158ee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80158f2:	bd70      	pop	{r4, r5, r6, pc}
 80158f4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80158f8:	4295      	cmp	r5, r2
 80158fa:	eb76 0303 	sbcs.w	r3, r6, r3
 80158fe:	bfa5      	ittet	ge
 8015900:	3001      	addge	r0, #1
 8015902:	f884 0020 	strbge.w	r0, [r4, #32]
 8015906:	2000      	movlt	r0, #0
 8015908:	2001      	movge	r0, #1
 801590a:	e7ed      	b.n	80158e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801590c <uxr_begin_output_nack_buffer_it>:
 801590c:	8a40      	ldrh	r0, [r0, #18]
 801590e:	4770      	bx	lr

08015910 <uxr_next_reliable_nack_buffer_to_send>:
 8015910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015914:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015918:	b082      	sub	sp, #8
 801591a:	f1b8 0f00 	cmp.w	r8, #0
 801591e:	d011      	beq.n	8015944 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015920:	4604      	mov	r4, r0
 8015922:	8818      	ldrh	r0, [r3, #0]
 8015924:	460e      	mov	r6, r1
 8015926:	4617      	mov	r7, r2
 8015928:	461d      	mov	r5, r3
 801592a:	2101      	movs	r1, #1
 801592c:	f000 f9b6 	bl	8015c9c <uxr_seq_num_add>
 8015930:	8028      	strh	r0, [r5, #0]
 8015932:	8a21      	ldrh	r1, [r4, #16]
 8015934:	f000 f9ba 	bl	8015cac <uxr_seq_num_cmp>
 8015938:	2800      	cmp	r0, #0
 801593a:	dd07      	ble.n	801594c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801593c:	f04f 0800 	mov.w	r8, #0
 8015940:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015944:	4640      	mov	r0, r8
 8015946:	b002      	add	sp, #8
 8015948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801594c:	8921      	ldrh	r1, [r4, #8]
 801594e:	8828      	ldrh	r0, [r5, #0]
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	fbb0 f2f1 	udiv	r2, r0, r1
 8015956:	fb01 0c12 	mls	ip, r1, r2, r0
 801595a:	fa1f f28c 	uxth.w	r2, ip
 801595e:	9301      	str	r3, [sp, #4]
 8015960:	6863      	ldr	r3, [r4, #4]
 8015962:	fbb3 fcf1 	udiv	ip, r3, r1
 8015966:	9b01      	ldr	r3, [sp, #4]
 8015968:	fb02 fc0c 	mul.w	ip, r2, ip
 801596c:	f10c 0c04 	add.w	ip, ip, #4
 8015970:	4463      	add	r3, ip
 8015972:	6033      	str	r3, [r6, #0]
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	4463      	add	r3, ip
 8015978:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801597c:	603b      	str	r3, [r7, #0]
 801597e:	7b22      	ldrb	r2, [r4, #12]
 8015980:	429a      	cmp	r2, r3
 8015982:	d0d2      	beq.n	801592a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015984:	4640      	mov	r0, r8
 8015986:	b002      	add	sp, #8
 8015988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801598c <uxr_process_acknack>:
 801598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598e:	4604      	mov	r4, r0
 8015990:	460e      	mov	r6, r1
 8015992:	4610      	mov	r0, r2
 8015994:	2101      	movs	r1, #1
 8015996:	f000 f985 	bl	8015ca4 <uxr_seq_num_sub>
 801599a:	8a61      	ldrh	r1, [r4, #18]
 801599c:	f000 f982 	bl	8015ca4 <uxr_seq_num_sub>
 80159a0:	b1c0      	cbz	r0, 80159d4 <uxr_process_acknack+0x48>
 80159a2:	4605      	mov	r5, r0
 80159a4:	2700      	movs	r7, #0
 80159a6:	2101      	movs	r1, #1
 80159a8:	8a60      	ldrh	r0, [r4, #18]
 80159aa:	f000 f977 	bl	8015c9c <uxr_seq_num_add>
 80159ae:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80159b2:	fbb0 f1fc 	udiv	r1, r0, ip
 80159b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80159ba:	fb0c 0111 	mls	r1, ip, r1, r0
 80159be:	b289      	uxth	r1, r1
 80159c0:	3701      	adds	r7, #1
 80159c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80159c6:	fb01 f303 	mul.w	r3, r1, r3
 80159ca:	42bd      	cmp	r5, r7
 80159cc:	7b21      	ldrb	r1, [r4, #12]
 80159ce:	8260      	strh	r0, [r4, #18]
 80159d0:	50d1      	str	r1, [r2, r3]
 80159d2:	d1e8      	bne.n	80159a6 <uxr_process_acknack+0x1a>
 80159d4:	3e00      	subs	r6, #0
 80159d6:	f04f 0300 	mov.w	r3, #0
 80159da:	bf18      	it	ne
 80159dc:	2601      	movne	r6, #1
 80159de:	f884 3020 	strb.w	r3, [r4, #32]
 80159e2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80159e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159e8 <uxr_is_output_up_to_date>:
 80159e8:	8a01      	ldrh	r1, [r0, #16]
 80159ea:	8a40      	ldrh	r0, [r0, #18]
 80159ec:	b508      	push	{r3, lr}
 80159ee:	f000 f95d 	bl	8015cac <uxr_seq_num_cmp>
 80159f2:	fab0 f080 	clz	r0, r0
 80159f6:	0940      	lsrs	r0, r0, #5
 80159f8:	bd08      	pop	{r3, pc}
 80159fa:	bf00      	nop

080159fc <get_available_free_slots>:
 80159fc:	8902      	ldrh	r2, [r0, #8]
 80159fe:	b1da      	cbz	r2, 8015a38 <get_available_free_slots+0x3c>
 8015a00:	b530      	push	{r4, r5, lr}
 8015a02:	2100      	movs	r1, #0
 8015a04:	6843      	ldr	r3, [r0, #4]
 8015a06:	6805      	ldr	r5, [r0, #0]
 8015a08:	7b04      	ldrb	r4, [r0, #12]
 8015a0a:	fbb3 fef2 	udiv	lr, r3, r2
 8015a0e:	4608      	mov	r0, r1
 8015a10:	460b      	mov	r3, r1
 8015a12:	fbb3 fcf2 	udiv	ip, r3, r2
 8015a16:	fb02 331c 	mls	r3, r2, ip, r3
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	fb0e f303 	mul.w	r3, lr, r3
 8015a20:	3101      	adds	r1, #1
 8015a22:	f855 c003 	ldr.w	ip, [r5, r3]
 8015a26:	4564      	cmp	r4, ip
 8015a28:	bf08      	it	eq
 8015a2a:	3001      	addeq	r0, #1
 8015a2c:	b28b      	uxth	r3, r1
 8015a2e:	bf08      	it	eq
 8015a30:	b280      	uxtheq	r0, r0
 8015a32:	4293      	cmp	r3, r2
 8015a34:	d3ed      	bcc.n	8015a12 <get_available_free_slots+0x16>
 8015a36:	bd30      	pop	{r4, r5, pc}
 8015a38:	4610      	mov	r0, r2
 8015a3a:	4770      	bx	lr

08015a3c <uxr_buffer_request_data>:
 8015a3c:	b530      	push	{r4, r5, lr}
 8015a3e:	b095      	sub	sp, #84	@ 0x54
 8015a40:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015a44:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015a46:	9303      	str	r3, [sp, #12]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	2d00      	cmp	r5, #0
 8015a4c:	bf14      	ite	ne
 8015a4e:	2101      	movne	r1, #1
 8015a50:	4611      	moveq	r1, r2
 8015a52:	4604      	mov	r4, r0
 8015a54:	f88d 301c 	strb.w	r3, [sp, #28]
 8015a58:	f88d 201d 	strb.w	r2, [sp, #29]
 8015a5c:	f88d 201e 	strb.w	r2, [sp, #30]
 8015a60:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015a64:	d021      	beq.n	8015aaa <uxr_buffer_request_data+0x6e>
 8015a66:	682a      	ldr	r2, [r5, #0]
 8015a68:	686b      	ldr	r3, [r5, #4]
 8015a6a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015a6e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015a72:	2210      	movs	r2, #16
 8015a74:	2308      	movs	r3, #8
 8015a76:	2100      	movs	r1, #0
 8015a78:	e9cd 3100 	strd	r3, r1, [sp]
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	9905      	ldr	r1, [sp, #20]
 8015a80:	ab0c      	add	r3, sp, #48	@ 0x30
 8015a82:	f7f9 f833 	bl	800eaec <uxr_prepare_stream_to_write_submessage>
 8015a86:	b918      	cbnz	r0, 8015a90 <uxr_buffer_request_data+0x54>
 8015a88:	4604      	mov	r4, r0
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	b015      	add	sp, #84	@ 0x54
 8015a8e:	bd30      	pop	{r4, r5, pc}
 8015a90:	9904      	ldr	r1, [sp, #16]
 8015a92:	aa06      	add	r2, sp, #24
 8015a94:	4620      	mov	r0, r4
 8015a96:	f7f9 f95f 	bl	800ed58 <uxr_init_base_object_request>
 8015a9a:	a906      	add	r1, sp, #24
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	a80c      	add	r0, sp, #48	@ 0x30
 8015aa0:	f7fa fc5a 	bl	8010358 <uxr_serialize_READ_DATA_Payload>
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	b015      	add	sp, #84	@ 0x54
 8015aa8:	bd30      	pop	{r4, r5, pc}
 8015aaa:	2208      	movs	r2, #8
 8015aac:	e7e2      	b.n	8015a74 <uxr_buffer_request_data+0x38>
 8015aae:	bf00      	nop

08015ab0 <uxr_buffer_cancel_data>:
 8015ab0:	b510      	push	{r4, lr}
 8015ab2:	b094      	sub	sp, #80	@ 0x50
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	9202      	str	r2, [sp, #8]
 8015ab8:	9205      	str	r2, [sp, #20]
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	2201      	movs	r2, #1
 8015abe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015ac2:	f88d 301e 	strb.w	r3, [sp, #30]
 8015ac6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015aca:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015ace:	2308      	movs	r3, #8
 8015ad0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015ad4:	9300      	str	r3, [sp, #0]
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	ab0c      	add	r3, sp, #48	@ 0x30
 8015ada:	4604      	mov	r4, r0
 8015adc:	9103      	str	r1, [sp, #12]
 8015ade:	f7f9 f805 	bl	800eaec <uxr_prepare_stream_to_write_submessage>
 8015ae2:	b918      	cbnz	r0, 8015aec <uxr_buffer_cancel_data+0x3c>
 8015ae4:	4604      	mov	r4, r0
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	b014      	add	sp, #80	@ 0x50
 8015aea:	bd10      	pop	{r4, pc}
 8015aec:	9905      	ldr	r1, [sp, #20]
 8015aee:	aa06      	add	r2, sp, #24
 8015af0:	4620      	mov	r0, r4
 8015af2:	f7f9 f931 	bl	800ed58 <uxr_init_base_object_request>
 8015af6:	a906      	add	r1, sp, #24
 8015af8:	4604      	mov	r4, r0
 8015afa:	a80c      	add	r0, sp, #48	@ 0x30
 8015afc:	f7fa fc2c 	bl	8010358 <uxr_serialize_READ_DATA_Payload>
 8015b00:	4620      	mov	r0, r4
 8015b02:	b014      	add	sp, #80	@ 0x50
 8015b04:	bd10      	pop	{r4, pc}
 8015b06:	bf00      	nop

08015b08 <read_submessage_format>:
 8015b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b0c:	b095      	sub	sp, #84	@ 0x54
 8015b0e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8015b12:	b113      	cbz	r3, 8015b1a <read_submessage_format+0x12>
 8015b14:	b015      	add	sp, #84	@ 0x54
 8015b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	4615      	mov	r5, r2
 8015b1e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015b22:	4607      	mov	r7, r0
 8015b24:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015b26:	9004      	str	r0, [sp, #16]
 8015b28:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015b2a:	9005      	str	r0, [sp, #20]
 8015b2c:	1a52      	subs	r2, r2, r1
 8015b2e:	a80c      	add	r0, sp, #48	@ 0x30
 8015b30:	4699      	mov	r9, r3
 8015b32:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015b36:	f7f5 ff33 	bl	800b9a0 <ucdr_init_buffer>
 8015b3a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015b3e:	a80c      	add	r0, sp, #48	@ 0x30
 8015b40:	f7f5 ff02 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 8015b44:	69e2      	ldr	r2, [r4, #28]
 8015b46:	b19a      	cbz	r2, 8015b70 <read_submessage_format+0x68>
 8015b48:	f1b8 0f07 	cmp.w	r8, #7
 8015b4c:	f882 9014 	strb.w	r9, [r2, #20]
 8015b50:	d040      	beq.n	8015bd4 <read_submessage_format+0xcc>
 8015b52:	f1b8 0f08 	cmp.w	r8, #8
 8015b56:	d02e      	beq.n	8015bb6 <read_submessage_format+0xae>
 8015b58:	f1b8 0f06 	cmp.w	r8, #6
 8015b5c:	d011      	beq.n	8015b82 <read_submessage_format+0x7a>
 8015b5e:	2301      	movs	r3, #1
 8015b60:	7513      	strb	r3, [r2, #20]
 8015b62:	4629      	mov	r1, r5
 8015b64:	4620      	mov	r0, r4
 8015b66:	f7f5 ff6b 	bl	800ba40 <ucdr_advance_buffer>
 8015b6a:	b015      	add	sp, #84	@ 0x54
 8015b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b70:	f1b8 0f07 	cmp.w	r8, #7
 8015b74:	d02e      	beq.n	8015bd4 <read_submessage_format+0xcc>
 8015b76:	f1b8 0f08 	cmp.w	r8, #8
 8015b7a:	d01c      	beq.n	8015bb6 <read_submessage_format+0xae>
 8015b7c:	f1b8 0f06 	cmp.w	r8, #6
 8015b80:	d1ef      	bne.n	8015b62 <read_submessage_format+0x5a>
 8015b82:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8015b86:	f1b8 0f00 	cmp.w	r8, #0
 8015b8a:	d011      	beq.n	8015bb0 <read_submessage_format+0xa8>
 8015b8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b8e:	e9cd 3500 	strd	r3, r5, [sp]
 8015b92:	2306      	movs	r3, #6
 8015b94:	f88d 3016 	strb.w	r3, [sp, #22]
 8015b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015b9c:	9302      	str	r3, [sp, #8]
 8015b9e:	4632      	mov	r2, r6
 8015ba0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015ba4:	4638      	mov	r0, r7
 8015ba6:	47c0      	blx	r8
 8015ba8:	2301      	movs	r3, #1
 8015baa:	69e2      	ldr	r2, [r4, #28]
 8015bac:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015bb0:	2a00      	cmp	r2, #0
 8015bb2:	d1d4      	bne.n	8015b5e <read_submessage_format+0x56>
 8015bb4:	e7d5      	b.n	8015b62 <read_submessage_format+0x5a>
 8015bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d0f8      	beq.n	8015bb0 <read_submessage_format+0xa8>
 8015bbe:	a906      	add	r1, sp, #24
 8015bc0:	a80c      	add	r0, sp, #48	@ 0x30
 8015bc2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015bc6:	f7fa fc8d 	bl	80104e4 <uxr_deserialize_SampleIdentity>
 8015bca:	b9a0      	cbnz	r0, 8015bf6 <read_submessage_format+0xee>
 8015bcc:	69e2      	ldr	r2, [r4, #28]
 8015bce:	2a00      	cmp	r2, #0
 8015bd0:	d1c5      	bne.n	8015b5e <read_submessage_format+0x56>
 8015bd2:	e7c6      	b.n	8015b62 <read_submessage_format+0x5a>
 8015bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015bd8:	b13b      	cbz	r3, 8015bea <read_submessage_format+0xe2>
 8015bda:	a906      	add	r1, sp, #24
 8015bdc:	a80c      	add	r0, sp, #48	@ 0x30
 8015bde:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8015be2:	f7fa f953 	bl	800fe8c <uxr_deserialize_BaseObjectRequest>
 8015be6:	bb60      	cbnz	r0, 8015c42 <read_submessage_format+0x13a>
 8015be8:	69e2      	ldr	r2, [r4, #28]
 8015bea:	68a3      	ldr	r3, [r4, #8]
 8015bec:	442b      	add	r3, r5
 8015bee:	60a3      	str	r3, [r4, #8]
 8015bf0:	2a00      	cmp	r2, #0
 8015bf2:	d1b4      	bne.n	8015b5e <read_submessage_format+0x56>
 8015bf4:	e7b5      	b.n	8015b62 <read_submessage_format+0x5a>
 8015bf6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015bfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015bfc:	1a52      	subs	r2, r2, r1
 8015bfe:	eba8 0803 	sub.w	r8, r8, r3
 8015c02:	a80c      	add	r0, sp, #48	@ 0x30
 8015c04:	f7f5 fecc 	bl	800b9a0 <ucdr_init_buffer>
 8015c08:	44a8      	add	r8, r5
 8015c0a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015c0e:	a80c      	add	r0, sp, #48	@ 0x30
 8015c10:	f7f5 fe9a 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 8015c14:	fa1f f888 	uxth.w	r8, r8
 8015c18:	ab0c      	add	r3, sp, #48	@ 0x30
 8015c1a:	9300      	str	r3, [sp, #0]
 8015c1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c20:	2108      	movs	r1, #8
 8015c22:	f88d 1016 	strb.w	r1, [sp, #22]
 8015c26:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8015c2a:	9102      	str	r1, [sp, #8]
 8015c2c:	ab06      	add	r3, sp, #24
 8015c2e:	4632      	mov	r2, r6
 8015c30:	9905      	ldr	r1, [sp, #20]
 8015c32:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8015c36:	4638      	mov	r0, r7
 8015c38:	47b0      	blx	r6
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015c40:	e7c4      	b.n	8015bcc <read_submessage_format+0xc4>
 8015c42:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8015c46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c48:	1a52      	subs	r2, r2, r1
 8015c4a:	a80c      	add	r0, sp, #48	@ 0x30
 8015c4c:	eba8 0803 	sub.w	r8, r8, r3
 8015c50:	f7f5 fea6 	bl	800b9a0 <ucdr_init_buffer>
 8015c54:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015c58:	a80c      	add	r0, sp, #48	@ 0x30
 8015c5a:	f7f5 fe75 	bl	800b948 <ucdr_set_on_full_buffer_callback>
 8015c5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015c66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015c6a:	44a8      	add	r8, r5
 8015c6c:	fa1f f888 	uxth.w	r8, r8
 8015c70:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c74:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015c78:	2107      	movs	r1, #7
 8015c7a:	f88d 1016 	strb.w	r1, [sp, #22]
 8015c7e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8015c82:	9102      	str	r1, [sp, #8]
 8015c84:	4632      	mov	r2, r6
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8015c8c:	9905      	ldr	r1, [sp, #20]
 8015c8e:	4638      	mov	r0, r7
 8015c90:	47b0      	blx	r6
 8015c92:	2301      	movs	r3, #1
 8015c94:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8015c98:	e7a6      	b.n	8015be8 <read_submessage_format+0xe0>
 8015c9a:	bf00      	nop

08015c9c <uxr_seq_num_add>:
 8015c9c:	4408      	add	r0, r1
 8015c9e:	b280      	uxth	r0, r0
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop

08015ca4 <uxr_seq_num_sub>:
 8015ca4:	1a40      	subs	r0, r0, r1
 8015ca6:	b280      	uxth	r0, r0
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <uxr_seq_num_cmp>:
 8015cac:	4288      	cmp	r0, r1
 8015cae:	d011      	beq.n	8015cd4 <uxr_seq_num_cmp+0x28>
 8015cb0:	d309      	bcc.n	8015cc6 <uxr_seq_num_cmp+0x1a>
 8015cb2:	4288      	cmp	r0, r1
 8015cb4:	d910      	bls.n	8015cd8 <uxr_seq_num_cmp+0x2c>
 8015cb6:	1a40      	subs	r0, r0, r1
 8015cb8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015cbc:	bfd4      	ite	le
 8015cbe:	2001      	movle	r0, #1
 8015cc0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015cc4:	4770      	bx	lr
 8015cc6:	1a0b      	subs	r3, r1, r0
 8015cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015ccc:	daf1      	bge.n	8015cb2 <uxr_seq_num_cmp+0x6>
 8015cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015cd2:	4770      	bx	lr
 8015cd4:	2000      	movs	r0, #0
 8015cd6:	4770      	bx	lr
 8015cd8:	2001      	movs	r0, #1
 8015cda:	4770      	bx	lr

08015cdc <uxr_init_framing_io>:
 8015cdc:	2300      	movs	r3, #0
 8015cde:	7041      	strb	r1, [r0, #1]
 8015ce0:	7003      	strb	r3, [r0, #0]
 8015ce2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop

08015ce8 <uxr_write_framed_msg>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	4617      	mov	r7, r2
 8015cee:	7842      	ldrb	r2, [r0, #1]
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	460e      	mov	r6, r1
 8015cf4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8015cf8:	469a      	mov	sl, r3
 8015cfa:	2901      	cmp	r1, #1
 8015cfc:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8015d00:	4604      	mov	r4, r0
 8015d02:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015d06:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8015d0a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8015d0e:	f240 8137 	bls.w	8015f80 <uxr_write_framed_msg+0x298>
 8015d12:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015d16:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8015d1a:	2901      	cmp	r1, #1
 8015d1c:	f04f 0202 	mov.w	r2, #2
 8015d20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d24:	f240 808f 	bls.w	8015e46 <uxr_write_framed_msg+0x15e>
 8015d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d2a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015d2e:	b2dd      	uxtb	r5, r3
 8015d30:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015d34:	2203      	movs	r2, #3
 8015d36:	2901      	cmp	r1, #1
 8015d38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d3c:	f240 809a 	bls.w	8015e74 <uxr_write_framed_msg+0x18c>
 8015d40:	18a1      	adds	r1, r4, r2
 8015d42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d44:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8015d48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015d4c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015d50:	3201      	adds	r2, #1
 8015d52:	2801      	cmp	r0, #1
 8015d54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d58:	f240 80a0 	bls.w	8015e9c <uxr_write_framed_msg+0x1b4>
 8015d5c:	18a0      	adds	r0, r4, r2
 8015d5e:	3201      	adds	r2, #1
 8015d60:	b2d2      	uxtb	r2, r2
 8015d62:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015d66:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	f000 80a9 	beq.w	8015ec2 <uxr_write_framed_msg+0x1da>
 8015d70:	f04f 0900 	mov.w	r9, #0
 8015d74:	46c8      	mov	r8, r9
 8015d76:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015d7a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015d7e:	2901      	cmp	r1, #1
 8015d80:	f240 80c3 	bls.w	8015f0a <uxr_write_framed_msg+0x222>
 8015d84:	2a29      	cmp	r2, #41	@ 0x29
 8015d86:	f200 809f 	bhi.w	8015ec8 <uxr_write_framed_msg+0x1e0>
 8015d8a:	18a1      	adds	r1, r4, r2
 8015d8c:	3201      	adds	r2, #1
 8015d8e:	b2d2      	uxtb	r2, r2
 8015d90:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8015d94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015d98:	ea89 0303 	eor.w	r3, r9, r3
 8015d9c:	498c      	ldr	r1, [pc, #560]	@ (8015fd0 <uxr_write_framed_msg+0x2e8>)
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	f108 0801 	add.w	r8, r8, #1
 8015da4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015da8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dae:	4543      	cmp	r3, r8
 8015db0:	d8e1      	bhi.n	8015d76 <uxr_write_framed_msg+0x8e>
 8015db2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015db6:	fa5f f889 	uxtb.w	r8, r9
 8015dba:	9301      	str	r3, [sp, #4]
 8015dbc:	f04f 0900 	mov.w	r9, #0
 8015dc0:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8015dc4:	fa5f f18a 	uxtb.w	r1, sl
 8015dc8:	2901      	cmp	r1, #1
 8015dca:	d921      	bls.n	8015e10 <uxr_write_framed_msg+0x128>
 8015dcc:	2a29      	cmp	r2, #41	@ 0x29
 8015dce:	f240 80af 	bls.w	8015f30 <uxr_write_framed_msg+0x248>
 8015dd2:	2500      	movs	r5, #0
 8015dd4:	e000      	b.n	8015dd8 <uxr_write_framed_msg+0xf0>
 8015dd6:	b160      	cbz	r0, 8015df2 <uxr_write_framed_msg+0x10a>
 8015dd8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015ddc:	1b52      	subs	r2, r2, r5
 8015dde:	465b      	mov	r3, fp
 8015de0:	4421      	add	r1, r4
 8015de2:	4638      	mov	r0, r7
 8015de4:	47b0      	blx	r6
 8015de6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015dea:	4405      	add	r5, r0
 8015dec:	4295      	cmp	r5, r2
 8015dee:	d3f2      	bcc.n	8015dd6 <uxr_write_framed_msg+0xee>
 8015df0:	d003      	beq.n	8015dfa <uxr_write_framed_msg+0x112>
 8015df2:	2000      	movs	r0, #0
 8015df4:	b003      	add	sp, #12
 8015df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfa:	fa5f f18a 	uxtb.w	r1, sl
 8015dfe:	f04f 0300 	mov.w	r3, #0
 8015e02:	2901      	cmp	r1, #1
 8015e04:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015e08:	f04f 0200 	mov.w	r2, #0
 8015e0c:	f200 8090 	bhi.w	8015f30 <uxr_write_framed_msg+0x248>
 8015e10:	1c51      	adds	r1, r2, #1
 8015e12:	b2c9      	uxtb	r1, r1
 8015e14:	2929      	cmp	r1, #41	@ 0x29
 8015e16:	d8dc      	bhi.n	8015dd2 <uxr_write_framed_msg+0xea>
 8015e18:	18a5      	adds	r5, r4, r2
 8015e1a:	4421      	add	r1, r4
 8015e1c:	3202      	adds	r2, #2
 8015e1e:	f088 0820 	eor.w	r8, r8, #32
 8015e22:	4648      	mov	r0, r9
 8015e24:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015e28:	b2d2      	uxtb	r2, r2
 8015e2a:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8015e2e:	f04f 0901 	mov.w	r9, #1
 8015e32:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015e36:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	f040 8085 	bne.w	8015f4a <uxr_write_framed_msg+0x262>
 8015e40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e44:	e7bc      	b.n	8015dc0 <uxr_write_framed_msg+0xd8>
 8015e46:	4611      	mov	r1, r2
 8015e48:	f04f 0c03 	mov.w	ip, #3
 8015e4c:	2204      	movs	r2, #4
 8015e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e50:	4421      	add	r1, r4
 8015e52:	b2dd      	uxtb	r5, r3
 8015e54:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015e58:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8015e5c:	44a4      	add	ip, r4
 8015e5e:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015e62:	f080 0020 	eor.w	r0, r0, #32
 8015e66:	2901      	cmp	r1, #1
 8015e68:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015e6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e70:	f63f af66 	bhi.w	8015d40 <uxr_write_framed_msg+0x58>
 8015e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e76:	18a0      	adds	r0, r4, r2
 8015e78:	f085 0520 	eor.w	r5, r5, #32
 8015e7c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015e80:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015e84:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8015e88:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015e8c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015e90:	3202      	adds	r2, #2
 8015e92:	2801      	cmp	r0, #1
 8015e94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015e98:	f63f af60 	bhi.w	8015d5c <uxr_write_framed_msg+0x74>
 8015e9c:	1c50      	adds	r0, r2, #1
 8015e9e:	18a5      	adds	r5, r4, r2
 8015ea0:	fa54 f080 	uxtab	r0, r4, r0
 8015ea4:	3202      	adds	r2, #2
 8015ea6:	f081 0120 	eor.w	r1, r1, #32
 8015eaa:	b2d2      	uxtb	r2, r2
 8015eac:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015eb0:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8015eb4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015eb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	f47f af57 	bne.w	8015d70 <uxr_write_framed_msg+0x88>
 8015ec2:	9301      	str	r3, [sp, #4]
 8015ec4:	4698      	mov	r8, r3
 8015ec6:	e779      	b.n	8015dbc <uxr_write_framed_msg+0xd4>
 8015ec8:	2500      	movs	r5, #0
 8015eca:	e001      	b.n	8015ed0 <uxr_write_framed_msg+0x1e8>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d090      	beq.n	8015df2 <uxr_write_framed_msg+0x10a>
 8015ed0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015ed4:	1b52      	subs	r2, r2, r5
 8015ed6:	465b      	mov	r3, fp
 8015ed8:	4421      	add	r1, r4
 8015eda:	4638      	mov	r0, r7
 8015edc:	47b0      	blx	r6
 8015ede:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015ee2:	4405      	add	r5, r0
 8015ee4:	4295      	cmp	r5, r2
 8015ee6:	d3f1      	bcc.n	8015ecc <uxr_write_framed_msg+0x1e4>
 8015ee8:	d183      	bne.n	8015df2 <uxr_write_framed_msg+0x10a>
 8015eea:	f04f 0300 	mov.w	r3, #0
 8015eee:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ef4:	4543      	cmp	r3, r8
 8015ef6:	d964      	bls.n	8015fc2 <uxr_write_framed_msg+0x2da>
 8015ef8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015efc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8015f00:	2901      	cmp	r1, #1
 8015f02:	f04f 0200 	mov.w	r2, #0
 8015f06:	f63f af3d 	bhi.w	8015d84 <uxr_write_framed_msg+0x9c>
 8015f0a:	1c51      	adds	r1, r2, #1
 8015f0c:	b2c9      	uxtb	r1, r1
 8015f0e:	2929      	cmp	r1, #41	@ 0x29
 8015f10:	d8da      	bhi.n	8015ec8 <uxr_write_framed_msg+0x1e0>
 8015f12:	18a0      	adds	r0, r4, r2
 8015f14:	4421      	add	r1, r4
 8015f16:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8015f1a:	3202      	adds	r2, #2
 8015f1c:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8015f20:	b2d2      	uxtb	r2, r2
 8015f22:	f083 0020 	eor.w	r0, r3, #32
 8015f26:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015f2a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f2e:	e733      	b.n	8015d98 <uxr_write_framed_msg+0xb0>
 8015f30:	18a1      	adds	r1, r4, r2
 8015f32:	3201      	adds	r2, #1
 8015f34:	4648      	mov	r0, r9
 8015f36:	b2d2      	uxtb	r2, r2
 8015f38:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8015f3c:	f04f 0901 	mov.w	r9, #1
 8015f40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f44:	2800      	cmp	r0, #0
 8015f46:	f43f af7b 	beq.w	8015e40 <uxr_write_framed_msg+0x158>
 8015f4a:	2500      	movs	r5, #0
 8015f4c:	e002      	b.n	8015f54 <uxr_write_framed_msg+0x26c>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	f43f af4f 	beq.w	8015df2 <uxr_write_framed_msg+0x10a>
 8015f54:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015f58:	1b52      	subs	r2, r2, r5
 8015f5a:	465b      	mov	r3, fp
 8015f5c:	4421      	add	r1, r4
 8015f5e:	4638      	mov	r0, r7
 8015f60:	47b0      	blx	r6
 8015f62:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015f66:	4405      	add	r5, r0
 8015f68:	4295      	cmp	r5, r2
 8015f6a:	d3f0      	bcc.n	8015f4e <uxr_write_framed_msg+0x266>
 8015f6c:	f47f af41 	bne.w	8015df2 <uxr_write_framed_msg+0x10a>
 8015f70:	2300      	movs	r3, #0
 8015f72:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f78:	b298      	uxth	r0, r3
 8015f7a:	b003      	add	sp, #12
 8015f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f80:	217d      	movs	r1, #125	@ 0x7d
 8015f82:	f082 0220 	eor.w	r2, r2, #32
 8015f86:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015f8a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015f8e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015f92:	2901      	cmp	r1, #1
 8015f94:	f04f 0203 	mov.w	r2, #3
 8015f98:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015f9c:	d804      	bhi.n	8015fa8 <uxr_write_framed_msg+0x2c0>
 8015f9e:	4611      	mov	r1, r2
 8015fa0:	f04f 0c04 	mov.w	ip, #4
 8015fa4:	2205      	movs	r2, #5
 8015fa6:	e752      	b.n	8015e4e <uxr_write_framed_msg+0x166>
 8015fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015faa:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015fae:	b2dd      	uxtb	r5, r3
 8015fb0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8015fb4:	2204      	movs	r2, #4
 8015fb6:	2901      	cmp	r1, #1
 8015fb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015fbc:	f63f aec0 	bhi.w	8015d40 <uxr_write_framed_msg+0x58>
 8015fc0:	e758      	b.n	8015e74 <uxr_write_framed_msg+0x18c>
 8015fc2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015fc6:	fa5f f889 	uxtb.w	r8, r9
 8015fca:	9301      	str	r3, [sp, #4]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	e6f5      	b.n	8015dbc <uxr_write_framed_msg+0xd4>
 8015fd0:	08019068 	.word	0x08019068

08015fd4 <uxr_framing_read_transport>:
 8015fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd8:	4604      	mov	r4, r0
 8015fda:	b083      	sub	sp, #12
 8015fdc:	461f      	mov	r7, r3
 8015fde:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8015fe2:	4689      	mov	r9, r1
 8015fe4:	4692      	mov	sl, r2
 8015fe6:	f7f9 f865 	bl	800f0b4 <uxr_millis>
 8015fea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015fee:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8015ff2:	42b3      	cmp	r3, r6
 8015ff4:	4680      	mov	r8, r0
 8015ff6:	d061      	beq.n	80160bc <uxr_framing_read_transport+0xe8>
 8015ff8:	d81c      	bhi.n	8016034 <uxr_framing_read_transport+0x60>
 8015ffa:	1e75      	subs	r5, r6, #1
 8015ffc:	1aed      	subs	r5, r5, r3
 8015ffe:	b2ed      	uxtb	r5, r5
 8016000:	2600      	movs	r6, #0
 8016002:	455d      	cmp	r5, fp
 8016004:	d81f      	bhi.n	8016046 <uxr_framing_read_transport+0x72>
 8016006:	19ab      	adds	r3, r5, r6
 8016008:	455b      	cmp	r3, fp
 801600a:	bf84      	itt	hi
 801600c:	ebab 0605 	subhi.w	r6, fp, r5
 8016010:	b2f6      	uxtbhi	r6, r6
 8016012:	b9ed      	cbnz	r5, 8016050 <uxr_framing_read_transport+0x7c>
 8016014:	f04f 0b00 	mov.w	fp, #0
 8016018:	f7f9 f84c 	bl	800f0b4 <uxr_millis>
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	eba0 0808 	sub.w	r8, r0, r8
 8016022:	eba3 0308 	sub.w	r3, r3, r8
 8016026:	4658      	mov	r0, fp
 8016028:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801602c:	603b      	str	r3, [r7, #0]
 801602e:	b003      	add	sp, #12
 8016030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016034:	2e00      	cmp	r6, #0
 8016036:	d049      	beq.n	80160cc <uxr_framing_read_transport+0xf8>
 8016038:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801603c:	b2ed      	uxtb	r5, r5
 801603e:	3e01      	subs	r6, #1
 8016040:	455d      	cmp	r5, fp
 8016042:	b2f6      	uxtb	r6, r6
 8016044:	d9df      	bls.n	8016006 <uxr_framing_read_transport+0x32>
 8016046:	fa5f f58b 	uxtb.w	r5, fp
 801604a:	2600      	movs	r6, #0
 801604c:	2d00      	cmp	r5, #0
 801604e:	d0e1      	beq.n	8016014 <uxr_framing_read_transport+0x40>
 8016050:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016054:	3102      	adds	r1, #2
 8016056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	4421      	add	r1, r4
 801605e:	462a      	mov	r2, r5
 8016060:	4650      	mov	r0, sl
 8016062:	47c8      	blx	r9
 8016064:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016068:	4a1a      	ldr	r2, [pc, #104]	@ (80160d4 <uxr_framing_read_transport+0x100>)
 801606a:	4403      	add	r3, r0
 801606c:	0859      	lsrs	r1, r3, #1
 801606e:	fba2 2101 	umull	r2, r1, r2, r1
 8016072:	0889      	lsrs	r1, r1, #2
 8016074:	222a      	movs	r2, #42	@ 0x2a
 8016076:	fb02 3111 	mls	r1, r2, r1, r3
 801607a:	4683      	mov	fp, r0
 801607c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016080:	2800      	cmp	r0, #0
 8016082:	d0c7      	beq.n	8016014 <uxr_framing_read_transport+0x40>
 8016084:	42a8      	cmp	r0, r5
 8016086:	d1c7      	bne.n	8016018 <uxr_framing_read_transport+0x44>
 8016088:	2e00      	cmp	r6, #0
 801608a:	d0c5      	beq.n	8016018 <uxr_framing_read_transport+0x44>
 801608c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	3102      	adds	r1, #2
 8016092:	4632      	mov	r2, r6
 8016094:	4421      	add	r1, r4
 8016096:	2300      	movs	r3, #0
 8016098:	4650      	mov	r0, sl
 801609a:	47c8      	blx	r9
 801609c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80160a0:	4a0c      	ldr	r2, [pc, #48]	@ (80160d4 <uxr_framing_read_transport+0x100>)
 80160a2:	180b      	adds	r3, r1, r0
 80160a4:	0859      	lsrs	r1, r3, #1
 80160a6:	fba2 1201 	umull	r1, r2, r2, r1
 80160aa:	0892      	lsrs	r2, r2, #2
 80160ac:	212a      	movs	r1, #42	@ 0x2a
 80160ae:	fb01 3312 	mls	r3, r1, r2, r3
 80160b2:	eb00 0b05 	add.w	fp, r0, r5
 80160b6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80160ba:	e7ad      	b.n	8016018 <uxr_framing_read_transport+0x44>
 80160bc:	2600      	movs	r6, #0
 80160be:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80160c2:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80160c4:	d9bf      	bls.n	8016046 <uxr_framing_read_transport+0x72>
 80160c6:	2102      	movs	r1, #2
 80160c8:	2529      	movs	r5, #41	@ 0x29
 80160ca:	e7c4      	b.n	8016056 <uxr_framing_read_transport+0x82>
 80160cc:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80160d0:	b2ed      	uxtb	r5, r5
 80160d2:	e796      	b.n	8016002 <uxr_framing_read_transport+0x2e>
 80160d4:	30c30c31 	.word	0x30c30c31

080160d8 <uxr_read_framed_msg>:
 80160d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160dc:	461e      	mov	r6, r3
 80160de:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80160e2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80160e6:	429d      	cmp	r5, r3
 80160e8:	b083      	sub	sp, #12
 80160ea:	4604      	mov	r4, r0
 80160ec:	4688      	mov	r8, r1
 80160ee:	4691      	mov	r9, r2
 80160f0:	f000 8188 	beq.w	8016404 <uxr_read_framed_msg+0x32c>
 80160f4:	7823      	ldrb	r3, [r4, #0]
 80160f6:	4dc1      	ldr	r5, [pc, #772]	@ (80163fc <uxr_read_framed_msg+0x324>)
 80160f8:	4fc1      	ldr	r7, [pc, #772]	@ (8016400 <uxr_read_framed_msg+0x328>)
 80160fa:	2b07      	cmp	r3, #7
 80160fc:	d8fd      	bhi.n	80160fa <uxr_read_framed_msg+0x22>
 80160fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016102:	0115      	.short	0x0115
 8016104:	00d600f6 	.word	0x00d600f6
 8016108:	009000b9 	.word	0x009000b9
 801610c:	0030004d 	.word	0x0030004d
 8016110:	0008      	.short	0x0008
 8016112:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016116:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801611a:	4299      	cmp	r1, r3
 801611c:	f000 814a 	beq.w	80163b4 <uxr_read_framed_msg+0x2dc>
 8016120:	18e2      	adds	r2, r4, r3
 8016122:	7892      	ldrb	r2, [r2, #2]
 8016124:	2a7d      	cmp	r2, #125	@ 0x7d
 8016126:	f000 8199 	beq.w	801645c <uxr_read_framed_msg+0x384>
 801612a:	3301      	adds	r3, #1
 801612c:	0858      	lsrs	r0, r3, #1
 801612e:	fba5 1000 	umull	r1, r0, r5, r0
 8016132:	0880      	lsrs	r0, r0, #2
 8016134:	212a      	movs	r1, #42	@ 0x2a
 8016136:	fb01 3310 	mls	r3, r1, r0, r3
 801613a:	2a7e      	cmp	r2, #126	@ 0x7e
 801613c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016140:	f000 8252 	beq.w	80165e8 <uxr_read_framed_msg+0x510>
 8016144:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016146:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8016148:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801614c:	b29b      	uxth	r3, r3
 801614e:	2200      	movs	r2, #0
 8016150:	4299      	cmp	r1, r3
 8016152:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016154:	7022      	strb	r2, [r4, #0]
 8016156:	f000 8179 	beq.w	801644c <uxr_read_framed_msg+0x374>
 801615a:	2000      	movs	r0, #0
 801615c:	b003      	add	sp, #12
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016166:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801616a:	4299      	cmp	r1, r3
 801616c:	f000 8131 	beq.w	80163d2 <uxr_read_framed_msg+0x2fa>
 8016170:	18e2      	adds	r2, r4, r3
 8016172:	7890      	ldrb	r0, [r2, #2]
 8016174:	287d      	cmp	r0, #125	@ 0x7d
 8016176:	f000 8190 	beq.w	801649a <uxr_read_framed_msg+0x3c2>
 801617a:	3301      	adds	r3, #1
 801617c:	085a      	lsrs	r2, r3, #1
 801617e:	fba5 1202 	umull	r1, r2, r5, r2
 8016182:	0892      	lsrs	r2, r2, #2
 8016184:	212a      	movs	r1, #42	@ 0x2a
 8016186:	fb01 3312 	mls	r3, r1, r2, r3
 801618a:	287e      	cmp	r0, #126	@ 0x7e
 801618c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016190:	f000 821a 	beq.w	80165c8 <uxr_read_framed_msg+0x4f0>
 8016194:	2307      	movs	r3, #7
 8016196:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016198:	7023      	strb	r3, [r4, #0]
 801619a:	e7ae      	b.n	80160fa <uxr_read_framed_msg+0x22>
 801619c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801619e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80161a2:	459e      	cmp	lr, r3
 80161a4:	d938      	bls.n	8016218 <uxr_read_framed_msg+0x140>
 80161a6:	ee07 8a90 	vmov	s15, r8
 80161aa:	212a      	movs	r1, #42	@ 0x2a
 80161ac:	e020      	b.n	80161f0 <uxr_read_framed_msg+0x118>
 80161ae:	f89b c002 	ldrb.w	ip, [fp, #2]
 80161b2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80161b6:	f000 80d4 	beq.w	8016362 <uxr_read_framed_msg+0x28a>
 80161ba:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80161be:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80161c2:	f000 8219 	beq.w	80165f8 <uxr_read_framed_msg+0x520>
 80161c6:	f806 c003 	strb.w	ip, [r6, r3]
 80161ca:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80161ce:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80161d0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80161d4:	ea8a 000c 	eor.w	r0, sl, ip
 80161d8:	b2c0      	uxtb	r0, r0
 80161da:	3301      	adds	r3, #1
 80161dc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80161e6:	4573      	cmp	r3, lr
 80161e8:	8663      	strh	r3, [r4, #50]	@ 0x32
 80161ea:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80161ec:	f080 8120 	bcs.w	8016430 <uxr_read_framed_msg+0x358>
 80161f0:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80161f4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80161f8:	f100 0c01 	add.w	ip, r0, #1
 80161fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016200:	fba5 8202 	umull	r8, r2, r5, r2
 8016204:	0892      	lsrs	r2, r2, #2
 8016206:	4582      	cmp	sl, r0
 8016208:	eb04 0b00 	add.w	fp, r4, r0
 801620c:	fb01 c212 	mls	r2, r1, r2, ip
 8016210:	d1cd      	bne.n	80161ae <uxr_read_framed_msg+0xd6>
 8016212:	ee17 8a90 	vmov	r8, s15
 8016216:	459e      	cmp	lr, r3
 8016218:	f040 8111 	bne.w	801643e <uxr_read_framed_msg+0x366>
 801621c:	2306      	movs	r3, #6
 801621e:	7023      	strb	r3, [r4, #0]
 8016220:	e76b      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016222:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8016226:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801622a:	4298      	cmp	r0, r3
 801622c:	f000 80c2 	beq.w	80163b4 <uxr_read_framed_msg+0x2dc>
 8016230:	18e2      	adds	r2, r4, r3
 8016232:	7891      	ldrb	r1, [r2, #2]
 8016234:	297d      	cmp	r1, #125	@ 0x7d
 8016236:	f000 814c 	beq.w	80164d2 <uxr_read_framed_msg+0x3fa>
 801623a:	3301      	adds	r3, #1
 801623c:	085a      	lsrs	r2, r3, #1
 801623e:	fba5 0202 	umull	r0, r2, r5, r2
 8016242:	0892      	lsrs	r2, r2, #2
 8016244:	202a      	movs	r0, #42	@ 0x2a
 8016246:	fb00 3312 	mls	r3, r0, r2, r3
 801624a:	297e      	cmp	r1, #126	@ 0x7e
 801624c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016250:	f000 81ca 	beq.w	80165e8 <uxr_read_framed_msg+0x510>
 8016254:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016256:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801625a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801625c:	b29b      	uxth	r3, r3
 801625e:	2000      	movs	r0, #0
 8016260:	428b      	cmp	r3, r1
 8016262:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016264:	8660      	strh	r0, [r4, #50]	@ 0x32
 8016266:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8016268:	f240 80df 	bls.w	801642a <uxr_read_framed_msg+0x352>
 801626c:	7020      	strb	r0, [r4, #0]
 801626e:	b003      	add	sp, #12
 8016270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016274:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016278:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801627c:	4299      	cmp	r1, r3
 801627e:	f000 80a8 	beq.w	80163d2 <uxr_read_framed_msg+0x2fa>
 8016282:	18e2      	adds	r2, r4, r3
 8016284:	7890      	ldrb	r0, [r2, #2]
 8016286:	287d      	cmp	r0, #125	@ 0x7d
 8016288:	f000 8164 	beq.w	8016554 <uxr_read_framed_msg+0x47c>
 801628c:	3301      	adds	r3, #1
 801628e:	085a      	lsrs	r2, r3, #1
 8016290:	fba5 1202 	umull	r1, r2, r5, r2
 8016294:	0892      	lsrs	r2, r2, #2
 8016296:	212a      	movs	r1, #42	@ 0x2a
 8016298:	fb01 3312 	mls	r3, r1, r2, r3
 801629c:	287e      	cmp	r0, #126	@ 0x7e
 801629e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80162a2:	f000 8191 	beq.w	80165c8 <uxr_read_framed_msg+0x4f0>
 80162a6:	2304      	movs	r3, #4
 80162a8:	8620      	strh	r0, [r4, #48]	@ 0x30
 80162aa:	7023      	strb	r3, [r4, #0]
 80162ac:	e725      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80162ae:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80162b2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80162b6:	4290      	cmp	r0, r2
 80162b8:	f000 80b3 	beq.w	8016422 <uxr_read_framed_msg+0x34a>
 80162bc:	18a3      	adds	r3, r4, r2
 80162be:	7899      	ldrb	r1, [r3, #2]
 80162c0:	297d      	cmp	r1, #125	@ 0x7d
 80162c2:	f000 8164 	beq.w	801658e <uxr_read_framed_msg+0x4b6>
 80162c6:	3201      	adds	r2, #1
 80162c8:	0850      	lsrs	r0, r2, #1
 80162ca:	fba5 3000 	umull	r3, r0, r5, r0
 80162ce:	0880      	lsrs	r0, r0, #2
 80162d0:	232a      	movs	r3, #42	@ 0x2a
 80162d2:	fb03 2210 	mls	r2, r3, r0, r2
 80162d6:	297e      	cmp	r1, #126	@ 0x7e
 80162d8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80162dc:	f000 8188 	beq.w	80165f0 <uxr_read_framed_msg+0x518>
 80162e0:	7863      	ldrb	r3, [r4, #1]
 80162e2:	428b      	cmp	r3, r1
 80162e4:	bf0c      	ite	eq
 80162e6:	2303      	moveq	r3, #3
 80162e8:	2300      	movne	r3, #0
 80162ea:	7023      	strb	r3, [r4, #0]
 80162ec:	e705      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80162ee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80162f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80162f6:	2200      	movs	r2, #0
 80162f8:	4299      	cmp	r1, r3
 80162fa:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80162fe:	d06c      	beq.n	80163da <uxr_read_framed_msg+0x302>
 8016300:	18e2      	adds	r2, r4, r3
 8016302:	7890      	ldrb	r0, [r2, #2]
 8016304:	287d      	cmp	r0, #125	@ 0x7d
 8016306:	f000 8101 	beq.w	801650c <uxr_read_framed_msg+0x434>
 801630a:	3301      	adds	r3, #1
 801630c:	085a      	lsrs	r2, r3, #1
 801630e:	fba5 1202 	umull	r1, r2, r5, r2
 8016312:	0892      	lsrs	r2, r2, #2
 8016314:	212a      	movs	r1, #42	@ 0x2a
 8016316:	fb01 3312 	mls	r3, r1, r2, r3
 801631a:	287e      	cmp	r0, #126	@ 0x7e
 801631c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016320:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016324:	d059      	beq.n	80163da <uxr_read_framed_msg+0x302>
 8016326:	2302      	movs	r3, #2
 8016328:	7023      	strb	r3, [r4, #0]
 801632a:	e6e6      	b.n	80160fa <uxr_read_framed_msg+0x22>
 801632c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8016330:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016334:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8016338:	1c51      	adds	r1, r2, #1
 801633a:	084b      	lsrs	r3, r1, #1
 801633c:	fba5 c303 	umull	ip, r3, r5, r3
 8016340:	089b      	lsrs	r3, r3, #2
 8016342:	fb0e 1313 	mls	r3, lr, r3, r1
 8016346:	4592      	cmp	sl, r2
 8016348:	eb04 0002 	add.w	r0, r4, r2
 801634c:	b2da      	uxtb	r2, r3
 801634e:	f43f af04 	beq.w	801615a <uxr_read_framed_msg+0x82>
 8016352:	7883      	ldrb	r3, [r0, #2]
 8016354:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016358:	2b7e      	cmp	r3, #126	@ 0x7e
 801635a:	d1ed      	bne.n	8016338 <uxr_read_framed_msg+0x260>
 801635c:	2301      	movs	r3, #1
 801635e:	7023      	strb	r3, [r4, #0]
 8016360:	e6cb      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016362:	f100 0c01 	add.w	ip, r0, #1
 8016366:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801636a:	fba5 8202 	umull	r8, r2, r5, r2
 801636e:	0892      	lsrs	r2, r2, #2
 8016370:	fb01 c212 	mls	r2, r1, r2, ip
 8016374:	eb04 0c02 	add.w	ip, r4, r2
 8016378:	b2d2      	uxtb	r2, r2
 801637a:	4592      	cmp	sl, r2
 801637c:	f100 0002 	add.w	r0, r0, #2
 8016380:	f43f af47 	beq.w	8016212 <uxr_read_framed_msg+0x13a>
 8016384:	0842      	lsrs	r2, r0, #1
 8016386:	f89c a002 	ldrb.w	sl, [ip, #2]
 801638a:	fba5 8202 	umull	r8, r2, r5, r2
 801638e:	0892      	lsrs	r2, r2, #2
 8016390:	fb01 0012 	mls	r0, r1, r2, r0
 8016394:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8016398:	f08a 0c20 	eor.w	ip, sl, #32
 801639c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80163a0:	f47f af11 	bne.w	80161c6 <uxr_read_framed_msg+0xee>
 80163a4:	459e      	cmp	lr, r3
 80163a6:	ee17 8a90 	vmov	r8, s15
 80163aa:	f43f af37 	beq.w	801621c <uxr_read_framed_msg+0x144>
 80163ae:	2301      	movs	r3, #1
 80163b0:	7023      	strb	r3, [r4, #0]
 80163b2:	e6a2      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80163b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	2301      	movs	r3, #1
 80163ba:	9301      	str	r3, [sp, #4]
 80163bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163be:	464a      	mov	r2, r9
 80163c0:	4641      	mov	r1, r8
 80163c2:	4620      	mov	r0, r4
 80163c4:	f7ff fe06 	bl	8015fd4 <uxr_framing_read_transport>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	f43f aec6 	beq.w	801615a <uxr_read_framed_msg+0x82>
 80163ce:	7823      	ldrb	r3, [r4, #0]
 80163d0:	e693      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80163d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	2302      	movs	r3, #2
 80163d8:	e7ef      	b.n	80163ba <uxr_read_framed_msg+0x2e2>
 80163da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163dc:	9300      	str	r3, [sp, #0]
 80163de:	2304      	movs	r3, #4
 80163e0:	9301      	str	r3, [sp, #4]
 80163e2:	464a      	mov	r2, r9
 80163e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163e6:	4641      	mov	r1, r8
 80163e8:	4620      	mov	r0, r4
 80163ea:	f7ff fdf3 	bl	8015fd4 <uxr_framing_read_transport>
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d1ed      	bne.n	80163ce <uxr_read_framed_msg+0x2f6>
 80163f2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80163f6:	2b7e      	cmp	r3, #126	@ 0x7e
 80163f8:	d0e9      	beq.n	80163ce <uxr_read_framed_msg+0x2f6>
 80163fa:	e6ae      	b.n	801615a <uxr_read_framed_msg+0x82>
 80163fc:	30c30c31 	.word	0x30c30c31
 8016400:	08019068 	.word	0x08019068
 8016404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	2305      	movs	r3, #5
 801640a:	9301      	str	r3, [sp, #4]
 801640c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801640e:	f7ff fde1 	bl	8015fd4 <uxr_framing_read_transport>
 8016412:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016416:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801641a:	429a      	cmp	r2, r3
 801641c:	f43f ae9d 	beq.w	801615a <uxr_read_framed_msg+0x82>
 8016420:	e668      	b.n	80160f4 <uxr_read_framed_msg+0x1c>
 8016422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016424:	9300      	str	r3, [sp, #0]
 8016426:	2303      	movs	r3, #3
 8016428:	e7c7      	b.n	80163ba <uxr_read_framed_msg+0x2e2>
 801642a:	2305      	movs	r3, #5
 801642c:	7023      	strb	r3, [r4, #0]
 801642e:	e664      	b.n	80160fa <uxr_read_framed_msg+0x22>
 8016430:	ee17 8a90 	vmov	r8, s15
 8016434:	f43f aef2 	beq.w	801621c <uxr_read_framed_msg+0x144>
 8016438:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801643c:	d08e      	beq.n	801635c <uxr_read_framed_msg+0x284>
 801643e:	ebae 0303 	sub.w	r3, lr, r3
 8016442:	3302      	adds	r3, #2
 8016444:	9301      	str	r3, [sp, #4]
 8016446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016448:	9300      	str	r3, [sp, #0]
 801644a:	e7b7      	b.n	80163bc <uxr_read_framed_msg+0x2e4>
 801644c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801644e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016452:	7013      	strb	r3, [r2, #0]
 8016454:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016456:	b003      	add	sp, #12
 8016458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801645c:	f103 0c01 	add.w	ip, r3, #1
 8016460:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016464:	fba5 0202 	umull	r0, r2, r5, r2
 8016468:	0892      	lsrs	r2, r2, #2
 801646a:	202a      	movs	r0, #42	@ 0x2a
 801646c:	fb00 c212 	mls	r2, r0, r2, ip
 8016470:	fa5f fc82 	uxtb.w	ip, r2
 8016474:	4561      	cmp	r1, ip
 8016476:	d09d      	beq.n	80163b4 <uxr_read_framed_msg+0x2dc>
 8016478:	3302      	adds	r3, #2
 801647a:	4422      	add	r2, r4
 801647c:	0859      	lsrs	r1, r3, #1
 801647e:	7892      	ldrb	r2, [r2, #2]
 8016480:	fba5 c101 	umull	ip, r1, r5, r1
 8016484:	0889      	lsrs	r1, r1, #2
 8016486:	fb00 3311 	mls	r3, r0, r1, r3
 801648a:	2a7e      	cmp	r2, #126	@ 0x7e
 801648c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016490:	f000 80aa 	beq.w	80165e8 <uxr_read_framed_msg+0x510>
 8016494:	f082 0220 	eor.w	r2, r2, #32
 8016498:	e654      	b.n	8016144 <uxr_read_framed_msg+0x6c>
 801649a:	1c58      	adds	r0, r3, #1
 801649c:	0842      	lsrs	r2, r0, #1
 801649e:	fba5 c202 	umull	ip, r2, r5, r2
 80164a2:	0892      	lsrs	r2, r2, #2
 80164a4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80164a8:	fb0c 0212 	mls	r2, ip, r2, r0
 80164ac:	b2d0      	uxtb	r0, r2
 80164ae:	4281      	cmp	r1, r0
 80164b0:	d08f      	beq.n	80163d2 <uxr_read_framed_msg+0x2fa>
 80164b2:	4422      	add	r2, r4
 80164b4:	3302      	adds	r3, #2
 80164b6:	7890      	ldrb	r0, [r2, #2]
 80164b8:	085a      	lsrs	r2, r3, #1
 80164ba:	fba5 1202 	umull	r1, r2, r5, r2
 80164be:	0892      	lsrs	r2, r2, #2
 80164c0:	fb0c 3312 	mls	r3, ip, r2, r3
 80164c4:	287e      	cmp	r0, #126	@ 0x7e
 80164c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80164ca:	d07d      	beq.n	80165c8 <uxr_read_framed_msg+0x4f0>
 80164cc:	f080 0020 	eor.w	r0, r0, #32
 80164d0:	e660      	b.n	8016194 <uxr_read_framed_msg+0xbc>
 80164d2:	1c59      	adds	r1, r3, #1
 80164d4:	084a      	lsrs	r2, r1, #1
 80164d6:	fba5 c202 	umull	ip, r2, r5, r2
 80164da:	0892      	lsrs	r2, r2, #2
 80164dc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80164e0:	fb0c 1212 	mls	r2, ip, r2, r1
 80164e4:	b2d1      	uxtb	r1, r2
 80164e6:	4288      	cmp	r0, r1
 80164e8:	f43f af64 	beq.w	80163b4 <uxr_read_framed_msg+0x2dc>
 80164ec:	4422      	add	r2, r4
 80164ee:	3302      	adds	r3, #2
 80164f0:	7891      	ldrb	r1, [r2, #2]
 80164f2:	085a      	lsrs	r2, r3, #1
 80164f4:	fba5 0202 	umull	r0, r2, r5, r2
 80164f8:	0892      	lsrs	r2, r2, #2
 80164fa:	fb0c 3312 	mls	r3, ip, r2, r3
 80164fe:	297e      	cmp	r1, #126	@ 0x7e
 8016500:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016504:	d070      	beq.n	80165e8 <uxr_read_framed_msg+0x510>
 8016506:	f081 0120 	eor.w	r1, r1, #32
 801650a:	e6a3      	b.n	8016254 <uxr_read_framed_msg+0x17c>
 801650c:	f103 0c01 	add.w	ip, r3, #1
 8016510:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016514:	fba5 0202 	umull	r0, r2, r5, r2
 8016518:	0892      	lsrs	r2, r2, #2
 801651a:	202a      	movs	r0, #42	@ 0x2a
 801651c:	fb00 c212 	mls	r2, r0, r2, ip
 8016520:	fa5f fc82 	uxtb.w	ip, r2
 8016524:	4561      	cmp	r1, ip
 8016526:	f43f af58 	beq.w	80163da <uxr_read_framed_msg+0x302>
 801652a:	4422      	add	r2, r4
 801652c:	3302      	adds	r3, #2
 801652e:	7891      	ldrb	r1, [r2, #2]
 8016530:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016534:	085a      	lsrs	r2, r3, #1
 8016536:	fba5 c202 	umull	ip, r2, r5, r2
 801653a:	0892      	lsrs	r2, r2, #2
 801653c:	fb00 3312 	mls	r3, r0, r2, r3
 8016540:	297e      	cmp	r1, #126	@ 0x7e
 8016542:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016546:	f43f af48 	beq.w	80163da <uxr_read_framed_msg+0x302>
 801654a:	f081 0120 	eor.w	r1, r1, #32
 801654e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8016552:	e6e8      	b.n	8016326 <uxr_read_framed_msg+0x24e>
 8016554:	1c58      	adds	r0, r3, #1
 8016556:	0842      	lsrs	r2, r0, #1
 8016558:	fba5 c202 	umull	ip, r2, r5, r2
 801655c:	0892      	lsrs	r2, r2, #2
 801655e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016562:	fb0c 0212 	mls	r2, ip, r2, r0
 8016566:	b2d0      	uxtb	r0, r2
 8016568:	4281      	cmp	r1, r0
 801656a:	f43f af32 	beq.w	80163d2 <uxr_read_framed_msg+0x2fa>
 801656e:	4422      	add	r2, r4
 8016570:	3302      	adds	r3, #2
 8016572:	7890      	ldrb	r0, [r2, #2]
 8016574:	085a      	lsrs	r2, r3, #1
 8016576:	fba5 1202 	umull	r1, r2, r5, r2
 801657a:	0892      	lsrs	r2, r2, #2
 801657c:	fb0c 3312 	mls	r3, ip, r2, r3
 8016580:	287e      	cmp	r0, #126	@ 0x7e
 8016582:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016586:	d01f      	beq.n	80165c8 <uxr_read_framed_msg+0x4f0>
 8016588:	f080 0020 	eor.w	r0, r0, #32
 801658c:	e68b      	b.n	80162a6 <uxr_read_framed_msg+0x1ce>
 801658e:	1c51      	adds	r1, r2, #1
 8016590:	084b      	lsrs	r3, r1, #1
 8016592:	fba5 c303 	umull	ip, r3, r5, r3
 8016596:	089b      	lsrs	r3, r3, #2
 8016598:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801659c:	fb0c 1313 	mls	r3, ip, r3, r1
 80165a0:	b2d9      	uxtb	r1, r3
 80165a2:	4288      	cmp	r0, r1
 80165a4:	f43f af3d 	beq.w	8016422 <uxr_read_framed_msg+0x34a>
 80165a8:	3202      	adds	r2, #2
 80165aa:	4423      	add	r3, r4
 80165ac:	0850      	lsrs	r0, r2, #1
 80165ae:	789b      	ldrb	r3, [r3, #2]
 80165b0:	fba5 1000 	umull	r1, r0, r5, r0
 80165b4:	0880      	lsrs	r0, r0, #2
 80165b6:	fb0c 2210 	mls	r2, ip, r0, r2
 80165ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80165bc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80165c0:	d016      	beq.n	80165f0 <uxr_read_framed_msg+0x518>
 80165c2:	f083 0120 	eor.w	r1, r3, #32
 80165c6:	e68b      	b.n	80162e0 <uxr_read_framed_msg+0x208>
 80165c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165ca:	9300      	str	r3, [sp, #0]
 80165cc:	2302      	movs	r3, #2
 80165ce:	9301      	str	r3, [sp, #4]
 80165d0:	464a      	mov	r2, r9
 80165d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165d4:	4641      	mov	r1, r8
 80165d6:	4620      	mov	r0, r4
 80165d8:	f7ff fcfc 	bl	8015fd4 <uxr_framing_read_transport>
 80165dc:	2800      	cmp	r0, #0
 80165de:	f47f aef6 	bne.w	80163ce <uxr_read_framed_msg+0x2f6>
 80165e2:	2301      	movs	r3, #1
 80165e4:	7023      	strb	r3, [r4, #0]
 80165e6:	e588      	b.n	80160fa <uxr_read_framed_msg+0x22>
 80165e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165ea:	9300      	str	r3, [sp, #0]
 80165ec:	2301      	movs	r3, #1
 80165ee:	e7ee      	b.n	80165ce <uxr_read_framed_msg+0x4f6>
 80165f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	2303      	movs	r3, #3
 80165f6:	e7ea      	b.n	80165ce <uxr_read_framed_msg+0x4f6>
 80165f8:	ee17 8a90 	vmov	r8, s15
 80165fc:	e6ae      	b.n	801635c <uxr_read_framed_msg+0x284>
 80165fe:	bf00      	nop

08016600 <rcl_get_default_domain_id>:
 8016600:	b530      	push	{r4, r5, lr}
 8016602:	b083      	sub	sp, #12
 8016604:	2300      	movs	r3, #0
 8016606:	9300      	str	r3, [sp, #0]
 8016608:	b1d0      	cbz	r0, 8016640 <rcl_get_default_domain_id+0x40>
 801660a:	4604      	mov	r4, r0
 801660c:	4669      	mov	r1, sp
 801660e:	4815      	ldr	r0, [pc, #84]	@ (8016664 <rcl_get_default_domain_id+0x64>)
 8016610:	f7fc fc46 	bl	8012ea0 <rcutils_get_env>
 8016614:	4602      	mov	r2, r0
 8016616:	b110      	cbz	r0, 801661e <rcl_get_default_domain_id+0x1e>
 8016618:	2001      	movs	r0, #1
 801661a:	b003      	add	sp, #12
 801661c:	bd30      	pop	{r4, r5, pc}
 801661e:	9b00      	ldr	r3, [sp, #0]
 8016620:	b18b      	cbz	r3, 8016646 <rcl_get_default_domain_id+0x46>
 8016622:	7818      	ldrb	r0, [r3, #0]
 8016624:	2800      	cmp	r0, #0
 8016626:	d0f8      	beq.n	801661a <rcl_get_default_domain_id+0x1a>
 8016628:	a901      	add	r1, sp, #4
 801662a:	4618      	mov	r0, r3
 801662c:	9201      	str	r2, [sp, #4]
 801662e:	f000 fe6d 	bl	801730c <strtoul>
 8016632:	4605      	mov	r5, r0
 8016634:	b150      	cbz	r0, 801664c <rcl_get_default_domain_id+0x4c>
 8016636:	1c43      	adds	r3, r0, #1
 8016638:	d00d      	beq.n	8016656 <rcl_get_default_domain_id+0x56>
 801663a:	6025      	str	r5, [r4, #0]
 801663c:	2000      	movs	r0, #0
 801663e:	e7ec      	b.n	801661a <rcl_get_default_domain_id+0x1a>
 8016640:	200b      	movs	r0, #11
 8016642:	b003      	add	sp, #12
 8016644:	bd30      	pop	{r4, r5, pc}
 8016646:	4618      	mov	r0, r3
 8016648:	b003      	add	sp, #12
 801664a:	bd30      	pop	{r4, r5, pc}
 801664c:	9b01      	ldr	r3, [sp, #4]
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d0f2      	beq.n	801663a <rcl_get_default_domain_id+0x3a>
 8016654:	e7e0      	b.n	8016618 <rcl_get_default_domain_id+0x18>
 8016656:	f001 f8a5 	bl	80177a4 <__errno>
 801665a:	6803      	ldr	r3, [r0, #0]
 801665c:	2b22      	cmp	r3, #34	@ 0x22
 801665e:	d1ec      	bne.n	801663a <rcl_get_default_domain_id+0x3a>
 8016660:	e7da      	b.n	8016618 <rcl_get_default_domain_id+0x18>
 8016662:	bf00      	nop
 8016664:	08019268 	.word	0x08019268

08016668 <rcl_expand_topic_name>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	b08b      	sub	sp, #44	@ 0x2c
 801666e:	9306      	str	r3, [sp, #24]
 8016670:	2800      	cmp	r0, #0
 8016672:	f000 80ad 	beq.w	80167d0 <rcl_expand_topic_name+0x168>
 8016676:	460e      	mov	r6, r1
 8016678:	2900      	cmp	r1, #0
 801667a:	f000 80a9 	beq.w	80167d0 <rcl_expand_topic_name+0x168>
 801667e:	4617      	mov	r7, r2
 8016680:	2a00      	cmp	r2, #0
 8016682:	f000 80a5 	beq.w	80167d0 <rcl_expand_topic_name+0x168>
 8016686:	2b00      	cmp	r3, #0
 8016688:	f000 80a2 	beq.w	80167d0 <rcl_expand_topic_name+0x168>
 801668c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801668e:	2b00      	cmp	r3, #0
 8016690:	f000 809e 	beq.w	80167d0 <rcl_expand_topic_name+0x168>
 8016694:	2200      	movs	r2, #0
 8016696:	a909      	add	r1, sp, #36	@ 0x24
 8016698:	4680      	mov	r8, r0
 801669a:	f000 f9fb 	bl	8016a94 <rcl_validate_topic_name>
 801669e:	4604      	mov	r4, r0
 80166a0:	2800      	cmp	r0, #0
 80166a2:	f040 8096 	bne.w	80167d2 <rcl_expand_topic_name+0x16a>
 80166a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f040 809a 	bne.w	80167e2 <rcl_expand_topic_name+0x17a>
 80166ae:	4602      	mov	r2, r0
 80166b0:	a909      	add	r1, sp, #36	@ 0x24
 80166b2:	4630      	mov	r0, r6
 80166b4:	f7fd f842 	bl	801373c <rmw_validate_node_name>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	f040 808e 	bne.w	80167da <rcl_expand_topic_name+0x172>
 80166be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166c0:	2a00      	cmp	r2, #0
 80166c2:	f040 8093 	bne.w	80167ec <rcl_expand_topic_name+0x184>
 80166c6:	a909      	add	r1, sp, #36	@ 0x24
 80166c8:	4638      	mov	r0, r7
 80166ca:	f7fd f819 	bl	8013700 <rmw_validate_namespace>
 80166ce:	2800      	cmp	r0, #0
 80166d0:	f040 8083 	bne.w	80167da <rcl_expand_topic_name+0x172>
 80166d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80166d6:	2c00      	cmp	r4, #0
 80166d8:	f040 80ed 	bne.w	80168b6 <rcl_expand_topic_name+0x24e>
 80166dc:	217b      	movs	r1, #123	@ 0x7b
 80166de:	4640      	mov	r0, r8
 80166e0:	f000 ffd4 	bl	801768c <strchr>
 80166e4:	f898 3000 	ldrb.w	r3, [r8]
 80166e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80166ea:	4605      	mov	r5, r0
 80166ec:	f000 809e 	beq.w	801682c <rcl_expand_topic_name+0x1c4>
 80166f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80166f2:	f040 80a2 	bne.w	801683a <rcl_expand_topic_name+0x1d2>
 80166f6:	4638      	mov	r0, r7
 80166f8:	f7e9 fd94 	bl	8000224 <strlen>
 80166fc:	4a82      	ldr	r2, [pc, #520]	@ (8016908 <rcl_expand_topic_name+0x2a0>)
 80166fe:	4b83      	ldr	r3, [pc, #524]	@ (801690c <rcl_expand_topic_name+0x2a4>)
 8016700:	2801      	cmp	r0, #1
 8016702:	bf18      	it	ne
 8016704:	4613      	movne	r3, r2
 8016706:	9302      	str	r3, [sp, #8]
 8016708:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016710:	f108 0301 	add.w	r3, r8, #1
 8016714:	9305      	str	r3, [sp, #20]
 8016716:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801671a:	9301      	str	r3, [sp, #4]
 801671c:	ab14      	add	r3, sp, #80	@ 0x50
 801671e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016720:	f7fc fbd6 	bl	8012ed0 <rcutils_format_string_limit>
 8016724:	4682      	mov	sl, r0
 8016726:	2800      	cmp	r0, #0
 8016728:	f000 80c7 	beq.w	80168ba <rcl_expand_topic_name+0x252>
 801672c:	2d00      	cmp	r5, #0
 801672e:	f000 80a2 	beq.w	8016876 <rcl_expand_topic_name+0x20e>
 8016732:	217b      	movs	r1, #123	@ 0x7b
 8016734:	f000 ffaa 	bl	801768c <strchr>
 8016738:	46d1      	mov	r9, sl
 801673a:	4605      	mov	r5, r0
 801673c:	9407      	str	r4, [sp, #28]
 801673e:	46d3      	mov	fp, sl
 8016740:	464c      	mov	r4, r9
 8016742:	2d00      	cmp	r5, #0
 8016744:	f000 80be 	beq.w	80168c4 <rcl_expand_topic_name+0x25c>
 8016748:	217d      	movs	r1, #125	@ 0x7d
 801674a:	4620      	mov	r0, r4
 801674c:	f000 ff9e 	bl	801768c <strchr>
 8016750:	eba0 0905 	sub.w	r9, r0, r5
 8016754:	f109 0a01 	add.w	sl, r9, #1
 8016758:	486d      	ldr	r0, [pc, #436]	@ (8016910 <rcl_expand_topic_name+0x2a8>)
 801675a:	4652      	mov	r2, sl
 801675c:	4629      	mov	r1, r5
 801675e:	f000 ffa2 	bl	80176a6 <strncmp>
 8016762:	2800      	cmp	r0, #0
 8016764:	d067      	beq.n	8016836 <rcl_expand_topic_name+0x1ce>
 8016766:	486b      	ldr	r0, [pc, #428]	@ (8016914 <rcl_expand_topic_name+0x2ac>)
 8016768:	4652      	mov	r2, sl
 801676a:	4629      	mov	r1, r5
 801676c:	f000 ff9b 	bl	80176a6 <strncmp>
 8016770:	b130      	cbz	r0, 8016780 <rcl_expand_topic_name+0x118>
 8016772:	4869      	ldr	r0, [pc, #420]	@ (8016918 <rcl_expand_topic_name+0x2b0>)
 8016774:	4652      	mov	r2, sl
 8016776:	4629      	mov	r1, r5
 8016778:	f000 ff95 	bl	80176a6 <strncmp>
 801677c:	2800      	cmp	r0, #0
 801677e:	d137      	bne.n	80167f0 <rcl_expand_topic_name+0x188>
 8016780:	46b9      	mov	r9, r7
 8016782:	ab16      	add	r3, sp, #88	@ 0x58
 8016784:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016788:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801678c:	ab14      	add	r3, sp, #80	@ 0x50
 801678e:	4628      	mov	r0, r5
 8016790:	cb0c      	ldmia	r3, {r2, r3}
 8016792:	4651      	mov	r1, sl
 8016794:	f7fc fcd8 	bl	8013148 <rcutils_strndup>
 8016798:	4605      	mov	r5, r0
 801679a:	2800      	cmp	r0, #0
 801679c:	f000 809c 	beq.w	80168d8 <rcl_expand_topic_name+0x270>
 80167a0:	464a      	mov	r2, r9
 80167a2:	4620      	mov	r0, r4
 80167a4:	ab14      	add	r3, sp, #80	@ 0x50
 80167a6:	4629      	mov	r1, r5
 80167a8:	f7fc fbcc 	bl	8012f44 <rcutils_repl_str>
 80167ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167b0:	4604      	mov	r4, r0
 80167b2:	4628      	mov	r0, r5
 80167b4:	4798      	blx	r3
 80167b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167b8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167ba:	4658      	mov	r0, fp
 80167bc:	4798      	blx	r3
 80167be:	2c00      	cmp	r4, #0
 80167c0:	d07b      	beq.n	80168ba <rcl_expand_topic_name+0x252>
 80167c2:	217b      	movs	r1, #123	@ 0x7b
 80167c4:	4620      	mov	r0, r4
 80167c6:	f000 ff61 	bl	801768c <strchr>
 80167ca:	46a3      	mov	fp, r4
 80167cc:	4605      	mov	r5, r0
 80167ce:	e7b8      	b.n	8016742 <rcl_expand_topic_name+0xda>
 80167d0:	240b      	movs	r4, #11
 80167d2:	4620      	mov	r0, r4
 80167d4:	b00b      	add	sp, #44	@ 0x2c
 80167d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167da:	f7f9 ff3b 	bl	8010654 <rcl_convert_rmw_ret_to_rcl_ret>
 80167de:	4604      	mov	r4, r0
 80167e0:	e7f7      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 80167e2:	2467      	movs	r4, #103	@ 0x67
 80167e4:	4620      	mov	r0, r4
 80167e6:	b00b      	add	sp, #44	@ 0x2c
 80167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ec:	24c9      	movs	r4, #201	@ 0xc9
 80167ee:	e7f0      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 80167f0:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80167f4:	9806      	ldr	r0, [sp, #24]
 80167f6:	1c69      	adds	r1, r5, #1
 80167f8:	f7fc fdc0 	bl	801337c <rcutils_string_map_getn>
 80167fc:	4681      	mov	r9, r0
 80167fe:	2800      	cmp	r0, #0
 8016800:	d1bf      	bne.n	8016782 <rcl_expand_topic_name+0x11a>
 8016802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016804:	aa16      	add	r2, sp, #88	@ 0x58
 8016806:	6018      	str	r0, [r3, #0]
 8016808:	ca07      	ldmia	r2, {r0, r1, r2}
 801680a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801680e:	ab14      	add	r3, sp, #80	@ 0x50
 8016810:	cb0c      	ldmia	r3, {r2, r3}
 8016812:	4651      	mov	r1, sl
 8016814:	4628      	mov	r0, r5
 8016816:	f7fc fc97 	bl	8013148 <rcutils_strndup>
 801681a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801681c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801681e:	4798      	blx	r3
 8016820:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016822:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016824:	4658      	mov	r0, fp
 8016826:	2469      	movs	r4, #105	@ 0x69
 8016828:	4798      	blx	r3
 801682a:	e7d2      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 801682c:	2800      	cmp	r0, #0
 801682e:	d05b      	beq.n	80168e8 <rcl_expand_topic_name+0x280>
 8016830:	46c1      	mov	r9, r8
 8016832:	46a2      	mov	sl, r4
 8016834:	e782      	b.n	801673c <rcl_expand_topic_name+0xd4>
 8016836:	46b1      	mov	r9, r6
 8016838:	e7a3      	b.n	8016782 <rcl_expand_topic_name+0x11a>
 801683a:	2800      	cmp	r0, #0
 801683c:	d1f8      	bne.n	8016830 <rcl_expand_topic_name+0x1c8>
 801683e:	4638      	mov	r0, r7
 8016840:	f7e9 fcf0 	bl	8000224 <strlen>
 8016844:	4a35      	ldr	r2, [pc, #212]	@ (801691c <rcl_expand_topic_name+0x2b4>)
 8016846:	4b36      	ldr	r3, [pc, #216]	@ (8016920 <rcl_expand_topic_name+0x2b8>)
 8016848:	f8cd 8010 	str.w	r8, [sp, #16]
 801684c:	2801      	cmp	r0, #1
 801684e:	bf18      	it	ne
 8016850:	4613      	movne	r3, r2
 8016852:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016856:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801685a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801685c:	9703      	str	r7, [sp, #12]
 801685e:	9200      	str	r2, [sp, #0]
 8016860:	ab14      	add	r3, sp, #80	@ 0x50
 8016862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016864:	f7fc fb34 	bl	8012ed0 <rcutils_format_string_limit>
 8016868:	4682      	mov	sl, r0
 801686a:	4653      	mov	r3, sl
 801686c:	b32b      	cbz	r3, 80168ba <rcl_expand_topic_name+0x252>
 801686e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016870:	f8c3 a000 	str.w	sl, [r3]
 8016874:	e7ad      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 8016876:	f89a 3000 	ldrb.w	r3, [sl]
 801687a:	2b2f      	cmp	r3, #47	@ 0x2f
 801687c:	d0f7      	beq.n	801686e <rcl_expand_topic_name+0x206>
 801687e:	4638      	mov	r0, r7
 8016880:	f7e9 fcd0 	bl	8000224 <strlen>
 8016884:	4a25      	ldr	r2, [pc, #148]	@ (801691c <rcl_expand_topic_name+0x2b4>)
 8016886:	4b26      	ldr	r3, [pc, #152]	@ (8016920 <rcl_expand_topic_name+0x2b8>)
 8016888:	f8cd a010 	str.w	sl, [sp, #16]
 801688c:	2801      	cmp	r0, #1
 801688e:	bf18      	it	ne
 8016890:	4613      	movne	r3, r2
 8016892:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016896:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801689a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801689c:	9703      	str	r7, [sp, #12]
 801689e:	9200      	str	r2, [sp, #0]
 80168a0:	ab14      	add	r3, sp, #80	@ 0x50
 80168a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168a4:	f7fc fb14 	bl	8012ed0 <rcutils_format_string_limit>
 80168a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80168aa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80168ac:	4605      	mov	r5, r0
 80168ae:	4650      	mov	r0, sl
 80168b0:	4798      	blx	r3
 80168b2:	46aa      	mov	sl, r5
 80168b4:	e7d9      	b.n	801686a <rcl_expand_topic_name+0x202>
 80168b6:	24ca      	movs	r4, #202	@ 0xca
 80168b8:	e78b      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 80168ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80168bc:	2300      	movs	r3, #0
 80168be:	6013      	str	r3, [r2, #0]
 80168c0:	240a      	movs	r4, #10
 80168c2:	e786      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 80168c4:	465b      	mov	r3, fp
 80168c6:	9c07      	ldr	r4, [sp, #28]
 80168c8:	46da      	mov	sl, fp
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d1d3      	bne.n	8016876 <rcl_expand_topic_name+0x20e>
 80168ce:	f898 3000 	ldrb.w	r3, [r8]
 80168d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80168d4:	d0cb      	beq.n	801686e <rcl_expand_topic_name+0x206>
 80168d6:	e7b2      	b.n	801683e <rcl_expand_topic_name+0x1d6>
 80168d8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80168dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80168de:	6015      	str	r5, [r2, #0]
 80168e0:	4658      	mov	r0, fp
 80168e2:	4798      	blx	r3
 80168e4:	240a      	movs	r4, #10
 80168e6:	e774      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 80168e8:	ab17      	add	r3, sp, #92	@ 0x5c
 80168ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168ee:	e88d 0003 	stmia.w	sp, {r0, r1}
 80168f2:	ab14      	add	r3, sp, #80	@ 0x50
 80168f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80168f6:	4640      	mov	r0, r8
 80168f8:	f7fc fc04 	bl	8013104 <rcutils_strdup>
 80168fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168fe:	2800      	cmp	r0, #0
 8016900:	6018      	str	r0, [r3, #0]
 8016902:	bf08      	it	eq
 8016904:	240a      	moveq	r4, #10
 8016906:	e764      	b.n	80167d2 <rcl_expand_topic_name+0x16a>
 8016908:	08019278 	.word	0x08019278
 801690c:	08018a2c 	.word	0x08018a2c
 8016910:	08019280 	.word	0x08019280
 8016914:	08019288 	.word	0x08019288
 8016918:	08019290 	.word	0x08019290
 801691c:	08018bb4 	.word	0x08018bb4
 8016920:	08018a3c 	.word	0x08018a3c

08016924 <rcl_get_default_topic_name_substitutions>:
 8016924:	2800      	cmp	r0, #0
 8016926:	bf0c      	ite	eq
 8016928:	200b      	moveq	r0, #11
 801692a:	2000      	movne	r0, #0
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop

08016930 <rcl_get_zero_initialized_guard_condition>:
 8016930:	4a03      	ldr	r2, [pc, #12]	@ (8016940 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016932:	4603      	mov	r3, r0
 8016934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016938:	e883 0003 	stmia.w	r3, {r0, r1}
 801693c:	4618      	mov	r0, r3
 801693e:	4770      	bx	lr
 8016940:	0801929c 	.word	0x0801929c

08016944 <rcl_guard_condition_init_from_rmw>:
 8016944:	b082      	sub	sp, #8
 8016946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016950:	4604      	mov	r4, r0
 8016952:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016956:	460e      	mov	r6, r1
 8016958:	4617      	mov	r7, r2
 801695a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801695e:	f10d 0e04 	add.w	lr, sp, #4
 8016962:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016966:	f8dc 3000 	ldr.w	r3, [ip]
 801696a:	f8ce 3000 	str.w	r3, [lr]
 801696e:	a801      	add	r0, sp, #4
 8016970:	f7f6 f8e2 	bl	800cb38 <rcutils_allocator_is_valid>
 8016974:	b350      	cbz	r0, 80169cc <rcl_guard_condition_init_from_rmw+0x88>
 8016976:	b34c      	cbz	r4, 80169cc <rcl_guard_condition_init_from_rmw+0x88>
 8016978:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801697c:	f1b8 0f00 	cmp.w	r8, #0
 8016980:	d11e      	bne.n	80169c0 <rcl_guard_condition_init_from_rmw+0x7c>
 8016982:	b31f      	cbz	r7, 80169cc <rcl_guard_condition_init_from_rmw+0x88>
 8016984:	4638      	mov	r0, r7
 8016986:	f7f9 fe83 	bl	8010690 <rcl_context_is_valid>
 801698a:	b328      	cbz	r0, 80169d8 <rcl_guard_condition_init_from_rmw+0x94>
 801698c:	9b01      	ldr	r3, [sp, #4]
 801698e:	9905      	ldr	r1, [sp, #20]
 8016990:	201c      	movs	r0, #28
 8016992:	4798      	blx	r3
 8016994:	4605      	mov	r5, r0
 8016996:	6060      	str	r0, [r4, #4]
 8016998:	b358      	cbz	r0, 80169f2 <rcl_guard_condition_init_from_rmw+0xae>
 801699a:	b1fe      	cbz	r6, 80169dc <rcl_guard_condition_init_from_rmw+0x98>
 801699c:	6006      	str	r6, [r0, #0]
 801699e:	f880 8004 	strb.w	r8, [r0, #4]
 80169a2:	ac01      	add	r4, sp, #4
 80169a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169a6:	f105 0c08 	add.w	ip, r5, #8
 80169aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	f8cc 3000 	str.w	r3, [ip]
 80169b4:	2000      	movs	r0, #0
 80169b6:	b006      	add	sp, #24
 80169b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169bc:	b002      	add	sp, #8
 80169be:	4770      	bx	lr
 80169c0:	2064      	movs	r0, #100	@ 0x64
 80169c2:	b006      	add	sp, #24
 80169c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169c8:	b002      	add	sp, #8
 80169ca:	4770      	bx	lr
 80169cc:	200b      	movs	r0, #11
 80169ce:	b006      	add	sp, #24
 80169d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169d4:	b002      	add	sp, #8
 80169d6:	4770      	bx	lr
 80169d8:	2065      	movs	r0, #101	@ 0x65
 80169da:	e7f2      	b.n	80169c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80169dc:	6838      	ldr	r0, [r7, #0]
 80169de:	3028      	adds	r0, #40	@ 0x28
 80169e0:	f000 fa3a 	bl	8016e58 <rmw_create_guard_condition>
 80169e4:	6028      	str	r0, [r5, #0]
 80169e6:	6865      	ldr	r5, [r4, #4]
 80169e8:	682e      	ldr	r6, [r5, #0]
 80169ea:	b126      	cbz	r6, 80169f6 <rcl_guard_condition_init_from_rmw+0xb2>
 80169ec:	2301      	movs	r3, #1
 80169ee:	712b      	strb	r3, [r5, #4]
 80169f0:	e7d7      	b.n	80169a2 <rcl_guard_condition_init_from_rmw+0x5e>
 80169f2:	200a      	movs	r0, #10
 80169f4:	e7e5      	b.n	80169c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80169f6:	4628      	mov	r0, r5
 80169f8:	9b02      	ldr	r3, [sp, #8]
 80169fa:	9905      	ldr	r1, [sp, #20]
 80169fc:	4798      	blx	r3
 80169fe:	6066      	str	r6, [r4, #4]
 8016a00:	2001      	movs	r0, #1
 8016a02:	e7de      	b.n	80169c2 <rcl_guard_condition_init_from_rmw+0x7e>

08016a04 <rcl_guard_condition_fini>:
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	b1f0      	cbz	r0, 8016a48 <rcl_guard_condition_fini+0x44>
 8016a0a:	6843      	ldr	r3, [r0, #4]
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	b163      	cbz	r3, 8016a2a <rcl_guard_condition_fini+0x26>
 8016a10:	6818      	ldr	r0, [r3, #0]
 8016a12:	68de      	ldr	r6, [r3, #12]
 8016a14:	6999      	ldr	r1, [r3, #24]
 8016a16:	b160      	cbz	r0, 8016a32 <rcl_guard_condition_fini+0x2e>
 8016a18:	791d      	ldrb	r5, [r3, #4]
 8016a1a:	b965      	cbnz	r5, 8016a36 <rcl_guard_condition_fini+0x32>
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	47b0      	blx	r6
 8016a20:	2300      	movs	r3, #0
 8016a22:	4628      	mov	r0, r5
 8016a24:	6063      	str	r3, [r4, #4]
 8016a26:	b002      	add	sp, #8
 8016a28:	bd70      	pop	{r4, r5, r6, pc}
 8016a2a:	461d      	mov	r5, r3
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	b002      	add	sp, #8
 8016a30:	bd70      	pop	{r4, r5, r6, pc}
 8016a32:	4605      	mov	r5, r0
 8016a34:	e7f2      	b.n	8016a1c <rcl_guard_condition_fini+0x18>
 8016a36:	9101      	str	r1, [sp, #4]
 8016a38:	f000 fa22 	bl	8016e80 <rmw_destroy_guard_condition>
 8016a3c:	1e05      	subs	r5, r0, #0
 8016a3e:	6863      	ldr	r3, [r4, #4]
 8016a40:	9901      	ldr	r1, [sp, #4]
 8016a42:	bf18      	it	ne
 8016a44:	2501      	movne	r5, #1
 8016a46:	e7e9      	b.n	8016a1c <rcl_guard_condition_fini+0x18>
 8016a48:	250b      	movs	r5, #11
 8016a4a:	4628      	mov	r0, r5
 8016a4c:	b002      	add	sp, #8
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}

08016a50 <rcl_guard_condition_get_default_options>:
 8016a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a52:	b087      	sub	sp, #28
 8016a54:	4606      	mov	r6, r0
 8016a56:	4668      	mov	r0, sp
 8016a58:	f7f6 f860 	bl	800cb1c <rcutils_get_default_allocator>
 8016a5c:	4b09      	ldr	r3, [pc, #36]	@ (8016a84 <rcl_guard_condition_get_default_options+0x34>)
 8016a5e:	46ee      	mov	lr, sp
 8016a60:	469c      	mov	ip, r3
 8016a62:	461d      	mov	r5, r3
 8016a64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a6e:	4634      	mov	r4, r6
 8016a70:	f8de 7000 	ldr.w	r7, [lr]
 8016a74:	f8cc 7000 	str.w	r7, [ip]
 8016a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	6027      	str	r7, [r4, #0]
 8016a7e:	b007      	add	sp, #28
 8016a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a82:	bf00      	nop
 8016a84:	2000dea4 	.word	0x2000dea4

08016a88 <rcl_guard_condition_get_rmw_handle>:
 8016a88:	b110      	cbz	r0, 8016a90 <rcl_guard_condition_get_rmw_handle+0x8>
 8016a8a:	6840      	ldr	r0, [r0, #4]
 8016a8c:	b100      	cbz	r0, 8016a90 <rcl_guard_condition_get_rmw_handle+0x8>
 8016a8e:	6800      	ldr	r0, [r0, #0]
 8016a90:	4770      	bx	lr
 8016a92:	bf00      	nop

08016a94 <rcl_validate_topic_name>:
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d07a      	beq.n	8016b8e <rcl_validate_topic_name+0xfa>
 8016a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a9c:	460e      	mov	r6, r1
 8016a9e:	2900      	cmp	r1, #0
 8016aa0:	d07c      	beq.n	8016b9c <rcl_validate_topic_name+0x108>
 8016aa2:	4617      	mov	r7, r2
 8016aa4:	4605      	mov	r5, r0
 8016aa6:	f7e9 fbbd 	bl	8000224 <strlen>
 8016aaa:	b1b0      	cbz	r0, 8016ada <rcl_validate_topic_name+0x46>
 8016aac:	f895 9000 	ldrb.w	r9, [r5]
 8016ab0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016c34 <rcl_validate_topic_name+0x1a0>
 8016ab4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016ab8:	f013 0304 	ands.w	r3, r3, #4
 8016abc:	d169      	bne.n	8016b92 <rcl_validate_topic_name+0xfe>
 8016abe:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016ac2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016ac6:	2a2f      	cmp	r2, #47	@ 0x2f
 8016ac8:	d10e      	bne.n	8016ae8 <rcl_validate_topic_name+0x54>
 8016aca:	2202      	movs	r2, #2
 8016acc:	6032      	str	r2, [r6, #0]
 8016ace:	b36f      	cbz	r7, 8016b2c <rcl_validate_topic_name+0x98>
 8016ad0:	f8c7 8000 	str.w	r8, [r7]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ada:	2301      	movs	r3, #1
 8016adc:	6033      	str	r3, [r6, #0]
 8016ade:	b32f      	cbz	r7, 8016b2c <rcl_validate_topic_name+0x98>
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	6038      	str	r0, [r7, #0]
 8016ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ae8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016aec:	461c      	mov	r4, r3
 8016aee:	4619      	mov	r1, r3
 8016af0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016af4:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016af8:	f1be 0f09 	cmp.w	lr, #9
 8016afc:	d919      	bls.n	8016b32 <rcl_validate_topic_name+0x9e>
 8016afe:	f022 0e20 	bic.w	lr, r2, #32
 8016b02:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016b06:	f1be 0f19 	cmp.w	lr, #25
 8016b0a:	d912      	bls.n	8016b32 <rcl_validate_topic_name+0x9e>
 8016b0c:	2a5f      	cmp	r2, #95	@ 0x5f
 8016b0e:	d019      	beq.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016b10:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b12:	d051      	beq.n	8016bb8 <rcl_validate_topic_name+0x124>
 8016b14:	2a7e      	cmp	r2, #126	@ 0x7e
 8016b16:	d048      	beq.n	8016baa <rcl_validate_topic_name+0x116>
 8016b18:	2a7b      	cmp	r2, #123	@ 0x7b
 8016b1a:	d054      	beq.n	8016bc6 <rcl_validate_topic_name+0x132>
 8016b1c:	2a7d      	cmp	r2, #125	@ 0x7d
 8016b1e:	d161      	bne.n	8016be4 <rcl_validate_topic_name+0x150>
 8016b20:	2c00      	cmp	r4, #0
 8016b22:	d155      	bne.n	8016bd0 <rcl_validate_topic_name+0x13c>
 8016b24:	2305      	movs	r3, #5
 8016b26:	6033      	str	r3, [r6, #0]
 8016b28:	b107      	cbz	r7, 8016b2c <rcl_validate_topic_name+0x98>
 8016b2a:	6039      	str	r1, [r7, #0]
 8016b2c:	2000      	movs	r0, #0
 8016b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b36:	0752      	lsls	r2, r2, #29
 8016b38:	d504      	bpl.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016b3a:	b11c      	cbz	r4, 8016b44 <rcl_validate_topic_name+0xb0>
 8016b3c:	b111      	cbz	r1, 8016b44 <rcl_validate_topic_name+0xb0>
 8016b3e:	1e4a      	subs	r2, r1, #1
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d02d      	beq.n	8016ba0 <rcl_validate_topic_name+0x10c>
 8016b44:	3101      	adds	r1, #1
 8016b46:	4288      	cmp	r0, r1
 8016b48:	d1d2      	bne.n	8016af0 <rcl_validate_topic_name+0x5c>
 8016b4a:	2c00      	cmp	r4, #0
 8016b4c:	d145      	bne.n	8016bda <rcl_validate_topic_name+0x146>
 8016b4e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016b52:	d04f      	beq.n	8016bf4 <rcl_validate_topic_name+0x160>
 8016b54:	4620      	mov	r0, r4
 8016b56:	2301      	movs	r3, #1
 8016b58:	e006      	b.n	8016b68 <rcl_validate_topic_name+0xd4>
 8016b5a:	428b      	cmp	r3, r1
 8016b5c:	f105 0501 	add.w	r5, r5, #1
 8016b60:	f103 0201 	add.w	r2, r3, #1
 8016b64:	d236      	bcs.n	8016bd4 <rcl_validate_topic_name+0x140>
 8016b66:	4613      	mov	r3, r2
 8016b68:	4580      	cmp	r8, r0
 8016b6a:	f100 0001 	add.w	r0, r0, #1
 8016b6e:	d0f4      	beq.n	8016b5a <rcl_validate_topic_name+0xc6>
 8016b70:	782a      	ldrb	r2, [r5, #0]
 8016b72:	2a2f      	cmp	r2, #47	@ 0x2f
 8016b74:	d1f1      	bne.n	8016b5a <rcl_validate_topic_name+0xc6>
 8016b76:	786a      	ldrb	r2, [r5, #1]
 8016b78:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016b7c:	0754      	lsls	r4, r2, #29
 8016b7e:	d5ec      	bpl.n	8016b5a <rcl_validate_topic_name+0xc6>
 8016b80:	2204      	movs	r2, #4
 8016b82:	6032      	str	r2, [r6, #0]
 8016b84:	2f00      	cmp	r7, #0
 8016b86:	d0d1      	beq.n	8016b2c <rcl_validate_topic_name+0x98>
 8016b88:	603b      	str	r3, [r7, #0]
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	e7aa      	b.n	8016ae4 <rcl_validate_topic_name+0x50>
 8016b8e:	200b      	movs	r0, #11
 8016b90:	4770      	bx	lr
 8016b92:	2304      	movs	r3, #4
 8016b94:	6033      	str	r3, [r6, #0]
 8016b96:	2f00      	cmp	r7, #0
 8016b98:	d1a2      	bne.n	8016ae0 <rcl_validate_topic_name+0x4c>
 8016b9a:	e7c7      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016b9c:	200b      	movs	r0, #11
 8016b9e:	e7a1      	b.n	8016ae4 <rcl_validate_topic_name+0x50>
 8016ba0:	2309      	movs	r3, #9
 8016ba2:	6033      	str	r3, [r6, #0]
 8016ba4:	2f00      	cmp	r7, #0
 8016ba6:	d1c0      	bne.n	8016b2a <rcl_validate_topic_name+0x96>
 8016ba8:	e7c0      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016baa:	2900      	cmp	r1, #0
 8016bac:	d0ca      	beq.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016bae:	2306      	movs	r3, #6
 8016bb0:	6033      	str	r3, [r6, #0]
 8016bb2:	2f00      	cmp	r7, #0
 8016bb4:	d1b9      	bne.n	8016b2a <rcl_validate_topic_name+0x96>
 8016bb6:	e7b9      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016bb8:	2c00      	cmp	r4, #0
 8016bba:	d0c3      	beq.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016bbc:	2308      	movs	r3, #8
 8016bbe:	6033      	str	r3, [r6, #0]
 8016bc0:	2f00      	cmp	r7, #0
 8016bc2:	d1b2      	bne.n	8016b2a <rcl_validate_topic_name+0x96>
 8016bc4:	e7b2      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016bc6:	2c00      	cmp	r4, #0
 8016bc8:	d1f8      	bne.n	8016bbc <rcl_validate_topic_name+0x128>
 8016bca:	460b      	mov	r3, r1
 8016bcc:	2401      	movs	r4, #1
 8016bce:	e7b9      	b.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016bd0:	2400      	movs	r4, #0
 8016bd2:	e7b7      	b.n	8016b44 <rcl_validate_topic_name+0xb0>
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	6030      	str	r0, [r6, #0]
 8016bd8:	e784      	b.n	8016ae4 <rcl_validate_topic_name+0x50>
 8016bda:	2205      	movs	r2, #5
 8016bdc:	6032      	str	r2, [r6, #0]
 8016bde:	2f00      	cmp	r7, #0
 8016be0:	d1d2      	bne.n	8016b88 <rcl_validate_topic_name+0xf4>
 8016be2:	e7a3      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016be4:	2c00      	cmp	r4, #0
 8016be6:	bf14      	ite	ne
 8016be8:	2308      	movne	r3, #8
 8016bea:	2303      	moveq	r3, #3
 8016bec:	6033      	str	r3, [r6, #0]
 8016bee:	2f00      	cmp	r7, #0
 8016bf0:	d19b      	bne.n	8016b2a <rcl_validate_topic_name+0x96>
 8016bf2:	e79b      	b.n	8016b2c <rcl_validate_topic_name+0x98>
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e00a      	b.n	8016c0e <rcl_validate_topic_name+0x17a>
 8016bf8:	2c01      	cmp	r4, #1
 8016bfa:	d013      	beq.n	8016c24 <rcl_validate_topic_name+0x190>
 8016bfc:	4299      	cmp	r1, r3
 8016bfe:	f104 0401 	add.w	r4, r4, #1
 8016c02:	f105 0501 	add.w	r5, r5, #1
 8016c06:	f103 0201 	add.w	r2, r3, #1
 8016c0a:	d9e3      	bls.n	8016bd4 <rcl_validate_topic_name+0x140>
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	45a0      	cmp	r8, r4
 8016c10:	d0f4      	beq.n	8016bfc <rcl_validate_topic_name+0x168>
 8016c12:	782a      	ldrb	r2, [r5, #0]
 8016c14:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c16:	d1ef      	bne.n	8016bf8 <rcl_validate_topic_name+0x164>
 8016c18:	786a      	ldrb	r2, [r5, #1]
 8016c1a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c1e:	0752      	lsls	r2, r2, #29
 8016c20:	d5ec      	bpl.n	8016bfc <rcl_validate_topic_name+0x168>
 8016c22:	e7ad      	b.n	8016b80 <rcl_validate_topic_name+0xec>
 8016c24:	2307      	movs	r3, #7
 8016c26:	6033      	str	r3, [r6, #0]
 8016c28:	2f00      	cmp	r7, #0
 8016c2a:	f43f af7f 	beq.w	8016b2c <rcl_validate_topic_name+0x98>
 8016c2e:	603c      	str	r4, [r7, #0]
 8016c30:	2000      	movs	r0, #0
 8016c32:	e757      	b.n	8016ae4 <rcl_validate_topic_name+0x50>
 8016c34:	08019314 	.word	0x08019314

08016c38 <rcutils_string_array_fini>:
 8016c38:	b320      	cbz	r0, 8016c84 <rcutils_string_array_fini+0x4c>
 8016c3a:	b570      	push	{r4, r5, r6, lr}
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	6840      	ldr	r0, [r0, #4]
 8016c40:	b1d8      	cbz	r0, 8016c7a <rcutils_string_array_fini+0x42>
 8016c42:	f104 0008 	add.w	r0, r4, #8
 8016c46:	f7f5 ff77 	bl	800cb38 <rcutils_allocator_is_valid>
 8016c4a:	b1b8      	cbz	r0, 8016c7c <rcutils_string_array_fini+0x44>
 8016c4c:	6823      	ldr	r3, [r4, #0]
 8016c4e:	b1bb      	cbz	r3, 8016c80 <rcutils_string_array_fini+0x48>
 8016c50:	2500      	movs	r5, #0
 8016c52:	6860      	ldr	r0, [r4, #4]
 8016c54:	462e      	mov	r6, r5
 8016c56:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016c5a:	68e3      	ldr	r3, [r4, #12]
 8016c5c:	69a1      	ldr	r1, [r4, #24]
 8016c5e:	4798      	blx	r3
 8016c60:	e9d4 3000 	ldrd	r3, r0, [r4]
 8016c64:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8016c68:	3501      	adds	r5, #1
 8016c6a:	429d      	cmp	r5, r3
 8016c6c:	d3f3      	bcc.n	8016c56 <rcutils_string_array_fini+0x1e>
 8016c6e:	68e3      	ldr	r3, [r4, #12]
 8016c70:	69a1      	ldr	r1, [r4, #24]
 8016c72:	4798      	blx	r3
 8016c74:	2000      	movs	r0, #0
 8016c76:	e9c4 0000 	strd	r0, r0, [r4]
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	200b      	movs	r0, #11
 8016c7e:	bd70      	pop	{r4, r5, r6, pc}
 8016c80:	6860      	ldr	r0, [r4, #4]
 8016c82:	e7f4      	b.n	8016c6e <rcutils_string_array_fini+0x36>
 8016c84:	200b      	movs	r0, #11
 8016c86:	4770      	bx	lr

08016c88 <on_status>:
 8016c88:	b082      	sub	sp, #8
 8016c8a:	b002      	add	sp, #8
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop

08016c90 <on_topic>:
 8016c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c94:	4a22      	ldr	r2, [pc, #136]	@ (8016d20 <on_topic+0x90>)
 8016c96:	b094      	sub	sp, #80	@ 0x50
 8016c98:	6812      	ldr	r2, [r2, #0]
 8016c9a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016c9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016ca0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016ca4:	b3c2      	cbz	r2, 8016d18 <on_topic+0x88>
 8016ca6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016caa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016cae:	e001      	b.n	8016cb4 <on_topic+0x24>
 8016cb0:	6852      	ldr	r2, [r2, #4]
 8016cb2:	b38a      	cbz	r2, 8016d18 <on_topic+0x88>
 8016cb4:	6894      	ldr	r4, [r2, #8]
 8016cb6:	8aa3      	ldrh	r3, [r4, #20]
 8016cb8:	428b      	cmp	r3, r1
 8016cba:	d1f9      	bne.n	8016cb0 <on_topic+0x20>
 8016cbc:	7da3      	ldrb	r3, [r4, #22]
 8016cbe:	4283      	cmp	r3, r0
 8016cc0:	d1f6      	bne.n	8016cb0 <on_topic+0x20>
 8016cc2:	2248      	movs	r2, #72	@ 0x48
 8016cc4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016cc8:	4668      	mov	r0, sp
 8016cca:	f000 fda0 	bl	801780e <memcpy>
 8016cce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016cd2:	cb0c      	ldmia	r3, {r2, r3}
 8016cd4:	4620      	mov	r0, r4
 8016cd6:	f7f6 fb5f 	bl	800d398 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016cda:	4607      	mov	r7, r0
 8016cdc:	b1e0      	cbz	r0, 8016d18 <on_topic+0x88>
 8016cde:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016ce2:	4632      	mov	r2, r6
 8016ce4:	4628      	mov	r0, r5
 8016ce6:	f108 0110 	add.w	r1, r8, #16
 8016cea:	f7fd ffc9 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8016cee:	b930      	cbnz	r0, 8016cfe <on_topic+0x6e>
 8016cf0:	480c      	ldr	r0, [pc, #48]	@ (8016d24 <on_topic+0x94>)
 8016cf2:	4639      	mov	r1, r7
 8016cf4:	b014      	add	sp, #80	@ 0x50
 8016cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cfa:	f7fc bd8d 	b.w	8013818 <put_memory>
 8016cfe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016d02:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016d06:	f7fd fedf 	bl	8014ac8 <rmw_uros_epoch_nanos>
 8016d0a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016d0e:	2305      	movs	r3, #5
 8016d10:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016d14:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016d18:	b014      	add	sp, #80	@ 0x50
 8016d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d1e:	bf00      	nop
 8016d20:	2000dd04 	.word	0x2000dd04
 8016d24:	2000dcf4 	.word	0x2000dcf4

08016d28 <on_request>:
 8016d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2c:	4823      	ldr	r0, [pc, #140]	@ (8016dbc <on_request+0x94>)
 8016d2e:	b094      	sub	sp, #80	@ 0x50
 8016d30:	6800      	ldr	r0, [r0, #0]
 8016d32:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016d34:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016d38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d03b      	beq.n	8016db6 <on_request+0x8e>
 8016d3e:	461d      	mov	r5, r3
 8016d40:	e001      	b.n	8016d46 <on_request+0x1e>
 8016d42:	6840      	ldr	r0, [r0, #4]
 8016d44:	b3b8      	cbz	r0, 8016db6 <on_request+0x8e>
 8016d46:	6884      	ldr	r4, [r0, #8]
 8016d48:	8b21      	ldrh	r1, [r4, #24]
 8016d4a:	4291      	cmp	r1, r2
 8016d4c:	d1f9      	bne.n	8016d42 <on_request+0x1a>
 8016d4e:	2248      	movs	r2, #72	@ 0x48
 8016d50:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016d54:	4668      	mov	r0, sp
 8016d56:	f000 fd5a 	bl	801780e <memcpy>
 8016d5a:	f104 0320 	add.w	r3, r4, #32
 8016d5e:	cb0c      	ldmia	r3, {r2, r3}
 8016d60:	4620      	mov	r0, r4
 8016d62:	f7f6 fb19 	bl	800d398 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016d66:	4680      	mov	r8, r0
 8016d68:	b328      	cbz	r0, 8016db6 <on_request+0x8e>
 8016d6a:	4638      	mov	r0, r7
 8016d6c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016d70:	4632      	mov	r2, r6
 8016d72:	f107 0110 	add.w	r1, r7, #16
 8016d76:	f7fd ff83 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8016d7a:	b930      	cbnz	r0, 8016d8a <on_request+0x62>
 8016d7c:	4810      	ldr	r0, [pc, #64]	@ (8016dc0 <on_request+0x98>)
 8016d7e:	4641      	mov	r1, r8
 8016d80:	b014      	add	sp, #80	@ 0x50
 8016d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d86:	f7fc bd47 	b.w	8013818 <put_memory>
 8016d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d8c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016d90:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016d94:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016d98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016da0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016da4:	f7fd fe90 	bl	8014ac8 <rmw_uros_epoch_nanos>
 8016da8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016dac:	2303      	movs	r3, #3
 8016dae:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016db2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016db6:	b014      	add	sp, #80	@ 0x50
 8016db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dbc:	2000dcd4 	.word	0x2000dcd4
 8016dc0:	2000dcf4 	.word	0x2000dcf4

08016dc4 <on_reply>:
 8016dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc8:	4821      	ldr	r0, [pc, #132]	@ (8016e50 <on_reply+0x8c>)
 8016dca:	b094      	sub	sp, #80	@ 0x50
 8016dcc:	6800      	ldr	r0, [r0, #0]
 8016dce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016dd0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016dd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016dd6:	b3b8      	cbz	r0, 8016e48 <on_reply+0x84>
 8016dd8:	461d      	mov	r5, r3
 8016dda:	e001      	b.n	8016de0 <on_reply+0x1c>
 8016ddc:	6840      	ldr	r0, [r0, #4]
 8016dde:	b398      	cbz	r0, 8016e48 <on_reply+0x84>
 8016de0:	6884      	ldr	r4, [r0, #8]
 8016de2:	8b21      	ldrh	r1, [r4, #24]
 8016de4:	4291      	cmp	r1, r2
 8016de6:	d1f9      	bne.n	8016ddc <on_reply+0x18>
 8016de8:	2248      	movs	r2, #72	@ 0x48
 8016dea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016dee:	4668      	mov	r0, sp
 8016df0:	f000 fd0d 	bl	801780e <memcpy>
 8016df4:	f104 0320 	add.w	r3, r4, #32
 8016df8:	cb0c      	ldmia	r3, {r2, r3}
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f7f6 facc 	bl	800d398 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016e00:	4680      	mov	r8, r0
 8016e02:	b308      	cbz	r0, 8016e48 <on_reply+0x84>
 8016e04:	4638      	mov	r0, r7
 8016e06:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016e0a:	4632      	mov	r2, r6
 8016e0c:	f107 0110 	add.w	r1, r7, #16
 8016e10:	f7fd ff36 	bl	8014c80 <ucdr_deserialize_array_uint8_t>
 8016e14:	b930      	cbnz	r0, 8016e24 <on_reply+0x60>
 8016e16:	480f      	ldr	r0, [pc, #60]	@ (8016e54 <on_reply+0x90>)
 8016e18:	4641      	mov	r1, r8
 8016e1a:	b014      	add	sp, #80	@ 0x50
 8016e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e20:	f7fc bcfa 	b.w	8013818 <put_memory>
 8016e24:	2200      	movs	r2, #0
 8016e26:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016e2a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016e2e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016e32:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016e36:	f7fd fe47 	bl	8014ac8 <rmw_uros_epoch_nanos>
 8016e3a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016e3e:	2304      	movs	r3, #4
 8016e40:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016e44:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016e48:	b014      	add	sp, #80	@ 0x50
 8016e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e4e:	bf00      	nop
 8016e50:	200093e8 	.word	0x200093e8
 8016e54:	2000dcf4 	.word	0x2000dcf4

08016e58 <rmw_create_guard_condition>:
 8016e58:	b538      	push	{r3, r4, r5, lr}
 8016e5a:	4605      	mov	r5, r0
 8016e5c:	4807      	ldr	r0, [pc, #28]	@ (8016e7c <rmw_create_guard_condition+0x24>)
 8016e5e:	f7fc fccb 	bl	80137f8 <get_memory>
 8016e62:	b148      	cbz	r0, 8016e78 <rmw_create_guard_condition+0x20>
 8016e64:	6884      	ldr	r4, [r0, #8]
 8016e66:	2300      	movs	r3, #0
 8016e68:	7423      	strb	r3, [r4, #16]
 8016e6a:	61e5      	str	r5, [r4, #28]
 8016e6c:	f7fc fd2c 	bl	80138c8 <rmw_get_implementation_identifier>
 8016e70:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016e74:	f104 0014 	add.w	r0, r4, #20
 8016e78:	bd38      	pop	{r3, r4, r5, pc}
 8016e7a:	bf00      	nop
 8016e7c:	2000dc94 	.word	0x2000dc94

08016e80 <rmw_destroy_guard_condition>:
 8016e80:	b508      	push	{r3, lr}
 8016e82:	4b08      	ldr	r3, [pc, #32]	@ (8016ea4 <rmw_destroy_guard_condition+0x24>)
 8016e84:	6819      	ldr	r1, [r3, #0]
 8016e86:	b911      	cbnz	r1, 8016e8e <rmw_destroy_guard_condition+0xe>
 8016e88:	e00a      	b.n	8016ea0 <rmw_destroy_guard_condition+0x20>
 8016e8a:	6849      	ldr	r1, [r1, #4]
 8016e8c:	b141      	cbz	r1, 8016ea0 <rmw_destroy_guard_condition+0x20>
 8016e8e:	688b      	ldr	r3, [r1, #8]
 8016e90:	3314      	adds	r3, #20
 8016e92:	4298      	cmp	r0, r3
 8016e94:	d1f9      	bne.n	8016e8a <rmw_destroy_guard_condition+0xa>
 8016e96:	4803      	ldr	r0, [pc, #12]	@ (8016ea4 <rmw_destroy_guard_condition+0x24>)
 8016e98:	f7fc fcbe 	bl	8013818 <put_memory>
 8016e9c:	2000      	movs	r0, #0
 8016e9e:	bd08      	pop	{r3, pc}
 8016ea0:	2001      	movs	r0, #1
 8016ea2:	bd08      	pop	{r3, pc}
 8016ea4:	2000dc94 	.word	0x2000dc94

08016ea8 <calloc>:
 8016ea8:	4b02      	ldr	r3, [pc, #8]	@ (8016eb4 <calloc+0xc>)
 8016eaa:	460a      	mov	r2, r1
 8016eac:	4601      	mov	r1, r0
 8016eae:	6818      	ldr	r0, [r3, #0]
 8016eb0:	f000 b802 	b.w	8016eb8 <_calloc_r>
 8016eb4:	20000270 	.word	0x20000270

08016eb8 <_calloc_r>:
 8016eb8:	b570      	push	{r4, r5, r6, lr}
 8016eba:	fba1 5402 	umull	r5, r4, r1, r2
 8016ebe:	b93c      	cbnz	r4, 8016ed0 <_calloc_r+0x18>
 8016ec0:	4629      	mov	r1, r5
 8016ec2:	f000 f887 	bl	8016fd4 <_malloc_r>
 8016ec6:	4606      	mov	r6, r0
 8016ec8:	b928      	cbnz	r0, 8016ed6 <_calloc_r+0x1e>
 8016eca:	2600      	movs	r6, #0
 8016ecc:	4630      	mov	r0, r6
 8016ece:	bd70      	pop	{r4, r5, r6, pc}
 8016ed0:	220c      	movs	r2, #12
 8016ed2:	6002      	str	r2, [r0, #0]
 8016ed4:	e7f9      	b.n	8016eca <_calloc_r+0x12>
 8016ed6:	462a      	mov	r2, r5
 8016ed8:	4621      	mov	r1, r4
 8016eda:	f000 fbcf 	bl	801767c <memset>
 8016ede:	e7f5      	b.n	8016ecc <_calloc_r+0x14>

08016ee0 <getenv>:
 8016ee0:	b507      	push	{r0, r1, r2, lr}
 8016ee2:	4b04      	ldr	r3, [pc, #16]	@ (8016ef4 <getenv+0x14>)
 8016ee4:	4601      	mov	r1, r0
 8016ee6:	aa01      	add	r2, sp, #4
 8016ee8:	6818      	ldr	r0, [r3, #0]
 8016eea:	f000 f805 	bl	8016ef8 <_findenv_r>
 8016eee:	b003      	add	sp, #12
 8016ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ef4:	20000270 	.word	0x20000270

08016ef8 <_findenv_r>:
 8016ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016f6c <_findenv_r+0x74>
 8016f00:	4606      	mov	r6, r0
 8016f02:	4689      	mov	r9, r1
 8016f04:	4617      	mov	r7, r2
 8016f06:	f000 fcaf 	bl	8017868 <__env_lock>
 8016f0a:	f8da 4000 	ldr.w	r4, [sl]
 8016f0e:	b134      	cbz	r4, 8016f1e <_findenv_r+0x26>
 8016f10:	464b      	mov	r3, r9
 8016f12:	4698      	mov	r8, r3
 8016f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f18:	b13a      	cbz	r2, 8016f2a <_findenv_r+0x32>
 8016f1a:	2a3d      	cmp	r2, #61	@ 0x3d
 8016f1c:	d1f9      	bne.n	8016f12 <_findenv_r+0x1a>
 8016f1e:	4630      	mov	r0, r6
 8016f20:	f000 fca8 	bl	8017874 <__env_unlock>
 8016f24:	2000      	movs	r0, #0
 8016f26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2a:	eba8 0809 	sub.w	r8, r8, r9
 8016f2e:	46a3      	mov	fp, r4
 8016f30:	f854 0b04 	ldr.w	r0, [r4], #4
 8016f34:	2800      	cmp	r0, #0
 8016f36:	d0f2      	beq.n	8016f1e <_findenv_r+0x26>
 8016f38:	4642      	mov	r2, r8
 8016f3a:	4649      	mov	r1, r9
 8016f3c:	f000 fbb3 	bl	80176a6 <strncmp>
 8016f40:	2800      	cmp	r0, #0
 8016f42:	d1f4      	bne.n	8016f2e <_findenv_r+0x36>
 8016f44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016f48:	eb03 0508 	add.w	r5, r3, r8
 8016f4c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016f50:	2b3d      	cmp	r3, #61	@ 0x3d
 8016f52:	d1ec      	bne.n	8016f2e <_findenv_r+0x36>
 8016f54:	f8da 3000 	ldr.w	r3, [sl]
 8016f58:	ebab 0303 	sub.w	r3, fp, r3
 8016f5c:	109b      	asrs	r3, r3, #2
 8016f5e:	4630      	mov	r0, r6
 8016f60:	603b      	str	r3, [r7, #0]
 8016f62:	f000 fc87 	bl	8017874 <__env_unlock>
 8016f66:	1c68      	adds	r0, r5, #1
 8016f68:	e7dd      	b.n	8016f26 <_findenv_r+0x2e>
 8016f6a:	bf00      	nop
 8016f6c:	20000008 	.word	0x20000008

08016f70 <malloc>:
 8016f70:	4b02      	ldr	r3, [pc, #8]	@ (8016f7c <malloc+0xc>)
 8016f72:	4601      	mov	r1, r0
 8016f74:	6818      	ldr	r0, [r3, #0]
 8016f76:	f000 b82d 	b.w	8016fd4 <_malloc_r>
 8016f7a:	bf00      	nop
 8016f7c:	20000270 	.word	0x20000270

08016f80 <free>:
 8016f80:	4b02      	ldr	r3, [pc, #8]	@ (8016f8c <free+0xc>)
 8016f82:	4601      	mov	r1, r0
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	f000 bc7b 	b.w	8017880 <_free_r>
 8016f8a:	bf00      	nop
 8016f8c:	20000270 	.word	0x20000270

08016f90 <sbrk_aligned>:
 8016f90:	b570      	push	{r4, r5, r6, lr}
 8016f92:	4e0f      	ldr	r6, [pc, #60]	@ (8016fd0 <sbrk_aligned+0x40>)
 8016f94:	460c      	mov	r4, r1
 8016f96:	6831      	ldr	r1, [r6, #0]
 8016f98:	4605      	mov	r5, r0
 8016f9a:	b911      	cbnz	r1, 8016fa2 <sbrk_aligned+0x12>
 8016f9c:	f000 fbe0 	bl	8017760 <_sbrk_r>
 8016fa0:	6030      	str	r0, [r6, #0]
 8016fa2:	4621      	mov	r1, r4
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	f000 fbdb 	bl	8017760 <_sbrk_r>
 8016faa:	1c43      	adds	r3, r0, #1
 8016fac:	d103      	bne.n	8016fb6 <sbrk_aligned+0x26>
 8016fae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	bd70      	pop	{r4, r5, r6, pc}
 8016fb6:	1cc4      	adds	r4, r0, #3
 8016fb8:	f024 0403 	bic.w	r4, r4, #3
 8016fbc:	42a0      	cmp	r0, r4
 8016fbe:	d0f8      	beq.n	8016fb2 <sbrk_aligned+0x22>
 8016fc0:	1a21      	subs	r1, r4, r0
 8016fc2:	4628      	mov	r0, r5
 8016fc4:	f000 fbcc 	bl	8017760 <_sbrk_r>
 8016fc8:	3001      	adds	r0, #1
 8016fca:	d1f2      	bne.n	8016fb2 <sbrk_aligned+0x22>
 8016fcc:	e7ef      	b.n	8016fae <sbrk_aligned+0x1e>
 8016fce:	bf00      	nop
 8016fd0:	2000deb8 	.word	0x2000deb8

08016fd4 <_malloc_r>:
 8016fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fd8:	1ccd      	adds	r5, r1, #3
 8016fda:	f025 0503 	bic.w	r5, r5, #3
 8016fde:	3508      	adds	r5, #8
 8016fe0:	2d0c      	cmp	r5, #12
 8016fe2:	bf38      	it	cc
 8016fe4:	250c      	movcc	r5, #12
 8016fe6:	2d00      	cmp	r5, #0
 8016fe8:	4606      	mov	r6, r0
 8016fea:	db01      	blt.n	8016ff0 <_malloc_r+0x1c>
 8016fec:	42a9      	cmp	r1, r5
 8016fee:	d904      	bls.n	8016ffa <_malloc_r+0x26>
 8016ff0:	230c      	movs	r3, #12
 8016ff2:	6033      	str	r3, [r6, #0]
 8016ff4:	2000      	movs	r0, #0
 8016ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80170d0 <_malloc_r+0xfc>
 8016ffe:	f000 f869 	bl	80170d4 <__malloc_lock>
 8017002:	f8d8 3000 	ldr.w	r3, [r8]
 8017006:	461c      	mov	r4, r3
 8017008:	bb44      	cbnz	r4, 801705c <_malloc_r+0x88>
 801700a:	4629      	mov	r1, r5
 801700c:	4630      	mov	r0, r6
 801700e:	f7ff ffbf 	bl	8016f90 <sbrk_aligned>
 8017012:	1c43      	adds	r3, r0, #1
 8017014:	4604      	mov	r4, r0
 8017016:	d158      	bne.n	80170ca <_malloc_r+0xf6>
 8017018:	f8d8 4000 	ldr.w	r4, [r8]
 801701c:	4627      	mov	r7, r4
 801701e:	2f00      	cmp	r7, #0
 8017020:	d143      	bne.n	80170aa <_malloc_r+0xd6>
 8017022:	2c00      	cmp	r4, #0
 8017024:	d04b      	beq.n	80170be <_malloc_r+0xea>
 8017026:	6823      	ldr	r3, [r4, #0]
 8017028:	4639      	mov	r1, r7
 801702a:	4630      	mov	r0, r6
 801702c:	eb04 0903 	add.w	r9, r4, r3
 8017030:	f000 fb96 	bl	8017760 <_sbrk_r>
 8017034:	4581      	cmp	r9, r0
 8017036:	d142      	bne.n	80170be <_malloc_r+0xea>
 8017038:	6821      	ldr	r1, [r4, #0]
 801703a:	1a6d      	subs	r5, r5, r1
 801703c:	4629      	mov	r1, r5
 801703e:	4630      	mov	r0, r6
 8017040:	f7ff ffa6 	bl	8016f90 <sbrk_aligned>
 8017044:	3001      	adds	r0, #1
 8017046:	d03a      	beq.n	80170be <_malloc_r+0xea>
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	442b      	add	r3, r5
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	f8d8 3000 	ldr.w	r3, [r8]
 8017052:	685a      	ldr	r2, [r3, #4]
 8017054:	bb62      	cbnz	r2, 80170b0 <_malloc_r+0xdc>
 8017056:	f8c8 7000 	str.w	r7, [r8]
 801705a:	e00f      	b.n	801707c <_malloc_r+0xa8>
 801705c:	6822      	ldr	r2, [r4, #0]
 801705e:	1b52      	subs	r2, r2, r5
 8017060:	d420      	bmi.n	80170a4 <_malloc_r+0xd0>
 8017062:	2a0b      	cmp	r2, #11
 8017064:	d917      	bls.n	8017096 <_malloc_r+0xc2>
 8017066:	1961      	adds	r1, r4, r5
 8017068:	42a3      	cmp	r3, r4
 801706a:	6025      	str	r5, [r4, #0]
 801706c:	bf18      	it	ne
 801706e:	6059      	strne	r1, [r3, #4]
 8017070:	6863      	ldr	r3, [r4, #4]
 8017072:	bf08      	it	eq
 8017074:	f8c8 1000 	streq.w	r1, [r8]
 8017078:	5162      	str	r2, [r4, r5]
 801707a:	604b      	str	r3, [r1, #4]
 801707c:	4630      	mov	r0, r6
 801707e:	f000 f82f 	bl	80170e0 <__malloc_unlock>
 8017082:	f104 000b 	add.w	r0, r4, #11
 8017086:	1d23      	adds	r3, r4, #4
 8017088:	f020 0007 	bic.w	r0, r0, #7
 801708c:	1ac2      	subs	r2, r0, r3
 801708e:	bf1c      	itt	ne
 8017090:	1a1b      	subne	r3, r3, r0
 8017092:	50a3      	strne	r3, [r4, r2]
 8017094:	e7af      	b.n	8016ff6 <_malloc_r+0x22>
 8017096:	6862      	ldr	r2, [r4, #4]
 8017098:	42a3      	cmp	r3, r4
 801709a:	bf0c      	ite	eq
 801709c:	f8c8 2000 	streq.w	r2, [r8]
 80170a0:	605a      	strne	r2, [r3, #4]
 80170a2:	e7eb      	b.n	801707c <_malloc_r+0xa8>
 80170a4:	4623      	mov	r3, r4
 80170a6:	6864      	ldr	r4, [r4, #4]
 80170a8:	e7ae      	b.n	8017008 <_malloc_r+0x34>
 80170aa:	463c      	mov	r4, r7
 80170ac:	687f      	ldr	r7, [r7, #4]
 80170ae:	e7b6      	b.n	801701e <_malloc_r+0x4a>
 80170b0:	461a      	mov	r2, r3
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	42a3      	cmp	r3, r4
 80170b6:	d1fb      	bne.n	80170b0 <_malloc_r+0xdc>
 80170b8:	2300      	movs	r3, #0
 80170ba:	6053      	str	r3, [r2, #4]
 80170bc:	e7de      	b.n	801707c <_malloc_r+0xa8>
 80170be:	230c      	movs	r3, #12
 80170c0:	6033      	str	r3, [r6, #0]
 80170c2:	4630      	mov	r0, r6
 80170c4:	f000 f80c 	bl	80170e0 <__malloc_unlock>
 80170c8:	e794      	b.n	8016ff4 <_malloc_r+0x20>
 80170ca:	6005      	str	r5, [r0, #0]
 80170cc:	e7d6      	b.n	801707c <_malloc_r+0xa8>
 80170ce:	bf00      	nop
 80170d0:	2000debc 	.word	0x2000debc

080170d4 <__malloc_lock>:
 80170d4:	4801      	ldr	r0, [pc, #4]	@ (80170dc <__malloc_lock+0x8>)
 80170d6:	f000 bb90 	b.w	80177fa <__retarget_lock_acquire_recursive>
 80170da:	bf00      	nop
 80170dc:	2000e001 	.word	0x2000e001

080170e0 <__malloc_unlock>:
 80170e0:	4801      	ldr	r0, [pc, #4]	@ (80170e8 <__malloc_unlock+0x8>)
 80170e2:	f000 bb8b 	b.w	80177fc <__retarget_lock_release_recursive>
 80170e6:	bf00      	nop
 80170e8:	2000e001 	.word	0x2000e001

080170ec <srand>:
 80170ec:	b538      	push	{r3, r4, r5, lr}
 80170ee:	4b10      	ldr	r3, [pc, #64]	@ (8017130 <srand+0x44>)
 80170f0:	681d      	ldr	r5, [r3, #0]
 80170f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80170f4:	4604      	mov	r4, r0
 80170f6:	b9b3      	cbnz	r3, 8017126 <srand+0x3a>
 80170f8:	2018      	movs	r0, #24
 80170fa:	f7ff ff39 	bl	8016f70 <malloc>
 80170fe:	4602      	mov	r2, r0
 8017100:	6328      	str	r0, [r5, #48]	@ 0x30
 8017102:	b920      	cbnz	r0, 801710e <srand+0x22>
 8017104:	4b0b      	ldr	r3, [pc, #44]	@ (8017134 <srand+0x48>)
 8017106:	480c      	ldr	r0, [pc, #48]	@ (8017138 <srand+0x4c>)
 8017108:	2146      	movs	r1, #70	@ 0x46
 801710a:	f000 fb8f 	bl	801782c <__assert_func>
 801710e:	490b      	ldr	r1, [pc, #44]	@ (801713c <srand+0x50>)
 8017110:	4b0b      	ldr	r3, [pc, #44]	@ (8017140 <srand+0x54>)
 8017112:	e9c0 1300 	strd	r1, r3, [r0]
 8017116:	4b0b      	ldr	r3, [pc, #44]	@ (8017144 <srand+0x58>)
 8017118:	6083      	str	r3, [r0, #8]
 801711a:	230b      	movs	r3, #11
 801711c:	8183      	strh	r3, [r0, #12]
 801711e:	2100      	movs	r1, #0
 8017120:	2001      	movs	r0, #1
 8017122:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017126:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017128:	2200      	movs	r2, #0
 801712a:	611c      	str	r4, [r3, #16]
 801712c:	615a      	str	r2, [r3, #20]
 801712e:	bd38      	pop	{r3, r4, r5, pc}
 8017130:	20000270 	.word	0x20000270
 8017134:	080192a4 	.word	0x080192a4
 8017138:	080192bb 	.word	0x080192bb
 801713c:	abcd330e 	.word	0xabcd330e
 8017140:	e66d1234 	.word	0xe66d1234
 8017144:	0005deec 	.word	0x0005deec

08017148 <rand>:
 8017148:	4b16      	ldr	r3, [pc, #88]	@ (80171a4 <rand+0x5c>)
 801714a:	b510      	push	{r4, lr}
 801714c:	681c      	ldr	r4, [r3, #0]
 801714e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017150:	b9b3      	cbnz	r3, 8017180 <rand+0x38>
 8017152:	2018      	movs	r0, #24
 8017154:	f7ff ff0c 	bl	8016f70 <malloc>
 8017158:	4602      	mov	r2, r0
 801715a:	6320      	str	r0, [r4, #48]	@ 0x30
 801715c:	b920      	cbnz	r0, 8017168 <rand+0x20>
 801715e:	4b12      	ldr	r3, [pc, #72]	@ (80171a8 <rand+0x60>)
 8017160:	4812      	ldr	r0, [pc, #72]	@ (80171ac <rand+0x64>)
 8017162:	2152      	movs	r1, #82	@ 0x52
 8017164:	f000 fb62 	bl	801782c <__assert_func>
 8017168:	4911      	ldr	r1, [pc, #68]	@ (80171b0 <rand+0x68>)
 801716a:	4b12      	ldr	r3, [pc, #72]	@ (80171b4 <rand+0x6c>)
 801716c:	e9c0 1300 	strd	r1, r3, [r0]
 8017170:	4b11      	ldr	r3, [pc, #68]	@ (80171b8 <rand+0x70>)
 8017172:	6083      	str	r3, [r0, #8]
 8017174:	230b      	movs	r3, #11
 8017176:	8183      	strh	r3, [r0, #12]
 8017178:	2100      	movs	r1, #0
 801717a:	2001      	movs	r0, #1
 801717c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017180:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017182:	480e      	ldr	r0, [pc, #56]	@ (80171bc <rand+0x74>)
 8017184:	690b      	ldr	r3, [r1, #16]
 8017186:	694c      	ldr	r4, [r1, #20]
 8017188:	4a0d      	ldr	r2, [pc, #52]	@ (80171c0 <rand+0x78>)
 801718a:	4358      	muls	r0, r3
 801718c:	fb02 0004 	mla	r0, r2, r4, r0
 8017190:	fba3 3202 	umull	r3, r2, r3, r2
 8017194:	3301      	adds	r3, #1
 8017196:	eb40 0002 	adc.w	r0, r0, r2
 801719a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801719e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80171a2:	bd10      	pop	{r4, pc}
 80171a4:	20000270 	.word	0x20000270
 80171a8:	080192a4 	.word	0x080192a4
 80171ac:	080192bb 	.word	0x080192bb
 80171b0:	abcd330e 	.word	0xabcd330e
 80171b4:	e66d1234 	.word	0xe66d1234
 80171b8:	0005deec 	.word	0x0005deec
 80171bc:	5851f42d 	.word	0x5851f42d
 80171c0:	4c957f2d 	.word	0x4c957f2d

080171c4 <realloc>:
 80171c4:	4b02      	ldr	r3, [pc, #8]	@ (80171d0 <realloc+0xc>)
 80171c6:	460a      	mov	r2, r1
 80171c8:	4601      	mov	r1, r0
 80171ca:	6818      	ldr	r0, [r3, #0]
 80171cc:	f000 b802 	b.w	80171d4 <_realloc_r>
 80171d0:	20000270 	.word	0x20000270

080171d4 <_realloc_r>:
 80171d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171d8:	4680      	mov	r8, r0
 80171da:	4615      	mov	r5, r2
 80171dc:	460c      	mov	r4, r1
 80171de:	b921      	cbnz	r1, 80171ea <_realloc_r+0x16>
 80171e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171e4:	4611      	mov	r1, r2
 80171e6:	f7ff bef5 	b.w	8016fd4 <_malloc_r>
 80171ea:	b92a      	cbnz	r2, 80171f8 <_realloc_r+0x24>
 80171ec:	f000 fb48 	bl	8017880 <_free_r>
 80171f0:	2400      	movs	r4, #0
 80171f2:	4620      	mov	r0, r4
 80171f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f8:	f000 fb8c 	bl	8017914 <_malloc_usable_size_r>
 80171fc:	4285      	cmp	r5, r0
 80171fe:	4606      	mov	r6, r0
 8017200:	d802      	bhi.n	8017208 <_realloc_r+0x34>
 8017202:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017206:	d8f4      	bhi.n	80171f2 <_realloc_r+0x1e>
 8017208:	4629      	mov	r1, r5
 801720a:	4640      	mov	r0, r8
 801720c:	f7ff fee2 	bl	8016fd4 <_malloc_r>
 8017210:	4607      	mov	r7, r0
 8017212:	2800      	cmp	r0, #0
 8017214:	d0ec      	beq.n	80171f0 <_realloc_r+0x1c>
 8017216:	42b5      	cmp	r5, r6
 8017218:	462a      	mov	r2, r5
 801721a:	4621      	mov	r1, r4
 801721c:	bf28      	it	cs
 801721e:	4632      	movcs	r2, r6
 8017220:	f000 faf5 	bl	801780e <memcpy>
 8017224:	4621      	mov	r1, r4
 8017226:	4640      	mov	r0, r8
 8017228:	f000 fb2a 	bl	8017880 <_free_r>
 801722c:	463c      	mov	r4, r7
 801722e:	e7e0      	b.n	80171f2 <_realloc_r+0x1e>

08017230 <_strtoul_l.constprop.0>:
 8017230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017234:	4e34      	ldr	r6, [pc, #208]	@ (8017308 <_strtoul_l.constprop.0+0xd8>)
 8017236:	4686      	mov	lr, r0
 8017238:	460d      	mov	r5, r1
 801723a:	4628      	mov	r0, r5
 801723c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017240:	5d37      	ldrb	r7, [r6, r4]
 8017242:	f017 0708 	ands.w	r7, r7, #8
 8017246:	d1f8      	bne.n	801723a <_strtoul_l.constprop.0+0xa>
 8017248:	2c2d      	cmp	r4, #45	@ 0x2d
 801724a:	d12f      	bne.n	80172ac <_strtoul_l.constprop.0+0x7c>
 801724c:	782c      	ldrb	r4, [r5, #0]
 801724e:	2701      	movs	r7, #1
 8017250:	1c85      	adds	r5, r0, #2
 8017252:	f033 0010 	bics.w	r0, r3, #16
 8017256:	d109      	bne.n	801726c <_strtoul_l.constprop.0+0x3c>
 8017258:	2c30      	cmp	r4, #48	@ 0x30
 801725a:	d12c      	bne.n	80172b6 <_strtoul_l.constprop.0+0x86>
 801725c:	7828      	ldrb	r0, [r5, #0]
 801725e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017262:	2858      	cmp	r0, #88	@ 0x58
 8017264:	d127      	bne.n	80172b6 <_strtoul_l.constprop.0+0x86>
 8017266:	786c      	ldrb	r4, [r5, #1]
 8017268:	2310      	movs	r3, #16
 801726a:	3502      	adds	r5, #2
 801726c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017270:	2600      	movs	r6, #0
 8017272:	fbb8 f8f3 	udiv	r8, r8, r3
 8017276:	fb03 f908 	mul.w	r9, r3, r8
 801727a:	ea6f 0909 	mvn.w	r9, r9
 801727e:	4630      	mov	r0, r6
 8017280:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017284:	f1bc 0f09 	cmp.w	ip, #9
 8017288:	d81c      	bhi.n	80172c4 <_strtoul_l.constprop.0+0x94>
 801728a:	4664      	mov	r4, ip
 801728c:	42a3      	cmp	r3, r4
 801728e:	dd2a      	ble.n	80172e6 <_strtoul_l.constprop.0+0xb6>
 8017290:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017294:	d007      	beq.n	80172a6 <_strtoul_l.constprop.0+0x76>
 8017296:	4580      	cmp	r8, r0
 8017298:	d322      	bcc.n	80172e0 <_strtoul_l.constprop.0+0xb0>
 801729a:	d101      	bne.n	80172a0 <_strtoul_l.constprop.0+0x70>
 801729c:	45a1      	cmp	r9, r4
 801729e:	db1f      	blt.n	80172e0 <_strtoul_l.constprop.0+0xb0>
 80172a0:	fb00 4003 	mla	r0, r0, r3, r4
 80172a4:	2601      	movs	r6, #1
 80172a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172aa:	e7e9      	b.n	8017280 <_strtoul_l.constprop.0+0x50>
 80172ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80172ae:	bf04      	itt	eq
 80172b0:	782c      	ldrbeq	r4, [r5, #0]
 80172b2:	1c85      	addeq	r5, r0, #2
 80172b4:	e7cd      	b.n	8017252 <_strtoul_l.constprop.0+0x22>
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1d8      	bne.n	801726c <_strtoul_l.constprop.0+0x3c>
 80172ba:	2c30      	cmp	r4, #48	@ 0x30
 80172bc:	bf0c      	ite	eq
 80172be:	2308      	moveq	r3, #8
 80172c0:	230a      	movne	r3, #10
 80172c2:	e7d3      	b.n	801726c <_strtoul_l.constprop.0+0x3c>
 80172c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80172c8:	f1bc 0f19 	cmp.w	ip, #25
 80172cc:	d801      	bhi.n	80172d2 <_strtoul_l.constprop.0+0xa2>
 80172ce:	3c37      	subs	r4, #55	@ 0x37
 80172d0:	e7dc      	b.n	801728c <_strtoul_l.constprop.0+0x5c>
 80172d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80172d6:	f1bc 0f19 	cmp.w	ip, #25
 80172da:	d804      	bhi.n	80172e6 <_strtoul_l.constprop.0+0xb6>
 80172dc:	3c57      	subs	r4, #87	@ 0x57
 80172de:	e7d5      	b.n	801728c <_strtoul_l.constprop.0+0x5c>
 80172e0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80172e4:	e7df      	b.n	80172a6 <_strtoul_l.constprop.0+0x76>
 80172e6:	1c73      	adds	r3, r6, #1
 80172e8:	d106      	bne.n	80172f8 <_strtoul_l.constprop.0+0xc8>
 80172ea:	2322      	movs	r3, #34	@ 0x22
 80172ec:	f8ce 3000 	str.w	r3, [lr]
 80172f0:	4630      	mov	r0, r6
 80172f2:	b932      	cbnz	r2, 8017302 <_strtoul_l.constprop.0+0xd2>
 80172f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172f8:	b107      	cbz	r7, 80172fc <_strtoul_l.constprop.0+0xcc>
 80172fa:	4240      	negs	r0, r0
 80172fc:	2a00      	cmp	r2, #0
 80172fe:	d0f9      	beq.n	80172f4 <_strtoul_l.constprop.0+0xc4>
 8017300:	b106      	cbz	r6, 8017304 <_strtoul_l.constprop.0+0xd4>
 8017302:	1e69      	subs	r1, r5, #1
 8017304:	6011      	str	r1, [r2, #0]
 8017306:	e7f5      	b.n	80172f4 <_strtoul_l.constprop.0+0xc4>
 8017308:	08019314 	.word	0x08019314

0801730c <strtoul>:
 801730c:	4613      	mov	r3, r2
 801730e:	460a      	mov	r2, r1
 8017310:	4601      	mov	r1, r0
 8017312:	4802      	ldr	r0, [pc, #8]	@ (801731c <strtoul+0x10>)
 8017314:	6800      	ldr	r0, [r0, #0]
 8017316:	f7ff bf8b 	b.w	8017230 <_strtoul_l.constprop.0>
 801731a:	bf00      	nop
 801731c:	20000270 	.word	0x20000270

08017320 <std>:
 8017320:	2300      	movs	r3, #0
 8017322:	b510      	push	{r4, lr}
 8017324:	4604      	mov	r4, r0
 8017326:	e9c0 3300 	strd	r3, r3, [r0]
 801732a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801732e:	6083      	str	r3, [r0, #8]
 8017330:	8181      	strh	r1, [r0, #12]
 8017332:	6643      	str	r3, [r0, #100]	@ 0x64
 8017334:	81c2      	strh	r2, [r0, #14]
 8017336:	6183      	str	r3, [r0, #24]
 8017338:	4619      	mov	r1, r3
 801733a:	2208      	movs	r2, #8
 801733c:	305c      	adds	r0, #92	@ 0x5c
 801733e:	f000 f99d 	bl	801767c <memset>
 8017342:	4b0d      	ldr	r3, [pc, #52]	@ (8017378 <std+0x58>)
 8017344:	6263      	str	r3, [r4, #36]	@ 0x24
 8017346:	4b0d      	ldr	r3, [pc, #52]	@ (801737c <std+0x5c>)
 8017348:	62a3      	str	r3, [r4, #40]	@ 0x28
 801734a:	4b0d      	ldr	r3, [pc, #52]	@ (8017380 <std+0x60>)
 801734c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801734e:	4b0d      	ldr	r3, [pc, #52]	@ (8017384 <std+0x64>)
 8017350:	6323      	str	r3, [r4, #48]	@ 0x30
 8017352:	4b0d      	ldr	r3, [pc, #52]	@ (8017388 <std+0x68>)
 8017354:	6224      	str	r4, [r4, #32]
 8017356:	429c      	cmp	r4, r3
 8017358:	d006      	beq.n	8017368 <std+0x48>
 801735a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801735e:	4294      	cmp	r4, r2
 8017360:	d002      	beq.n	8017368 <std+0x48>
 8017362:	33d0      	adds	r3, #208	@ 0xd0
 8017364:	429c      	cmp	r4, r3
 8017366:	d105      	bne.n	8017374 <std+0x54>
 8017368:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017370:	f000 ba42 	b.w	80177f8 <__retarget_lock_init_recursive>
 8017374:	bd10      	pop	{r4, pc}
 8017376:	bf00      	nop
 8017378:	08017531 	.word	0x08017531
 801737c:	08017553 	.word	0x08017553
 8017380:	0801758b 	.word	0x0801758b
 8017384:	080175af 	.word	0x080175af
 8017388:	2000dec0 	.word	0x2000dec0

0801738c <stdio_exit_handler>:
 801738c:	4a02      	ldr	r2, [pc, #8]	@ (8017398 <stdio_exit_handler+0xc>)
 801738e:	4903      	ldr	r1, [pc, #12]	@ (801739c <stdio_exit_handler+0x10>)
 8017390:	4803      	ldr	r0, [pc, #12]	@ (80173a0 <stdio_exit_handler+0x14>)
 8017392:	f000 b869 	b.w	8017468 <_fwalk_sglue>
 8017396:	bf00      	nop
 8017398:	20000264 	.word	0x20000264
 801739c:	0801827d 	.word	0x0801827d
 80173a0:	20000274 	.word	0x20000274

080173a4 <cleanup_stdio>:
 80173a4:	6841      	ldr	r1, [r0, #4]
 80173a6:	4b0c      	ldr	r3, [pc, #48]	@ (80173d8 <cleanup_stdio+0x34>)
 80173a8:	4299      	cmp	r1, r3
 80173aa:	b510      	push	{r4, lr}
 80173ac:	4604      	mov	r4, r0
 80173ae:	d001      	beq.n	80173b4 <cleanup_stdio+0x10>
 80173b0:	f000 ff64 	bl	801827c <_fflush_r>
 80173b4:	68a1      	ldr	r1, [r4, #8]
 80173b6:	4b09      	ldr	r3, [pc, #36]	@ (80173dc <cleanup_stdio+0x38>)
 80173b8:	4299      	cmp	r1, r3
 80173ba:	d002      	beq.n	80173c2 <cleanup_stdio+0x1e>
 80173bc:	4620      	mov	r0, r4
 80173be:	f000 ff5d 	bl	801827c <_fflush_r>
 80173c2:	68e1      	ldr	r1, [r4, #12]
 80173c4:	4b06      	ldr	r3, [pc, #24]	@ (80173e0 <cleanup_stdio+0x3c>)
 80173c6:	4299      	cmp	r1, r3
 80173c8:	d004      	beq.n	80173d4 <cleanup_stdio+0x30>
 80173ca:	4620      	mov	r0, r4
 80173cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173d0:	f000 bf54 	b.w	801827c <_fflush_r>
 80173d4:	bd10      	pop	{r4, pc}
 80173d6:	bf00      	nop
 80173d8:	2000dec0 	.word	0x2000dec0
 80173dc:	2000df28 	.word	0x2000df28
 80173e0:	2000df90 	.word	0x2000df90

080173e4 <global_stdio_init.part.0>:
 80173e4:	b510      	push	{r4, lr}
 80173e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017414 <global_stdio_init.part.0+0x30>)
 80173e8:	4c0b      	ldr	r4, [pc, #44]	@ (8017418 <global_stdio_init.part.0+0x34>)
 80173ea:	4a0c      	ldr	r2, [pc, #48]	@ (801741c <global_stdio_init.part.0+0x38>)
 80173ec:	601a      	str	r2, [r3, #0]
 80173ee:	4620      	mov	r0, r4
 80173f0:	2200      	movs	r2, #0
 80173f2:	2104      	movs	r1, #4
 80173f4:	f7ff ff94 	bl	8017320 <std>
 80173f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80173fc:	2201      	movs	r2, #1
 80173fe:	2109      	movs	r1, #9
 8017400:	f7ff ff8e 	bl	8017320 <std>
 8017404:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017408:	2202      	movs	r2, #2
 801740a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801740e:	2112      	movs	r1, #18
 8017410:	f7ff bf86 	b.w	8017320 <std>
 8017414:	2000dff8 	.word	0x2000dff8
 8017418:	2000dec0 	.word	0x2000dec0
 801741c:	0801738d 	.word	0x0801738d

08017420 <__sfp_lock_acquire>:
 8017420:	4801      	ldr	r0, [pc, #4]	@ (8017428 <__sfp_lock_acquire+0x8>)
 8017422:	f000 b9ea 	b.w	80177fa <__retarget_lock_acquire_recursive>
 8017426:	bf00      	nop
 8017428:	2000e002 	.word	0x2000e002

0801742c <__sfp_lock_release>:
 801742c:	4801      	ldr	r0, [pc, #4]	@ (8017434 <__sfp_lock_release+0x8>)
 801742e:	f000 b9e5 	b.w	80177fc <__retarget_lock_release_recursive>
 8017432:	bf00      	nop
 8017434:	2000e002 	.word	0x2000e002

08017438 <__sinit>:
 8017438:	b510      	push	{r4, lr}
 801743a:	4604      	mov	r4, r0
 801743c:	f7ff fff0 	bl	8017420 <__sfp_lock_acquire>
 8017440:	6a23      	ldr	r3, [r4, #32]
 8017442:	b11b      	cbz	r3, 801744c <__sinit+0x14>
 8017444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017448:	f7ff bff0 	b.w	801742c <__sfp_lock_release>
 801744c:	4b04      	ldr	r3, [pc, #16]	@ (8017460 <__sinit+0x28>)
 801744e:	6223      	str	r3, [r4, #32]
 8017450:	4b04      	ldr	r3, [pc, #16]	@ (8017464 <__sinit+0x2c>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d1f5      	bne.n	8017444 <__sinit+0xc>
 8017458:	f7ff ffc4 	bl	80173e4 <global_stdio_init.part.0>
 801745c:	e7f2      	b.n	8017444 <__sinit+0xc>
 801745e:	bf00      	nop
 8017460:	080173a5 	.word	0x080173a5
 8017464:	2000dff8 	.word	0x2000dff8

08017468 <_fwalk_sglue>:
 8017468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801746c:	4607      	mov	r7, r0
 801746e:	4688      	mov	r8, r1
 8017470:	4614      	mov	r4, r2
 8017472:	2600      	movs	r6, #0
 8017474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017478:	f1b9 0901 	subs.w	r9, r9, #1
 801747c:	d505      	bpl.n	801748a <_fwalk_sglue+0x22>
 801747e:	6824      	ldr	r4, [r4, #0]
 8017480:	2c00      	cmp	r4, #0
 8017482:	d1f7      	bne.n	8017474 <_fwalk_sglue+0xc>
 8017484:	4630      	mov	r0, r6
 8017486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801748a:	89ab      	ldrh	r3, [r5, #12]
 801748c:	2b01      	cmp	r3, #1
 801748e:	d907      	bls.n	80174a0 <_fwalk_sglue+0x38>
 8017490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017494:	3301      	adds	r3, #1
 8017496:	d003      	beq.n	80174a0 <_fwalk_sglue+0x38>
 8017498:	4629      	mov	r1, r5
 801749a:	4638      	mov	r0, r7
 801749c:	47c0      	blx	r8
 801749e:	4306      	orrs	r6, r0
 80174a0:	3568      	adds	r5, #104	@ 0x68
 80174a2:	e7e9      	b.n	8017478 <_fwalk_sglue+0x10>

080174a4 <iprintf>:
 80174a4:	b40f      	push	{r0, r1, r2, r3}
 80174a6:	b507      	push	{r0, r1, r2, lr}
 80174a8:	4906      	ldr	r1, [pc, #24]	@ (80174c4 <iprintf+0x20>)
 80174aa:	ab04      	add	r3, sp, #16
 80174ac:	6808      	ldr	r0, [r1, #0]
 80174ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80174b2:	6881      	ldr	r1, [r0, #8]
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	f000 fbb7 	bl	8017c28 <_vfiprintf_r>
 80174ba:	b003      	add	sp, #12
 80174bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80174c0:	b004      	add	sp, #16
 80174c2:	4770      	bx	lr
 80174c4:	20000270 	.word	0x20000270

080174c8 <sniprintf>:
 80174c8:	b40c      	push	{r2, r3}
 80174ca:	b530      	push	{r4, r5, lr}
 80174cc:	4b17      	ldr	r3, [pc, #92]	@ (801752c <sniprintf+0x64>)
 80174ce:	1e0c      	subs	r4, r1, #0
 80174d0:	681d      	ldr	r5, [r3, #0]
 80174d2:	b09d      	sub	sp, #116	@ 0x74
 80174d4:	da08      	bge.n	80174e8 <sniprintf+0x20>
 80174d6:	238b      	movs	r3, #139	@ 0x8b
 80174d8:	602b      	str	r3, [r5, #0]
 80174da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174de:	b01d      	add	sp, #116	@ 0x74
 80174e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174e4:	b002      	add	sp, #8
 80174e6:	4770      	bx	lr
 80174e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80174ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80174f0:	bf14      	ite	ne
 80174f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80174f6:	4623      	moveq	r3, r4
 80174f8:	9304      	str	r3, [sp, #16]
 80174fa:	9307      	str	r3, [sp, #28]
 80174fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017500:	9002      	str	r0, [sp, #8]
 8017502:	9006      	str	r0, [sp, #24]
 8017504:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017508:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801750a:	ab21      	add	r3, sp, #132	@ 0x84
 801750c:	a902      	add	r1, sp, #8
 801750e:	4628      	mov	r0, r5
 8017510:	9301      	str	r3, [sp, #4]
 8017512:	f000 fa63 	bl	80179dc <_svfiprintf_r>
 8017516:	1c43      	adds	r3, r0, #1
 8017518:	bfbc      	itt	lt
 801751a:	238b      	movlt	r3, #139	@ 0x8b
 801751c:	602b      	strlt	r3, [r5, #0]
 801751e:	2c00      	cmp	r4, #0
 8017520:	d0dd      	beq.n	80174de <sniprintf+0x16>
 8017522:	9b02      	ldr	r3, [sp, #8]
 8017524:	2200      	movs	r2, #0
 8017526:	701a      	strb	r2, [r3, #0]
 8017528:	e7d9      	b.n	80174de <sniprintf+0x16>
 801752a:	bf00      	nop
 801752c:	20000270 	.word	0x20000270

08017530 <__sread>:
 8017530:	b510      	push	{r4, lr}
 8017532:	460c      	mov	r4, r1
 8017534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017538:	f000 f900 	bl	801773c <_read_r>
 801753c:	2800      	cmp	r0, #0
 801753e:	bfab      	itete	ge
 8017540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017542:	89a3      	ldrhlt	r3, [r4, #12]
 8017544:	181b      	addge	r3, r3, r0
 8017546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801754a:	bfac      	ite	ge
 801754c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801754e:	81a3      	strhlt	r3, [r4, #12]
 8017550:	bd10      	pop	{r4, pc}

08017552 <__swrite>:
 8017552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017556:	461f      	mov	r7, r3
 8017558:	898b      	ldrh	r3, [r1, #12]
 801755a:	05db      	lsls	r3, r3, #23
 801755c:	4605      	mov	r5, r0
 801755e:	460c      	mov	r4, r1
 8017560:	4616      	mov	r6, r2
 8017562:	d505      	bpl.n	8017570 <__swrite+0x1e>
 8017564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017568:	2302      	movs	r3, #2
 801756a:	2200      	movs	r2, #0
 801756c:	f000 f8d4 	bl	8017718 <_lseek_r>
 8017570:	89a3      	ldrh	r3, [r4, #12]
 8017572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801757a:	81a3      	strh	r3, [r4, #12]
 801757c:	4632      	mov	r2, r6
 801757e:	463b      	mov	r3, r7
 8017580:	4628      	mov	r0, r5
 8017582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017586:	f000 b8fb 	b.w	8017780 <_write_r>

0801758a <__sseek>:
 801758a:	b510      	push	{r4, lr}
 801758c:	460c      	mov	r4, r1
 801758e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017592:	f000 f8c1 	bl	8017718 <_lseek_r>
 8017596:	1c43      	adds	r3, r0, #1
 8017598:	89a3      	ldrh	r3, [r4, #12]
 801759a:	bf15      	itete	ne
 801759c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801759e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80175a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80175a6:	81a3      	strheq	r3, [r4, #12]
 80175a8:	bf18      	it	ne
 80175aa:	81a3      	strhne	r3, [r4, #12]
 80175ac:	bd10      	pop	{r4, pc}

080175ae <__sclose>:
 80175ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175b2:	f000 b8a1 	b.w	80176f8 <_close_r>

080175b6 <_vsniprintf_r>:
 80175b6:	b530      	push	{r4, r5, lr}
 80175b8:	4614      	mov	r4, r2
 80175ba:	2c00      	cmp	r4, #0
 80175bc:	b09b      	sub	sp, #108	@ 0x6c
 80175be:	4605      	mov	r5, r0
 80175c0:	461a      	mov	r2, r3
 80175c2:	da05      	bge.n	80175d0 <_vsniprintf_r+0x1a>
 80175c4:	238b      	movs	r3, #139	@ 0x8b
 80175c6:	6003      	str	r3, [r0, #0]
 80175c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175cc:	b01b      	add	sp, #108	@ 0x6c
 80175ce:	bd30      	pop	{r4, r5, pc}
 80175d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80175d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80175d8:	bf14      	ite	ne
 80175da:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80175de:	4623      	moveq	r3, r4
 80175e0:	9302      	str	r3, [sp, #8]
 80175e2:	9305      	str	r3, [sp, #20]
 80175e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80175e8:	9100      	str	r1, [sp, #0]
 80175ea:	9104      	str	r1, [sp, #16]
 80175ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80175f0:	4669      	mov	r1, sp
 80175f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80175f4:	f000 f9f2 	bl	80179dc <_svfiprintf_r>
 80175f8:	1c43      	adds	r3, r0, #1
 80175fa:	bfbc      	itt	lt
 80175fc:	238b      	movlt	r3, #139	@ 0x8b
 80175fe:	602b      	strlt	r3, [r5, #0]
 8017600:	2c00      	cmp	r4, #0
 8017602:	d0e3      	beq.n	80175cc <_vsniprintf_r+0x16>
 8017604:	9b00      	ldr	r3, [sp, #0]
 8017606:	2200      	movs	r2, #0
 8017608:	701a      	strb	r2, [r3, #0]
 801760a:	e7df      	b.n	80175cc <_vsniprintf_r+0x16>

0801760c <vsniprintf>:
 801760c:	b507      	push	{r0, r1, r2, lr}
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	4613      	mov	r3, r2
 8017612:	460a      	mov	r2, r1
 8017614:	4601      	mov	r1, r0
 8017616:	4803      	ldr	r0, [pc, #12]	@ (8017624 <vsniprintf+0x18>)
 8017618:	6800      	ldr	r0, [r0, #0]
 801761a:	f7ff ffcc 	bl	80175b6 <_vsniprintf_r>
 801761e:	b003      	add	sp, #12
 8017620:	f85d fb04 	ldr.w	pc, [sp], #4
 8017624:	20000270 	.word	0x20000270

08017628 <memcmp>:
 8017628:	b510      	push	{r4, lr}
 801762a:	3901      	subs	r1, #1
 801762c:	4402      	add	r2, r0
 801762e:	4290      	cmp	r0, r2
 8017630:	d101      	bne.n	8017636 <memcmp+0xe>
 8017632:	2000      	movs	r0, #0
 8017634:	e005      	b.n	8017642 <memcmp+0x1a>
 8017636:	7803      	ldrb	r3, [r0, #0]
 8017638:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801763c:	42a3      	cmp	r3, r4
 801763e:	d001      	beq.n	8017644 <memcmp+0x1c>
 8017640:	1b18      	subs	r0, r3, r4
 8017642:	bd10      	pop	{r4, pc}
 8017644:	3001      	adds	r0, #1
 8017646:	e7f2      	b.n	801762e <memcmp+0x6>

08017648 <memmove>:
 8017648:	4288      	cmp	r0, r1
 801764a:	b510      	push	{r4, lr}
 801764c:	eb01 0402 	add.w	r4, r1, r2
 8017650:	d902      	bls.n	8017658 <memmove+0x10>
 8017652:	4284      	cmp	r4, r0
 8017654:	4623      	mov	r3, r4
 8017656:	d807      	bhi.n	8017668 <memmove+0x20>
 8017658:	1e43      	subs	r3, r0, #1
 801765a:	42a1      	cmp	r1, r4
 801765c:	d008      	beq.n	8017670 <memmove+0x28>
 801765e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017666:	e7f8      	b.n	801765a <memmove+0x12>
 8017668:	4402      	add	r2, r0
 801766a:	4601      	mov	r1, r0
 801766c:	428a      	cmp	r2, r1
 801766e:	d100      	bne.n	8017672 <memmove+0x2a>
 8017670:	bd10      	pop	{r4, pc}
 8017672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801767a:	e7f7      	b.n	801766c <memmove+0x24>

0801767c <memset>:
 801767c:	4402      	add	r2, r0
 801767e:	4603      	mov	r3, r0
 8017680:	4293      	cmp	r3, r2
 8017682:	d100      	bne.n	8017686 <memset+0xa>
 8017684:	4770      	bx	lr
 8017686:	f803 1b01 	strb.w	r1, [r3], #1
 801768a:	e7f9      	b.n	8017680 <memset+0x4>

0801768c <strchr>:
 801768c:	b2c9      	uxtb	r1, r1
 801768e:	4603      	mov	r3, r0
 8017690:	4618      	mov	r0, r3
 8017692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017696:	b112      	cbz	r2, 801769e <strchr+0x12>
 8017698:	428a      	cmp	r2, r1
 801769a:	d1f9      	bne.n	8017690 <strchr+0x4>
 801769c:	4770      	bx	lr
 801769e:	2900      	cmp	r1, #0
 80176a0:	bf18      	it	ne
 80176a2:	2000      	movne	r0, #0
 80176a4:	4770      	bx	lr

080176a6 <strncmp>:
 80176a6:	b510      	push	{r4, lr}
 80176a8:	b16a      	cbz	r2, 80176c6 <strncmp+0x20>
 80176aa:	3901      	subs	r1, #1
 80176ac:	1884      	adds	r4, r0, r2
 80176ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d103      	bne.n	80176c2 <strncmp+0x1c>
 80176ba:	42a0      	cmp	r0, r4
 80176bc:	d001      	beq.n	80176c2 <strncmp+0x1c>
 80176be:	2a00      	cmp	r2, #0
 80176c0:	d1f5      	bne.n	80176ae <strncmp+0x8>
 80176c2:	1ad0      	subs	r0, r2, r3
 80176c4:	bd10      	pop	{r4, pc}
 80176c6:	4610      	mov	r0, r2
 80176c8:	e7fc      	b.n	80176c4 <strncmp+0x1e>

080176ca <strstr>:
 80176ca:	780a      	ldrb	r2, [r1, #0]
 80176cc:	b570      	push	{r4, r5, r6, lr}
 80176ce:	b96a      	cbnz	r2, 80176ec <strstr+0x22>
 80176d0:	bd70      	pop	{r4, r5, r6, pc}
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d109      	bne.n	80176ea <strstr+0x20>
 80176d6:	460c      	mov	r4, r1
 80176d8:	4605      	mov	r5, r0
 80176da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d0f6      	beq.n	80176d0 <strstr+0x6>
 80176e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80176e6:	429e      	cmp	r6, r3
 80176e8:	d0f7      	beq.n	80176da <strstr+0x10>
 80176ea:	3001      	adds	r0, #1
 80176ec:	7803      	ldrb	r3, [r0, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d1ef      	bne.n	80176d2 <strstr+0x8>
 80176f2:	4618      	mov	r0, r3
 80176f4:	e7ec      	b.n	80176d0 <strstr+0x6>
	...

080176f8 <_close_r>:
 80176f8:	b538      	push	{r3, r4, r5, lr}
 80176fa:	4d06      	ldr	r5, [pc, #24]	@ (8017714 <_close_r+0x1c>)
 80176fc:	2300      	movs	r3, #0
 80176fe:	4604      	mov	r4, r0
 8017700:	4608      	mov	r0, r1
 8017702:	602b      	str	r3, [r5, #0]
 8017704:	f7eb f904 	bl	8002910 <_close>
 8017708:	1c43      	adds	r3, r0, #1
 801770a:	d102      	bne.n	8017712 <_close_r+0x1a>
 801770c:	682b      	ldr	r3, [r5, #0]
 801770e:	b103      	cbz	r3, 8017712 <_close_r+0x1a>
 8017710:	6023      	str	r3, [r4, #0]
 8017712:	bd38      	pop	{r3, r4, r5, pc}
 8017714:	2000dffc 	.word	0x2000dffc

08017718 <_lseek_r>:
 8017718:	b538      	push	{r3, r4, r5, lr}
 801771a:	4d07      	ldr	r5, [pc, #28]	@ (8017738 <_lseek_r+0x20>)
 801771c:	4604      	mov	r4, r0
 801771e:	4608      	mov	r0, r1
 8017720:	4611      	mov	r1, r2
 8017722:	2200      	movs	r2, #0
 8017724:	602a      	str	r2, [r5, #0]
 8017726:	461a      	mov	r2, r3
 8017728:	f7eb f919 	bl	800295e <_lseek>
 801772c:	1c43      	adds	r3, r0, #1
 801772e:	d102      	bne.n	8017736 <_lseek_r+0x1e>
 8017730:	682b      	ldr	r3, [r5, #0]
 8017732:	b103      	cbz	r3, 8017736 <_lseek_r+0x1e>
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	bd38      	pop	{r3, r4, r5, pc}
 8017738:	2000dffc 	.word	0x2000dffc

0801773c <_read_r>:
 801773c:	b538      	push	{r3, r4, r5, lr}
 801773e:	4d07      	ldr	r5, [pc, #28]	@ (801775c <_read_r+0x20>)
 8017740:	4604      	mov	r4, r0
 8017742:	4608      	mov	r0, r1
 8017744:	4611      	mov	r1, r2
 8017746:	2200      	movs	r2, #0
 8017748:	602a      	str	r2, [r5, #0]
 801774a:	461a      	mov	r2, r3
 801774c:	f7eb f8a7 	bl	800289e <_read>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	d102      	bne.n	801775a <_read_r+0x1e>
 8017754:	682b      	ldr	r3, [r5, #0]
 8017756:	b103      	cbz	r3, 801775a <_read_r+0x1e>
 8017758:	6023      	str	r3, [r4, #0]
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	2000dffc 	.word	0x2000dffc

08017760 <_sbrk_r>:
 8017760:	b538      	push	{r3, r4, r5, lr}
 8017762:	4d06      	ldr	r5, [pc, #24]	@ (801777c <_sbrk_r+0x1c>)
 8017764:	2300      	movs	r3, #0
 8017766:	4604      	mov	r4, r0
 8017768:	4608      	mov	r0, r1
 801776a:	602b      	str	r3, [r5, #0]
 801776c:	f7eb f904 	bl	8002978 <_sbrk>
 8017770:	1c43      	adds	r3, r0, #1
 8017772:	d102      	bne.n	801777a <_sbrk_r+0x1a>
 8017774:	682b      	ldr	r3, [r5, #0]
 8017776:	b103      	cbz	r3, 801777a <_sbrk_r+0x1a>
 8017778:	6023      	str	r3, [r4, #0]
 801777a:	bd38      	pop	{r3, r4, r5, pc}
 801777c:	2000dffc 	.word	0x2000dffc

08017780 <_write_r>:
 8017780:	b538      	push	{r3, r4, r5, lr}
 8017782:	4d07      	ldr	r5, [pc, #28]	@ (80177a0 <_write_r+0x20>)
 8017784:	4604      	mov	r4, r0
 8017786:	4608      	mov	r0, r1
 8017788:	4611      	mov	r1, r2
 801778a:	2200      	movs	r2, #0
 801778c:	602a      	str	r2, [r5, #0]
 801778e:	461a      	mov	r2, r3
 8017790:	f7eb f8a2 	bl	80028d8 <_write>
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d102      	bne.n	801779e <_write_r+0x1e>
 8017798:	682b      	ldr	r3, [r5, #0]
 801779a:	b103      	cbz	r3, 801779e <_write_r+0x1e>
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	bd38      	pop	{r3, r4, r5, pc}
 80177a0:	2000dffc 	.word	0x2000dffc

080177a4 <__errno>:
 80177a4:	4b01      	ldr	r3, [pc, #4]	@ (80177ac <__errno+0x8>)
 80177a6:	6818      	ldr	r0, [r3, #0]
 80177a8:	4770      	bx	lr
 80177aa:	bf00      	nop
 80177ac:	20000270 	.word	0x20000270

080177b0 <__libc_init_array>:
 80177b0:	b570      	push	{r4, r5, r6, lr}
 80177b2:	4d0d      	ldr	r5, [pc, #52]	@ (80177e8 <__libc_init_array+0x38>)
 80177b4:	4c0d      	ldr	r4, [pc, #52]	@ (80177ec <__libc_init_array+0x3c>)
 80177b6:	1b64      	subs	r4, r4, r5
 80177b8:	10a4      	asrs	r4, r4, #2
 80177ba:	2600      	movs	r6, #0
 80177bc:	42a6      	cmp	r6, r4
 80177be:	d109      	bne.n	80177d4 <__libc_init_array+0x24>
 80177c0:	4d0b      	ldr	r5, [pc, #44]	@ (80177f0 <__libc_init_array+0x40>)
 80177c2:	4c0c      	ldr	r4, [pc, #48]	@ (80177f4 <__libc_init_array+0x44>)
 80177c4:	f000 fef8 	bl	80185b8 <_init>
 80177c8:	1b64      	subs	r4, r4, r5
 80177ca:	10a4      	asrs	r4, r4, #2
 80177cc:	2600      	movs	r6, #0
 80177ce:	42a6      	cmp	r6, r4
 80177d0:	d105      	bne.n	80177de <__libc_init_array+0x2e>
 80177d2:	bd70      	pop	{r4, r5, r6, pc}
 80177d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80177d8:	4798      	blx	r3
 80177da:	3601      	adds	r6, #1
 80177dc:	e7ee      	b.n	80177bc <__libc_init_array+0xc>
 80177de:	f855 3b04 	ldr.w	r3, [r5], #4
 80177e2:	4798      	blx	r3
 80177e4:	3601      	adds	r6, #1
 80177e6:	e7f2      	b.n	80177ce <__libc_init_array+0x1e>
 80177e8:	0801948c 	.word	0x0801948c
 80177ec:	0801948c 	.word	0x0801948c
 80177f0:	0801948c 	.word	0x0801948c
 80177f4:	08019498 	.word	0x08019498

080177f8 <__retarget_lock_init_recursive>:
 80177f8:	4770      	bx	lr

080177fa <__retarget_lock_acquire_recursive>:
 80177fa:	4770      	bx	lr

080177fc <__retarget_lock_release_recursive>:
 80177fc:	4770      	bx	lr

080177fe <strcpy>:
 80177fe:	4603      	mov	r3, r0
 8017800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017804:	f803 2b01 	strb.w	r2, [r3], #1
 8017808:	2a00      	cmp	r2, #0
 801780a:	d1f9      	bne.n	8017800 <strcpy+0x2>
 801780c:	4770      	bx	lr

0801780e <memcpy>:
 801780e:	440a      	add	r2, r1
 8017810:	4291      	cmp	r1, r2
 8017812:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017816:	d100      	bne.n	801781a <memcpy+0xc>
 8017818:	4770      	bx	lr
 801781a:	b510      	push	{r4, lr}
 801781c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017824:	4291      	cmp	r1, r2
 8017826:	d1f9      	bne.n	801781c <memcpy+0xe>
 8017828:	bd10      	pop	{r4, pc}
	...

0801782c <__assert_func>:
 801782c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801782e:	4614      	mov	r4, r2
 8017830:	461a      	mov	r2, r3
 8017832:	4b09      	ldr	r3, [pc, #36]	@ (8017858 <__assert_func+0x2c>)
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	4605      	mov	r5, r0
 8017838:	68d8      	ldr	r0, [r3, #12]
 801783a:	b954      	cbnz	r4, 8017852 <__assert_func+0x26>
 801783c:	4b07      	ldr	r3, [pc, #28]	@ (801785c <__assert_func+0x30>)
 801783e:	461c      	mov	r4, r3
 8017840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017844:	9100      	str	r1, [sp, #0]
 8017846:	462b      	mov	r3, r5
 8017848:	4905      	ldr	r1, [pc, #20]	@ (8017860 <__assert_func+0x34>)
 801784a:	f000 fd3f 	bl	80182cc <fiprintf>
 801784e:	f000 fde3 	bl	8018418 <abort>
 8017852:	4b04      	ldr	r3, [pc, #16]	@ (8017864 <__assert_func+0x38>)
 8017854:	e7f4      	b.n	8017840 <__assert_func+0x14>
 8017856:	bf00      	nop
 8017858:	20000270 	.word	0x20000270
 801785c:	0801944f 	.word	0x0801944f
 8017860:	08019421 	.word	0x08019421
 8017864:	08019414 	.word	0x08019414

08017868 <__env_lock>:
 8017868:	4801      	ldr	r0, [pc, #4]	@ (8017870 <__env_lock+0x8>)
 801786a:	f7ff bfc6 	b.w	80177fa <__retarget_lock_acquire_recursive>
 801786e:	bf00      	nop
 8017870:	2000e000 	.word	0x2000e000

08017874 <__env_unlock>:
 8017874:	4801      	ldr	r0, [pc, #4]	@ (801787c <__env_unlock+0x8>)
 8017876:	f7ff bfc1 	b.w	80177fc <__retarget_lock_release_recursive>
 801787a:	bf00      	nop
 801787c:	2000e000 	.word	0x2000e000

08017880 <_free_r>:
 8017880:	b538      	push	{r3, r4, r5, lr}
 8017882:	4605      	mov	r5, r0
 8017884:	2900      	cmp	r1, #0
 8017886:	d041      	beq.n	801790c <_free_r+0x8c>
 8017888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801788c:	1f0c      	subs	r4, r1, #4
 801788e:	2b00      	cmp	r3, #0
 8017890:	bfb8      	it	lt
 8017892:	18e4      	addlt	r4, r4, r3
 8017894:	f7ff fc1e 	bl	80170d4 <__malloc_lock>
 8017898:	4a1d      	ldr	r2, [pc, #116]	@ (8017910 <_free_r+0x90>)
 801789a:	6813      	ldr	r3, [r2, #0]
 801789c:	b933      	cbnz	r3, 80178ac <_free_r+0x2c>
 801789e:	6063      	str	r3, [r4, #4]
 80178a0:	6014      	str	r4, [r2, #0]
 80178a2:	4628      	mov	r0, r5
 80178a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178a8:	f7ff bc1a 	b.w	80170e0 <__malloc_unlock>
 80178ac:	42a3      	cmp	r3, r4
 80178ae:	d908      	bls.n	80178c2 <_free_r+0x42>
 80178b0:	6820      	ldr	r0, [r4, #0]
 80178b2:	1821      	adds	r1, r4, r0
 80178b4:	428b      	cmp	r3, r1
 80178b6:	bf01      	itttt	eq
 80178b8:	6819      	ldreq	r1, [r3, #0]
 80178ba:	685b      	ldreq	r3, [r3, #4]
 80178bc:	1809      	addeq	r1, r1, r0
 80178be:	6021      	streq	r1, [r4, #0]
 80178c0:	e7ed      	b.n	801789e <_free_r+0x1e>
 80178c2:	461a      	mov	r2, r3
 80178c4:	685b      	ldr	r3, [r3, #4]
 80178c6:	b10b      	cbz	r3, 80178cc <_free_r+0x4c>
 80178c8:	42a3      	cmp	r3, r4
 80178ca:	d9fa      	bls.n	80178c2 <_free_r+0x42>
 80178cc:	6811      	ldr	r1, [r2, #0]
 80178ce:	1850      	adds	r0, r2, r1
 80178d0:	42a0      	cmp	r0, r4
 80178d2:	d10b      	bne.n	80178ec <_free_r+0x6c>
 80178d4:	6820      	ldr	r0, [r4, #0]
 80178d6:	4401      	add	r1, r0
 80178d8:	1850      	adds	r0, r2, r1
 80178da:	4283      	cmp	r3, r0
 80178dc:	6011      	str	r1, [r2, #0]
 80178de:	d1e0      	bne.n	80178a2 <_free_r+0x22>
 80178e0:	6818      	ldr	r0, [r3, #0]
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	6053      	str	r3, [r2, #4]
 80178e6:	4408      	add	r0, r1
 80178e8:	6010      	str	r0, [r2, #0]
 80178ea:	e7da      	b.n	80178a2 <_free_r+0x22>
 80178ec:	d902      	bls.n	80178f4 <_free_r+0x74>
 80178ee:	230c      	movs	r3, #12
 80178f0:	602b      	str	r3, [r5, #0]
 80178f2:	e7d6      	b.n	80178a2 <_free_r+0x22>
 80178f4:	6820      	ldr	r0, [r4, #0]
 80178f6:	1821      	adds	r1, r4, r0
 80178f8:	428b      	cmp	r3, r1
 80178fa:	bf04      	itt	eq
 80178fc:	6819      	ldreq	r1, [r3, #0]
 80178fe:	685b      	ldreq	r3, [r3, #4]
 8017900:	6063      	str	r3, [r4, #4]
 8017902:	bf04      	itt	eq
 8017904:	1809      	addeq	r1, r1, r0
 8017906:	6021      	streq	r1, [r4, #0]
 8017908:	6054      	str	r4, [r2, #4]
 801790a:	e7ca      	b.n	80178a2 <_free_r+0x22>
 801790c:	bd38      	pop	{r3, r4, r5, pc}
 801790e:	bf00      	nop
 8017910:	2000debc 	.word	0x2000debc

08017914 <_malloc_usable_size_r>:
 8017914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017918:	1f18      	subs	r0, r3, #4
 801791a:	2b00      	cmp	r3, #0
 801791c:	bfbc      	itt	lt
 801791e:	580b      	ldrlt	r3, [r1, r0]
 8017920:	18c0      	addlt	r0, r0, r3
 8017922:	4770      	bx	lr

08017924 <__ssputs_r>:
 8017924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017928:	688e      	ldr	r6, [r1, #8]
 801792a:	461f      	mov	r7, r3
 801792c:	42be      	cmp	r6, r7
 801792e:	680b      	ldr	r3, [r1, #0]
 8017930:	4682      	mov	sl, r0
 8017932:	460c      	mov	r4, r1
 8017934:	4690      	mov	r8, r2
 8017936:	d82d      	bhi.n	8017994 <__ssputs_r+0x70>
 8017938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801793c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017940:	d026      	beq.n	8017990 <__ssputs_r+0x6c>
 8017942:	6965      	ldr	r5, [r4, #20]
 8017944:	6909      	ldr	r1, [r1, #16]
 8017946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801794a:	eba3 0901 	sub.w	r9, r3, r1
 801794e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017952:	1c7b      	adds	r3, r7, #1
 8017954:	444b      	add	r3, r9
 8017956:	106d      	asrs	r5, r5, #1
 8017958:	429d      	cmp	r5, r3
 801795a:	bf38      	it	cc
 801795c:	461d      	movcc	r5, r3
 801795e:	0553      	lsls	r3, r2, #21
 8017960:	d527      	bpl.n	80179b2 <__ssputs_r+0x8e>
 8017962:	4629      	mov	r1, r5
 8017964:	f7ff fb36 	bl	8016fd4 <_malloc_r>
 8017968:	4606      	mov	r6, r0
 801796a:	b360      	cbz	r0, 80179c6 <__ssputs_r+0xa2>
 801796c:	6921      	ldr	r1, [r4, #16]
 801796e:	464a      	mov	r2, r9
 8017970:	f7ff ff4d 	bl	801780e <memcpy>
 8017974:	89a3      	ldrh	r3, [r4, #12]
 8017976:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801797a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801797e:	81a3      	strh	r3, [r4, #12]
 8017980:	6126      	str	r6, [r4, #16]
 8017982:	6165      	str	r5, [r4, #20]
 8017984:	444e      	add	r6, r9
 8017986:	eba5 0509 	sub.w	r5, r5, r9
 801798a:	6026      	str	r6, [r4, #0]
 801798c:	60a5      	str	r5, [r4, #8]
 801798e:	463e      	mov	r6, r7
 8017990:	42be      	cmp	r6, r7
 8017992:	d900      	bls.n	8017996 <__ssputs_r+0x72>
 8017994:	463e      	mov	r6, r7
 8017996:	6820      	ldr	r0, [r4, #0]
 8017998:	4632      	mov	r2, r6
 801799a:	4641      	mov	r1, r8
 801799c:	f7ff fe54 	bl	8017648 <memmove>
 80179a0:	68a3      	ldr	r3, [r4, #8]
 80179a2:	1b9b      	subs	r3, r3, r6
 80179a4:	60a3      	str	r3, [r4, #8]
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	4433      	add	r3, r6
 80179aa:	6023      	str	r3, [r4, #0]
 80179ac:	2000      	movs	r0, #0
 80179ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b2:	462a      	mov	r2, r5
 80179b4:	f7ff fc0e 	bl	80171d4 <_realloc_r>
 80179b8:	4606      	mov	r6, r0
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d1e0      	bne.n	8017980 <__ssputs_r+0x5c>
 80179be:	6921      	ldr	r1, [r4, #16]
 80179c0:	4650      	mov	r0, sl
 80179c2:	f7ff ff5d 	bl	8017880 <_free_r>
 80179c6:	230c      	movs	r3, #12
 80179c8:	f8ca 3000 	str.w	r3, [sl]
 80179cc:	89a3      	ldrh	r3, [r4, #12]
 80179ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179d2:	81a3      	strh	r3, [r4, #12]
 80179d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179d8:	e7e9      	b.n	80179ae <__ssputs_r+0x8a>
	...

080179dc <_svfiprintf_r>:
 80179dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e0:	4698      	mov	r8, r3
 80179e2:	898b      	ldrh	r3, [r1, #12]
 80179e4:	061b      	lsls	r3, r3, #24
 80179e6:	b09d      	sub	sp, #116	@ 0x74
 80179e8:	4607      	mov	r7, r0
 80179ea:	460d      	mov	r5, r1
 80179ec:	4614      	mov	r4, r2
 80179ee:	d510      	bpl.n	8017a12 <_svfiprintf_r+0x36>
 80179f0:	690b      	ldr	r3, [r1, #16]
 80179f2:	b973      	cbnz	r3, 8017a12 <_svfiprintf_r+0x36>
 80179f4:	2140      	movs	r1, #64	@ 0x40
 80179f6:	f7ff faed 	bl	8016fd4 <_malloc_r>
 80179fa:	6028      	str	r0, [r5, #0]
 80179fc:	6128      	str	r0, [r5, #16]
 80179fe:	b930      	cbnz	r0, 8017a0e <_svfiprintf_r+0x32>
 8017a00:	230c      	movs	r3, #12
 8017a02:	603b      	str	r3, [r7, #0]
 8017a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a08:	b01d      	add	sp, #116	@ 0x74
 8017a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0e:	2340      	movs	r3, #64	@ 0x40
 8017a10:	616b      	str	r3, [r5, #20]
 8017a12:	2300      	movs	r3, #0
 8017a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a16:	2320      	movs	r3, #32
 8017a18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a20:	2330      	movs	r3, #48	@ 0x30
 8017a22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017bc0 <_svfiprintf_r+0x1e4>
 8017a26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017a2a:	f04f 0901 	mov.w	r9, #1
 8017a2e:	4623      	mov	r3, r4
 8017a30:	469a      	mov	sl, r3
 8017a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a36:	b10a      	cbz	r2, 8017a3c <_svfiprintf_r+0x60>
 8017a38:	2a25      	cmp	r2, #37	@ 0x25
 8017a3a:	d1f9      	bne.n	8017a30 <_svfiprintf_r+0x54>
 8017a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8017a40:	d00b      	beq.n	8017a5a <_svfiprintf_r+0x7e>
 8017a42:	465b      	mov	r3, fp
 8017a44:	4622      	mov	r2, r4
 8017a46:	4629      	mov	r1, r5
 8017a48:	4638      	mov	r0, r7
 8017a4a:	f7ff ff6b 	bl	8017924 <__ssputs_r>
 8017a4e:	3001      	adds	r0, #1
 8017a50:	f000 80a7 	beq.w	8017ba2 <_svfiprintf_r+0x1c6>
 8017a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a56:	445a      	add	r2, fp
 8017a58:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	f000 809f 	beq.w	8017ba2 <_svfiprintf_r+0x1c6>
 8017a64:	2300      	movs	r3, #0
 8017a66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a6e:	f10a 0a01 	add.w	sl, sl, #1
 8017a72:	9304      	str	r3, [sp, #16]
 8017a74:	9307      	str	r3, [sp, #28]
 8017a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a7c:	4654      	mov	r4, sl
 8017a7e:	2205      	movs	r2, #5
 8017a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a84:	484e      	ldr	r0, [pc, #312]	@ (8017bc0 <_svfiprintf_r+0x1e4>)
 8017a86:	f7e8 fbdb 	bl	8000240 <memchr>
 8017a8a:	9a04      	ldr	r2, [sp, #16]
 8017a8c:	b9d8      	cbnz	r0, 8017ac6 <_svfiprintf_r+0xea>
 8017a8e:	06d0      	lsls	r0, r2, #27
 8017a90:	bf44      	itt	mi
 8017a92:	2320      	movmi	r3, #32
 8017a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a98:	0711      	lsls	r1, r2, #28
 8017a9a:	bf44      	itt	mi
 8017a9c:	232b      	movmi	r3, #43	@ 0x2b
 8017a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8017aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8017aa8:	d015      	beq.n	8017ad6 <_svfiprintf_r+0xfa>
 8017aaa:	9a07      	ldr	r2, [sp, #28]
 8017aac:	4654      	mov	r4, sl
 8017aae:	2000      	movs	r0, #0
 8017ab0:	f04f 0c0a 	mov.w	ip, #10
 8017ab4:	4621      	mov	r1, r4
 8017ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017aba:	3b30      	subs	r3, #48	@ 0x30
 8017abc:	2b09      	cmp	r3, #9
 8017abe:	d94b      	bls.n	8017b58 <_svfiprintf_r+0x17c>
 8017ac0:	b1b0      	cbz	r0, 8017af0 <_svfiprintf_r+0x114>
 8017ac2:	9207      	str	r2, [sp, #28]
 8017ac4:	e014      	b.n	8017af0 <_svfiprintf_r+0x114>
 8017ac6:	eba0 0308 	sub.w	r3, r0, r8
 8017aca:	fa09 f303 	lsl.w	r3, r9, r3
 8017ace:	4313      	orrs	r3, r2
 8017ad0:	9304      	str	r3, [sp, #16]
 8017ad2:	46a2      	mov	sl, r4
 8017ad4:	e7d2      	b.n	8017a7c <_svfiprintf_r+0xa0>
 8017ad6:	9b03      	ldr	r3, [sp, #12]
 8017ad8:	1d19      	adds	r1, r3, #4
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	9103      	str	r1, [sp, #12]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	bfbb      	ittet	lt
 8017ae2:	425b      	neglt	r3, r3
 8017ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8017ae8:	9307      	strge	r3, [sp, #28]
 8017aea:	9307      	strlt	r3, [sp, #28]
 8017aec:	bfb8      	it	lt
 8017aee:	9204      	strlt	r2, [sp, #16]
 8017af0:	7823      	ldrb	r3, [r4, #0]
 8017af2:	2b2e      	cmp	r3, #46	@ 0x2e
 8017af4:	d10a      	bne.n	8017b0c <_svfiprintf_r+0x130>
 8017af6:	7863      	ldrb	r3, [r4, #1]
 8017af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017afa:	d132      	bne.n	8017b62 <_svfiprintf_r+0x186>
 8017afc:	9b03      	ldr	r3, [sp, #12]
 8017afe:	1d1a      	adds	r2, r3, #4
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	9203      	str	r2, [sp, #12]
 8017b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b08:	3402      	adds	r4, #2
 8017b0a:	9305      	str	r3, [sp, #20]
 8017b0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017bd0 <_svfiprintf_r+0x1f4>
 8017b10:	7821      	ldrb	r1, [r4, #0]
 8017b12:	2203      	movs	r2, #3
 8017b14:	4650      	mov	r0, sl
 8017b16:	f7e8 fb93 	bl	8000240 <memchr>
 8017b1a:	b138      	cbz	r0, 8017b2c <_svfiprintf_r+0x150>
 8017b1c:	9b04      	ldr	r3, [sp, #16]
 8017b1e:	eba0 000a 	sub.w	r0, r0, sl
 8017b22:	2240      	movs	r2, #64	@ 0x40
 8017b24:	4082      	lsls	r2, r0
 8017b26:	4313      	orrs	r3, r2
 8017b28:	3401      	adds	r4, #1
 8017b2a:	9304      	str	r3, [sp, #16]
 8017b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b30:	4824      	ldr	r0, [pc, #144]	@ (8017bc4 <_svfiprintf_r+0x1e8>)
 8017b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017b36:	2206      	movs	r2, #6
 8017b38:	f7e8 fb82 	bl	8000240 <memchr>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d036      	beq.n	8017bae <_svfiprintf_r+0x1d2>
 8017b40:	4b21      	ldr	r3, [pc, #132]	@ (8017bc8 <_svfiprintf_r+0x1ec>)
 8017b42:	bb1b      	cbnz	r3, 8017b8c <_svfiprintf_r+0x1b0>
 8017b44:	9b03      	ldr	r3, [sp, #12]
 8017b46:	3307      	adds	r3, #7
 8017b48:	f023 0307 	bic.w	r3, r3, #7
 8017b4c:	3308      	adds	r3, #8
 8017b4e:	9303      	str	r3, [sp, #12]
 8017b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b52:	4433      	add	r3, r6
 8017b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b56:	e76a      	b.n	8017a2e <_svfiprintf_r+0x52>
 8017b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b5c:	460c      	mov	r4, r1
 8017b5e:	2001      	movs	r0, #1
 8017b60:	e7a8      	b.n	8017ab4 <_svfiprintf_r+0xd8>
 8017b62:	2300      	movs	r3, #0
 8017b64:	3401      	adds	r4, #1
 8017b66:	9305      	str	r3, [sp, #20]
 8017b68:	4619      	mov	r1, r3
 8017b6a:	f04f 0c0a 	mov.w	ip, #10
 8017b6e:	4620      	mov	r0, r4
 8017b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b74:	3a30      	subs	r2, #48	@ 0x30
 8017b76:	2a09      	cmp	r2, #9
 8017b78:	d903      	bls.n	8017b82 <_svfiprintf_r+0x1a6>
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d0c6      	beq.n	8017b0c <_svfiprintf_r+0x130>
 8017b7e:	9105      	str	r1, [sp, #20]
 8017b80:	e7c4      	b.n	8017b0c <_svfiprintf_r+0x130>
 8017b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b86:	4604      	mov	r4, r0
 8017b88:	2301      	movs	r3, #1
 8017b8a:	e7f0      	b.n	8017b6e <_svfiprintf_r+0x192>
 8017b8c:	ab03      	add	r3, sp, #12
 8017b8e:	9300      	str	r3, [sp, #0]
 8017b90:	462a      	mov	r2, r5
 8017b92:	4b0e      	ldr	r3, [pc, #56]	@ (8017bcc <_svfiprintf_r+0x1f0>)
 8017b94:	a904      	add	r1, sp, #16
 8017b96:	4638      	mov	r0, r7
 8017b98:	f3af 8000 	nop.w
 8017b9c:	1c42      	adds	r2, r0, #1
 8017b9e:	4606      	mov	r6, r0
 8017ba0:	d1d6      	bne.n	8017b50 <_svfiprintf_r+0x174>
 8017ba2:	89ab      	ldrh	r3, [r5, #12]
 8017ba4:	065b      	lsls	r3, r3, #25
 8017ba6:	f53f af2d 	bmi.w	8017a04 <_svfiprintf_r+0x28>
 8017baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017bac:	e72c      	b.n	8017a08 <_svfiprintf_r+0x2c>
 8017bae:	ab03      	add	r3, sp, #12
 8017bb0:	9300      	str	r3, [sp, #0]
 8017bb2:	462a      	mov	r2, r5
 8017bb4:	4b05      	ldr	r3, [pc, #20]	@ (8017bcc <_svfiprintf_r+0x1f0>)
 8017bb6:	a904      	add	r1, sp, #16
 8017bb8:	4638      	mov	r0, r7
 8017bba:	f000 f9bb 	bl	8017f34 <_printf_i>
 8017bbe:	e7ed      	b.n	8017b9c <_svfiprintf_r+0x1c0>
 8017bc0:	08019450 	.word	0x08019450
 8017bc4:	0801945a 	.word	0x0801945a
 8017bc8:	00000000 	.word	0x00000000
 8017bcc:	08017925 	.word	0x08017925
 8017bd0:	08019456 	.word	0x08019456

08017bd4 <__sfputc_r>:
 8017bd4:	6893      	ldr	r3, [r2, #8]
 8017bd6:	3b01      	subs	r3, #1
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	b410      	push	{r4}
 8017bdc:	6093      	str	r3, [r2, #8]
 8017bde:	da08      	bge.n	8017bf2 <__sfputc_r+0x1e>
 8017be0:	6994      	ldr	r4, [r2, #24]
 8017be2:	42a3      	cmp	r3, r4
 8017be4:	db01      	blt.n	8017bea <__sfputc_r+0x16>
 8017be6:	290a      	cmp	r1, #10
 8017be8:	d103      	bne.n	8017bf2 <__sfputc_r+0x1e>
 8017bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bee:	f000 bb7f 	b.w	80182f0 <__swbuf_r>
 8017bf2:	6813      	ldr	r3, [r2, #0]
 8017bf4:	1c58      	adds	r0, r3, #1
 8017bf6:	6010      	str	r0, [r2, #0]
 8017bf8:	7019      	strb	r1, [r3, #0]
 8017bfa:	4608      	mov	r0, r1
 8017bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c00:	4770      	bx	lr

08017c02 <__sfputs_r>:
 8017c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c04:	4606      	mov	r6, r0
 8017c06:	460f      	mov	r7, r1
 8017c08:	4614      	mov	r4, r2
 8017c0a:	18d5      	adds	r5, r2, r3
 8017c0c:	42ac      	cmp	r4, r5
 8017c0e:	d101      	bne.n	8017c14 <__sfputs_r+0x12>
 8017c10:	2000      	movs	r0, #0
 8017c12:	e007      	b.n	8017c24 <__sfputs_r+0x22>
 8017c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c18:	463a      	mov	r2, r7
 8017c1a:	4630      	mov	r0, r6
 8017c1c:	f7ff ffda 	bl	8017bd4 <__sfputc_r>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d1f3      	bne.n	8017c0c <__sfputs_r+0xa>
 8017c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c28 <_vfiprintf_r>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	460d      	mov	r5, r1
 8017c2e:	b09d      	sub	sp, #116	@ 0x74
 8017c30:	4614      	mov	r4, r2
 8017c32:	4698      	mov	r8, r3
 8017c34:	4606      	mov	r6, r0
 8017c36:	b118      	cbz	r0, 8017c40 <_vfiprintf_r+0x18>
 8017c38:	6a03      	ldr	r3, [r0, #32]
 8017c3a:	b90b      	cbnz	r3, 8017c40 <_vfiprintf_r+0x18>
 8017c3c:	f7ff fbfc 	bl	8017438 <__sinit>
 8017c40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c42:	07d9      	lsls	r1, r3, #31
 8017c44:	d405      	bmi.n	8017c52 <_vfiprintf_r+0x2a>
 8017c46:	89ab      	ldrh	r3, [r5, #12]
 8017c48:	059a      	lsls	r2, r3, #22
 8017c4a:	d402      	bmi.n	8017c52 <_vfiprintf_r+0x2a>
 8017c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c4e:	f7ff fdd4 	bl	80177fa <__retarget_lock_acquire_recursive>
 8017c52:	89ab      	ldrh	r3, [r5, #12]
 8017c54:	071b      	lsls	r3, r3, #28
 8017c56:	d501      	bpl.n	8017c5c <_vfiprintf_r+0x34>
 8017c58:	692b      	ldr	r3, [r5, #16]
 8017c5a:	b99b      	cbnz	r3, 8017c84 <_vfiprintf_r+0x5c>
 8017c5c:	4629      	mov	r1, r5
 8017c5e:	4630      	mov	r0, r6
 8017c60:	f000 fb84 	bl	801836c <__swsetup_r>
 8017c64:	b170      	cbz	r0, 8017c84 <_vfiprintf_r+0x5c>
 8017c66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c68:	07dc      	lsls	r4, r3, #31
 8017c6a:	d504      	bpl.n	8017c76 <_vfiprintf_r+0x4e>
 8017c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c70:	b01d      	add	sp, #116	@ 0x74
 8017c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c76:	89ab      	ldrh	r3, [r5, #12]
 8017c78:	0598      	lsls	r0, r3, #22
 8017c7a:	d4f7      	bmi.n	8017c6c <_vfiprintf_r+0x44>
 8017c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c7e:	f7ff fdbd 	bl	80177fc <__retarget_lock_release_recursive>
 8017c82:	e7f3      	b.n	8017c6c <_vfiprintf_r+0x44>
 8017c84:	2300      	movs	r3, #0
 8017c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c88:	2320      	movs	r3, #32
 8017c8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c92:	2330      	movs	r3, #48	@ 0x30
 8017c94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017e44 <_vfiprintf_r+0x21c>
 8017c98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017c9c:	f04f 0901 	mov.w	r9, #1
 8017ca0:	4623      	mov	r3, r4
 8017ca2:	469a      	mov	sl, r3
 8017ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ca8:	b10a      	cbz	r2, 8017cae <_vfiprintf_r+0x86>
 8017caa:	2a25      	cmp	r2, #37	@ 0x25
 8017cac:	d1f9      	bne.n	8017ca2 <_vfiprintf_r+0x7a>
 8017cae:	ebba 0b04 	subs.w	fp, sl, r4
 8017cb2:	d00b      	beq.n	8017ccc <_vfiprintf_r+0xa4>
 8017cb4:	465b      	mov	r3, fp
 8017cb6:	4622      	mov	r2, r4
 8017cb8:	4629      	mov	r1, r5
 8017cba:	4630      	mov	r0, r6
 8017cbc:	f7ff ffa1 	bl	8017c02 <__sfputs_r>
 8017cc0:	3001      	adds	r0, #1
 8017cc2:	f000 80a7 	beq.w	8017e14 <_vfiprintf_r+0x1ec>
 8017cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cc8:	445a      	add	r2, fp
 8017cca:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	f000 809f 	beq.w	8017e14 <_vfiprintf_r+0x1ec>
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ce0:	f10a 0a01 	add.w	sl, sl, #1
 8017ce4:	9304      	str	r3, [sp, #16]
 8017ce6:	9307      	str	r3, [sp, #28]
 8017ce8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017cec:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cee:	4654      	mov	r4, sl
 8017cf0:	2205      	movs	r2, #5
 8017cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cf6:	4853      	ldr	r0, [pc, #332]	@ (8017e44 <_vfiprintf_r+0x21c>)
 8017cf8:	f7e8 faa2 	bl	8000240 <memchr>
 8017cfc:	9a04      	ldr	r2, [sp, #16]
 8017cfe:	b9d8      	cbnz	r0, 8017d38 <_vfiprintf_r+0x110>
 8017d00:	06d1      	lsls	r1, r2, #27
 8017d02:	bf44      	itt	mi
 8017d04:	2320      	movmi	r3, #32
 8017d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d0a:	0713      	lsls	r3, r2, #28
 8017d0c:	bf44      	itt	mi
 8017d0e:	232b      	movmi	r3, #43	@ 0x2b
 8017d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d14:	f89a 3000 	ldrb.w	r3, [sl]
 8017d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d1a:	d015      	beq.n	8017d48 <_vfiprintf_r+0x120>
 8017d1c:	9a07      	ldr	r2, [sp, #28]
 8017d1e:	4654      	mov	r4, sl
 8017d20:	2000      	movs	r0, #0
 8017d22:	f04f 0c0a 	mov.w	ip, #10
 8017d26:	4621      	mov	r1, r4
 8017d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d2c:	3b30      	subs	r3, #48	@ 0x30
 8017d2e:	2b09      	cmp	r3, #9
 8017d30:	d94b      	bls.n	8017dca <_vfiprintf_r+0x1a2>
 8017d32:	b1b0      	cbz	r0, 8017d62 <_vfiprintf_r+0x13a>
 8017d34:	9207      	str	r2, [sp, #28]
 8017d36:	e014      	b.n	8017d62 <_vfiprintf_r+0x13a>
 8017d38:	eba0 0308 	sub.w	r3, r0, r8
 8017d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d40:	4313      	orrs	r3, r2
 8017d42:	9304      	str	r3, [sp, #16]
 8017d44:	46a2      	mov	sl, r4
 8017d46:	e7d2      	b.n	8017cee <_vfiprintf_r+0xc6>
 8017d48:	9b03      	ldr	r3, [sp, #12]
 8017d4a:	1d19      	adds	r1, r3, #4
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	9103      	str	r1, [sp, #12]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	bfbb      	ittet	lt
 8017d54:	425b      	neglt	r3, r3
 8017d56:	f042 0202 	orrlt.w	r2, r2, #2
 8017d5a:	9307      	strge	r3, [sp, #28]
 8017d5c:	9307      	strlt	r3, [sp, #28]
 8017d5e:	bfb8      	it	lt
 8017d60:	9204      	strlt	r2, [sp, #16]
 8017d62:	7823      	ldrb	r3, [r4, #0]
 8017d64:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d66:	d10a      	bne.n	8017d7e <_vfiprintf_r+0x156>
 8017d68:	7863      	ldrb	r3, [r4, #1]
 8017d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d6c:	d132      	bne.n	8017dd4 <_vfiprintf_r+0x1ac>
 8017d6e:	9b03      	ldr	r3, [sp, #12]
 8017d70:	1d1a      	adds	r2, r3, #4
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	9203      	str	r2, [sp, #12]
 8017d76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d7a:	3402      	adds	r4, #2
 8017d7c:	9305      	str	r3, [sp, #20]
 8017d7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e54 <_vfiprintf_r+0x22c>
 8017d82:	7821      	ldrb	r1, [r4, #0]
 8017d84:	2203      	movs	r2, #3
 8017d86:	4650      	mov	r0, sl
 8017d88:	f7e8 fa5a 	bl	8000240 <memchr>
 8017d8c:	b138      	cbz	r0, 8017d9e <_vfiprintf_r+0x176>
 8017d8e:	9b04      	ldr	r3, [sp, #16]
 8017d90:	eba0 000a 	sub.w	r0, r0, sl
 8017d94:	2240      	movs	r2, #64	@ 0x40
 8017d96:	4082      	lsls	r2, r0
 8017d98:	4313      	orrs	r3, r2
 8017d9a:	3401      	adds	r4, #1
 8017d9c:	9304      	str	r3, [sp, #16]
 8017d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017da2:	4829      	ldr	r0, [pc, #164]	@ (8017e48 <_vfiprintf_r+0x220>)
 8017da4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017da8:	2206      	movs	r2, #6
 8017daa:	f7e8 fa49 	bl	8000240 <memchr>
 8017dae:	2800      	cmp	r0, #0
 8017db0:	d03f      	beq.n	8017e32 <_vfiprintf_r+0x20a>
 8017db2:	4b26      	ldr	r3, [pc, #152]	@ (8017e4c <_vfiprintf_r+0x224>)
 8017db4:	bb1b      	cbnz	r3, 8017dfe <_vfiprintf_r+0x1d6>
 8017db6:	9b03      	ldr	r3, [sp, #12]
 8017db8:	3307      	adds	r3, #7
 8017dba:	f023 0307 	bic.w	r3, r3, #7
 8017dbe:	3308      	adds	r3, #8
 8017dc0:	9303      	str	r3, [sp, #12]
 8017dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dc4:	443b      	add	r3, r7
 8017dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dc8:	e76a      	b.n	8017ca0 <_vfiprintf_r+0x78>
 8017dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dce:	460c      	mov	r4, r1
 8017dd0:	2001      	movs	r0, #1
 8017dd2:	e7a8      	b.n	8017d26 <_vfiprintf_r+0xfe>
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	3401      	adds	r4, #1
 8017dd8:	9305      	str	r3, [sp, #20]
 8017dda:	4619      	mov	r1, r3
 8017ddc:	f04f 0c0a 	mov.w	ip, #10
 8017de0:	4620      	mov	r0, r4
 8017de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017de6:	3a30      	subs	r2, #48	@ 0x30
 8017de8:	2a09      	cmp	r2, #9
 8017dea:	d903      	bls.n	8017df4 <_vfiprintf_r+0x1cc>
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d0c6      	beq.n	8017d7e <_vfiprintf_r+0x156>
 8017df0:	9105      	str	r1, [sp, #20]
 8017df2:	e7c4      	b.n	8017d7e <_vfiprintf_r+0x156>
 8017df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017df8:	4604      	mov	r4, r0
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	e7f0      	b.n	8017de0 <_vfiprintf_r+0x1b8>
 8017dfe:	ab03      	add	r3, sp, #12
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	462a      	mov	r2, r5
 8017e04:	4b12      	ldr	r3, [pc, #72]	@ (8017e50 <_vfiprintf_r+0x228>)
 8017e06:	a904      	add	r1, sp, #16
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f3af 8000 	nop.w
 8017e0e:	4607      	mov	r7, r0
 8017e10:	1c78      	adds	r0, r7, #1
 8017e12:	d1d6      	bne.n	8017dc2 <_vfiprintf_r+0x19a>
 8017e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e16:	07d9      	lsls	r1, r3, #31
 8017e18:	d405      	bmi.n	8017e26 <_vfiprintf_r+0x1fe>
 8017e1a:	89ab      	ldrh	r3, [r5, #12]
 8017e1c:	059a      	lsls	r2, r3, #22
 8017e1e:	d402      	bmi.n	8017e26 <_vfiprintf_r+0x1fe>
 8017e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e22:	f7ff fceb 	bl	80177fc <__retarget_lock_release_recursive>
 8017e26:	89ab      	ldrh	r3, [r5, #12]
 8017e28:	065b      	lsls	r3, r3, #25
 8017e2a:	f53f af1f 	bmi.w	8017c6c <_vfiprintf_r+0x44>
 8017e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e30:	e71e      	b.n	8017c70 <_vfiprintf_r+0x48>
 8017e32:	ab03      	add	r3, sp, #12
 8017e34:	9300      	str	r3, [sp, #0]
 8017e36:	462a      	mov	r2, r5
 8017e38:	4b05      	ldr	r3, [pc, #20]	@ (8017e50 <_vfiprintf_r+0x228>)
 8017e3a:	a904      	add	r1, sp, #16
 8017e3c:	4630      	mov	r0, r6
 8017e3e:	f000 f879 	bl	8017f34 <_printf_i>
 8017e42:	e7e4      	b.n	8017e0e <_vfiprintf_r+0x1e6>
 8017e44:	08019450 	.word	0x08019450
 8017e48:	0801945a 	.word	0x0801945a
 8017e4c:	00000000 	.word	0x00000000
 8017e50:	08017c03 	.word	0x08017c03
 8017e54:	08019456 	.word	0x08019456

08017e58 <_printf_common>:
 8017e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e5c:	4616      	mov	r6, r2
 8017e5e:	4698      	mov	r8, r3
 8017e60:	688a      	ldr	r2, [r1, #8]
 8017e62:	690b      	ldr	r3, [r1, #16]
 8017e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	bfb8      	it	lt
 8017e6c:	4613      	movlt	r3, r2
 8017e6e:	6033      	str	r3, [r6, #0]
 8017e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017e74:	4607      	mov	r7, r0
 8017e76:	460c      	mov	r4, r1
 8017e78:	b10a      	cbz	r2, 8017e7e <_printf_common+0x26>
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	6033      	str	r3, [r6, #0]
 8017e7e:	6823      	ldr	r3, [r4, #0]
 8017e80:	0699      	lsls	r1, r3, #26
 8017e82:	bf42      	ittt	mi
 8017e84:	6833      	ldrmi	r3, [r6, #0]
 8017e86:	3302      	addmi	r3, #2
 8017e88:	6033      	strmi	r3, [r6, #0]
 8017e8a:	6825      	ldr	r5, [r4, #0]
 8017e8c:	f015 0506 	ands.w	r5, r5, #6
 8017e90:	d106      	bne.n	8017ea0 <_printf_common+0x48>
 8017e92:	f104 0a19 	add.w	sl, r4, #25
 8017e96:	68e3      	ldr	r3, [r4, #12]
 8017e98:	6832      	ldr	r2, [r6, #0]
 8017e9a:	1a9b      	subs	r3, r3, r2
 8017e9c:	42ab      	cmp	r3, r5
 8017e9e:	dc26      	bgt.n	8017eee <_printf_common+0x96>
 8017ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ea4:	6822      	ldr	r2, [r4, #0]
 8017ea6:	3b00      	subs	r3, #0
 8017ea8:	bf18      	it	ne
 8017eaa:	2301      	movne	r3, #1
 8017eac:	0692      	lsls	r2, r2, #26
 8017eae:	d42b      	bmi.n	8017f08 <_printf_common+0xb0>
 8017eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017eb4:	4641      	mov	r1, r8
 8017eb6:	4638      	mov	r0, r7
 8017eb8:	47c8      	blx	r9
 8017eba:	3001      	adds	r0, #1
 8017ebc:	d01e      	beq.n	8017efc <_printf_common+0xa4>
 8017ebe:	6823      	ldr	r3, [r4, #0]
 8017ec0:	6922      	ldr	r2, [r4, #16]
 8017ec2:	f003 0306 	and.w	r3, r3, #6
 8017ec6:	2b04      	cmp	r3, #4
 8017ec8:	bf02      	ittt	eq
 8017eca:	68e5      	ldreq	r5, [r4, #12]
 8017ecc:	6833      	ldreq	r3, [r6, #0]
 8017ece:	1aed      	subeq	r5, r5, r3
 8017ed0:	68a3      	ldr	r3, [r4, #8]
 8017ed2:	bf0c      	ite	eq
 8017ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ed8:	2500      	movne	r5, #0
 8017eda:	4293      	cmp	r3, r2
 8017edc:	bfc4      	itt	gt
 8017ede:	1a9b      	subgt	r3, r3, r2
 8017ee0:	18ed      	addgt	r5, r5, r3
 8017ee2:	2600      	movs	r6, #0
 8017ee4:	341a      	adds	r4, #26
 8017ee6:	42b5      	cmp	r5, r6
 8017ee8:	d11a      	bne.n	8017f20 <_printf_common+0xc8>
 8017eea:	2000      	movs	r0, #0
 8017eec:	e008      	b.n	8017f00 <_printf_common+0xa8>
 8017eee:	2301      	movs	r3, #1
 8017ef0:	4652      	mov	r2, sl
 8017ef2:	4641      	mov	r1, r8
 8017ef4:	4638      	mov	r0, r7
 8017ef6:	47c8      	blx	r9
 8017ef8:	3001      	adds	r0, #1
 8017efa:	d103      	bne.n	8017f04 <_printf_common+0xac>
 8017efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f04:	3501      	adds	r5, #1
 8017f06:	e7c6      	b.n	8017e96 <_printf_common+0x3e>
 8017f08:	18e1      	adds	r1, r4, r3
 8017f0a:	1c5a      	adds	r2, r3, #1
 8017f0c:	2030      	movs	r0, #48	@ 0x30
 8017f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017f12:	4422      	add	r2, r4
 8017f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017f1c:	3302      	adds	r3, #2
 8017f1e:	e7c7      	b.n	8017eb0 <_printf_common+0x58>
 8017f20:	2301      	movs	r3, #1
 8017f22:	4622      	mov	r2, r4
 8017f24:	4641      	mov	r1, r8
 8017f26:	4638      	mov	r0, r7
 8017f28:	47c8      	blx	r9
 8017f2a:	3001      	adds	r0, #1
 8017f2c:	d0e6      	beq.n	8017efc <_printf_common+0xa4>
 8017f2e:	3601      	adds	r6, #1
 8017f30:	e7d9      	b.n	8017ee6 <_printf_common+0x8e>
	...

08017f34 <_printf_i>:
 8017f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f38:	7e0f      	ldrb	r7, [r1, #24]
 8017f3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017f3c:	2f78      	cmp	r7, #120	@ 0x78
 8017f3e:	4691      	mov	r9, r2
 8017f40:	4680      	mov	r8, r0
 8017f42:	460c      	mov	r4, r1
 8017f44:	469a      	mov	sl, r3
 8017f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017f4a:	d807      	bhi.n	8017f5c <_printf_i+0x28>
 8017f4c:	2f62      	cmp	r7, #98	@ 0x62
 8017f4e:	d80a      	bhi.n	8017f66 <_printf_i+0x32>
 8017f50:	2f00      	cmp	r7, #0
 8017f52:	f000 80d2 	beq.w	80180fa <_printf_i+0x1c6>
 8017f56:	2f58      	cmp	r7, #88	@ 0x58
 8017f58:	f000 80b9 	beq.w	80180ce <_printf_i+0x19a>
 8017f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017f64:	e03a      	b.n	8017fdc <_printf_i+0xa8>
 8017f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017f6a:	2b15      	cmp	r3, #21
 8017f6c:	d8f6      	bhi.n	8017f5c <_printf_i+0x28>
 8017f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8017f74 <_printf_i+0x40>)
 8017f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f74:	08017fcd 	.word	0x08017fcd
 8017f78:	08017fe1 	.word	0x08017fe1
 8017f7c:	08017f5d 	.word	0x08017f5d
 8017f80:	08017f5d 	.word	0x08017f5d
 8017f84:	08017f5d 	.word	0x08017f5d
 8017f88:	08017f5d 	.word	0x08017f5d
 8017f8c:	08017fe1 	.word	0x08017fe1
 8017f90:	08017f5d 	.word	0x08017f5d
 8017f94:	08017f5d 	.word	0x08017f5d
 8017f98:	08017f5d 	.word	0x08017f5d
 8017f9c:	08017f5d 	.word	0x08017f5d
 8017fa0:	080180e1 	.word	0x080180e1
 8017fa4:	0801800b 	.word	0x0801800b
 8017fa8:	0801809b 	.word	0x0801809b
 8017fac:	08017f5d 	.word	0x08017f5d
 8017fb0:	08017f5d 	.word	0x08017f5d
 8017fb4:	08018103 	.word	0x08018103
 8017fb8:	08017f5d 	.word	0x08017f5d
 8017fbc:	0801800b 	.word	0x0801800b
 8017fc0:	08017f5d 	.word	0x08017f5d
 8017fc4:	08017f5d 	.word	0x08017f5d
 8017fc8:	080180a3 	.word	0x080180a3
 8017fcc:	6833      	ldr	r3, [r6, #0]
 8017fce:	1d1a      	adds	r2, r3, #4
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	6032      	str	r2, [r6, #0]
 8017fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017fdc:	2301      	movs	r3, #1
 8017fde:	e09d      	b.n	801811c <_printf_i+0x1e8>
 8017fe0:	6833      	ldr	r3, [r6, #0]
 8017fe2:	6820      	ldr	r0, [r4, #0]
 8017fe4:	1d19      	adds	r1, r3, #4
 8017fe6:	6031      	str	r1, [r6, #0]
 8017fe8:	0606      	lsls	r6, r0, #24
 8017fea:	d501      	bpl.n	8017ff0 <_printf_i+0xbc>
 8017fec:	681d      	ldr	r5, [r3, #0]
 8017fee:	e003      	b.n	8017ff8 <_printf_i+0xc4>
 8017ff0:	0645      	lsls	r5, r0, #25
 8017ff2:	d5fb      	bpl.n	8017fec <_printf_i+0xb8>
 8017ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017ff8:	2d00      	cmp	r5, #0
 8017ffa:	da03      	bge.n	8018004 <_printf_i+0xd0>
 8017ffc:	232d      	movs	r3, #45	@ 0x2d
 8017ffe:	426d      	negs	r5, r5
 8018000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018004:	4859      	ldr	r0, [pc, #356]	@ (801816c <_printf_i+0x238>)
 8018006:	230a      	movs	r3, #10
 8018008:	e011      	b.n	801802e <_printf_i+0xfa>
 801800a:	6821      	ldr	r1, [r4, #0]
 801800c:	6833      	ldr	r3, [r6, #0]
 801800e:	0608      	lsls	r0, r1, #24
 8018010:	f853 5b04 	ldr.w	r5, [r3], #4
 8018014:	d402      	bmi.n	801801c <_printf_i+0xe8>
 8018016:	0649      	lsls	r1, r1, #25
 8018018:	bf48      	it	mi
 801801a:	b2ad      	uxthmi	r5, r5
 801801c:	2f6f      	cmp	r7, #111	@ 0x6f
 801801e:	4853      	ldr	r0, [pc, #332]	@ (801816c <_printf_i+0x238>)
 8018020:	6033      	str	r3, [r6, #0]
 8018022:	bf14      	ite	ne
 8018024:	230a      	movne	r3, #10
 8018026:	2308      	moveq	r3, #8
 8018028:	2100      	movs	r1, #0
 801802a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801802e:	6866      	ldr	r6, [r4, #4]
 8018030:	60a6      	str	r6, [r4, #8]
 8018032:	2e00      	cmp	r6, #0
 8018034:	bfa2      	ittt	ge
 8018036:	6821      	ldrge	r1, [r4, #0]
 8018038:	f021 0104 	bicge.w	r1, r1, #4
 801803c:	6021      	strge	r1, [r4, #0]
 801803e:	b90d      	cbnz	r5, 8018044 <_printf_i+0x110>
 8018040:	2e00      	cmp	r6, #0
 8018042:	d04b      	beq.n	80180dc <_printf_i+0x1a8>
 8018044:	4616      	mov	r6, r2
 8018046:	fbb5 f1f3 	udiv	r1, r5, r3
 801804a:	fb03 5711 	mls	r7, r3, r1, r5
 801804e:	5dc7      	ldrb	r7, [r0, r7]
 8018050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018054:	462f      	mov	r7, r5
 8018056:	42bb      	cmp	r3, r7
 8018058:	460d      	mov	r5, r1
 801805a:	d9f4      	bls.n	8018046 <_printf_i+0x112>
 801805c:	2b08      	cmp	r3, #8
 801805e:	d10b      	bne.n	8018078 <_printf_i+0x144>
 8018060:	6823      	ldr	r3, [r4, #0]
 8018062:	07df      	lsls	r7, r3, #31
 8018064:	d508      	bpl.n	8018078 <_printf_i+0x144>
 8018066:	6923      	ldr	r3, [r4, #16]
 8018068:	6861      	ldr	r1, [r4, #4]
 801806a:	4299      	cmp	r1, r3
 801806c:	bfde      	ittt	le
 801806e:	2330      	movle	r3, #48	@ 0x30
 8018070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018074:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018078:	1b92      	subs	r2, r2, r6
 801807a:	6122      	str	r2, [r4, #16]
 801807c:	f8cd a000 	str.w	sl, [sp]
 8018080:	464b      	mov	r3, r9
 8018082:	aa03      	add	r2, sp, #12
 8018084:	4621      	mov	r1, r4
 8018086:	4640      	mov	r0, r8
 8018088:	f7ff fee6 	bl	8017e58 <_printf_common>
 801808c:	3001      	adds	r0, #1
 801808e:	d14a      	bne.n	8018126 <_printf_i+0x1f2>
 8018090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018094:	b004      	add	sp, #16
 8018096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801809a:	6823      	ldr	r3, [r4, #0]
 801809c:	f043 0320 	orr.w	r3, r3, #32
 80180a0:	6023      	str	r3, [r4, #0]
 80180a2:	4833      	ldr	r0, [pc, #204]	@ (8018170 <_printf_i+0x23c>)
 80180a4:	2778      	movs	r7, #120	@ 0x78
 80180a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80180aa:	6823      	ldr	r3, [r4, #0]
 80180ac:	6831      	ldr	r1, [r6, #0]
 80180ae:	061f      	lsls	r7, r3, #24
 80180b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80180b4:	d402      	bmi.n	80180bc <_printf_i+0x188>
 80180b6:	065f      	lsls	r7, r3, #25
 80180b8:	bf48      	it	mi
 80180ba:	b2ad      	uxthmi	r5, r5
 80180bc:	6031      	str	r1, [r6, #0]
 80180be:	07d9      	lsls	r1, r3, #31
 80180c0:	bf44      	itt	mi
 80180c2:	f043 0320 	orrmi.w	r3, r3, #32
 80180c6:	6023      	strmi	r3, [r4, #0]
 80180c8:	b11d      	cbz	r5, 80180d2 <_printf_i+0x19e>
 80180ca:	2310      	movs	r3, #16
 80180cc:	e7ac      	b.n	8018028 <_printf_i+0xf4>
 80180ce:	4827      	ldr	r0, [pc, #156]	@ (801816c <_printf_i+0x238>)
 80180d0:	e7e9      	b.n	80180a6 <_printf_i+0x172>
 80180d2:	6823      	ldr	r3, [r4, #0]
 80180d4:	f023 0320 	bic.w	r3, r3, #32
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	e7f6      	b.n	80180ca <_printf_i+0x196>
 80180dc:	4616      	mov	r6, r2
 80180de:	e7bd      	b.n	801805c <_printf_i+0x128>
 80180e0:	6833      	ldr	r3, [r6, #0]
 80180e2:	6825      	ldr	r5, [r4, #0]
 80180e4:	6961      	ldr	r1, [r4, #20]
 80180e6:	1d18      	adds	r0, r3, #4
 80180e8:	6030      	str	r0, [r6, #0]
 80180ea:	062e      	lsls	r6, r5, #24
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	d501      	bpl.n	80180f4 <_printf_i+0x1c0>
 80180f0:	6019      	str	r1, [r3, #0]
 80180f2:	e002      	b.n	80180fa <_printf_i+0x1c6>
 80180f4:	0668      	lsls	r0, r5, #25
 80180f6:	d5fb      	bpl.n	80180f0 <_printf_i+0x1bc>
 80180f8:	8019      	strh	r1, [r3, #0]
 80180fa:	2300      	movs	r3, #0
 80180fc:	6123      	str	r3, [r4, #16]
 80180fe:	4616      	mov	r6, r2
 8018100:	e7bc      	b.n	801807c <_printf_i+0x148>
 8018102:	6833      	ldr	r3, [r6, #0]
 8018104:	1d1a      	adds	r2, r3, #4
 8018106:	6032      	str	r2, [r6, #0]
 8018108:	681e      	ldr	r6, [r3, #0]
 801810a:	6862      	ldr	r2, [r4, #4]
 801810c:	2100      	movs	r1, #0
 801810e:	4630      	mov	r0, r6
 8018110:	f7e8 f896 	bl	8000240 <memchr>
 8018114:	b108      	cbz	r0, 801811a <_printf_i+0x1e6>
 8018116:	1b80      	subs	r0, r0, r6
 8018118:	6060      	str	r0, [r4, #4]
 801811a:	6863      	ldr	r3, [r4, #4]
 801811c:	6123      	str	r3, [r4, #16]
 801811e:	2300      	movs	r3, #0
 8018120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018124:	e7aa      	b.n	801807c <_printf_i+0x148>
 8018126:	6923      	ldr	r3, [r4, #16]
 8018128:	4632      	mov	r2, r6
 801812a:	4649      	mov	r1, r9
 801812c:	4640      	mov	r0, r8
 801812e:	47d0      	blx	sl
 8018130:	3001      	adds	r0, #1
 8018132:	d0ad      	beq.n	8018090 <_printf_i+0x15c>
 8018134:	6823      	ldr	r3, [r4, #0]
 8018136:	079b      	lsls	r3, r3, #30
 8018138:	d413      	bmi.n	8018162 <_printf_i+0x22e>
 801813a:	68e0      	ldr	r0, [r4, #12]
 801813c:	9b03      	ldr	r3, [sp, #12]
 801813e:	4298      	cmp	r0, r3
 8018140:	bfb8      	it	lt
 8018142:	4618      	movlt	r0, r3
 8018144:	e7a6      	b.n	8018094 <_printf_i+0x160>
 8018146:	2301      	movs	r3, #1
 8018148:	4632      	mov	r2, r6
 801814a:	4649      	mov	r1, r9
 801814c:	4640      	mov	r0, r8
 801814e:	47d0      	blx	sl
 8018150:	3001      	adds	r0, #1
 8018152:	d09d      	beq.n	8018090 <_printf_i+0x15c>
 8018154:	3501      	adds	r5, #1
 8018156:	68e3      	ldr	r3, [r4, #12]
 8018158:	9903      	ldr	r1, [sp, #12]
 801815a:	1a5b      	subs	r3, r3, r1
 801815c:	42ab      	cmp	r3, r5
 801815e:	dcf2      	bgt.n	8018146 <_printf_i+0x212>
 8018160:	e7eb      	b.n	801813a <_printf_i+0x206>
 8018162:	2500      	movs	r5, #0
 8018164:	f104 0619 	add.w	r6, r4, #25
 8018168:	e7f5      	b.n	8018156 <_printf_i+0x222>
 801816a:	bf00      	nop
 801816c:	08019461 	.word	0x08019461
 8018170:	08019472 	.word	0x08019472

08018174 <__sflush_r>:
 8018174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817c:	0716      	lsls	r6, r2, #28
 801817e:	4605      	mov	r5, r0
 8018180:	460c      	mov	r4, r1
 8018182:	d454      	bmi.n	801822e <__sflush_r+0xba>
 8018184:	684b      	ldr	r3, [r1, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	dc02      	bgt.n	8018190 <__sflush_r+0x1c>
 801818a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801818c:	2b00      	cmp	r3, #0
 801818e:	dd48      	ble.n	8018222 <__sflush_r+0xae>
 8018190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018192:	2e00      	cmp	r6, #0
 8018194:	d045      	beq.n	8018222 <__sflush_r+0xae>
 8018196:	2300      	movs	r3, #0
 8018198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801819c:	682f      	ldr	r7, [r5, #0]
 801819e:	6a21      	ldr	r1, [r4, #32]
 80181a0:	602b      	str	r3, [r5, #0]
 80181a2:	d030      	beq.n	8018206 <__sflush_r+0x92>
 80181a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80181a6:	89a3      	ldrh	r3, [r4, #12]
 80181a8:	0759      	lsls	r1, r3, #29
 80181aa:	d505      	bpl.n	80181b8 <__sflush_r+0x44>
 80181ac:	6863      	ldr	r3, [r4, #4]
 80181ae:	1ad2      	subs	r2, r2, r3
 80181b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80181b2:	b10b      	cbz	r3, 80181b8 <__sflush_r+0x44>
 80181b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80181b6:	1ad2      	subs	r2, r2, r3
 80181b8:	2300      	movs	r3, #0
 80181ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181bc:	6a21      	ldr	r1, [r4, #32]
 80181be:	4628      	mov	r0, r5
 80181c0:	47b0      	blx	r6
 80181c2:	1c43      	adds	r3, r0, #1
 80181c4:	89a3      	ldrh	r3, [r4, #12]
 80181c6:	d106      	bne.n	80181d6 <__sflush_r+0x62>
 80181c8:	6829      	ldr	r1, [r5, #0]
 80181ca:	291d      	cmp	r1, #29
 80181cc:	d82b      	bhi.n	8018226 <__sflush_r+0xb2>
 80181ce:	4a2a      	ldr	r2, [pc, #168]	@ (8018278 <__sflush_r+0x104>)
 80181d0:	410a      	asrs	r2, r1
 80181d2:	07d6      	lsls	r6, r2, #31
 80181d4:	d427      	bmi.n	8018226 <__sflush_r+0xb2>
 80181d6:	2200      	movs	r2, #0
 80181d8:	6062      	str	r2, [r4, #4]
 80181da:	04d9      	lsls	r1, r3, #19
 80181dc:	6922      	ldr	r2, [r4, #16]
 80181de:	6022      	str	r2, [r4, #0]
 80181e0:	d504      	bpl.n	80181ec <__sflush_r+0x78>
 80181e2:	1c42      	adds	r2, r0, #1
 80181e4:	d101      	bne.n	80181ea <__sflush_r+0x76>
 80181e6:	682b      	ldr	r3, [r5, #0]
 80181e8:	b903      	cbnz	r3, 80181ec <__sflush_r+0x78>
 80181ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80181ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80181ee:	602f      	str	r7, [r5, #0]
 80181f0:	b1b9      	cbz	r1, 8018222 <__sflush_r+0xae>
 80181f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181f6:	4299      	cmp	r1, r3
 80181f8:	d002      	beq.n	8018200 <__sflush_r+0x8c>
 80181fa:	4628      	mov	r0, r5
 80181fc:	f7ff fb40 	bl	8017880 <_free_r>
 8018200:	2300      	movs	r3, #0
 8018202:	6363      	str	r3, [r4, #52]	@ 0x34
 8018204:	e00d      	b.n	8018222 <__sflush_r+0xae>
 8018206:	2301      	movs	r3, #1
 8018208:	4628      	mov	r0, r5
 801820a:	47b0      	blx	r6
 801820c:	4602      	mov	r2, r0
 801820e:	1c50      	adds	r0, r2, #1
 8018210:	d1c9      	bne.n	80181a6 <__sflush_r+0x32>
 8018212:	682b      	ldr	r3, [r5, #0]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d0c6      	beq.n	80181a6 <__sflush_r+0x32>
 8018218:	2b1d      	cmp	r3, #29
 801821a:	d001      	beq.n	8018220 <__sflush_r+0xac>
 801821c:	2b16      	cmp	r3, #22
 801821e:	d11e      	bne.n	801825e <__sflush_r+0xea>
 8018220:	602f      	str	r7, [r5, #0]
 8018222:	2000      	movs	r0, #0
 8018224:	e022      	b.n	801826c <__sflush_r+0xf8>
 8018226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801822a:	b21b      	sxth	r3, r3
 801822c:	e01b      	b.n	8018266 <__sflush_r+0xf2>
 801822e:	690f      	ldr	r7, [r1, #16]
 8018230:	2f00      	cmp	r7, #0
 8018232:	d0f6      	beq.n	8018222 <__sflush_r+0xae>
 8018234:	0793      	lsls	r3, r2, #30
 8018236:	680e      	ldr	r6, [r1, #0]
 8018238:	bf08      	it	eq
 801823a:	694b      	ldreq	r3, [r1, #20]
 801823c:	600f      	str	r7, [r1, #0]
 801823e:	bf18      	it	ne
 8018240:	2300      	movne	r3, #0
 8018242:	eba6 0807 	sub.w	r8, r6, r7
 8018246:	608b      	str	r3, [r1, #8]
 8018248:	f1b8 0f00 	cmp.w	r8, #0
 801824c:	dde9      	ble.n	8018222 <__sflush_r+0xae>
 801824e:	6a21      	ldr	r1, [r4, #32]
 8018250:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018252:	4643      	mov	r3, r8
 8018254:	463a      	mov	r2, r7
 8018256:	4628      	mov	r0, r5
 8018258:	47b0      	blx	r6
 801825a:	2800      	cmp	r0, #0
 801825c:	dc08      	bgt.n	8018270 <__sflush_r+0xfc>
 801825e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018266:	81a3      	strh	r3, [r4, #12]
 8018268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018270:	4407      	add	r7, r0
 8018272:	eba8 0800 	sub.w	r8, r8, r0
 8018276:	e7e7      	b.n	8018248 <__sflush_r+0xd4>
 8018278:	dfbffffe 	.word	0xdfbffffe

0801827c <_fflush_r>:
 801827c:	b538      	push	{r3, r4, r5, lr}
 801827e:	690b      	ldr	r3, [r1, #16]
 8018280:	4605      	mov	r5, r0
 8018282:	460c      	mov	r4, r1
 8018284:	b913      	cbnz	r3, 801828c <_fflush_r+0x10>
 8018286:	2500      	movs	r5, #0
 8018288:	4628      	mov	r0, r5
 801828a:	bd38      	pop	{r3, r4, r5, pc}
 801828c:	b118      	cbz	r0, 8018296 <_fflush_r+0x1a>
 801828e:	6a03      	ldr	r3, [r0, #32]
 8018290:	b90b      	cbnz	r3, 8018296 <_fflush_r+0x1a>
 8018292:	f7ff f8d1 	bl	8017438 <__sinit>
 8018296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d0f3      	beq.n	8018286 <_fflush_r+0xa>
 801829e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80182a0:	07d0      	lsls	r0, r2, #31
 80182a2:	d404      	bmi.n	80182ae <_fflush_r+0x32>
 80182a4:	0599      	lsls	r1, r3, #22
 80182a6:	d402      	bmi.n	80182ae <_fflush_r+0x32>
 80182a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182aa:	f7ff faa6 	bl	80177fa <__retarget_lock_acquire_recursive>
 80182ae:	4628      	mov	r0, r5
 80182b0:	4621      	mov	r1, r4
 80182b2:	f7ff ff5f 	bl	8018174 <__sflush_r>
 80182b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182b8:	07da      	lsls	r2, r3, #31
 80182ba:	4605      	mov	r5, r0
 80182bc:	d4e4      	bmi.n	8018288 <_fflush_r+0xc>
 80182be:	89a3      	ldrh	r3, [r4, #12]
 80182c0:	059b      	lsls	r3, r3, #22
 80182c2:	d4e1      	bmi.n	8018288 <_fflush_r+0xc>
 80182c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182c6:	f7ff fa99 	bl	80177fc <__retarget_lock_release_recursive>
 80182ca:	e7dd      	b.n	8018288 <_fflush_r+0xc>

080182cc <fiprintf>:
 80182cc:	b40e      	push	{r1, r2, r3}
 80182ce:	b503      	push	{r0, r1, lr}
 80182d0:	4601      	mov	r1, r0
 80182d2:	ab03      	add	r3, sp, #12
 80182d4:	4805      	ldr	r0, [pc, #20]	@ (80182ec <fiprintf+0x20>)
 80182d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80182da:	6800      	ldr	r0, [r0, #0]
 80182dc:	9301      	str	r3, [sp, #4]
 80182de:	f7ff fca3 	bl	8017c28 <_vfiprintf_r>
 80182e2:	b002      	add	sp, #8
 80182e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80182e8:	b003      	add	sp, #12
 80182ea:	4770      	bx	lr
 80182ec:	20000270 	.word	0x20000270

080182f0 <__swbuf_r>:
 80182f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182f2:	460e      	mov	r6, r1
 80182f4:	4614      	mov	r4, r2
 80182f6:	4605      	mov	r5, r0
 80182f8:	b118      	cbz	r0, 8018302 <__swbuf_r+0x12>
 80182fa:	6a03      	ldr	r3, [r0, #32]
 80182fc:	b90b      	cbnz	r3, 8018302 <__swbuf_r+0x12>
 80182fe:	f7ff f89b 	bl	8017438 <__sinit>
 8018302:	69a3      	ldr	r3, [r4, #24]
 8018304:	60a3      	str	r3, [r4, #8]
 8018306:	89a3      	ldrh	r3, [r4, #12]
 8018308:	071a      	lsls	r2, r3, #28
 801830a:	d501      	bpl.n	8018310 <__swbuf_r+0x20>
 801830c:	6923      	ldr	r3, [r4, #16]
 801830e:	b943      	cbnz	r3, 8018322 <__swbuf_r+0x32>
 8018310:	4621      	mov	r1, r4
 8018312:	4628      	mov	r0, r5
 8018314:	f000 f82a 	bl	801836c <__swsetup_r>
 8018318:	b118      	cbz	r0, 8018322 <__swbuf_r+0x32>
 801831a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801831e:	4638      	mov	r0, r7
 8018320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018322:	6823      	ldr	r3, [r4, #0]
 8018324:	6922      	ldr	r2, [r4, #16]
 8018326:	1a98      	subs	r0, r3, r2
 8018328:	6963      	ldr	r3, [r4, #20]
 801832a:	b2f6      	uxtb	r6, r6
 801832c:	4283      	cmp	r3, r0
 801832e:	4637      	mov	r7, r6
 8018330:	dc05      	bgt.n	801833e <__swbuf_r+0x4e>
 8018332:	4621      	mov	r1, r4
 8018334:	4628      	mov	r0, r5
 8018336:	f7ff ffa1 	bl	801827c <_fflush_r>
 801833a:	2800      	cmp	r0, #0
 801833c:	d1ed      	bne.n	801831a <__swbuf_r+0x2a>
 801833e:	68a3      	ldr	r3, [r4, #8]
 8018340:	3b01      	subs	r3, #1
 8018342:	60a3      	str	r3, [r4, #8]
 8018344:	6823      	ldr	r3, [r4, #0]
 8018346:	1c5a      	adds	r2, r3, #1
 8018348:	6022      	str	r2, [r4, #0]
 801834a:	701e      	strb	r6, [r3, #0]
 801834c:	6962      	ldr	r2, [r4, #20]
 801834e:	1c43      	adds	r3, r0, #1
 8018350:	429a      	cmp	r2, r3
 8018352:	d004      	beq.n	801835e <__swbuf_r+0x6e>
 8018354:	89a3      	ldrh	r3, [r4, #12]
 8018356:	07db      	lsls	r3, r3, #31
 8018358:	d5e1      	bpl.n	801831e <__swbuf_r+0x2e>
 801835a:	2e0a      	cmp	r6, #10
 801835c:	d1df      	bne.n	801831e <__swbuf_r+0x2e>
 801835e:	4621      	mov	r1, r4
 8018360:	4628      	mov	r0, r5
 8018362:	f7ff ff8b 	bl	801827c <_fflush_r>
 8018366:	2800      	cmp	r0, #0
 8018368:	d0d9      	beq.n	801831e <__swbuf_r+0x2e>
 801836a:	e7d6      	b.n	801831a <__swbuf_r+0x2a>

0801836c <__swsetup_r>:
 801836c:	b538      	push	{r3, r4, r5, lr}
 801836e:	4b29      	ldr	r3, [pc, #164]	@ (8018414 <__swsetup_r+0xa8>)
 8018370:	4605      	mov	r5, r0
 8018372:	6818      	ldr	r0, [r3, #0]
 8018374:	460c      	mov	r4, r1
 8018376:	b118      	cbz	r0, 8018380 <__swsetup_r+0x14>
 8018378:	6a03      	ldr	r3, [r0, #32]
 801837a:	b90b      	cbnz	r3, 8018380 <__swsetup_r+0x14>
 801837c:	f7ff f85c 	bl	8017438 <__sinit>
 8018380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018384:	0719      	lsls	r1, r3, #28
 8018386:	d422      	bmi.n	80183ce <__swsetup_r+0x62>
 8018388:	06da      	lsls	r2, r3, #27
 801838a:	d407      	bmi.n	801839c <__swsetup_r+0x30>
 801838c:	2209      	movs	r2, #9
 801838e:	602a      	str	r2, [r5, #0]
 8018390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018394:	81a3      	strh	r3, [r4, #12]
 8018396:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801839a:	e033      	b.n	8018404 <__swsetup_r+0x98>
 801839c:	0758      	lsls	r0, r3, #29
 801839e:	d512      	bpl.n	80183c6 <__swsetup_r+0x5a>
 80183a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80183a2:	b141      	cbz	r1, 80183b6 <__swsetup_r+0x4a>
 80183a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80183a8:	4299      	cmp	r1, r3
 80183aa:	d002      	beq.n	80183b2 <__swsetup_r+0x46>
 80183ac:	4628      	mov	r0, r5
 80183ae:	f7ff fa67 	bl	8017880 <_free_r>
 80183b2:	2300      	movs	r3, #0
 80183b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80183b6:	89a3      	ldrh	r3, [r4, #12]
 80183b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80183bc:	81a3      	strh	r3, [r4, #12]
 80183be:	2300      	movs	r3, #0
 80183c0:	6063      	str	r3, [r4, #4]
 80183c2:	6923      	ldr	r3, [r4, #16]
 80183c4:	6023      	str	r3, [r4, #0]
 80183c6:	89a3      	ldrh	r3, [r4, #12]
 80183c8:	f043 0308 	orr.w	r3, r3, #8
 80183cc:	81a3      	strh	r3, [r4, #12]
 80183ce:	6923      	ldr	r3, [r4, #16]
 80183d0:	b94b      	cbnz	r3, 80183e6 <__swsetup_r+0x7a>
 80183d2:	89a3      	ldrh	r3, [r4, #12]
 80183d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80183d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80183dc:	d003      	beq.n	80183e6 <__swsetup_r+0x7a>
 80183de:	4621      	mov	r1, r4
 80183e0:	4628      	mov	r0, r5
 80183e2:	f000 f846 	bl	8018472 <__smakebuf_r>
 80183e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ea:	f013 0201 	ands.w	r2, r3, #1
 80183ee:	d00a      	beq.n	8018406 <__swsetup_r+0x9a>
 80183f0:	2200      	movs	r2, #0
 80183f2:	60a2      	str	r2, [r4, #8]
 80183f4:	6962      	ldr	r2, [r4, #20]
 80183f6:	4252      	negs	r2, r2
 80183f8:	61a2      	str	r2, [r4, #24]
 80183fa:	6922      	ldr	r2, [r4, #16]
 80183fc:	b942      	cbnz	r2, 8018410 <__swsetup_r+0xa4>
 80183fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018402:	d1c5      	bne.n	8018390 <__swsetup_r+0x24>
 8018404:	bd38      	pop	{r3, r4, r5, pc}
 8018406:	0799      	lsls	r1, r3, #30
 8018408:	bf58      	it	pl
 801840a:	6962      	ldrpl	r2, [r4, #20]
 801840c:	60a2      	str	r2, [r4, #8]
 801840e:	e7f4      	b.n	80183fa <__swsetup_r+0x8e>
 8018410:	2000      	movs	r0, #0
 8018412:	e7f7      	b.n	8018404 <__swsetup_r+0x98>
 8018414:	20000270 	.word	0x20000270

08018418 <abort>:
 8018418:	b508      	push	{r3, lr}
 801841a:	2006      	movs	r0, #6
 801841c:	f000 f88e 	bl	801853c <raise>
 8018420:	2001      	movs	r0, #1
 8018422:	f7ea fa31 	bl	8002888 <_exit>

08018426 <__swhatbuf_r>:
 8018426:	b570      	push	{r4, r5, r6, lr}
 8018428:	460c      	mov	r4, r1
 801842a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801842e:	2900      	cmp	r1, #0
 8018430:	b096      	sub	sp, #88	@ 0x58
 8018432:	4615      	mov	r5, r2
 8018434:	461e      	mov	r6, r3
 8018436:	da0d      	bge.n	8018454 <__swhatbuf_r+0x2e>
 8018438:	89a3      	ldrh	r3, [r4, #12]
 801843a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801843e:	f04f 0100 	mov.w	r1, #0
 8018442:	bf14      	ite	ne
 8018444:	2340      	movne	r3, #64	@ 0x40
 8018446:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801844a:	2000      	movs	r0, #0
 801844c:	6031      	str	r1, [r6, #0]
 801844e:	602b      	str	r3, [r5, #0]
 8018450:	b016      	add	sp, #88	@ 0x58
 8018452:	bd70      	pop	{r4, r5, r6, pc}
 8018454:	466a      	mov	r2, sp
 8018456:	f000 f879 	bl	801854c <_fstat_r>
 801845a:	2800      	cmp	r0, #0
 801845c:	dbec      	blt.n	8018438 <__swhatbuf_r+0x12>
 801845e:	9901      	ldr	r1, [sp, #4]
 8018460:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018464:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018468:	4259      	negs	r1, r3
 801846a:	4159      	adcs	r1, r3
 801846c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018470:	e7eb      	b.n	801844a <__swhatbuf_r+0x24>

08018472 <__smakebuf_r>:
 8018472:	898b      	ldrh	r3, [r1, #12]
 8018474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018476:	079d      	lsls	r5, r3, #30
 8018478:	4606      	mov	r6, r0
 801847a:	460c      	mov	r4, r1
 801847c:	d507      	bpl.n	801848e <__smakebuf_r+0x1c>
 801847e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018482:	6023      	str	r3, [r4, #0]
 8018484:	6123      	str	r3, [r4, #16]
 8018486:	2301      	movs	r3, #1
 8018488:	6163      	str	r3, [r4, #20]
 801848a:	b003      	add	sp, #12
 801848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801848e:	ab01      	add	r3, sp, #4
 8018490:	466a      	mov	r2, sp
 8018492:	f7ff ffc8 	bl	8018426 <__swhatbuf_r>
 8018496:	9f00      	ldr	r7, [sp, #0]
 8018498:	4605      	mov	r5, r0
 801849a:	4639      	mov	r1, r7
 801849c:	4630      	mov	r0, r6
 801849e:	f7fe fd99 	bl	8016fd4 <_malloc_r>
 80184a2:	b948      	cbnz	r0, 80184b8 <__smakebuf_r+0x46>
 80184a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184a8:	059a      	lsls	r2, r3, #22
 80184aa:	d4ee      	bmi.n	801848a <__smakebuf_r+0x18>
 80184ac:	f023 0303 	bic.w	r3, r3, #3
 80184b0:	f043 0302 	orr.w	r3, r3, #2
 80184b4:	81a3      	strh	r3, [r4, #12]
 80184b6:	e7e2      	b.n	801847e <__smakebuf_r+0xc>
 80184b8:	89a3      	ldrh	r3, [r4, #12]
 80184ba:	6020      	str	r0, [r4, #0]
 80184bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184c0:	81a3      	strh	r3, [r4, #12]
 80184c2:	9b01      	ldr	r3, [sp, #4]
 80184c4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184c8:	b15b      	cbz	r3, 80184e2 <__smakebuf_r+0x70>
 80184ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184ce:	4630      	mov	r0, r6
 80184d0:	f000 f84e 	bl	8018570 <_isatty_r>
 80184d4:	b128      	cbz	r0, 80184e2 <__smakebuf_r+0x70>
 80184d6:	89a3      	ldrh	r3, [r4, #12]
 80184d8:	f023 0303 	bic.w	r3, r3, #3
 80184dc:	f043 0301 	orr.w	r3, r3, #1
 80184e0:	81a3      	strh	r3, [r4, #12]
 80184e2:	89a3      	ldrh	r3, [r4, #12]
 80184e4:	431d      	orrs	r5, r3
 80184e6:	81a5      	strh	r5, [r4, #12]
 80184e8:	e7cf      	b.n	801848a <__smakebuf_r+0x18>

080184ea <_raise_r>:
 80184ea:	291f      	cmp	r1, #31
 80184ec:	b538      	push	{r3, r4, r5, lr}
 80184ee:	4605      	mov	r5, r0
 80184f0:	460c      	mov	r4, r1
 80184f2:	d904      	bls.n	80184fe <_raise_r+0x14>
 80184f4:	2316      	movs	r3, #22
 80184f6:	6003      	str	r3, [r0, #0]
 80184f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184fc:	bd38      	pop	{r3, r4, r5, pc}
 80184fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018500:	b112      	cbz	r2, 8018508 <_raise_r+0x1e>
 8018502:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018506:	b94b      	cbnz	r3, 801851c <_raise_r+0x32>
 8018508:	4628      	mov	r0, r5
 801850a:	f000 f853 	bl	80185b4 <_getpid_r>
 801850e:	4622      	mov	r2, r4
 8018510:	4601      	mov	r1, r0
 8018512:	4628      	mov	r0, r5
 8018514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018518:	f000 b83a 	b.w	8018590 <_kill_r>
 801851c:	2b01      	cmp	r3, #1
 801851e:	d00a      	beq.n	8018536 <_raise_r+0x4c>
 8018520:	1c59      	adds	r1, r3, #1
 8018522:	d103      	bne.n	801852c <_raise_r+0x42>
 8018524:	2316      	movs	r3, #22
 8018526:	6003      	str	r3, [r0, #0]
 8018528:	2001      	movs	r0, #1
 801852a:	e7e7      	b.n	80184fc <_raise_r+0x12>
 801852c:	2100      	movs	r1, #0
 801852e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018532:	4620      	mov	r0, r4
 8018534:	4798      	blx	r3
 8018536:	2000      	movs	r0, #0
 8018538:	e7e0      	b.n	80184fc <_raise_r+0x12>
	...

0801853c <raise>:
 801853c:	4b02      	ldr	r3, [pc, #8]	@ (8018548 <raise+0xc>)
 801853e:	4601      	mov	r1, r0
 8018540:	6818      	ldr	r0, [r3, #0]
 8018542:	f7ff bfd2 	b.w	80184ea <_raise_r>
 8018546:	bf00      	nop
 8018548:	20000270 	.word	0x20000270

0801854c <_fstat_r>:
 801854c:	b538      	push	{r3, r4, r5, lr}
 801854e:	4d07      	ldr	r5, [pc, #28]	@ (801856c <_fstat_r+0x20>)
 8018550:	2300      	movs	r3, #0
 8018552:	4604      	mov	r4, r0
 8018554:	4608      	mov	r0, r1
 8018556:	4611      	mov	r1, r2
 8018558:	602b      	str	r3, [r5, #0]
 801855a:	f7ea f9e5 	bl	8002928 <_fstat>
 801855e:	1c43      	adds	r3, r0, #1
 8018560:	d102      	bne.n	8018568 <_fstat_r+0x1c>
 8018562:	682b      	ldr	r3, [r5, #0]
 8018564:	b103      	cbz	r3, 8018568 <_fstat_r+0x1c>
 8018566:	6023      	str	r3, [r4, #0]
 8018568:	bd38      	pop	{r3, r4, r5, pc}
 801856a:	bf00      	nop
 801856c:	2000dffc 	.word	0x2000dffc

08018570 <_isatty_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	4d06      	ldr	r5, [pc, #24]	@ (801858c <_isatty_r+0x1c>)
 8018574:	2300      	movs	r3, #0
 8018576:	4604      	mov	r4, r0
 8018578:	4608      	mov	r0, r1
 801857a:	602b      	str	r3, [r5, #0]
 801857c:	f7ea f9e4 	bl	8002948 <_isatty>
 8018580:	1c43      	adds	r3, r0, #1
 8018582:	d102      	bne.n	801858a <_isatty_r+0x1a>
 8018584:	682b      	ldr	r3, [r5, #0]
 8018586:	b103      	cbz	r3, 801858a <_isatty_r+0x1a>
 8018588:	6023      	str	r3, [r4, #0]
 801858a:	bd38      	pop	{r3, r4, r5, pc}
 801858c:	2000dffc 	.word	0x2000dffc

08018590 <_kill_r>:
 8018590:	b538      	push	{r3, r4, r5, lr}
 8018592:	4d07      	ldr	r5, [pc, #28]	@ (80185b0 <_kill_r+0x20>)
 8018594:	2300      	movs	r3, #0
 8018596:	4604      	mov	r4, r0
 8018598:	4608      	mov	r0, r1
 801859a:	4611      	mov	r1, r2
 801859c:	602b      	str	r3, [r5, #0]
 801859e:	f7ea f963 	bl	8002868 <_kill>
 80185a2:	1c43      	adds	r3, r0, #1
 80185a4:	d102      	bne.n	80185ac <_kill_r+0x1c>
 80185a6:	682b      	ldr	r3, [r5, #0]
 80185a8:	b103      	cbz	r3, 80185ac <_kill_r+0x1c>
 80185aa:	6023      	str	r3, [r4, #0]
 80185ac:	bd38      	pop	{r3, r4, r5, pc}
 80185ae:	bf00      	nop
 80185b0:	2000dffc 	.word	0x2000dffc

080185b4 <_getpid_r>:
 80185b4:	f7ea b950 	b.w	8002858 <_getpid>

080185b8 <_init>:
 80185b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185ba:	bf00      	nop
 80185bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185be:	bc08      	pop	{r3}
 80185c0:	469e      	mov	lr, r3
 80185c2:	4770      	bx	lr

080185c4 <_fini>:
 80185c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c6:	bf00      	nop
 80185c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185ca:	bc08      	pop	{r3}
 80185cc:	469e      	mov	lr, r3
 80185ce:	4770      	bx	lr
